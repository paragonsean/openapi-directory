/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NestedLocation;
import org.openapitools.client.model.NestedRackRole;
import org.openapitools.client.model.NestedSite;
import org.openapitools.client.model.NestedTag;
import org.openapitools.client.model.NestedTenant;
import org.openapitools.client.model.OuterUnit;
import org.openapitools.client.model.Status11;
import org.openapitools.client.model.Type8;
import org.openapitools.client.model.WeightUnit;
import org.openapitools.client.model.Width;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rack {
  public static final String SERIALIZED_NAME_ASSET_TAG = "asset_tag";
  @SerializedName(SERIALIZED_NAME_ASSET_TAG)
  private String assetTag;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESC_UNITS = "desc_units";
  @SerializedName(SERIALIZED_NAME_DESC_UNITS)
  private Boolean descUnits;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_COUNT = "device_count";
  @SerializedName(SERIALIZED_NAME_DEVICE_COUNT)
  private Integer deviceCount;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_FACILITY_ID = "facility_id";
  @SerializedName(SERIALIZED_NAME_FACILITY_ID)
  private String facilityId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private NestedLocation location;

  public static final String SERIALIZED_NAME_MAX_WEIGHT = "max_weight";
  @SerializedName(SERIALIZED_NAME_MAX_WEIGHT)
  private Integer maxWeight;

  public static final String SERIALIZED_NAME_MOUNTING_DEPTH = "mounting_depth";
  @SerializedName(SERIALIZED_NAME_MOUNTING_DEPTH)
  private Integer mountingDepth;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTER_DEPTH = "outer_depth";
  @SerializedName(SERIALIZED_NAME_OUTER_DEPTH)
  private Integer outerDepth;

  public static final String SERIALIZED_NAME_OUTER_UNIT = "outer_unit";
  @SerializedName(SERIALIZED_NAME_OUTER_UNIT)
  private OuterUnit outerUnit;

  public static final String SERIALIZED_NAME_OUTER_WIDTH = "outer_width";
  @SerializedName(SERIALIZED_NAME_OUTER_WIDTH)
  private Integer outerWidth;

  public static final String SERIALIZED_NAME_POWERFEED_COUNT = "powerfeed_count";
  @SerializedName(SERIALIZED_NAME_POWERFEED_COUNT)
  private Integer powerfeedCount;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private NestedRackRole role;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private NestedSite site;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status11 status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private NestedTenant tenant;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type8 type;

  public static final String SERIALIZED_NAME_U_HEIGHT = "u_height";
  @SerializedName(SERIALIZED_NAME_U_HEIGHT)
  private Integer uHeight;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private BigDecimal weight;

  public static final String SERIALIZED_NAME_WEIGHT_UNIT = "weight_unit";
  @SerializedName(SERIALIZED_NAME_WEIGHT_UNIT)
  private WeightUnit weightUnit;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Width width;

  public Rack() {
  }

  public Rack(
     OffsetDateTime created, 
     Integer deviceCount, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     Integer powerfeedCount, 
     URI url
  ) {
    this();
    this.created = created;
    this.deviceCount = deviceCount;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.powerfeedCount = powerfeedCount;
    this.url = url;
  }

  public Rack assetTag(String assetTag) {
    this.assetTag = assetTag;
    return this;
  }

  /**
   * A unique tag used to identify this rack
   * @return assetTag
   */
  @javax.annotation.Nullable
  public String getAssetTag() {
    return assetTag;
  }

  public void setAssetTag(String assetTag) {
    this.assetTag = assetTag;
  }


  public Rack comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public Rack customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Rack descUnits(Boolean descUnits) {
    this.descUnits = descUnits;
    return this;
  }

  /**
   * Units are numbered top-to-bottom
   * @return descUnits
   */
  @javax.annotation.Nullable
  public Boolean getDescUnits() {
    return descUnits;
  }

  public void setDescUnits(Boolean descUnits) {
    this.descUnits = descUnits;
  }


  public Rack description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get deviceCount
   * @return deviceCount
   */
  @javax.annotation.Nullable
  public Integer getDeviceCount() {
    return deviceCount;
  }



  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public Rack facilityId(String facilityId) {
    this.facilityId = facilityId;
    return this;
  }

  /**
   * Get facilityId
   * @return facilityId
   */
  @javax.annotation.Nullable
  public String getFacilityId() {
    return facilityId;
  }

  public void setFacilityId(String facilityId) {
    this.facilityId = facilityId;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public Rack location(NestedLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public NestedLocation getLocation() {
    return location;
  }

  public void setLocation(NestedLocation location) {
    this.location = location;
  }


  public Rack maxWeight(Integer maxWeight) {
    this.maxWeight = maxWeight;
    return this;
  }

  /**
   * Maximum load capacity for the rack
   * minimum: 0
   * maximum: 2147483647
   * @return maxWeight
   */
  @javax.annotation.Nullable
  public Integer getMaxWeight() {
    return maxWeight;
  }

  public void setMaxWeight(Integer maxWeight) {
    this.maxWeight = maxWeight;
  }


  public Rack mountingDepth(Integer mountingDepth) {
    this.mountingDepth = mountingDepth;
    return this;
  }

  /**
   * Maximum depth of a mounted device, in millimeters. For four-post racks, this is the distance between the front and rear rails.
   * minimum: 0
   * maximum: 32767
   * @return mountingDepth
   */
  @javax.annotation.Nullable
  public Integer getMountingDepth() {
    return mountingDepth;
  }

  public void setMountingDepth(Integer mountingDepth) {
    this.mountingDepth = mountingDepth;
  }


  public Rack name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Rack outerDepth(Integer outerDepth) {
    this.outerDepth = outerDepth;
    return this;
  }

  /**
   * Outer dimension of rack (depth)
   * minimum: 0
   * maximum: 32767
   * @return outerDepth
   */
  @javax.annotation.Nullable
  public Integer getOuterDepth() {
    return outerDepth;
  }

  public void setOuterDepth(Integer outerDepth) {
    this.outerDepth = outerDepth;
  }


  public Rack outerUnit(OuterUnit outerUnit) {
    this.outerUnit = outerUnit;
    return this;
  }

  /**
   * Get outerUnit
   * @return outerUnit
   */
  @javax.annotation.Nullable
  public OuterUnit getOuterUnit() {
    return outerUnit;
  }

  public void setOuterUnit(OuterUnit outerUnit) {
    this.outerUnit = outerUnit;
  }


  public Rack outerWidth(Integer outerWidth) {
    this.outerWidth = outerWidth;
    return this;
  }

  /**
   * Outer dimension of rack (width)
   * minimum: 0
   * maximum: 32767
   * @return outerWidth
   */
  @javax.annotation.Nullable
  public Integer getOuterWidth() {
    return outerWidth;
  }

  public void setOuterWidth(Integer outerWidth) {
    this.outerWidth = outerWidth;
  }


  /**
   * Get powerfeedCount
   * @return powerfeedCount
   */
  @javax.annotation.Nullable
  public Integer getPowerfeedCount() {
    return powerfeedCount;
  }



  public Rack role(NestedRackRole role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public NestedRackRole getRole() {
    return role;
  }

  public void setRole(NestedRackRole role) {
    this.role = role;
  }


  public Rack serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Get serial
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public Rack site(NestedSite site) {
    this.site = site;
    return this;
  }

  /**
   * Get site
   * @return site
   */
  @javax.annotation.Nullable
  public NestedSite getSite() {
    return site;
  }

  public void setSite(NestedSite site) {
    this.site = site;
  }


  public Rack status(Status11 status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status11 getStatus() {
    return status;
  }

  public void setStatus(Status11 status) {
    this.status = status;
  }


  public Rack tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public Rack addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public Rack tenant(NestedTenant tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public NestedTenant getTenant() {
    return tenant;
  }

  public void setTenant(NestedTenant tenant) {
    this.tenant = tenant;
  }


  public Rack type(Type8 type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type8 getType() {
    return type;
  }

  public void setType(Type8 type) {
    this.type = type;
  }


  public Rack uHeight(Integer uHeight) {
    this.uHeight = uHeight;
    return this;
  }

  /**
   * Height in rack units
   * minimum: 1
   * maximum: 100
   * @return uHeight
   */
  @javax.annotation.Nullable
  public Integer getuHeight() {
    return uHeight;
  }

  public void setuHeight(Integer uHeight) {
    this.uHeight = uHeight;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public Rack weight(BigDecimal weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public BigDecimal getWeight() {
    return weight;
  }

  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }


  public Rack weightUnit(WeightUnit weightUnit) {
    this.weightUnit = weightUnit;
    return this;
  }

  /**
   * Get weightUnit
   * @return weightUnit
   */
  @javax.annotation.Nullable
  public WeightUnit getWeightUnit() {
    return weightUnit;
  }

  public void setWeightUnit(WeightUnit weightUnit) {
    this.weightUnit = weightUnit;
  }


  public Rack width(Width width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   */
  @javax.annotation.Nullable
  public Width getWidth() {
    return width;
  }

  public void setWidth(Width width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rack rack = (Rack) o;
    return Objects.equals(this.assetTag, rack.assetTag) &&
        Objects.equals(this.comments, rack.comments) &&
        Objects.equals(this.created, rack.created) &&
        Objects.equals(this.customFields, rack.customFields) &&
        Objects.equals(this.descUnits, rack.descUnits) &&
        Objects.equals(this.description, rack.description) &&
        Objects.equals(this.deviceCount, rack.deviceCount) &&
        Objects.equals(this.display, rack.display) &&
        Objects.equals(this.facilityId, rack.facilityId) &&
        Objects.equals(this.id, rack.id) &&
        Objects.equals(this.lastUpdated, rack.lastUpdated) &&
        Objects.equals(this.location, rack.location) &&
        Objects.equals(this.maxWeight, rack.maxWeight) &&
        Objects.equals(this.mountingDepth, rack.mountingDepth) &&
        Objects.equals(this.name, rack.name) &&
        Objects.equals(this.outerDepth, rack.outerDepth) &&
        Objects.equals(this.outerUnit, rack.outerUnit) &&
        Objects.equals(this.outerWidth, rack.outerWidth) &&
        Objects.equals(this.powerfeedCount, rack.powerfeedCount) &&
        Objects.equals(this.role, rack.role) &&
        Objects.equals(this.serial, rack.serial) &&
        Objects.equals(this.site, rack.site) &&
        Objects.equals(this.status, rack.status) &&
        Objects.equals(this.tags, rack.tags) &&
        Objects.equals(this.tenant, rack.tenant) &&
        Objects.equals(this.type, rack.type) &&
        Objects.equals(this.uHeight, rack.uHeight) &&
        Objects.equals(this.url, rack.url) &&
        Objects.equals(this.weight, rack.weight) &&
        Objects.equals(this.weightUnit, rack.weightUnit) &&
        Objects.equals(this.width, rack.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetTag, comments, created, customFields, descUnits, description, deviceCount, display, facilityId, id, lastUpdated, location, maxWeight, mountingDepth, name, outerDepth, outerUnit, outerWidth, powerfeedCount, role, serial, site, status, tags, tenant, type, uHeight, url, weight, weightUnit, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rack {\n");
    sb.append("    assetTag: ").append(toIndentedString(assetTag)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    descUnits: ").append(toIndentedString(descUnits)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceCount: ").append(toIndentedString(deviceCount)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    maxWeight: ").append(toIndentedString(maxWeight)).append("\n");
    sb.append("    mountingDepth: ").append(toIndentedString(mountingDepth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outerDepth: ").append(toIndentedString(outerDepth)).append("\n");
    sb.append("    outerUnit: ").append(toIndentedString(outerUnit)).append("\n");
    sb.append("    outerWidth: ").append(toIndentedString(outerWidth)).append("\n");
    sb.append("    powerfeedCount: ").append(toIndentedString(powerfeedCount)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uHeight: ").append(toIndentedString(uHeight)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    weightUnit: ").append(toIndentedString(weightUnit)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_tag");
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("desc_units");
    openapiFields.add("description");
    openapiFields.add("device_count");
    openapiFields.add("display");
    openapiFields.add("facility_id");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("location");
    openapiFields.add("max_weight");
    openapiFields.add("mounting_depth");
    openapiFields.add("name");
    openapiFields.add("outer_depth");
    openapiFields.add("outer_unit");
    openapiFields.add("outer_width");
    openapiFields.add("powerfeed_count");
    openapiFields.add("role");
    openapiFields.add("serial");
    openapiFields.add("site");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("tenant");
    openapiFields.add("type");
    openapiFields.add("u_height");
    openapiFields.add("url");
    openapiFields.add("weight");
    openapiFields.add("weight_unit");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("site");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rack is not found in the empty JSON string", Rack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Rack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asset_tag") != null && !jsonObj.get("asset_tag").isJsonNull()) && !jsonObj.get("asset_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_tag").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("facility_id") != null && !jsonObj.get("facility_id").isJsonNull()) && !jsonObj.get("facility_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facility_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facility_id").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        NestedLocation.validateJsonElement(jsonObj.get("location"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `outer_unit`
      if (jsonObj.get("outer_unit") != null && !jsonObj.get("outer_unit").isJsonNull()) {
        OuterUnit.validateJsonElement(jsonObj.get("outer_unit"));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        NestedRackRole.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("serial") != null && !jsonObj.get("serial").isJsonNull()) && !jsonObj.get("serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial").toString()));
      }
      // validate the required field `site`
      NestedSite.validateJsonElement(jsonObj.get("site"));
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status11.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `tenant`
      if (jsonObj.get("tenant") != null && !jsonObj.get("tenant").isJsonNull()) {
        NestedTenant.validateJsonElement(jsonObj.get("tenant"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type8.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `weight_unit`
      if (jsonObj.get("weight_unit") != null && !jsonObj.get("weight_unit").isJsonNull()) {
        WeightUnit.validateJsonElement(jsonObj.get("weight_unit"));
      }
      // validate the optional field `width`
      if (jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) {
        Width.validateJsonElement(jsonObj.get("width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rack.class));

       return (TypeAdapter<T>) new TypeAdapter<Rack>() {
           @Override
           public void write(JsonWriter out, Rack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rack
   * @throws IOException if the JSON string is invalid with respect to Rack
   */
  public static Rack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rack.class);
  }

  /**
   * Convert an instance of Rack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

