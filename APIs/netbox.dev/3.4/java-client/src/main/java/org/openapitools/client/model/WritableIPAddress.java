/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NestedIPAddress;
import org.openapitools.client.model.NestedTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableIPAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableIPAddress {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ASSIGNED_OBJECT = "assigned_object";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_OBJECT)
  private Object assignedObject;

  public static final String SERIALIZED_NAME_ASSIGNED_OBJECT_ID = "assigned_object_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_OBJECT_ID)
  private Integer assignedObjectId;

  public static final String SERIALIZED_NAME_ASSIGNED_OBJECT_TYPE = "assigned_object_type";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_OBJECT_TYPE)
  private String assignedObjectType;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_DNS_NAME = "dns_name";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_NAT_INSIDE = "nat_inside";
  @SerializedName(SERIALIZED_NAME_NAT_INSIDE)
  private Integer natInside;

  public static final String SERIALIZED_NAME_NAT_OUTSIDE = "nat_outside";
  @SerializedName(SERIALIZED_NAME_NAT_OUTSIDE)
  private List<NestedIPAddress> natOutside = new ArrayList<>();

  /**
   * The functional role of this IP
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    LOOPBACK("loopback"),
    
    SECONDARY("secondary"),
    
    ANYCAST("anycast"),
    
    VIP("vip"),
    
    VRRP("vrrp"),
    
    HSRP("hsrp"),
    
    GLBP("glbp"),
    
    CARP("carp");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * The operational status of this IP
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    RESERVED("reserved"),
    
    DEPRECATED("deprecated"),
    
    DHCP("dhcp"),
    
    SLAAC("slaac");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private Integer tenant;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VRF = "vrf";
  @SerializedName(SERIALIZED_NAME_VRF)
  private Integer vrf;

  public WritableIPAddress() {
  }

  public WritableIPAddress(
     Object assignedObject, 
     OffsetDateTime created, 
     String display, 
     String family, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     List<NestedIPAddress> natOutside, 
     URI url
  ) {
    this();
    this.assignedObject = assignedObject;
    this.created = created;
    this.display = display;
    this.family = family;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.natOutside = natOutside;
    this.url = url;
  }

  public WritableIPAddress address(String address) {
    this.address = address;
    return this;
  }

  /**
   * IPv4 or IPv6 address (with mask)
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  /**
   * Get assignedObject
   * @return assignedObject
   */
  @javax.annotation.Nullable
  public Object getAssignedObject() {
    return assignedObject;
  }



  public WritableIPAddress assignedObjectId(Integer assignedObjectId) {
    this.assignedObjectId = assignedObjectId;
    return this;
  }

  /**
   * Get assignedObjectId
   * minimum: 0
   * maximum: -9223372036854775616
   * @return assignedObjectId
   */
  @javax.annotation.Nullable
  public Integer getAssignedObjectId() {
    return assignedObjectId;
  }

  public void setAssignedObjectId(Integer assignedObjectId) {
    this.assignedObjectId = assignedObjectId;
  }


  public WritableIPAddress assignedObjectType(String assignedObjectType) {
    this.assignedObjectType = assignedObjectType;
    return this;
  }

  /**
   * Get assignedObjectType
   * @return assignedObjectType
   */
  @javax.annotation.Nullable
  public String getAssignedObjectType() {
    return assignedObjectType;
  }

  public void setAssignedObjectType(String assignedObjectType) {
    this.assignedObjectType = assignedObjectType;
  }


  public WritableIPAddress comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public WritableIPAddress customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public WritableIPAddress description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public WritableIPAddress dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Hostname or FQDN (not case-sensitive)
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  /**
   * Get family
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public WritableIPAddress natInside(Integer natInside) {
    this.natInside = natInside;
    return this;
  }

  /**
   * The IP for which this address is the \&quot;outside\&quot; IP
   * @return natInside
   */
  @javax.annotation.Nullable
  public Integer getNatInside() {
    return natInside;
  }

  public void setNatInside(Integer natInside) {
    this.natInside = natInside;
  }


  /**
   * Get natOutside
   * @return natOutside
   */
  @javax.annotation.Nullable
  public List<NestedIPAddress> getNatOutside() {
    return natOutside;
  }



  public WritableIPAddress role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * The functional role of this IP
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public WritableIPAddress status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The operational status of this IP
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WritableIPAddress tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public WritableIPAddress addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public WritableIPAddress tenant(Integer tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public Integer getTenant() {
    return tenant;
  }

  public void setTenant(Integer tenant) {
    this.tenant = tenant;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public WritableIPAddress vrf(Integer vrf) {
    this.vrf = vrf;
    return this;
  }

  /**
   * Get vrf
   * @return vrf
   */
  @javax.annotation.Nullable
  public Integer getVrf() {
    return vrf;
  }

  public void setVrf(Integer vrf) {
    this.vrf = vrf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableIPAddress writableIPAddress = (WritableIPAddress) o;
    return Objects.equals(this.address, writableIPAddress.address) &&
        Objects.equals(this.assignedObject, writableIPAddress.assignedObject) &&
        Objects.equals(this.assignedObjectId, writableIPAddress.assignedObjectId) &&
        Objects.equals(this.assignedObjectType, writableIPAddress.assignedObjectType) &&
        Objects.equals(this.comments, writableIPAddress.comments) &&
        Objects.equals(this.created, writableIPAddress.created) &&
        Objects.equals(this.customFields, writableIPAddress.customFields) &&
        Objects.equals(this.description, writableIPAddress.description) &&
        Objects.equals(this.display, writableIPAddress.display) &&
        Objects.equals(this.dnsName, writableIPAddress.dnsName) &&
        Objects.equals(this.family, writableIPAddress.family) &&
        Objects.equals(this.id, writableIPAddress.id) &&
        Objects.equals(this.lastUpdated, writableIPAddress.lastUpdated) &&
        Objects.equals(this.natInside, writableIPAddress.natInside) &&
        Objects.equals(this.natOutside, writableIPAddress.natOutside) &&
        Objects.equals(this.role, writableIPAddress.role) &&
        Objects.equals(this.status, writableIPAddress.status) &&
        Objects.equals(this.tags, writableIPAddress.tags) &&
        Objects.equals(this.tenant, writableIPAddress.tenant) &&
        Objects.equals(this.url, writableIPAddress.url) &&
        Objects.equals(this.vrf, writableIPAddress.vrf);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, assignedObject, assignedObjectId, assignedObjectType, comments, created, customFields, description, display, dnsName, family, id, lastUpdated, natInside, natOutside, role, status, tags, tenant, url, vrf);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableIPAddress {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    assignedObject: ").append(toIndentedString(assignedObject)).append("\n");
    sb.append("    assignedObjectId: ").append(toIndentedString(assignedObjectId)).append("\n");
    sb.append("    assignedObjectType: ").append(toIndentedString(assignedObjectType)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    natInside: ").append(toIndentedString(natInside)).append("\n");
    sb.append("    natOutside: ").append(toIndentedString(natOutside)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("assigned_object");
    openapiFields.add("assigned_object_id");
    openapiFields.add("assigned_object_type");
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("dns_name");
    openapiFields.add("family");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("nat_inside");
    openapiFields.add("nat_outside");
    openapiFields.add("role");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("tenant");
    openapiFields.add("url");
    openapiFields.add("vrf");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableIPAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableIPAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableIPAddress is not found in the empty JSON string", WritableIPAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableIPAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableIPAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableIPAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("assigned_object_type") != null && !jsonObj.get("assigned_object_type").isJsonNull()) && !jsonObj.get("assigned_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_object_type").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("dns_name") != null && !jsonObj.get("dns_name").isJsonNull()) && !jsonObj.get("dns_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns_name").toString()));
      }
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if (jsonObj.get("nat_outside") != null && !jsonObj.get("nat_outside").isJsonNull()) {
        JsonArray jsonArraynatOutside = jsonObj.getAsJsonArray("nat_outside");
        if (jsonArraynatOutside != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nat_outside").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nat_outside` to be an array in the JSON string but got `%s`", jsonObj.get("nat_outside").toString()));
          }

          // validate the optional field `nat_outside` (array)
          for (int i = 0; i < jsonArraynatOutside.size(); i++) {
            NestedIPAddress.validateJsonElement(jsonArraynatOutside.get(i));
          };
        }
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableIPAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableIPAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableIPAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableIPAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableIPAddress>() {
           @Override
           public void write(JsonWriter out, WritableIPAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableIPAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableIPAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableIPAddress
   * @throws IOException if the JSON string is invalid with respect to WritableIPAddress
   */
  public static WritableIPAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableIPAddress.class);
  }

  /**
   * Convert an instance of WritableIPAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

