/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomLink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomLink {
  /**
   * The class of the first link in a group will be used for the dropdown button
   */
  @JsonAdapter(ButtonClassEnum.Adapter.class)
  public enum ButtonClassEnum {
    OUTLINE_DARK("outline-dark"),
    
    BLUE("blue"),
    
    INDIGO("indigo"),
    
    PURPLE("purple"),
    
    PINK("pink"),
    
    RED("red"),
    
    ORANGE("orange"),
    
    YELLOW("yellow"),
    
    GREEN("green"),
    
    TEAL("teal"),
    
    CYAN("cyan"),
    
    GRAY("gray"),
    
    BLACK("black"),
    
    WHITE("white"),
    
    GHOST_DARK("ghost-dark");

    private String value;

    ButtonClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ButtonClassEnum fromValue(String value) {
      for (ButtonClassEnum b : ButtonClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ButtonClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ButtonClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ButtonClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ButtonClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ButtonClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUTTON_CLASS = "button_class";
  @SerializedName(SERIALIZED_NAME_BUTTON_CLASS)
  private ButtonClassEnum buttonClass;

  public static final String SERIALIZED_NAME_CONTENT_TYPES = "content_types";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPES)
  private Set<String> contentTypes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LINK_TEXT = "link_text";
  @SerializedName(SERIALIZED_NAME_LINK_TEXT)
  private String linkText;

  public static final String SERIALIZED_NAME_LINK_URL = "link_url";
  @SerializedName(SERIALIZED_NAME_LINK_URL)
  private String linkUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEW_WINDOW = "new_window";
  @SerializedName(SERIALIZED_NAME_NEW_WINDOW)
  private Boolean newWindow;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public CustomLink() {
  }

  public CustomLink(
     OffsetDateTime created, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     URI url
  ) {
    this();
    this.created = created;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.url = url;
  }

  public CustomLink buttonClass(ButtonClassEnum buttonClass) {
    this.buttonClass = buttonClass;
    return this;
  }

  /**
   * The class of the first link in a group will be used for the dropdown button
   * @return buttonClass
   */
  @javax.annotation.Nullable
  public ButtonClassEnum getButtonClass() {
    return buttonClass;
  }

  public void setButtonClass(ButtonClassEnum buttonClass) {
    this.buttonClass = buttonClass;
  }


  public CustomLink contentTypes(Set<String> contentTypes) {
    this.contentTypes = contentTypes;
    return this;
  }

  public CustomLink addContentTypesItem(String contentTypesItem) {
    if (this.contentTypes == null) {
      this.contentTypes = new LinkedHashSet<>();
    }
    this.contentTypes.add(contentTypesItem);
    return this;
  }

  /**
   * Get contentTypes
   * @return contentTypes
   */
  @javax.annotation.Nonnull
  public Set<String> getContentTypes() {
    return contentTypes;
  }

  public void setContentTypes(Set<String> contentTypes) {
    this.contentTypes = contentTypes;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public CustomLink enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CustomLink groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Links with the same group will appear as a dropdown menu
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public CustomLink linkText(String linkText) {
    this.linkText = linkText;
    return this;
  }

  /**
   * Jinja2 template code for link text
   * @return linkText
   */
  @javax.annotation.Nonnull
  public String getLinkText() {
    return linkText;
  }

  public void setLinkText(String linkText) {
    this.linkText = linkText;
  }


  public CustomLink linkUrl(String linkUrl) {
    this.linkUrl = linkUrl;
    return this;
  }

  /**
   * Jinja2 template code for link URL
   * @return linkUrl
   */
  @javax.annotation.Nonnull
  public String getLinkUrl() {
    return linkUrl;
  }

  public void setLinkUrl(String linkUrl) {
    this.linkUrl = linkUrl;
  }


  public CustomLink name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomLink newWindow(Boolean newWindow) {
    this.newWindow = newWindow;
    return this;
  }

  /**
   * Force link to open in a new window
   * @return newWindow
   */
  @javax.annotation.Nullable
  public Boolean getNewWindow() {
    return newWindow;
  }

  public void setNewWindow(Boolean newWindow) {
    this.newWindow = newWindow;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public CustomLink weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * minimum: 0
   * maximum: 32767
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomLink customLink = (CustomLink) o;
    return Objects.equals(this.buttonClass, customLink.buttonClass) &&
        Objects.equals(this.contentTypes, customLink.contentTypes) &&
        Objects.equals(this.created, customLink.created) &&
        Objects.equals(this.display, customLink.display) &&
        Objects.equals(this.enabled, customLink.enabled) &&
        Objects.equals(this.groupName, customLink.groupName) &&
        Objects.equals(this.id, customLink.id) &&
        Objects.equals(this.lastUpdated, customLink.lastUpdated) &&
        Objects.equals(this.linkText, customLink.linkText) &&
        Objects.equals(this.linkUrl, customLink.linkUrl) &&
        Objects.equals(this.name, customLink.name) &&
        Objects.equals(this.newWindow, customLink.newWindow) &&
        Objects.equals(this.url, customLink.url) &&
        Objects.equals(this.weight, customLink.weight);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttonClass, contentTypes, created, display, enabled, groupName, id, lastUpdated, linkText, linkUrl, name, newWindow, url, weight);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomLink {\n");
    sb.append("    buttonClass: ").append(toIndentedString(buttonClass)).append("\n");
    sb.append("    contentTypes: ").append(toIndentedString(contentTypes)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    linkText: ").append(toIndentedString(linkText)).append("\n");
    sb.append("    linkUrl: ").append(toIndentedString(linkUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newWindow: ").append(toIndentedString(newWindow)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("button_class");
    openapiFields.add("content_types");
    openapiFields.add("created");
    openapiFields.add("display");
    openapiFields.add("enabled");
    openapiFields.add("group_name");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("link_text");
    openapiFields.add("link_url");
    openapiFields.add("name");
    openapiFields.add("new_window");
    openapiFields.add("url");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content_types");
    openapiRequiredFields.add("link_text");
    openapiRequiredFields.add("link_url");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomLink is not found in the empty JSON string", CustomLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomLink.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("button_class") != null && !jsonObj.get("button_class").isJsonNull()) && !jsonObj.get("button_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button_class").toString()));
      }
      // validate the optional field `button_class`
      if (jsonObj.get("button_class") != null && !jsonObj.get("button_class").isJsonNull()) {
        ButtonClassEnum.validateJsonElement(jsonObj.get("button_class"));
      }
      // ensure the required json array is present
      if (jsonObj.get("content_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("content_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_types` to be an array in the JSON string but got `%s`", jsonObj.get("content_types").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("group_name") != null && !jsonObj.get("group_name").isJsonNull()) && !jsonObj.get("group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_name").toString()));
      }
      if (!jsonObj.get("link_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_text").toString()));
      }
      if (!jsonObj.get("link_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomLink.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomLink>() {
           @Override
           public void write(JsonWriter out, CustomLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomLink
   * @throws IOException if the JSON string is invalid with respect to CustomLink
   */
  public static CustomLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomLink.class);
  }

  /**
   * Convert an instance of CustomLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

