/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.NestedASN;
import org.openapitools.client.model.NestedRegion;
import org.openapitools.client.model.NestedSiteGroup;
import org.openapitools.client.model.NestedTag;
import org.openapitools.client.model.NestedTenant;
import org.openapitools.client.model.Status7;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Site
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Site {
  public static final String SERIALIZED_NAME_ASNS = "asns";
  @SerializedName(SERIALIZED_NAME_ASNS)
  private Set<NestedASN> asns = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CIRCUIT_COUNT = "circuit_count";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_COUNT)
  private Integer circuitCount;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_COUNT = "device_count";
  @SerializedName(SERIALIZED_NAME_DEVICE_COUNT)
  private Integer deviceCount;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_FACILITY = "facility";
  @SerializedName(SERIALIZED_NAME_FACILITY)
  private String facility;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private NestedSiteGroup group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHYSICAL_ADDRESS = "physical_address";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_ADDRESS)
  private String physicalAddress;

  public static final String SERIALIZED_NAME_PREFIX_COUNT = "prefix_count";
  @SerializedName(SERIALIZED_NAME_PREFIX_COUNT)
  private Integer prefixCount;

  public static final String SERIALIZED_NAME_RACK_COUNT = "rack_count";
  @SerializedName(SERIALIZED_NAME_RACK_COUNT)
  private Integer rackCount;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private NestedRegion region;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private String shippingAddress;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status7 status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private NestedTenant tenant;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VIRTUALMACHINE_COUNT = "virtualmachine_count";
  @SerializedName(SERIALIZED_NAME_VIRTUALMACHINE_COUNT)
  private Integer virtualmachineCount;

  public static final String SERIALIZED_NAME_VLAN_COUNT = "vlan_count";
  @SerializedName(SERIALIZED_NAME_VLAN_COUNT)
  private Integer vlanCount;

  public Site() {
  }

  public Site(
     Integer circuitCount, 
     OffsetDateTime created, 
     Integer deviceCount, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     Integer prefixCount, 
     Integer rackCount, 
     URI url, 
     Integer virtualmachineCount, 
     Integer vlanCount
  ) {
    this();
    this.circuitCount = circuitCount;
    this.created = created;
    this.deviceCount = deviceCount;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.prefixCount = prefixCount;
    this.rackCount = rackCount;
    this.url = url;
    this.virtualmachineCount = virtualmachineCount;
    this.vlanCount = vlanCount;
  }

  public Site asns(Set<NestedASN> asns) {
    this.asns = asns;
    return this;
  }

  public Site addAsnsItem(NestedASN asnsItem) {
    if (this.asns == null) {
      this.asns = new LinkedHashSet<>();
    }
    this.asns.add(asnsItem);
    return this;
  }

  /**
   * Get asns
   * @return asns
   */
  @javax.annotation.Nullable
  public Set<NestedASN> getAsns() {
    return asns;
  }

  public void setAsns(Set<NestedASN> asns) {
    this.asns = asns;
  }


  /**
   * Get circuitCount
   * @return circuitCount
   */
  @javax.annotation.Nullable
  public Integer getCircuitCount() {
    return circuitCount;
  }



  public Site comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public Site customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Site description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get deviceCount
   * @return deviceCount
   */
  @javax.annotation.Nullable
  public Integer getDeviceCount() {
    return deviceCount;
  }



  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public Site facility(String facility) {
    this.facility = facility;
    return this;
  }

  /**
   * Local facility ID or description
   * @return facility
   */
  @javax.annotation.Nullable
  public String getFacility() {
    return facility;
  }

  public void setFacility(String facility) {
    this.facility = facility;
  }


  public Site group(NestedSiteGroup group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public NestedSiteGroup getGroup() {
    return group;
  }

  public void setGroup(NestedSiteGroup group) {
    this.group = group;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public Site latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * GPS coordinate (latitude)
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public Site longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * GPS coordinate (longitude)
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public Site name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Site physicalAddress(String physicalAddress) {
    this.physicalAddress = physicalAddress;
    return this;
  }

  /**
   * Get physicalAddress
   * @return physicalAddress
   */
  @javax.annotation.Nullable
  public String getPhysicalAddress() {
    return physicalAddress;
  }

  public void setPhysicalAddress(String physicalAddress) {
    this.physicalAddress = physicalAddress;
  }


  /**
   * Get prefixCount
   * @return prefixCount
   */
  @javax.annotation.Nullable
  public Integer getPrefixCount() {
    return prefixCount;
  }



  /**
   * Get rackCount
   * @return rackCount
   */
  @javax.annotation.Nullable
  public Integer getRackCount() {
    return rackCount;
  }



  public Site region(NestedRegion region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public NestedRegion getRegion() {
    return region;
  }

  public void setRegion(NestedRegion region) {
    this.region = region;
  }


  public Site shippingAddress(String shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public String getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(String shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public Site slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Site status(Status7 status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status7 getStatus() {
    return status;
  }

  public void setStatus(Status7 status) {
    this.status = status;
  }


  public Site tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public Site addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public Site tenant(NestedTenant tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public NestedTenant getTenant() {
    return tenant;
  }

  public void setTenant(NestedTenant tenant) {
    this.tenant = tenant;
  }


  public Site timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  /**
   * Get virtualmachineCount
   * @return virtualmachineCount
   */
  @javax.annotation.Nullable
  public Integer getVirtualmachineCount() {
    return virtualmachineCount;
  }



  /**
   * Get vlanCount
   * @return vlanCount
   */
  @javax.annotation.Nullable
  public Integer getVlanCount() {
    return vlanCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Site site = (Site) o;
    return Objects.equals(this.asns, site.asns) &&
        Objects.equals(this.circuitCount, site.circuitCount) &&
        Objects.equals(this.comments, site.comments) &&
        Objects.equals(this.created, site.created) &&
        Objects.equals(this.customFields, site.customFields) &&
        Objects.equals(this.description, site.description) &&
        Objects.equals(this.deviceCount, site.deviceCount) &&
        Objects.equals(this.display, site.display) &&
        Objects.equals(this.facility, site.facility) &&
        Objects.equals(this.group, site.group) &&
        Objects.equals(this.id, site.id) &&
        Objects.equals(this.lastUpdated, site.lastUpdated) &&
        Objects.equals(this.latitude, site.latitude) &&
        Objects.equals(this.longitude, site.longitude) &&
        Objects.equals(this.name, site.name) &&
        Objects.equals(this.physicalAddress, site.physicalAddress) &&
        Objects.equals(this.prefixCount, site.prefixCount) &&
        Objects.equals(this.rackCount, site.rackCount) &&
        Objects.equals(this.region, site.region) &&
        Objects.equals(this.shippingAddress, site.shippingAddress) &&
        Objects.equals(this.slug, site.slug) &&
        Objects.equals(this.status, site.status) &&
        Objects.equals(this.tags, site.tags) &&
        Objects.equals(this.tenant, site.tenant) &&
        Objects.equals(this.timeZone, site.timeZone) &&
        Objects.equals(this.url, site.url) &&
        Objects.equals(this.virtualmachineCount, site.virtualmachineCount) &&
        Objects.equals(this.vlanCount, site.vlanCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asns, circuitCount, comments, created, customFields, description, deviceCount, display, facility, group, id, lastUpdated, latitude, longitude, name, physicalAddress, prefixCount, rackCount, region, shippingAddress, slug, status, tags, tenant, timeZone, url, virtualmachineCount, vlanCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Site {\n");
    sb.append("    asns: ").append(toIndentedString(asns)).append("\n");
    sb.append("    circuitCount: ").append(toIndentedString(circuitCount)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceCount: ").append(toIndentedString(deviceCount)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    physicalAddress: ").append(toIndentedString(physicalAddress)).append("\n");
    sb.append("    prefixCount: ").append(toIndentedString(prefixCount)).append("\n");
    sb.append("    rackCount: ").append(toIndentedString(rackCount)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    virtualmachineCount: ").append(toIndentedString(virtualmachineCount)).append("\n");
    sb.append("    vlanCount: ").append(toIndentedString(vlanCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asns");
    openapiFields.add("circuit_count");
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("device_count");
    openapiFields.add("display");
    openapiFields.add("facility");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("physical_address");
    openapiFields.add("prefix_count");
    openapiFields.add("rack_count");
    openapiFields.add("region");
    openapiFields.add("shipping_address");
    openapiFields.add("slug");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("tenant");
    openapiFields.add("time_zone");
    openapiFields.add("url");
    openapiFields.add("virtualmachine_count");
    openapiFields.add("vlan_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Site
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Site.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Site is not found in the empty JSON string", Site.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Site.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Site` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Site.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("asns") != null && !jsonObj.get("asns").isJsonNull()) {
        JsonArray jsonArrayasns = jsonObj.getAsJsonArray("asns");
        if (jsonArrayasns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("asns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `asns` to be an array in the JSON string but got `%s`", jsonObj.get("asns").toString()));
          }

          // validate the optional field `asns` (array)
          for (int i = 0; i < jsonArrayasns.size(); i++) {
            NestedASN.validateJsonElement(jsonArrayasns.get(i));
          };
        }
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("facility") != null && !jsonObj.get("facility").isJsonNull()) && !jsonObj.get("facility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facility").toString()));
      }
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        NestedSiteGroup.validateJsonElement(jsonObj.get("group"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("physical_address") != null && !jsonObj.get("physical_address").isJsonNull()) && !jsonObj.get("physical_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `physical_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("physical_address").toString()));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        NestedRegion.validateJsonElement(jsonObj.get("region"));
      }
      if ((jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) && !jsonObj.get("shipping_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_address").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status7.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `tenant`
      if (jsonObj.get("tenant") != null && !jsonObj.get("tenant").isJsonNull()) {
        NestedTenant.validateJsonElement(jsonObj.get("tenant"));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Site.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Site' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Site> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Site.class));

       return (TypeAdapter<T>) new TypeAdapter<Site>() {
           @Override
           public void write(JsonWriter out, Site value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Site read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Site given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Site
   * @throws IOException if the JSON string is invalid with respect to Site
   */
  public static Site fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Site.class);
  }

  /**
   * Convert an instance of Site to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

