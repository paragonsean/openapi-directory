/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.NestedCable;
import org.openapitools.client.model.NestedTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableInterface {
  public static final String SERIALIZED_NAME_OCCUPIED = "_occupied";
  @SerializedName(SERIALIZED_NAME_OCCUPIED)
  private Boolean occupied;

  public static final String SERIALIZED_NAME_BRIDGE = "bridge";
  @SerializedName(SERIALIZED_NAME_BRIDGE)
  private Integer bridge;

  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private NestedCable cable;

  public static final String SERIALIZED_NAME_CABLE_END = "cable_end";
  @SerializedName(SERIALIZED_NAME_CABLE_END)
  private String cableEnd;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS = "connected_endpoints";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS)
  private List<String> connectedEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE = "connected_endpoints_reachable";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE)
  private Boolean connectedEndpointsReachable;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE = "connected_endpoints_type";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE)
  private String connectedEndpointsType;

  public static final String SERIALIZED_NAME_COUNT_FHRP_GROUPS = "count_fhrp_groups";
  @SerializedName(SERIALIZED_NAME_COUNT_FHRP_GROUPS)
  private Integer countFhrpGroups;

  public static final String SERIALIZED_NAME_COUNT_IPADDRESSES = "count_ipaddresses";
  @SerializedName(SERIALIZED_NAME_COUNT_IPADDRESSES)
  private Integer countIpaddresses;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Integer device;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  /**
   * Gets or Sets duplex
   */
  @JsonAdapter(DuplexEnum.Adapter.class)
  public enum DuplexEnum {
    HALF("half"),
    
    FULL("full"),
    
    AUTO("auto");

    private String value;

    DuplexEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplexEnum fromValue(String value) {
      for (DuplexEnum b : DuplexEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DuplexEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplexEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplexEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DuplexEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DuplexEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUPLEX = "duplex";
  @SerializedName(SERIALIZED_NAME_DUPLEX)
  private DuplexEnum duplex;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_L2VPN_TERMINATION = "l2vpn_termination";
  @SerializedName(SERIALIZED_NAME_L2VPN_TERMINATION)
  private String l2vpnTermination;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LAG = "lag";
  @SerializedName(SERIALIZED_NAME_LAG)
  private Integer lag;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LINK_PEERS = "link_peers";
  @SerializedName(SERIALIZED_NAME_LINK_PEERS)
  private List<String> linkPeers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK_PEERS_TYPE = "link_peers_type";
  @SerializedName(SERIALIZED_NAME_LINK_PEERS_TYPE)
  private String linkPeersType;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MARK_CONNECTED = "mark_connected";
  @SerializedName(SERIALIZED_NAME_MARK_CONNECTED)
  private Boolean markConnected;

  public static final String SERIALIZED_NAME_MGMT_ONLY = "mgmt_only";
  @SerializedName(SERIALIZED_NAME_MGMT_ONLY)
  private Boolean mgmtOnly;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ACCESS("access"),
    
    TAGGED("tagged"),
    
    TAGGED_ALL("tagged-all");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private Integer module;

  public static final String SERIALIZED_NAME_MTU = "mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private Integer mtu;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Integer parent;

  /**
   * Gets or Sets poeMode
   */
  @JsonAdapter(PoeModeEnum.Adapter.class)
  public enum PoeModeEnum {
    PD("pd"),
    
    PSE("pse");

    private String value;

    PoeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PoeModeEnum fromValue(String value) {
      for (PoeModeEnum b : PoeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PoeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PoeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PoeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PoeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PoeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POE_MODE = "poe_mode";
  @SerializedName(SERIALIZED_NAME_POE_MODE)
  private PoeModeEnum poeMode;

  /**
   * Gets or Sets poeType
   */
  @JsonAdapter(PoeTypeEnum.Adapter.class)
  public enum PoeTypeEnum {
    TYPE1_IEEE802_3AF("type1-ieee802.3af"),
    
    TYPE2_IEEE802_3AT("type2-ieee802.3at"),
    
    TYPE2_IEEE802_3AZ("type2-ieee802.3az"),
    
    TYPE3_IEEE802_3BT("type3-ieee802.3bt"),
    
    TYPE4_IEEE802_3BT("type4-ieee802.3bt"),
    
    PASSIVE_24V_2PAIR("passive-24v-2pair"),
    
    PASSIVE_24V_4PAIR("passive-24v-4pair"),
    
    PASSIVE_48V_2PAIR("passive-48v-2pair"),
    
    PASSIVE_48V_4PAIR("passive-48v-4pair");

    private String value;

    PoeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PoeTypeEnum fromValue(String value) {
      for (PoeTypeEnum b : PoeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PoeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PoeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PoeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PoeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PoeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POE_TYPE = "poe_type";
  @SerializedName(SERIALIZED_NAME_POE_TYPE)
  private PoeTypeEnum poeType;

  /**
   * Gets or Sets rfChannel
   */
  @JsonAdapter(RfChannelEnum.Adapter.class)
  public enum RfChannelEnum {
    _2_4G_1_2412_22("2.4g-1-2412-22"),
    
    _2_4G_2_2417_22("2.4g-2-2417-22"),
    
    _2_4G_3_2422_22("2.4g-3-2422-22"),
    
    _2_4G_4_2427_22("2.4g-4-2427-22"),
    
    _2_4G_5_2432_22("2.4g-5-2432-22"),
    
    _2_4G_6_2437_22("2.4g-6-2437-22"),
    
    _2_4G_7_2442_22("2.4g-7-2442-22"),
    
    _2_4G_8_2447_22("2.4g-8-2447-22"),
    
    _2_4G_9_2452_22("2.4g-9-2452-22"),
    
    _2_4G_10_2457_22("2.4g-10-2457-22"),
    
    _2_4G_11_2462_22("2.4g-11-2462-22"),
    
    _2_4G_12_2467_22("2.4g-12-2467-22"),
    
    _2_4G_13_2472_22("2.4g-13-2472-22"),
    
    _5G_32_5160_20("5g-32-5160-20"),
    
    _5G_34_5170_40("5g-34-5170-40"),
    
    _5G_36_5180_20("5g-36-5180-20"),
    
    _5G_38_5190_40("5g-38-5190-40"),
    
    _5G_40_5200_20("5g-40-5200-20"),
    
    _5G_42_5210_80("5g-42-5210-80"),
    
    _5G_44_5220_20("5g-44-5220-20"),
    
    _5G_46_5230_40("5g-46-5230-40"),
    
    _5G_48_5240_20("5g-48-5240-20"),
    
    _5G_50_5250_160("5g-50-5250-160"),
    
    _5G_52_5260_20("5g-52-5260-20"),
    
    _5G_54_5270_40("5g-54-5270-40"),
    
    _5G_56_5280_20("5g-56-5280-20"),
    
    _5G_58_5290_80("5g-58-5290-80"),
    
    _5G_60_5300_20("5g-60-5300-20"),
    
    _5G_62_5310_40("5g-62-5310-40"),
    
    _5G_64_5320_20("5g-64-5320-20"),
    
    _5G_100_5500_20("5g-100-5500-20"),
    
    _5G_102_5510_40("5g-102-5510-40"),
    
    _5G_104_5520_20("5g-104-5520-20"),
    
    _5G_106_5530_80("5g-106-5530-80"),
    
    _5G_108_5540_20("5g-108-5540-20"),
    
    _5G_110_5550_40("5g-110-5550-40"),
    
    _5G_112_5560_20("5g-112-5560-20"),
    
    _5G_114_5570_160("5g-114-5570-160"),
    
    _5G_116_5580_20("5g-116-5580-20"),
    
    _5G_118_5590_40("5g-118-5590-40"),
    
    _5G_120_5600_20("5g-120-5600-20"),
    
    _5G_122_5610_80("5g-122-5610-80"),
    
    _5G_124_5620_20("5g-124-5620-20"),
    
    _5G_126_5630_40("5g-126-5630-40"),
    
    _5G_128_5640_20("5g-128-5640-20"),
    
    _5G_132_5660_20("5g-132-5660-20"),
    
    _5G_134_5670_40("5g-134-5670-40"),
    
    _5G_136_5680_20("5g-136-5680-20"),
    
    _5G_138_5690_80("5g-138-5690-80"),
    
    _5G_140_5700_20("5g-140-5700-20"),
    
    _5G_142_5710_40("5g-142-5710-40"),
    
    _5G_144_5720_20("5g-144-5720-20"),
    
    _5G_149_5745_20("5g-149-5745-20"),
    
    _5G_151_5755_40("5g-151-5755-40"),
    
    _5G_153_5765_20("5g-153-5765-20"),
    
    _5G_155_5775_80("5g-155-5775-80"),
    
    _5G_157_5785_20("5g-157-5785-20"),
    
    _5G_159_5795_40("5g-159-5795-40"),
    
    _5G_161_5805_20("5g-161-5805-20"),
    
    _5G_163_5815_160("5g-163-5815-160"),
    
    _5G_165_5825_20("5g-165-5825-20"),
    
    _5G_167_5835_40("5g-167-5835-40"),
    
    _5G_169_5845_20("5g-169-5845-20"),
    
    _5G_171_5855_80("5g-171-5855-80"),
    
    _5G_173_5865_20("5g-173-5865-20"),
    
    _5G_175_5875_40("5g-175-5875-40"),
    
    _5G_177_5885_20("5g-177-5885-20"),
    
    _6G_1_5955_20("6g-1-5955-20"),
    
    _6G_3_5965_40("6g-3-5965-40"),
    
    _6G_5_5975_20("6g-5-5975-20"),
    
    _6G_7_5985_80("6g-7-5985-80"),
    
    _6G_9_5995_20("6g-9-5995-20"),
    
    _6G_11_6005_40("6g-11-6005-40"),
    
    _6G_13_6015_20("6g-13-6015-20"),
    
    _6G_15_6025_160("6g-15-6025-160"),
    
    _6G_17_6035_20("6g-17-6035-20"),
    
    _6G_19_6045_40("6g-19-6045-40"),
    
    _6G_21_6055_20("6g-21-6055-20"),
    
    _6G_23_6065_80("6g-23-6065-80"),
    
    _6G_25_6075_20("6g-25-6075-20"),
    
    _6G_27_6085_40("6g-27-6085-40"),
    
    _6G_29_6095_20("6g-29-6095-20"),
    
    _6G_31_6105_320("6g-31-6105-320"),
    
    _6G_33_6115_20("6g-33-6115-20"),
    
    _6G_35_6125_40("6g-35-6125-40"),
    
    _6G_37_6135_20("6g-37-6135-20"),
    
    _6G_39_6145_80("6g-39-6145-80"),
    
    _6G_41_6155_20("6g-41-6155-20"),
    
    _6G_43_6165_40("6g-43-6165-40"),
    
    _6G_45_6175_20("6g-45-6175-20"),
    
    _6G_47_6185_160("6g-47-6185-160"),
    
    _6G_49_6195_20("6g-49-6195-20"),
    
    _6G_51_6205_40("6g-51-6205-40"),
    
    _6G_53_6215_20("6g-53-6215-20"),
    
    _6G_55_6225_80("6g-55-6225-80"),
    
    _6G_57_6235_20("6g-57-6235-20"),
    
    _6G_59_6245_40("6g-59-6245-40"),
    
    _6G_61_6255_20("6g-61-6255-20"),
    
    _6G_65_6275_20("6g-65-6275-20"),
    
    _6G_67_6285_40("6g-67-6285-40"),
    
    _6G_69_6295_20("6g-69-6295-20"),
    
    _6G_71_6305_80("6g-71-6305-80"),
    
    _6G_73_6315_20("6g-73-6315-20"),
    
    _6G_75_6325_40("6g-75-6325-40"),
    
    _6G_77_6335_20("6g-77-6335-20"),
    
    _6G_79_6345_160("6g-79-6345-160"),
    
    _6G_81_6355_20("6g-81-6355-20"),
    
    _6G_83_6365_40("6g-83-6365-40"),
    
    _6G_85_6375_20("6g-85-6375-20"),
    
    _6G_87_6385_80("6g-87-6385-80"),
    
    _6G_89_6395_20("6g-89-6395-20"),
    
    _6G_91_6405_40("6g-91-6405-40"),
    
    _6G_93_6415_20("6g-93-6415-20"),
    
    _6G_95_6425_320("6g-95-6425-320"),
    
    _6G_97_6435_20("6g-97-6435-20"),
    
    _6G_99_6445_40("6g-99-6445-40"),
    
    _6G_101_6455_20("6g-101-6455-20"),
    
    _6G_103_6465_80("6g-103-6465-80"),
    
    _6G_105_6475_20("6g-105-6475-20"),
    
    _6G_107_6485_40("6g-107-6485-40"),
    
    _6G_109_6495_20("6g-109-6495-20"),
    
    _6G_111_6505_160("6g-111-6505-160"),
    
    _6G_113_6515_20("6g-113-6515-20"),
    
    _6G_115_6525_40("6g-115-6525-40"),
    
    _6G_117_6535_20("6g-117-6535-20"),
    
    _6G_119_6545_80("6g-119-6545-80"),
    
    _6G_121_6555_20("6g-121-6555-20"),
    
    _6G_123_6565_40("6g-123-6565-40"),
    
    _6G_125_6575_20("6g-125-6575-20"),
    
    _6G_129_6595_20("6g-129-6595-20"),
    
    _6G_131_6605_40("6g-131-6605-40"),
    
    _6G_133_6615_20("6g-133-6615-20"),
    
    _6G_135_6625_80("6g-135-6625-80"),
    
    _6G_137_6635_20("6g-137-6635-20"),
    
    _6G_139_6645_40("6g-139-6645-40"),
    
    _6G_141_6655_20("6g-141-6655-20"),
    
    _6G_143_6665_160("6g-143-6665-160"),
    
    _6G_145_6675_20("6g-145-6675-20"),
    
    _6G_147_6685_40("6g-147-6685-40"),
    
    _6G_149_6695_20("6g-149-6695-20"),
    
    _6G_151_6705_80("6g-151-6705-80"),
    
    _6G_153_6715_20("6g-153-6715-20"),
    
    _6G_155_6725_40("6g-155-6725-40"),
    
    _6G_157_6735_20("6g-157-6735-20"),
    
    _6G_159_6745_320("6g-159-6745-320"),
    
    _6G_161_6755_20("6g-161-6755-20"),
    
    _6G_163_6765_40("6g-163-6765-40"),
    
    _6G_165_6775_20("6g-165-6775-20"),
    
    _6G_167_6785_80("6g-167-6785-80"),
    
    _6G_169_6795_20("6g-169-6795-20"),
    
    _6G_171_6805_40("6g-171-6805-40"),
    
    _6G_173_6815_20("6g-173-6815-20"),
    
    _6G_175_6825_160("6g-175-6825-160"),
    
    _6G_177_6835_20("6g-177-6835-20"),
    
    _6G_179_6845_40("6g-179-6845-40"),
    
    _6G_181_6855_20("6g-181-6855-20"),
    
    _6G_183_6865_80("6g-183-6865-80"),
    
    _6G_185_6875_20("6g-185-6875-20"),
    
    _6G_187_6885_40("6g-187-6885-40"),
    
    _6G_189_6895_20("6g-189-6895-20"),
    
    _6G_193_6915_20("6g-193-6915-20"),
    
    _6G_195_6925_40("6g-195-6925-40"),
    
    _6G_197_6935_20("6g-197-6935-20"),
    
    _6G_199_6945_80("6g-199-6945-80"),
    
    _6G_201_6955_20("6g-201-6955-20"),
    
    _6G_203_6965_40("6g-203-6965-40"),
    
    _6G_205_6975_20("6g-205-6975-20"),
    
    _6G_207_6985_160("6g-207-6985-160"),
    
    _6G_209_6995_20("6g-209-6995-20"),
    
    _6G_211_7005_40("6g-211-7005-40"),
    
    _6G_213_7015_20("6g-213-7015-20"),
    
    _6G_215_7025_80("6g-215-7025-80"),
    
    _6G_217_7035_20("6g-217-7035-20"),
    
    _6G_219_7045_40("6g-219-7045-40"),
    
    _6G_221_7055_20("6g-221-7055-20"),
    
    _6G_225_7075_20("6g-225-7075-20"),
    
    _6G_227_7085_40("6g-227-7085-40"),
    
    _6G_229_7095_20("6g-229-7095-20"),
    
    _6G_233_7115_20("6g-233-7115-20"),
    
    _60G_1_58320_2160("60g-1-58320-2160"),
    
    _60G_2_60480_2160("60g-2-60480-2160"),
    
    _60G_3_62640_2160("60g-3-62640-2160"),
    
    _60G_4_64800_2160("60g-4-64800-2160"),
    
    _60G_5_66960_2160("60g-5-66960-2160"),
    
    _60G_6_69120_2160("60g-6-69120-2160"),
    
    _60G_9_59400_4320("60g-9-59400-4320"),
    
    _60G_10_61560_4320("60g-10-61560-4320"),
    
    _60G_11_63720_4320("60g-11-63720-4320"),
    
    _60G_12_65880_4320("60g-12-65880-4320"),
    
    _60G_13_68040_4320("60g-13-68040-4320"),
    
    _60G_17_60480_6480("60g-17-60480-6480"),
    
    _60G_18_62640_6480("60g-18-62640-6480"),
    
    _60G_19_64800_6480("60g-19-64800-6480"),
    
    _60G_20_66960_6480("60g-20-66960-6480"),
    
    _60G_25_61560_6480("60g-25-61560-6480"),
    
    _60G_26_63720_6480("60g-26-63720-6480"),
    
    _60G_27_65880_6480("60g-27-65880-6480");

    private String value;

    RfChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RfChannelEnum fromValue(String value) {
      for (RfChannelEnum b : RfChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RfChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RfChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RfChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RfChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RfChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RF_CHANNEL = "rf_channel";
  @SerializedName(SERIALIZED_NAME_RF_CHANNEL)
  private RfChannelEnum rfChannel;

  public static final String SERIALIZED_NAME_RF_CHANNEL_FREQUENCY = "rf_channel_frequency";
  @SerializedName(SERIALIZED_NAME_RF_CHANNEL_FREQUENCY)
  private BigDecimal rfChannelFrequency;

  public static final String SERIALIZED_NAME_RF_CHANNEL_WIDTH = "rf_channel_width";
  @SerializedName(SERIALIZED_NAME_RF_CHANNEL_WIDTH)
  private BigDecimal rfChannelWidth;

  /**
   * Gets or Sets rfRole
   */
  @JsonAdapter(RfRoleEnum.Adapter.class)
  public enum RfRoleEnum {
    AP("ap"),
    
    STATION("station");

    private String value;

    RfRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RfRoleEnum fromValue(String value) {
      for (RfRoleEnum b : RfRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RfRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RfRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RfRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RfRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RfRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RF_ROLE = "rf_role";
  @SerializedName(SERIALIZED_NAME_RF_ROLE)
  private RfRoleEnum rfRole;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Integer speed;

  public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
  @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
  private Set<Integer> taggedVlans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TX_POWER = "tx_power";
  @SerializedName(SERIALIZED_NAME_TX_POWER)
  private Integer txPower;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VIRTUAL("virtual"),
    
    BRIDGE("bridge"),
    
    LAG("lag"),
    
    _100BASE_FX("100base-fx"),
    
    _100BASE_LFX("100base-lfx"),
    
    _100BASE_TX("100base-tx"),
    
    _100BASE_T1("100base-t1"),
    
    _1000BASE_T("1000base-t"),
    
    _2_5GBASE_T("2.5gbase-t"),
    
    _5GBASE_T("5gbase-t"),
    
    _10GBASE_T("10gbase-t"),
    
    _10GBASE_CX4("10gbase-cx4"),
    
    _1000BASE_X_GBIC("1000base-x-gbic"),
    
    _1000BASE_X_SFP("1000base-x-sfp"),
    
    _10GBASE_X_SFPP("10gbase-x-sfpp"),
    
    _10GBASE_X_XFP("10gbase-x-xfp"),
    
    _10GBASE_X_XENPAK("10gbase-x-xenpak"),
    
    _10GBASE_X_X2("10gbase-x-x2"),
    
    _25GBASE_X_SFP28("25gbase-x-sfp28"),
    
    _50GBASE_X_SFP56("50gbase-x-sfp56"),
    
    _40GBASE_X_QSFPP("40gbase-x-qsfpp"),
    
    _50GBASE_X_SFP28("50gbase-x-sfp28"),
    
    _100GBASE_X_CFP("100gbase-x-cfp"),
    
    _100GBASE_X_CFP2("100gbase-x-cfp2"),
    
    _200GBASE_X_CFP2("200gbase-x-cfp2"),
    
    _100GBASE_X_CFP4("100gbase-x-cfp4"),
    
    _100GBASE_X_CPAK("100gbase-x-cpak"),
    
    _100GBASE_X_QSFP28("100gbase-x-qsfp28"),
    
    _200GBASE_X_QSFP56("200gbase-x-qsfp56"),
    
    _400GBASE_X_QSFPDD("400gbase-x-qsfpdd"),
    
    _400GBASE_X_OSFP("400gbase-x-osfp"),
    
    _800GBASE_X_QSFPDD("800gbase-x-qsfpdd"),
    
    _800GBASE_X_OSFP("800gbase-x-osfp"),
    
    _1000BASE_KX("1000base-kx"),
    
    _10GBASE_KR("10gbase-kr"),
    
    _10GBASE_KX4("10gbase-kx4"),
    
    _25GBASE_KR("25gbase-kr"),
    
    _40GBASE_KR4("40gbase-kr4"),
    
    _50GBASE_KR("50gbase-kr"),
    
    _100GBASE_KP4("100gbase-kp4"),
    
    _100GBASE_KR2("100gbase-kr2"),
    
    _100GBASE_KR4("100gbase-kr4"),
    
    IEEE802_11A("ieee802.11a"),
    
    IEEE802_11G("ieee802.11g"),
    
    IEEE802_11N("ieee802.11n"),
    
    IEEE802_11AC("ieee802.11ac"),
    
    IEEE802_11AD("ieee802.11ad"),
    
    IEEE802_11AX("ieee802.11ax"),
    
    IEEE802_11AY("ieee802.11ay"),
    
    IEEE802_15_1("ieee802.15.1"),
    
    OTHER_WIRELESS("other-wireless"),
    
    GSM("gsm"),
    
    CDMA("cdma"),
    
    LTE("lte"),
    
    SONET_OC3("sonet-oc3"),
    
    SONET_OC12("sonet-oc12"),
    
    SONET_OC48("sonet-oc48"),
    
    SONET_OC192("sonet-oc192"),
    
    SONET_OC768("sonet-oc768"),
    
    SONET_OC1920("sonet-oc1920"),
    
    SONET_OC3840("sonet-oc3840"),
    
    _1GFC_SFP("1gfc-sfp"),
    
    _2GFC_SFP("2gfc-sfp"),
    
    _4GFC_SFP("4gfc-sfp"),
    
    _8GFC_SFPP("8gfc-sfpp"),
    
    _16GFC_SFPP("16gfc-sfpp"),
    
    _32GFC_SFP28("32gfc-sfp28"),
    
    _64GFC_QSFPP("64gfc-qsfpp"),
    
    _128GFC_QSFP28("128gfc-qsfp28"),
    
    INFINIBAND_SDR("infiniband-sdr"),
    
    INFINIBAND_DDR("infiniband-ddr"),
    
    INFINIBAND_QDR("infiniband-qdr"),
    
    INFINIBAND_FDR10("infiniband-fdr10"),
    
    INFINIBAND_FDR("infiniband-fdr"),
    
    INFINIBAND_EDR("infiniband-edr"),
    
    INFINIBAND_HDR("infiniband-hdr"),
    
    INFINIBAND_NDR("infiniband-ndr"),
    
    INFINIBAND_XDR("infiniband-xdr"),
    
    T1("t1"),
    
    E1("e1"),
    
    T3("t3"),
    
    E3("e3"),
    
    XDSL("xdsl"),
    
    DOCSIS("docsis"),
    
    GPON("gpon"),
    
    XG_PON("xg-pon"),
    
    XGS_PON("xgs-pon"),
    
    NG_PON2("ng-pon2"),
    
    EPON("epon"),
    
    _10G_EPON("10g-epon"),
    
    CISCO_STACKWISE("cisco-stackwise"),
    
    CISCO_STACKWISE_PLUS("cisco-stackwise-plus"),
    
    CISCO_FLEXSTACK("cisco-flexstack"),
    
    CISCO_FLEXSTACK_PLUS("cisco-flexstack-plus"),
    
    CISCO_STACKWISE_80("cisco-stackwise-80"),
    
    CISCO_STACKWISE_160("cisco-stackwise-160"),
    
    CISCO_STACKWISE_320("cisco-stackwise-320"),
    
    CISCO_STACKWISE_480("cisco-stackwise-480"),
    
    CISCO_STACKWISE_1T("cisco-stackwise-1t"),
    
    JUNIPER_VCP("juniper-vcp"),
    
    EXTREME_SUMMITSTACK("extreme-summitstack"),
    
    EXTREME_SUMMITSTACK_128("extreme-summitstack-128"),
    
    EXTREME_SUMMITSTACK_256("extreme-summitstack-256"),
    
    EXTREME_SUMMITSTACK_512("extreme-summitstack-512"),
    
    OTHER("other");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
  @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
  private Integer untaggedVlan;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VDCS = "vdcs";
  @SerializedName(SERIALIZED_NAME_VDCS)
  private Set<Integer> vdcs = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_VRF = "vrf";
  @SerializedName(SERIALIZED_NAME_VRF)
  private Integer vrf;

  public static final String SERIALIZED_NAME_WIRELESS_LANS = "wireless_lans";
  @SerializedName(SERIALIZED_NAME_WIRELESS_LANS)
  private Set<Integer> wirelessLans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WIRELESS_LINK = "wireless_link";
  @SerializedName(SERIALIZED_NAME_WIRELESS_LINK)
  private Integer wirelessLink;

  public static final String SERIALIZED_NAME_WWN = "wwn";
  @SerializedName(SERIALIZED_NAME_WWN)
  private String wwn;

  public WritableInterface() {
  }

  public WritableInterface(
     Boolean occupied, 
     String cableEnd, 
     List<String> connectedEndpoints, 
     Boolean connectedEndpointsReachable, 
     String connectedEndpointsType, 
     Integer countFhrpGroups, 
     Integer countIpaddresses, 
     OffsetDateTime created, 
     String display, 
     Integer id, 
     String l2vpnTermination, 
     OffsetDateTime lastUpdated, 
     List<String> linkPeers, 
     String linkPeersType, 
     URI url
  ) {
    this();
    this.occupied = occupied;
    this.cableEnd = cableEnd;
    this.connectedEndpoints = connectedEndpoints;
    this.connectedEndpointsReachable = connectedEndpointsReachable;
    this.connectedEndpointsType = connectedEndpointsType;
    this.countFhrpGroups = countFhrpGroups;
    this.countIpaddresses = countIpaddresses;
    this.created = created;
    this.display = display;
    this.id = id;
    this.l2vpnTermination = l2vpnTermination;
    this.lastUpdated = lastUpdated;
    this.linkPeers = linkPeers;
    this.linkPeersType = linkPeersType;
    this.url = url;
  }

  /**
   * Get occupied
   * @return occupied
   */
  @javax.annotation.Nullable
  public Boolean getOccupied() {
    return occupied;
  }



  public WritableInterface bridge(Integer bridge) {
    this.bridge = bridge;
    return this;
  }

  /**
   * Get bridge
   * @return bridge
   */
  @javax.annotation.Nullable
  public Integer getBridge() {
    return bridge;
  }

  public void setBridge(Integer bridge) {
    this.bridge = bridge;
  }


  public WritableInterface cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  /**
   * Get cable
   * @return cable
   */
  @javax.annotation.Nullable
  public NestedCable getCable() {
    return cable;
  }

  public void setCable(NestedCable cable) {
    this.cable = cable;
  }


  /**
   * Get cableEnd
   * @return cableEnd
   */
  @javax.annotation.Nullable
  public String getCableEnd() {
    return cableEnd;
  }



  /**
   *  Return the appropriate serializer for the type of connected object. 
   * @return connectedEndpoints
   */
  @javax.annotation.Nullable
  public List<String> getConnectedEndpoints() {
    return connectedEndpoints;
  }



  /**
   * Get connectedEndpointsReachable
   * @return connectedEndpointsReachable
   */
  @javax.annotation.Nullable
  public Boolean getConnectedEndpointsReachable() {
    return connectedEndpointsReachable;
  }



  /**
   * Get connectedEndpointsType
   * @return connectedEndpointsType
   */
  @javax.annotation.Nullable
  public String getConnectedEndpointsType() {
    return connectedEndpointsType;
  }



  /**
   * Get countFhrpGroups
   * @return countFhrpGroups
   */
  @javax.annotation.Nullable
  public Integer getCountFhrpGroups() {
    return countFhrpGroups;
  }



  /**
   * Get countIpaddresses
   * @return countIpaddresses
   */
  @javax.annotation.Nullable
  public Integer getCountIpaddresses() {
    return countIpaddresses;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public WritableInterface customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public WritableInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WritableInterface device(Integer device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public Integer getDevice() {
    return device;
  }

  public void setDevice(Integer device) {
    this.device = device;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public WritableInterface duplex(DuplexEnum duplex) {
    this.duplex = duplex;
    return this;
  }

  /**
   * Get duplex
   * @return duplex
   */
  @javax.annotation.Nullable
  public DuplexEnum getDuplex() {
    return duplex;
  }

  public void setDuplex(DuplexEnum duplex) {
    this.duplex = duplex;
  }


  public WritableInterface enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get l2vpnTermination
   * @return l2vpnTermination
   */
  @javax.annotation.Nullable
  public String getL2vpnTermination() {
    return l2vpnTermination;
  }



  public WritableInterface label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Physical label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public WritableInterface lag(Integer lag) {
    this.lag = lag;
    return this;
  }

  /**
   * Get lag
   * @return lag
   */
  @javax.annotation.Nullable
  public Integer getLag() {
    return lag;
  }

  public void setLag(Integer lag) {
    this.lag = lag;
  }


  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  /**
   *  Return the appropriate serializer for the link termination model. 
   * @return linkPeers
   */
  @javax.annotation.Nullable
  public List<String> getLinkPeers() {
    return linkPeers;
  }



  /**
   * Get linkPeersType
   * @return linkPeersType
   */
  @javax.annotation.Nullable
  public String getLinkPeersType() {
    return linkPeersType;
  }



  public WritableInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public WritableInterface markConnected(Boolean markConnected) {
    this.markConnected = markConnected;
    return this;
  }

  /**
   * Treat as if a cable is connected
   * @return markConnected
   */
  @javax.annotation.Nullable
  public Boolean getMarkConnected() {
    return markConnected;
  }

  public void setMarkConnected(Boolean markConnected) {
    this.markConnected = markConnected;
  }


  public WritableInterface mgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
    return this;
  }

  /**
   * This interface is used only for out-of-band management
   * @return mgmtOnly
   */
  @javax.annotation.Nullable
  public Boolean getMgmtOnly() {
    return mgmtOnly;
  }

  public void setMgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
  }


  public WritableInterface mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public WritableInterface module(Integer module) {
    this.module = module;
    return this;
  }

  /**
   * Get module
   * @return module
   */
  @javax.annotation.Nullable
  public Integer getModule() {
    return module;
  }

  public void setModule(Integer module) {
    this.module = module;
  }


  public WritableInterface mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * Get mtu
   * minimum: 1
   * maximum: 65536
   * @return mtu
   */
  @javax.annotation.Nullable
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  public WritableInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritableInterface parent(Integer parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public Integer getParent() {
    return parent;
  }

  public void setParent(Integer parent) {
    this.parent = parent;
  }


  public WritableInterface poeMode(PoeModeEnum poeMode) {
    this.poeMode = poeMode;
    return this;
  }

  /**
   * Get poeMode
   * @return poeMode
   */
  @javax.annotation.Nullable
  public PoeModeEnum getPoeMode() {
    return poeMode;
  }

  public void setPoeMode(PoeModeEnum poeMode) {
    this.poeMode = poeMode;
  }


  public WritableInterface poeType(PoeTypeEnum poeType) {
    this.poeType = poeType;
    return this;
  }

  /**
   * Get poeType
   * @return poeType
   */
  @javax.annotation.Nullable
  public PoeTypeEnum getPoeType() {
    return poeType;
  }

  public void setPoeType(PoeTypeEnum poeType) {
    this.poeType = poeType;
  }


  public WritableInterface rfChannel(RfChannelEnum rfChannel) {
    this.rfChannel = rfChannel;
    return this;
  }

  /**
   * Get rfChannel
   * @return rfChannel
   */
  @javax.annotation.Nullable
  public RfChannelEnum getRfChannel() {
    return rfChannel;
  }

  public void setRfChannel(RfChannelEnum rfChannel) {
    this.rfChannel = rfChannel;
  }


  public WritableInterface rfChannelFrequency(BigDecimal rfChannelFrequency) {
    this.rfChannelFrequency = rfChannelFrequency;
    return this;
  }

  /**
   * Get rfChannelFrequency
   * @return rfChannelFrequency
   */
  @javax.annotation.Nullable
  public BigDecimal getRfChannelFrequency() {
    return rfChannelFrequency;
  }

  public void setRfChannelFrequency(BigDecimal rfChannelFrequency) {
    this.rfChannelFrequency = rfChannelFrequency;
  }


  public WritableInterface rfChannelWidth(BigDecimal rfChannelWidth) {
    this.rfChannelWidth = rfChannelWidth;
    return this;
  }

  /**
   * Get rfChannelWidth
   * @return rfChannelWidth
   */
  @javax.annotation.Nullable
  public BigDecimal getRfChannelWidth() {
    return rfChannelWidth;
  }

  public void setRfChannelWidth(BigDecimal rfChannelWidth) {
    this.rfChannelWidth = rfChannelWidth;
  }


  public WritableInterface rfRole(RfRoleEnum rfRole) {
    this.rfRole = rfRole;
    return this;
  }

  /**
   * Get rfRole
   * @return rfRole
   */
  @javax.annotation.Nullable
  public RfRoleEnum getRfRole() {
    return rfRole;
  }

  public void setRfRole(RfRoleEnum rfRole) {
    this.rfRole = rfRole;
  }


  public WritableInterface speed(Integer speed) {
    this.speed = speed;
    return this;
  }

  /**
   * Get speed
   * minimum: 0
   * maximum: 2147483647
   * @return speed
   */
  @javax.annotation.Nullable
  public Integer getSpeed() {
    return speed;
  }

  public void setSpeed(Integer speed) {
    this.speed = speed;
  }


  public WritableInterface taggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
    return this;
  }

  public WritableInterface addTaggedVlansItem(Integer taggedVlansItem) {
    if (this.taggedVlans == null) {
      this.taggedVlans = new LinkedHashSet<>();
    }
    this.taggedVlans.add(taggedVlansItem);
    return this;
  }

  /**
   * Get taggedVlans
   * @return taggedVlans
   */
  @javax.annotation.Nullable
  public Set<Integer> getTaggedVlans() {
    return taggedVlans;
  }

  public void setTaggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
  }


  public WritableInterface tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public WritableInterface addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public WritableInterface txPower(Integer txPower) {
    this.txPower = txPower;
    return this;
  }

  /**
   * Get txPower
   * minimum: 0
   * maximum: 127
   * @return txPower
   */
  @javax.annotation.Nullable
  public Integer getTxPower() {
    return txPower;
  }

  public void setTxPower(Integer txPower) {
    this.txPower = txPower;
  }


  public WritableInterface type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public WritableInterface untaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
    return this;
  }

  /**
   * Get untaggedVlan
   * @return untaggedVlan
   */
  @javax.annotation.Nullable
  public Integer getUntaggedVlan() {
    return untaggedVlan;
  }

  public void setUntaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public WritableInterface vdcs(Set<Integer> vdcs) {
    this.vdcs = vdcs;
    return this;
  }

  public WritableInterface addVdcsItem(Integer vdcsItem) {
    if (this.vdcs == null) {
      this.vdcs = new LinkedHashSet<>();
    }
    this.vdcs.add(vdcsItem);
    return this;
  }

  /**
   * Get vdcs
   * @return vdcs
   */
  @javax.annotation.Nonnull
  public Set<Integer> getVdcs() {
    return vdcs;
  }

  public void setVdcs(Set<Integer> vdcs) {
    this.vdcs = vdcs;
  }


  public WritableInterface vrf(Integer vrf) {
    this.vrf = vrf;
    return this;
  }

  /**
   * Get vrf
   * @return vrf
   */
  @javax.annotation.Nullable
  public Integer getVrf() {
    return vrf;
  }

  public void setVrf(Integer vrf) {
    this.vrf = vrf;
  }


  public WritableInterface wirelessLans(Set<Integer> wirelessLans) {
    this.wirelessLans = wirelessLans;
    return this;
  }

  public WritableInterface addWirelessLansItem(Integer wirelessLansItem) {
    if (this.wirelessLans == null) {
      this.wirelessLans = new LinkedHashSet<>();
    }
    this.wirelessLans.add(wirelessLansItem);
    return this;
  }

  /**
   * Get wirelessLans
   * @return wirelessLans
   */
  @javax.annotation.Nullable
  public Set<Integer> getWirelessLans() {
    return wirelessLans;
  }

  public void setWirelessLans(Set<Integer> wirelessLans) {
    this.wirelessLans = wirelessLans;
  }


  public WritableInterface wirelessLink(Integer wirelessLink) {
    this.wirelessLink = wirelessLink;
    return this;
  }

  /**
   * Get wirelessLink
   * @return wirelessLink
   */
  @javax.annotation.Nullable
  public Integer getWirelessLink() {
    return wirelessLink;
  }

  public void setWirelessLink(Integer wirelessLink) {
    this.wirelessLink = wirelessLink;
  }


  public WritableInterface wwn(String wwn) {
    this.wwn = wwn;
    return this;
  }

  /**
   * 64-bit World Wide Name
   * @return wwn
   */
  @javax.annotation.Nullable
  public String getWwn() {
    return wwn;
  }

  public void setWwn(String wwn) {
    this.wwn = wwn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableInterface writableInterface = (WritableInterface) o;
    return Objects.equals(this.occupied, writableInterface.occupied) &&
        Objects.equals(this.bridge, writableInterface.bridge) &&
        Objects.equals(this.cable, writableInterface.cable) &&
        Objects.equals(this.cableEnd, writableInterface.cableEnd) &&
        Objects.equals(this.connectedEndpoints, writableInterface.connectedEndpoints) &&
        Objects.equals(this.connectedEndpointsReachable, writableInterface.connectedEndpointsReachable) &&
        Objects.equals(this.connectedEndpointsType, writableInterface.connectedEndpointsType) &&
        Objects.equals(this.countFhrpGroups, writableInterface.countFhrpGroups) &&
        Objects.equals(this.countIpaddresses, writableInterface.countIpaddresses) &&
        Objects.equals(this.created, writableInterface.created) &&
        Objects.equals(this.customFields, writableInterface.customFields) &&
        Objects.equals(this.description, writableInterface.description) &&
        Objects.equals(this.device, writableInterface.device) &&
        Objects.equals(this.display, writableInterface.display) &&
        Objects.equals(this.duplex, writableInterface.duplex) &&
        Objects.equals(this.enabled, writableInterface.enabled) &&
        Objects.equals(this.id, writableInterface.id) &&
        Objects.equals(this.l2vpnTermination, writableInterface.l2vpnTermination) &&
        Objects.equals(this.label, writableInterface.label) &&
        Objects.equals(this.lag, writableInterface.lag) &&
        Objects.equals(this.lastUpdated, writableInterface.lastUpdated) &&
        Objects.equals(this.linkPeers, writableInterface.linkPeers) &&
        Objects.equals(this.linkPeersType, writableInterface.linkPeersType) &&
        Objects.equals(this.macAddress, writableInterface.macAddress) &&
        Objects.equals(this.markConnected, writableInterface.markConnected) &&
        Objects.equals(this.mgmtOnly, writableInterface.mgmtOnly) &&
        Objects.equals(this.mode, writableInterface.mode) &&
        Objects.equals(this.module, writableInterface.module) &&
        Objects.equals(this.mtu, writableInterface.mtu) &&
        Objects.equals(this.name, writableInterface.name) &&
        Objects.equals(this.parent, writableInterface.parent) &&
        Objects.equals(this.poeMode, writableInterface.poeMode) &&
        Objects.equals(this.poeType, writableInterface.poeType) &&
        Objects.equals(this.rfChannel, writableInterface.rfChannel) &&
        Objects.equals(this.rfChannelFrequency, writableInterface.rfChannelFrequency) &&
        Objects.equals(this.rfChannelWidth, writableInterface.rfChannelWidth) &&
        Objects.equals(this.rfRole, writableInterface.rfRole) &&
        Objects.equals(this.speed, writableInterface.speed) &&
        Objects.equals(this.taggedVlans, writableInterface.taggedVlans) &&
        Objects.equals(this.tags, writableInterface.tags) &&
        Objects.equals(this.txPower, writableInterface.txPower) &&
        Objects.equals(this.type, writableInterface.type) &&
        Objects.equals(this.untaggedVlan, writableInterface.untaggedVlan) &&
        Objects.equals(this.url, writableInterface.url) &&
        Objects.equals(this.vdcs, writableInterface.vdcs) &&
        Objects.equals(this.vrf, writableInterface.vrf) &&
        Objects.equals(this.wirelessLans, writableInterface.wirelessLans) &&
        Objects.equals(this.wirelessLink, writableInterface.wirelessLink) &&
        Objects.equals(this.wwn, writableInterface.wwn);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(occupied, bridge, cable, cableEnd, connectedEndpoints, connectedEndpointsReachable, connectedEndpointsType, countFhrpGroups, countIpaddresses, created, customFields, description, device, display, duplex, enabled, id, l2vpnTermination, label, lag, lastUpdated, linkPeers, linkPeersType, macAddress, markConnected, mgmtOnly, mode, module, mtu, name, parent, poeMode, poeType, rfChannel, rfChannelFrequency, rfChannelWidth, rfRole, speed, taggedVlans, tags, txPower, type, untaggedVlan, url, vdcs, vrf, wirelessLans, wirelessLink, wwn);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableInterface {\n");
    sb.append("    occupied: ").append(toIndentedString(occupied)).append("\n");
    sb.append("    bridge: ").append(toIndentedString(bridge)).append("\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    cableEnd: ").append(toIndentedString(cableEnd)).append("\n");
    sb.append("    connectedEndpoints: ").append(toIndentedString(connectedEndpoints)).append("\n");
    sb.append("    connectedEndpointsReachable: ").append(toIndentedString(connectedEndpointsReachable)).append("\n");
    sb.append("    connectedEndpointsType: ").append(toIndentedString(connectedEndpointsType)).append("\n");
    sb.append("    countFhrpGroups: ").append(toIndentedString(countFhrpGroups)).append("\n");
    sb.append("    countIpaddresses: ").append(toIndentedString(countIpaddresses)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    duplex: ").append(toIndentedString(duplex)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    l2vpnTermination: ").append(toIndentedString(l2vpnTermination)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    linkPeers: ").append(toIndentedString(linkPeers)).append("\n");
    sb.append("    linkPeersType: ").append(toIndentedString(linkPeersType)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    markConnected: ").append(toIndentedString(markConnected)).append("\n");
    sb.append("    mgmtOnly: ").append(toIndentedString(mgmtOnly)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    poeMode: ").append(toIndentedString(poeMode)).append("\n");
    sb.append("    poeType: ").append(toIndentedString(poeType)).append("\n");
    sb.append("    rfChannel: ").append(toIndentedString(rfChannel)).append("\n");
    sb.append("    rfChannelFrequency: ").append(toIndentedString(rfChannelFrequency)).append("\n");
    sb.append("    rfChannelWidth: ").append(toIndentedString(rfChannelWidth)).append("\n");
    sb.append("    rfRole: ").append(toIndentedString(rfRole)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    txPower: ").append(toIndentedString(txPower)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vdcs: ").append(toIndentedString(vdcs)).append("\n");
    sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
    sb.append("    wirelessLans: ").append(toIndentedString(wirelessLans)).append("\n");
    sb.append("    wirelessLink: ").append(toIndentedString(wirelessLink)).append("\n");
    sb.append("    wwn: ").append(toIndentedString(wwn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_occupied");
    openapiFields.add("bridge");
    openapiFields.add("cable");
    openapiFields.add("cable_end");
    openapiFields.add("connected_endpoints");
    openapiFields.add("connected_endpoints_reachable");
    openapiFields.add("connected_endpoints_type");
    openapiFields.add("count_fhrp_groups");
    openapiFields.add("count_ipaddresses");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("display");
    openapiFields.add("duplex");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("l2vpn_termination");
    openapiFields.add("label");
    openapiFields.add("lag");
    openapiFields.add("last_updated");
    openapiFields.add("link_peers");
    openapiFields.add("link_peers_type");
    openapiFields.add("mac_address");
    openapiFields.add("mark_connected");
    openapiFields.add("mgmt_only");
    openapiFields.add("mode");
    openapiFields.add("module");
    openapiFields.add("mtu");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("poe_mode");
    openapiFields.add("poe_type");
    openapiFields.add("rf_channel");
    openapiFields.add("rf_channel_frequency");
    openapiFields.add("rf_channel_width");
    openapiFields.add("rf_role");
    openapiFields.add("speed");
    openapiFields.add("tagged_vlans");
    openapiFields.add("tags");
    openapiFields.add("tx_power");
    openapiFields.add("type");
    openapiFields.add("untagged_vlan");
    openapiFields.add("url");
    openapiFields.add("vdcs");
    openapiFields.add("vrf");
    openapiFields.add("wireless_lans");
    openapiFields.add("wireless_link");
    openapiFields.add("wwn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("vdcs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableInterface is not found in the empty JSON string", WritableInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cable`
      if (jsonObj.get("cable") != null && !jsonObj.get("cable").isJsonNull()) {
        NestedCable.validateJsonElement(jsonObj.get("cable"));
      }
      if ((jsonObj.get("cable_end") != null && !jsonObj.get("cable_end").isJsonNull()) && !jsonObj.get("cable_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cable_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cable_end").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("connected_endpoints") != null && !jsonObj.get("connected_endpoints").isJsonNull() && !jsonObj.get("connected_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("connected_endpoints").toString()));
      }
      if ((jsonObj.get("connected_endpoints_type") != null && !jsonObj.get("connected_endpoints_type").isJsonNull()) && !jsonObj.get("connected_endpoints_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoints_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("duplex") != null && !jsonObj.get("duplex").isJsonNull()) && !jsonObj.get("duplex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplex").toString()));
      }
      // validate the optional field `duplex`
      if (jsonObj.get("duplex") != null && !jsonObj.get("duplex").isJsonNull()) {
        DuplexEnum.validateJsonElement(jsonObj.get("duplex"));
      }
      if ((jsonObj.get("l2vpn_termination") != null && !jsonObj.get("l2vpn_termination").isJsonNull()) && !jsonObj.get("l2vpn_termination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `l2vpn_termination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("l2vpn_termination").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("link_peers") != null && !jsonObj.get("link_peers").isJsonNull() && !jsonObj.get("link_peers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_peers` to be an array in the JSON string but got `%s`", jsonObj.get("link_peers").toString()));
      }
      if ((jsonObj.get("link_peers_type") != null && !jsonObj.get("link_peers_type").isJsonNull()) && !jsonObj.get("link_peers_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_peers_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_peers_type").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("poe_mode") != null && !jsonObj.get("poe_mode").isJsonNull()) && !jsonObj.get("poe_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poe_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poe_mode").toString()));
      }
      // validate the optional field `poe_mode`
      if (jsonObj.get("poe_mode") != null && !jsonObj.get("poe_mode").isJsonNull()) {
        PoeModeEnum.validateJsonElement(jsonObj.get("poe_mode"));
      }
      if ((jsonObj.get("poe_type") != null && !jsonObj.get("poe_type").isJsonNull()) && !jsonObj.get("poe_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poe_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poe_type").toString()));
      }
      // validate the optional field `poe_type`
      if (jsonObj.get("poe_type") != null && !jsonObj.get("poe_type").isJsonNull()) {
        PoeTypeEnum.validateJsonElement(jsonObj.get("poe_type"));
      }
      if ((jsonObj.get("rf_channel") != null && !jsonObj.get("rf_channel").isJsonNull()) && !jsonObj.get("rf_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rf_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rf_channel").toString()));
      }
      // validate the optional field `rf_channel`
      if (jsonObj.get("rf_channel") != null && !jsonObj.get("rf_channel").isJsonNull()) {
        RfChannelEnum.validateJsonElement(jsonObj.get("rf_channel"));
      }
      if ((jsonObj.get("rf_role") != null && !jsonObj.get("rf_role").isJsonNull()) && !jsonObj.get("rf_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rf_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rf_role").toString()));
      }
      // validate the optional field `rf_role`
      if (jsonObj.get("rf_role") != null && !jsonObj.get("rf_role").isJsonNull()) {
        RfRoleEnum.validateJsonElement(jsonObj.get("rf_role"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagged_vlans") != null && !jsonObj.get("tagged_vlans").isJsonNull() && !jsonObj.get("tagged_vlans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("vdcs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("vdcs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vdcs` to be an array in the JSON string but got `%s`", jsonObj.get("vdcs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wireless_lans") != null && !jsonObj.get("wireless_lans").isJsonNull() && !jsonObj.get("wireless_lans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wireless_lans` to be an array in the JSON string but got `%s`", jsonObj.get("wireless_lans").toString()));
      }
      if ((jsonObj.get("wwn") != null && !jsonObj.get("wwn").isJsonNull()) && !jsonObj.get("wwn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wwn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wwn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableInterface>() {
           @Override
           public void write(JsonWriter out, WritableInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableInterface
   * @throws IOException if the JSON string is invalid with respect to WritableInterface
   */
  public static WritableInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableInterface.class);
  }

  /**
   * Convert an instance of WritableInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

