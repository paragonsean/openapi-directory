/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.NestedRouteTarget;
import org.openapitools.client.model.NestedTag;
import org.openapitools.client.model.NestedTenant;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VRF
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VRF {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ENFORCE_UNIQUE = "enforce_unique";
  @SerializedName(SERIALIZED_NAME_ENFORCE_UNIQUE)
  private Boolean enforceUnique;

  public static final String SERIALIZED_NAME_EXPORT_TARGETS = "export_targets";
  @SerializedName(SERIALIZED_NAME_EXPORT_TARGETS)
  private Set<NestedRouteTarget> exportTargets = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMPORT_TARGETS = "import_targets";
  @SerializedName(SERIALIZED_NAME_IMPORT_TARGETS)
  private Set<NestedRouteTarget> importTargets = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_IPADDRESS_COUNT = "ipaddress_count";
  @SerializedName(SERIALIZED_NAME_IPADDRESS_COUNT)
  private Integer ipaddressCount;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFIX_COUNT = "prefix_count";
  @SerializedName(SERIALIZED_NAME_PREFIX_COUNT)
  private Integer prefixCount;

  public static final String SERIALIZED_NAME_RD = "rd";
  @SerializedName(SERIALIZED_NAME_RD)
  private String rd;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private NestedTenant tenant;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public VRF() {
  }

  public VRF(
     OffsetDateTime created, 
     String display, 
     Integer id, 
     Integer ipaddressCount, 
     OffsetDateTime lastUpdated, 
     Integer prefixCount, 
     URI url
  ) {
    this();
    this.created = created;
    this.display = display;
    this.id = id;
    this.ipaddressCount = ipaddressCount;
    this.lastUpdated = lastUpdated;
    this.prefixCount = prefixCount;
    this.url = url;
  }

  public VRF comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public VRF customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public VRF description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public VRF enforceUnique(Boolean enforceUnique) {
    this.enforceUnique = enforceUnique;
    return this;
  }

  /**
   * Prevent duplicate prefixes/IP addresses within this VRF
   * @return enforceUnique
   */
  @javax.annotation.Nullable
  public Boolean getEnforceUnique() {
    return enforceUnique;
  }

  public void setEnforceUnique(Boolean enforceUnique) {
    this.enforceUnique = enforceUnique;
  }


  public VRF exportTargets(Set<NestedRouteTarget> exportTargets) {
    this.exportTargets = exportTargets;
    return this;
  }

  public VRF addExportTargetsItem(NestedRouteTarget exportTargetsItem) {
    if (this.exportTargets == null) {
      this.exportTargets = new LinkedHashSet<>();
    }
    this.exportTargets.add(exportTargetsItem);
    return this;
  }

  /**
   * Get exportTargets
   * @return exportTargets
   */
  @javax.annotation.Nullable
  public Set<NestedRouteTarget> getExportTargets() {
    return exportTargets;
  }

  public void setExportTargets(Set<NestedRouteTarget> exportTargets) {
    this.exportTargets = exportTargets;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public VRF importTargets(Set<NestedRouteTarget> importTargets) {
    this.importTargets = importTargets;
    return this;
  }

  public VRF addImportTargetsItem(NestedRouteTarget importTargetsItem) {
    if (this.importTargets == null) {
      this.importTargets = new LinkedHashSet<>();
    }
    this.importTargets.add(importTargetsItem);
    return this;
  }

  /**
   * Get importTargets
   * @return importTargets
   */
  @javax.annotation.Nullable
  public Set<NestedRouteTarget> getImportTargets() {
    return importTargets;
  }

  public void setImportTargets(Set<NestedRouteTarget> importTargets) {
    this.importTargets = importTargets;
  }


  /**
   * Get ipaddressCount
   * @return ipaddressCount
   */
  @javax.annotation.Nullable
  public Integer getIpaddressCount() {
    return ipaddressCount;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public VRF name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get prefixCount
   * @return prefixCount
   */
  @javax.annotation.Nullable
  public Integer getPrefixCount() {
    return prefixCount;
  }



  public VRF rd(String rd) {
    this.rd = rd;
    return this;
  }

  /**
   * Unique route distinguisher (as defined in RFC 4364)
   * @return rd
   */
  @javax.annotation.Nullable
  public String getRd() {
    return rd;
  }

  public void setRd(String rd) {
    this.rd = rd;
  }


  public VRF tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public VRF addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public VRF tenant(NestedTenant tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public NestedTenant getTenant() {
    return tenant;
  }

  public void setTenant(NestedTenant tenant) {
    this.tenant = tenant;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VRF VRF = (VRF) o;
    return Objects.equals(this.comments, VRF.comments) &&
        Objects.equals(this.created, VRF.created) &&
        Objects.equals(this.customFields, VRF.customFields) &&
        Objects.equals(this.description, VRF.description) &&
        Objects.equals(this.display, VRF.display) &&
        Objects.equals(this.enforceUnique, VRF.enforceUnique) &&
        Objects.equals(this.exportTargets, VRF.exportTargets) &&
        Objects.equals(this.id, VRF.id) &&
        Objects.equals(this.importTargets, VRF.importTargets) &&
        Objects.equals(this.ipaddressCount, VRF.ipaddressCount) &&
        Objects.equals(this.lastUpdated, VRF.lastUpdated) &&
        Objects.equals(this.name, VRF.name) &&
        Objects.equals(this.prefixCount, VRF.prefixCount) &&
        Objects.equals(this.rd, VRF.rd) &&
        Objects.equals(this.tags, VRF.tags) &&
        Objects.equals(this.tenant, VRF.tenant) &&
        Objects.equals(this.url, VRF.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, created, customFields, description, display, enforceUnique, exportTargets, id, importTargets, ipaddressCount, lastUpdated, name, prefixCount, rd, tags, tenant, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VRF {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    enforceUnique: ").append(toIndentedString(enforceUnique)).append("\n");
    sb.append("    exportTargets: ").append(toIndentedString(exportTargets)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importTargets: ").append(toIndentedString(importTargets)).append("\n");
    sb.append("    ipaddressCount: ").append(toIndentedString(ipaddressCount)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prefixCount: ").append(toIndentedString(prefixCount)).append("\n");
    sb.append("    rd: ").append(toIndentedString(rd)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("enforce_unique");
    openapiFields.add("export_targets");
    openapiFields.add("id");
    openapiFields.add("import_targets");
    openapiFields.add("ipaddress_count");
    openapiFields.add("last_updated");
    openapiFields.add("name");
    openapiFields.add("prefix_count");
    openapiFields.add("rd");
    openapiFields.add("tags");
    openapiFields.add("tenant");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VRF
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VRF.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VRF is not found in the empty JSON string", VRF.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VRF.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VRF` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VRF.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (jsonObj.get("export_targets") != null && !jsonObj.get("export_targets").isJsonNull()) {
        JsonArray jsonArrayexportTargets = jsonObj.getAsJsonArray("export_targets");
        if (jsonArrayexportTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("export_targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `export_targets` to be an array in the JSON string but got `%s`", jsonObj.get("export_targets").toString()));
          }

          // validate the optional field `export_targets` (array)
          for (int i = 0; i < jsonArrayexportTargets.size(); i++) {
            NestedRouteTarget.validateJsonElement(jsonArrayexportTargets.get(i));
          };
        }
      }
      if (jsonObj.get("import_targets") != null && !jsonObj.get("import_targets").isJsonNull()) {
        JsonArray jsonArrayimportTargets = jsonObj.getAsJsonArray("import_targets");
        if (jsonArrayimportTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("import_targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `import_targets` to be an array in the JSON string but got `%s`", jsonObj.get("import_targets").toString()));
          }

          // validate the optional field `import_targets` (array)
          for (int i = 0; i < jsonArrayimportTargets.size(); i++) {
            NestedRouteTarget.validateJsonElement(jsonArrayimportTargets.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rd") != null && !jsonObj.get("rd").isJsonNull()) && !jsonObj.get("rd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rd").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `tenant`
      if (jsonObj.get("tenant") != null && !jsonObj.get("tenant").isJsonNull()) {
        NestedTenant.validateJsonElement(jsonObj.get("tenant"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VRF.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VRF' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VRF> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VRF.class));

       return (TypeAdapter<T>) new TypeAdapter<VRF>() {
           @Override
           public void write(JsonWriter out, VRF value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VRF read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VRF given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VRF
   * @throws IOException if the JSON string is invalid with respect to VRF
   */
  public static VRF fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VRF.class);
  }

  /**
   * Convert an instance of VRF to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

