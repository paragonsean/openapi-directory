/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NestedCable;
import org.openapitools.client.model.NestedTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritablePowerFeed
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritablePowerFeed {
  public static final String SERIALIZED_NAME_OCCUPIED = "_occupied";
  @SerializedName(SERIALIZED_NAME_OCCUPIED)
  private Boolean occupied;

  public static final String SERIALIZED_NAME_AMPERAGE = "amperage";
  @SerializedName(SERIALIZED_NAME_AMPERAGE)
  private Integer amperage;

  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private NestedCable cable;

  public static final String SERIALIZED_NAME_CABLE_END = "cable_end";
  @SerializedName(SERIALIZED_NAME_CABLE_END)
  private String cableEnd;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS = "connected_endpoints";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS)
  private List<String> connectedEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE = "connected_endpoints_reachable";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE)
  private Boolean connectedEndpointsReachable;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE = "connected_endpoints_type";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE)
  private String connectedEndpointsType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LINK_PEERS = "link_peers";
  @SerializedName(SERIALIZED_NAME_LINK_PEERS)
  private List<String> linkPeers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK_PEERS_TYPE = "link_peers_type";
  @SerializedName(SERIALIZED_NAME_LINK_PEERS_TYPE)
  private String linkPeersType;

  public static final String SERIALIZED_NAME_MARK_CONNECTED = "mark_connected";
  @SerializedName(SERIALIZED_NAME_MARK_CONNECTED)
  private Boolean markConnected;

  public static final String SERIALIZED_NAME_MAX_UTILIZATION = "max_utilization";
  @SerializedName(SERIALIZED_NAME_MAX_UTILIZATION)
  private Integer maxUtilization;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets phase
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    SINGLE_PHASE("single-phase"),
    
    THREE_PHASE("three-phase");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_POWER_PANEL = "power_panel";
  @SerializedName(SERIALIZED_NAME_POWER_PANEL)
  private Integer powerPanel;

  public static final String SERIALIZED_NAME_RACK = "rack";
  @SerializedName(SERIALIZED_NAME_RACK)
  private Integer rack;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OFFLINE("offline"),
    
    ACTIVE("active"),
    
    PLANNED("planned"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets supply
   */
  @JsonAdapter(SupplyEnum.Adapter.class)
  public enum SupplyEnum {
    AC("ac"),
    
    DC("dc");

    private String value;

    SupplyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupplyEnum fromValue(String value) {
      for (SupplyEnum b : SupplyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupplyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupplyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupplyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupplyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupplyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPLY = "supply";
  @SerializedName(SERIALIZED_NAME_SUPPLY)
  private SupplyEnum supply;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PRIMARY("primary"),
    
    REDUNDANT("redundant");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VOLTAGE = "voltage";
  @SerializedName(SERIALIZED_NAME_VOLTAGE)
  private Integer voltage;

  public WritablePowerFeed() {
  }

  public WritablePowerFeed(
     Boolean occupied, 
     String cableEnd, 
     List<String> connectedEndpoints, 
     Boolean connectedEndpointsReachable, 
     String connectedEndpointsType, 
     OffsetDateTime created, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     List<String> linkPeers, 
     String linkPeersType, 
     URI url
  ) {
    this();
    this.occupied = occupied;
    this.cableEnd = cableEnd;
    this.connectedEndpoints = connectedEndpoints;
    this.connectedEndpointsReachable = connectedEndpointsReachable;
    this.connectedEndpointsType = connectedEndpointsType;
    this.created = created;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.linkPeers = linkPeers;
    this.linkPeersType = linkPeersType;
    this.url = url;
  }

  /**
   * Get occupied
   * @return occupied
   */
  @javax.annotation.Nullable
  public Boolean getOccupied() {
    return occupied;
  }



  public WritablePowerFeed amperage(Integer amperage) {
    this.amperage = amperage;
    return this;
  }

  /**
   * Get amperage
   * minimum: 1
   * maximum: 32767
   * @return amperage
   */
  @javax.annotation.Nullable
  public Integer getAmperage() {
    return amperage;
  }

  public void setAmperage(Integer amperage) {
    this.amperage = amperage;
  }


  public WritablePowerFeed cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  /**
   * Get cable
   * @return cable
   */
  @javax.annotation.Nullable
  public NestedCable getCable() {
    return cable;
  }

  public void setCable(NestedCable cable) {
    this.cable = cable;
  }


  /**
   * Get cableEnd
   * @return cableEnd
   */
  @javax.annotation.Nullable
  public String getCableEnd() {
    return cableEnd;
  }



  public WritablePowerFeed comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   *  Return the appropriate serializer for the type of connected object. 
   * @return connectedEndpoints
   */
  @javax.annotation.Nullable
  public List<String> getConnectedEndpoints() {
    return connectedEndpoints;
  }



  /**
   * Get connectedEndpointsReachable
   * @return connectedEndpointsReachable
   */
  @javax.annotation.Nullable
  public Boolean getConnectedEndpointsReachable() {
    return connectedEndpointsReachable;
  }



  /**
   * Get connectedEndpointsType
   * @return connectedEndpointsType
   */
  @javax.annotation.Nullable
  public String getConnectedEndpointsType() {
    return connectedEndpointsType;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public WritablePowerFeed customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public WritablePowerFeed description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  /**
   *  Return the appropriate serializer for the link termination model. 
   * @return linkPeers
   */
  @javax.annotation.Nullable
  public List<String> getLinkPeers() {
    return linkPeers;
  }



  /**
   * Get linkPeersType
   * @return linkPeersType
   */
  @javax.annotation.Nullable
  public String getLinkPeersType() {
    return linkPeersType;
  }



  public WritablePowerFeed markConnected(Boolean markConnected) {
    this.markConnected = markConnected;
    return this;
  }

  /**
   * Treat as if a cable is connected
   * @return markConnected
   */
  @javax.annotation.Nullable
  public Boolean getMarkConnected() {
    return markConnected;
  }

  public void setMarkConnected(Boolean markConnected) {
    this.markConnected = markConnected;
  }


  public WritablePowerFeed maxUtilization(Integer maxUtilization) {
    this.maxUtilization = maxUtilization;
    return this;
  }

  /**
   * Maximum permissible draw (percentage)
   * minimum: 1
   * maximum: 100
   * @return maxUtilization
   */
  @javax.annotation.Nullable
  public Integer getMaxUtilization() {
    return maxUtilization;
  }

  public void setMaxUtilization(Integer maxUtilization) {
    this.maxUtilization = maxUtilization;
  }


  public WritablePowerFeed name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritablePowerFeed phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }


  public WritablePowerFeed powerPanel(Integer powerPanel) {
    this.powerPanel = powerPanel;
    return this;
  }

  /**
   * Get powerPanel
   * @return powerPanel
   */
  @javax.annotation.Nonnull
  public Integer getPowerPanel() {
    return powerPanel;
  }

  public void setPowerPanel(Integer powerPanel) {
    this.powerPanel = powerPanel;
  }


  public WritablePowerFeed rack(Integer rack) {
    this.rack = rack;
    return this;
  }

  /**
   * Get rack
   * @return rack
   */
  @javax.annotation.Nullable
  public Integer getRack() {
    return rack;
  }

  public void setRack(Integer rack) {
    this.rack = rack;
  }


  public WritablePowerFeed status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WritablePowerFeed supply(SupplyEnum supply) {
    this.supply = supply;
    return this;
  }

  /**
   * Get supply
   * @return supply
   */
  @javax.annotation.Nullable
  public SupplyEnum getSupply() {
    return supply;
  }

  public void setSupply(SupplyEnum supply) {
    this.supply = supply;
  }


  public WritablePowerFeed tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public WritablePowerFeed addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public WritablePowerFeed type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public WritablePowerFeed voltage(Integer voltage) {
    this.voltage = voltage;
    return this;
  }

  /**
   * Get voltage
   * minimum: -32768
   * maximum: 32767
   * @return voltage
   */
  @javax.annotation.Nullable
  public Integer getVoltage() {
    return voltage;
  }

  public void setVoltage(Integer voltage) {
    this.voltage = voltage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritablePowerFeed writablePowerFeed = (WritablePowerFeed) o;
    return Objects.equals(this.occupied, writablePowerFeed.occupied) &&
        Objects.equals(this.amperage, writablePowerFeed.amperage) &&
        Objects.equals(this.cable, writablePowerFeed.cable) &&
        Objects.equals(this.cableEnd, writablePowerFeed.cableEnd) &&
        Objects.equals(this.comments, writablePowerFeed.comments) &&
        Objects.equals(this.connectedEndpoints, writablePowerFeed.connectedEndpoints) &&
        Objects.equals(this.connectedEndpointsReachable, writablePowerFeed.connectedEndpointsReachable) &&
        Objects.equals(this.connectedEndpointsType, writablePowerFeed.connectedEndpointsType) &&
        Objects.equals(this.created, writablePowerFeed.created) &&
        Objects.equals(this.customFields, writablePowerFeed.customFields) &&
        Objects.equals(this.description, writablePowerFeed.description) &&
        Objects.equals(this.display, writablePowerFeed.display) &&
        Objects.equals(this.id, writablePowerFeed.id) &&
        Objects.equals(this.lastUpdated, writablePowerFeed.lastUpdated) &&
        Objects.equals(this.linkPeers, writablePowerFeed.linkPeers) &&
        Objects.equals(this.linkPeersType, writablePowerFeed.linkPeersType) &&
        Objects.equals(this.markConnected, writablePowerFeed.markConnected) &&
        Objects.equals(this.maxUtilization, writablePowerFeed.maxUtilization) &&
        Objects.equals(this.name, writablePowerFeed.name) &&
        Objects.equals(this.phase, writablePowerFeed.phase) &&
        Objects.equals(this.powerPanel, writablePowerFeed.powerPanel) &&
        Objects.equals(this.rack, writablePowerFeed.rack) &&
        Objects.equals(this.status, writablePowerFeed.status) &&
        Objects.equals(this.supply, writablePowerFeed.supply) &&
        Objects.equals(this.tags, writablePowerFeed.tags) &&
        Objects.equals(this.type, writablePowerFeed.type) &&
        Objects.equals(this.url, writablePowerFeed.url) &&
        Objects.equals(this.voltage, writablePowerFeed.voltage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(occupied, amperage, cable, cableEnd, comments, connectedEndpoints, connectedEndpointsReachable, connectedEndpointsType, created, customFields, description, display, id, lastUpdated, linkPeers, linkPeersType, markConnected, maxUtilization, name, phase, powerPanel, rack, status, supply, tags, type, url, voltage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritablePowerFeed {\n");
    sb.append("    occupied: ").append(toIndentedString(occupied)).append("\n");
    sb.append("    amperage: ").append(toIndentedString(amperage)).append("\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    cableEnd: ").append(toIndentedString(cableEnd)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    connectedEndpoints: ").append(toIndentedString(connectedEndpoints)).append("\n");
    sb.append("    connectedEndpointsReachable: ").append(toIndentedString(connectedEndpointsReachable)).append("\n");
    sb.append("    connectedEndpointsType: ").append(toIndentedString(connectedEndpointsType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    linkPeers: ").append(toIndentedString(linkPeers)).append("\n");
    sb.append("    linkPeersType: ").append(toIndentedString(linkPeersType)).append("\n");
    sb.append("    markConnected: ").append(toIndentedString(markConnected)).append("\n");
    sb.append("    maxUtilization: ").append(toIndentedString(maxUtilization)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    powerPanel: ").append(toIndentedString(powerPanel)).append("\n");
    sb.append("    rack: ").append(toIndentedString(rack)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supply: ").append(toIndentedString(supply)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_occupied");
    openapiFields.add("amperage");
    openapiFields.add("cable");
    openapiFields.add("cable_end");
    openapiFields.add("comments");
    openapiFields.add("connected_endpoints");
    openapiFields.add("connected_endpoints_reachable");
    openapiFields.add("connected_endpoints_type");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("link_peers");
    openapiFields.add("link_peers_type");
    openapiFields.add("mark_connected");
    openapiFields.add("max_utilization");
    openapiFields.add("name");
    openapiFields.add("phase");
    openapiFields.add("power_panel");
    openapiFields.add("rack");
    openapiFields.add("status");
    openapiFields.add("supply");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("voltage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("power_panel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritablePowerFeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritablePowerFeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritablePowerFeed is not found in the empty JSON string", WritablePowerFeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritablePowerFeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritablePowerFeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritablePowerFeed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cable`
      if (jsonObj.get("cable") != null && !jsonObj.get("cable").isJsonNull()) {
        NestedCable.validateJsonElement(jsonObj.get("cable"));
      }
      if ((jsonObj.get("cable_end") != null && !jsonObj.get("cable_end").isJsonNull()) && !jsonObj.get("cable_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cable_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cable_end").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("connected_endpoints") != null && !jsonObj.get("connected_endpoints").isJsonNull() && !jsonObj.get("connected_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("connected_endpoints").toString()));
      }
      if ((jsonObj.get("connected_endpoints_type") != null && !jsonObj.get("connected_endpoints_type").isJsonNull()) && !jsonObj.get("connected_endpoints_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoints_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("link_peers") != null && !jsonObj.get("link_peers").isJsonNull() && !jsonObj.get("link_peers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_peers` to be an array in the JSON string but got `%s`", jsonObj.get("link_peers").toString()));
      }
      if ((jsonObj.get("link_peers_type") != null && !jsonObj.get("link_peers_type").isJsonNull()) && !jsonObj.get("link_peers_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_peers_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_peers_type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        PhaseEnum.validateJsonElement(jsonObj.get("phase"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("supply") != null && !jsonObj.get("supply").isJsonNull()) && !jsonObj.get("supply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supply").toString()));
      }
      // validate the optional field `supply`
      if (jsonObj.get("supply") != null && !jsonObj.get("supply").isJsonNull()) {
        SupplyEnum.validateJsonElement(jsonObj.get("supply"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritablePowerFeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritablePowerFeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritablePowerFeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritablePowerFeed.class));

       return (TypeAdapter<T>) new TypeAdapter<WritablePowerFeed>() {
           @Override
           public void write(JsonWriter out, WritablePowerFeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritablePowerFeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritablePowerFeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritablePowerFeed
   * @throws IOException if the JSON string is invalid with respect to WritablePowerFeed
   */
  public static WritablePowerFeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritablePowerFeed.class);
  }

  /**
   * Convert an instance of WritablePowerFeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

