/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.NestedRouteTarget;
import org.openapitools.client.model.NestedTag;
import org.openapitools.client.model.NestedTenant;
import org.openapitools.client.model.Type4;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * L2VPN
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class L2VPN {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_EXPORT_TARGETS = "export_targets";
  @SerializedName(SERIALIZED_NAME_EXPORT_TARGETS)
  private Set<NestedRouteTarget> exportTargets = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private Integer identifier;

  public static final String SERIALIZED_NAME_IMPORT_TARGETS = "import_targets";
  @SerializedName(SERIALIZED_NAME_IMPORT_TARGETS)
  private Set<NestedRouteTarget> importTargets = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT = "tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private NestedTenant tenant;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type4 type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public L2VPN() {
  }

  public L2VPN(
     OffsetDateTime created, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     URI url
  ) {
    this();
    this.created = created;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.url = url;
  }

  public L2VPN comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public L2VPN customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public L2VPN description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public L2VPN exportTargets(Set<NestedRouteTarget> exportTargets) {
    this.exportTargets = exportTargets;
    return this;
  }

  public L2VPN addExportTargetsItem(NestedRouteTarget exportTargetsItem) {
    if (this.exportTargets == null) {
      this.exportTargets = new LinkedHashSet<>();
    }
    this.exportTargets.add(exportTargetsItem);
    return this;
  }

  /**
   * Get exportTargets
   * @return exportTargets
   */
  @javax.annotation.Nullable
  public Set<NestedRouteTarget> getExportTargets() {
    return exportTargets;
  }

  public void setExportTargets(Set<NestedRouteTarget> exportTargets) {
    this.exportTargets = exportTargets;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public L2VPN identifier(Integer identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * minimum: 9223372036854775616
   * maximum: -9223372036854775616
   * @return identifier
   */
  @javax.annotation.Nullable
  public Integer getIdentifier() {
    return identifier;
  }

  public void setIdentifier(Integer identifier) {
    this.identifier = identifier;
  }


  public L2VPN importTargets(Set<NestedRouteTarget> importTargets) {
    this.importTargets = importTargets;
    return this;
  }

  public L2VPN addImportTargetsItem(NestedRouteTarget importTargetsItem) {
    if (this.importTargets == null) {
      this.importTargets = new LinkedHashSet<>();
    }
    this.importTargets.add(importTargetsItem);
    return this;
  }

  /**
   * Get importTargets
   * @return importTargets
   */
  @javax.annotation.Nullable
  public Set<NestedRouteTarget> getImportTargets() {
    return importTargets;
  }

  public void setImportTargets(Set<NestedRouteTarget> importTargets) {
    this.importTargets = importTargets;
  }


  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public L2VPN name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public L2VPN slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public L2VPN tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public L2VPN addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public L2VPN tenant(NestedTenant tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public NestedTenant getTenant() {
    return tenant;
  }

  public void setTenant(NestedTenant tenant) {
    this.tenant = tenant;
  }


  public L2VPN type(Type4 type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type4 getType() {
    return type;
  }

  public void setType(Type4 type) {
    this.type = type;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    L2VPN L2VPN = (L2VPN) o;
    return Objects.equals(this.comments, L2VPN.comments) &&
        Objects.equals(this.created, L2VPN.created) &&
        Objects.equals(this.customFields, L2VPN.customFields) &&
        Objects.equals(this.description, L2VPN.description) &&
        Objects.equals(this.display, L2VPN.display) &&
        Objects.equals(this.exportTargets, L2VPN.exportTargets) &&
        Objects.equals(this.id, L2VPN.id) &&
        Objects.equals(this.identifier, L2VPN.identifier) &&
        Objects.equals(this.importTargets, L2VPN.importTargets) &&
        Objects.equals(this.lastUpdated, L2VPN.lastUpdated) &&
        Objects.equals(this.name, L2VPN.name) &&
        Objects.equals(this.slug, L2VPN.slug) &&
        Objects.equals(this.tags, L2VPN.tags) &&
        Objects.equals(this.tenant, L2VPN.tenant) &&
        Objects.equals(this.type, L2VPN.type) &&
        Objects.equals(this.url, L2VPN.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, created, customFields, description, display, exportTargets, id, identifier, importTargets, lastUpdated, name, slug, tags, tenant, type, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class L2VPN {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    exportTargets: ").append(toIndentedString(exportTargets)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    importTargets: ").append(toIndentedString(importTargets)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("export_targets");
    openapiFields.add("id");
    openapiFields.add("identifier");
    openapiFields.add("import_targets");
    openapiFields.add("last_updated");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("tags");
    openapiFields.add("tenant");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to L2VPN
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!L2VPN.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in L2VPN is not found in the empty JSON string", L2VPN.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!L2VPN.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `L2VPN` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : L2VPN.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if (jsonObj.get("export_targets") != null && !jsonObj.get("export_targets").isJsonNull()) {
        JsonArray jsonArrayexportTargets = jsonObj.getAsJsonArray("export_targets");
        if (jsonArrayexportTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("export_targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `export_targets` to be an array in the JSON string but got `%s`", jsonObj.get("export_targets").toString()));
          }

          // validate the optional field `export_targets` (array)
          for (int i = 0; i < jsonArrayexportTargets.size(); i++) {
            NestedRouteTarget.validateJsonElement(jsonArrayexportTargets.get(i));
          };
        }
      }
      if (jsonObj.get("import_targets") != null && !jsonObj.get("import_targets").isJsonNull()) {
        JsonArray jsonArrayimportTargets = jsonObj.getAsJsonArray("import_targets");
        if (jsonArrayimportTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("import_targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `import_targets` to be an array in the JSON string but got `%s`", jsonObj.get("import_targets").toString()));
          }

          // validate the optional field `import_targets` (array)
          for (int i = 0; i < jsonArrayimportTargets.size(); i++) {
            NestedRouteTarget.validateJsonElement(jsonArrayimportTargets.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `tenant`
      if (jsonObj.get("tenant") != null && !jsonObj.get("tenant").isJsonNull()) {
        NestedTenant.validateJsonElement(jsonObj.get("tenant"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type4.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!L2VPN.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'L2VPN' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<L2VPN> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(L2VPN.class));

       return (TypeAdapter<T>) new TypeAdapter<L2VPN>() {
           @Override
           public void write(JsonWriter out, L2VPN value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public L2VPN read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of L2VPN given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of L2VPN
   * @throws IOException if the JSON string is invalid with respect to L2VPN
   */
  public static L2VPN fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, L2VPN.class);
  }

  /**
   * Convert an instance of L2VPN to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

