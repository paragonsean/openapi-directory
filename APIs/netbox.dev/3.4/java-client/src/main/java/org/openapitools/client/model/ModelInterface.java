/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.ComponentNestedModule;
import org.openapitools.client.model.Duplex;
import org.openapitools.client.model.Mode;
import org.openapitools.client.model.NestedCable;
import org.openapitools.client.model.NestedDevice;
import org.openapitools.client.model.NestedInterface;
import org.openapitools.client.model.NestedL2VPNTermination;
import org.openapitools.client.model.NestedTag;
import org.openapitools.client.model.NestedVLAN;
import org.openapitools.client.model.NestedVRF;
import org.openapitools.client.model.NestedVirtualDeviceContext;
import org.openapitools.client.model.NestedWirelessLAN;
import org.openapitools.client.model.NestedWirelessLink;
import org.openapitools.client.model.PoeMode;
import org.openapitools.client.model.PoeType;
import org.openapitools.client.model.RfChannel;
import org.openapitools.client.model.RfRole;
import org.openapitools.client.model.Type3;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelInterface {
  public static final String SERIALIZED_NAME_OCCUPIED = "_occupied";
  @SerializedName(SERIALIZED_NAME_OCCUPIED)
  private Boolean occupied;

  public static final String SERIALIZED_NAME_BRIDGE = "bridge";
  @SerializedName(SERIALIZED_NAME_BRIDGE)
  private NestedInterface bridge;

  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private NestedCable cable;

  public static final String SERIALIZED_NAME_CABLE_END = "cable_end";
  @SerializedName(SERIALIZED_NAME_CABLE_END)
  private String cableEnd;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS = "connected_endpoints";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS)
  private List<String> connectedEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE = "connected_endpoints_reachable";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_REACHABLE)
  private Boolean connectedEndpointsReachable;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE = "connected_endpoints_type";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINTS_TYPE)
  private String connectedEndpointsType;

  public static final String SERIALIZED_NAME_COUNT_FHRP_GROUPS = "count_fhrp_groups";
  @SerializedName(SERIALIZED_NAME_COUNT_FHRP_GROUPS)
  private Integer countFhrpGroups;

  public static final String SERIALIZED_NAME_COUNT_IPADDRESSES = "count_ipaddresses";
  @SerializedName(SERIALIZED_NAME_COUNT_IPADDRESSES)
  private Integer countIpaddresses;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private NestedDevice device;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_DUPLEX = "duplex";
  @SerializedName(SERIALIZED_NAME_DUPLEX)
  private Duplex duplex;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_L2VPN_TERMINATION = "l2vpn_termination";
  @SerializedName(SERIALIZED_NAME_L2VPN_TERMINATION)
  private NestedL2VPNTermination l2vpnTermination;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LAG = "lag";
  @SerializedName(SERIALIZED_NAME_LAG)
  private NestedInterface lag;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LINK_PEERS = "link_peers";
  @SerializedName(SERIALIZED_NAME_LINK_PEERS)
  private List<String> linkPeers = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK_PEERS_TYPE = "link_peers_type";
  @SerializedName(SERIALIZED_NAME_LINK_PEERS_TYPE)
  private String linkPeersType;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MARK_CONNECTED = "mark_connected";
  @SerializedName(SERIALIZED_NAME_MARK_CONNECTED)
  private Boolean markConnected;

  public static final String SERIALIZED_NAME_MGMT_ONLY = "mgmt_only";
  @SerializedName(SERIALIZED_NAME_MGMT_ONLY)
  private Boolean mgmtOnly;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Mode mode;

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private ComponentNestedModule module;

  public static final String SERIALIZED_NAME_MTU = "mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private Integer mtu;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private NestedInterface parent;

  public static final String SERIALIZED_NAME_POE_MODE = "poe_mode";
  @SerializedName(SERIALIZED_NAME_POE_MODE)
  private PoeMode poeMode;

  public static final String SERIALIZED_NAME_POE_TYPE = "poe_type";
  @SerializedName(SERIALIZED_NAME_POE_TYPE)
  private PoeType poeType;

  public static final String SERIALIZED_NAME_RF_CHANNEL = "rf_channel";
  @SerializedName(SERIALIZED_NAME_RF_CHANNEL)
  private RfChannel rfChannel;

  public static final String SERIALIZED_NAME_RF_CHANNEL_FREQUENCY = "rf_channel_frequency";
  @SerializedName(SERIALIZED_NAME_RF_CHANNEL_FREQUENCY)
  private BigDecimal rfChannelFrequency;

  public static final String SERIALIZED_NAME_RF_CHANNEL_WIDTH = "rf_channel_width";
  @SerializedName(SERIALIZED_NAME_RF_CHANNEL_WIDTH)
  private BigDecimal rfChannelWidth;

  public static final String SERIALIZED_NAME_RF_ROLE = "rf_role";
  @SerializedName(SERIALIZED_NAME_RF_ROLE)
  private RfRole rfRole;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Integer speed;

  public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
  @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
  private Set<NestedVLAN> taggedVlans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TX_POWER = "tx_power";
  @SerializedName(SERIALIZED_NAME_TX_POWER)
  private Integer txPower;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type3 type;

  public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
  @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
  private NestedVLAN untaggedVlan;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VDCS = "vdcs";
  @SerializedName(SERIALIZED_NAME_VDCS)
  private Set<NestedVirtualDeviceContext> vdcs = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_VRF = "vrf";
  @SerializedName(SERIALIZED_NAME_VRF)
  private NestedVRF vrf;

  public static final String SERIALIZED_NAME_WIRELESS_LANS = "wireless_lans";
  @SerializedName(SERIALIZED_NAME_WIRELESS_LANS)
  private Set<NestedWirelessLAN> wirelessLans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_WIRELESS_LINK = "wireless_link";
  @SerializedName(SERIALIZED_NAME_WIRELESS_LINK)
  private NestedWirelessLink wirelessLink;

  public static final String SERIALIZED_NAME_WWN = "wwn";
  @SerializedName(SERIALIZED_NAME_WWN)
  private String wwn;

  public ModelInterface() {
  }

  public ModelInterface(
     Boolean occupied, 
     String cableEnd, 
     List<String> connectedEndpoints, 
     Boolean connectedEndpointsReachable, 
     String connectedEndpointsType, 
     Integer countFhrpGroups, 
     Integer countIpaddresses, 
     OffsetDateTime created, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     List<String> linkPeers, 
     String linkPeersType, 
     URI url
  ) {
    this();
    this.occupied = occupied;
    this.cableEnd = cableEnd;
    this.connectedEndpoints = connectedEndpoints;
    this.connectedEndpointsReachable = connectedEndpointsReachable;
    this.connectedEndpointsType = connectedEndpointsType;
    this.countFhrpGroups = countFhrpGroups;
    this.countIpaddresses = countIpaddresses;
    this.created = created;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.linkPeers = linkPeers;
    this.linkPeersType = linkPeersType;
    this.url = url;
  }

  /**
   * Get occupied
   * @return occupied
   */
  @javax.annotation.Nullable
  public Boolean getOccupied() {
    return occupied;
  }



  public ModelInterface bridge(NestedInterface bridge) {
    this.bridge = bridge;
    return this;
  }

  /**
   * Get bridge
   * @return bridge
   */
  @javax.annotation.Nullable
  public NestedInterface getBridge() {
    return bridge;
  }

  public void setBridge(NestedInterface bridge) {
    this.bridge = bridge;
  }


  public ModelInterface cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  /**
   * Get cable
   * @return cable
   */
  @javax.annotation.Nullable
  public NestedCable getCable() {
    return cable;
  }

  public void setCable(NestedCable cable) {
    this.cable = cable;
  }


  /**
   * Get cableEnd
   * @return cableEnd
   */
  @javax.annotation.Nullable
  public String getCableEnd() {
    return cableEnd;
  }



  /**
   *  Return the appropriate serializer for the type of connected object. 
   * @return connectedEndpoints
   */
  @javax.annotation.Nullable
  public List<String> getConnectedEndpoints() {
    return connectedEndpoints;
  }



  /**
   * Get connectedEndpointsReachable
   * @return connectedEndpointsReachable
   */
  @javax.annotation.Nullable
  public Boolean getConnectedEndpointsReachable() {
    return connectedEndpointsReachable;
  }



  /**
   * Get connectedEndpointsType
   * @return connectedEndpointsType
   */
  @javax.annotation.Nullable
  public String getConnectedEndpointsType() {
    return connectedEndpointsType;
  }



  /**
   * Get countFhrpGroups
   * @return countFhrpGroups
   */
  @javax.annotation.Nullable
  public Integer getCountFhrpGroups() {
    return countFhrpGroups;
  }



  /**
   * Get countIpaddresses
   * @return countIpaddresses
   */
  @javax.annotation.Nullable
  public Integer getCountIpaddresses() {
    return countIpaddresses;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public ModelInterface customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public ModelInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ModelInterface device(NestedDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public NestedDevice getDevice() {
    return device;
  }

  public void setDevice(NestedDevice device) {
    this.device = device;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public ModelInterface duplex(Duplex duplex) {
    this.duplex = duplex;
    return this;
  }

  /**
   * Get duplex
   * @return duplex
   */
  @javax.annotation.Nullable
  public Duplex getDuplex() {
    return duplex;
  }

  public void setDuplex(Duplex duplex) {
    this.duplex = duplex;
  }


  public ModelInterface enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public ModelInterface l2vpnTermination(NestedL2VPNTermination l2vpnTermination) {
    this.l2vpnTermination = l2vpnTermination;
    return this;
  }

  /**
   * Get l2vpnTermination
   * @return l2vpnTermination
   */
  @javax.annotation.Nullable
  public NestedL2VPNTermination getL2vpnTermination() {
    return l2vpnTermination;
  }

  public void setL2vpnTermination(NestedL2VPNTermination l2vpnTermination) {
    this.l2vpnTermination = l2vpnTermination;
  }


  public ModelInterface label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Physical label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ModelInterface lag(NestedInterface lag) {
    this.lag = lag;
    return this;
  }

  /**
   * Get lag
   * @return lag
   */
  @javax.annotation.Nullable
  public NestedInterface getLag() {
    return lag;
  }

  public void setLag(NestedInterface lag) {
    this.lag = lag;
  }


  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  /**
   *  Return the appropriate serializer for the link termination model. 
   * @return linkPeers
   */
  @javax.annotation.Nullable
  public List<String> getLinkPeers() {
    return linkPeers;
  }



  /**
   * Get linkPeersType
   * @return linkPeersType
   */
  @javax.annotation.Nullable
  public String getLinkPeersType() {
    return linkPeersType;
  }



  public ModelInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public ModelInterface markConnected(Boolean markConnected) {
    this.markConnected = markConnected;
    return this;
  }

  /**
   * Treat as if a cable is connected
   * @return markConnected
   */
  @javax.annotation.Nullable
  public Boolean getMarkConnected() {
    return markConnected;
  }

  public void setMarkConnected(Boolean markConnected) {
    this.markConnected = markConnected;
  }


  public ModelInterface mgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
    return this;
  }

  /**
   * This interface is used only for out-of-band management
   * @return mgmtOnly
   */
  @javax.annotation.Nullable
  public Boolean getMgmtOnly() {
    return mgmtOnly;
  }

  public void setMgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
  }


  public ModelInterface mode(Mode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public Mode getMode() {
    return mode;
  }

  public void setMode(Mode mode) {
    this.mode = mode;
  }


  public ModelInterface module(ComponentNestedModule module) {
    this.module = module;
    return this;
  }

  /**
   * Get module
   * @return module
   */
  @javax.annotation.Nullable
  public ComponentNestedModule getModule() {
    return module;
  }

  public void setModule(ComponentNestedModule module) {
    this.module = module;
  }


  public ModelInterface mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * Get mtu
   * minimum: 1
   * maximum: 65536
   * @return mtu
   */
  @javax.annotation.Nullable
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  public ModelInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModelInterface parent(NestedInterface parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public NestedInterface getParent() {
    return parent;
  }

  public void setParent(NestedInterface parent) {
    this.parent = parent;
  }


  public ModelInterface poeMode(PoeMode poeMode) {
    this.poeMode = poeMode;
    return this;
  }

  /**
   * Get poeMode
   * @return poeMode
   */
  @javax.annotation.Nullable
  public PoeMode getPoeMode() {
    return poeMode;
  }

  public void setPoeMode(PoeMode poeMode) {
    this.poeMode = poeMode;
  }


  public ModelInterface poeType(PoeType poeType) {
    this.poeType = poeType;
    return this;
  }

  /**
   * Get poeType
   * @return poeType
   */
  @javax.annotation.Nullable
  public PoeType getPoeType() {
    return poeType;
  }

  public void setPoeType(PoeType poeType) {
    this.poeType = poeType;
  }


  public ModelInterface rfChannel(RfChannel rfChannel) {
    this.rfChannel = rfChannel;
    return this;
  }

  /**
   * Get rfChannel
   * @return rfChannel
   */
  @javax.annotation.Nullable
  public RfChannel getRfChannel() {
    return rfChannel;
  }

  public void setRfChannel(RfChannel rfChannel) {
    this.rfChannel = rfChannel;
  }


  public ModelInterface rfChannelFrequency(BigDecimal rfChannelFrequency) {
    this.rfChannelFrequency = rfChannelFrequency;
    return this;
  }

  /**
   * Get rfChannelFrequency
   * @return rfChannelFrequency
   */
  @javax.annotation.Nullable
  public BigDecimal getRfChannelFrequency() {
    return rfChannelFrequency;
  }

  public void setRfChannelFrequency(BigDecimal rfChannelFrequency) {
    this.rfChannelFrequency = rfChannelFrequency;
  }


  public ModelInterface rfChannelWidth(BigDecimal rfChannelWidth) {
    this.rfChannelWidth = rfChannelWidth;
    return this;
  }

  /**
   * Get rfChannelWidth
   * @return rfChannelWidth
   */
  @javax.annotation.Nullable
  public BigDecimal getRfChannelWidth() {
    return rfChannelWidth;
  }

  public void setRfChannelWidth(BigDecimal rfChannelWidth) {
    this.rfChannelWidth = rfChannelWidth;
  }


  public ModelInterface rfRole(RfRole rfRole) {
    this.rfRole = rfRole;
    return this;
  }

  /**
   * Get rfRole
   * @return rfRole
   */
  @javax.annotation.Nullable
  public RfRole getRfRole() {
    return rfRole;
  }

  public void setRfRole(RfRole rfRole) {
    this.rfRole = rfRole;
  }


  public ModelInterface speed(Integer speed) {
    this.speed = speed;
    return this;
  }

  /**
   * Get speed
   * minimum: 0
   * maximum: 2147483647
   * @return speed
   */
  @javax.annotation.Nullable
  public Integer getSpeed() {
    return speed;
  }

  public void setSpeed(Integer speed) {
    this.speed = speed;
  }


  public ModelInterface taggedVlans(Set<NestedVLAN> taggedVlans) {
    this.taggedVlans = taggedVlans;
    return this;
  }

  public ModelInterface addTaggedVlansItem(NestedVLAN taggedVlansItem) {
    if (this.taggedVlans == null) {
      this.taggedVlans = new LinkedHashSet<>();
    }
    this.taggedVlans.add(taggedVlansItem);
    return this;
  }

  /**
   * Get taggedVlans
   * @return taggedVlans
   */
  @javax.annotation.Nullable
  public Set<NestedVLAN> getTaggedVlans() {
    return taggedVlans;
  }

  public void setTaggedVlans(Set<NestedVLAN> taggedVlans) {
    this.taggedVlans = taggedVlans;
  }


  public ModelInterface tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public ModelInterface addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public ModelInterface txPower(Integer txPower) {
    this.txPower = txPower;
    return this;
  }

  /**
   * Get txPower
   * minimum: 0
   * maximum: 127
   * @return txPower
   */
  @javax.annotation.Nullable
  public Integer getTxPower() {
    return txPower;
  }

  public void setTxPower(Integer txPower) {
    this.txPower = txPower;
  }


  public ModelInterface type(Type3 type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public Type3 getType() {
    return type;
  }

  public void setType(Type3 type) {
    this.type = type;
  }


  public ModelInterface untaggedVlan(NestedVLAN untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
    return this;
  }

  /**
   * Get untaggedVlan
   * @return untaggedVlan
   */
  @javax.annotation.Nullable
  public NestedVLAN getUntaggedVlan() {
    return untaggedVlan;
  }

  public void setUntaggedVlan(NestedVLAN untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public ModelInterface vdcs(Set<NestedVirtualDeviceContext> vdcs) {
    this.vdcs = vdcs;
    return this;
  }

  public ModelInterface addVdcsItem(NestedVirtualDeviceContext vdcsItem) {
    if (this.vdcs == null) {
      this.vdcs = new LinkedHashSet<>();
    }
    this.vdcs.add(vdcsItem);
    return this;
  }

  /**
   * Get vdcs
   * @return vdcs
   */
  @javax.annotation.Nullable
  public Set<NestedVirtualDeviceContext> getVdcs() {
    return vdcs;
  }

  public void setVdcs(Set<NestedVirtualDeviceContext> vdcs) {
    this.vdcs = vdcs;
  }


  public ModelInterface vrf(NestedVRF vrf) {
    this.vrf = vrf;
    return this;
  }

  /**
   * Get vrf
   * @return vrf
   */
  @javax.annotation.Nullable
  public NestedVRF getVrf() {
    return vrf;
  }

  public void setVrf(NestedVRF vrf) {
    this.vrf = vrf;
  }


  public ModelInterface wirelessLans(Set<NestedWirelessLAN> wirelessLans) {
    this.wirelessLans = wirelessLans;
    return this;
  }

  public ModelInterface addWirelessLansItem(NestedWirelessLAN wirelessLansItem) {
    if (this.wirelessLans == null) {
      this.wirelessLans = new LinkedHashSet<>();
    }
    this.wirelessLans.add(wirelessLansItem);
    return this;
  }

  /**
   * Get wirelessLans
   * @return wirelessLans
   */
  @javax.annotation.Nullable
  public Set<NestedWirelessLAN> getWirelessLans() {
    return wirelessLans;
  }

  public void setWirelessLans(Set<NestedWirelessLAN> wirelessLans) {
    this.wirelessLans = wirelessLans;
  }


  public ModelInterface wirelessLink(NestedWirelessLink wirelessLink) {
    this.wirelessLink = wirelessLink;
    return this;
  }

  /**
   * Get wirelessLink
   * @return wirelessLink
   */
  @javax.annotation.Nullable
  public NestedWirelessLink getWirelessLink() {
    return wirelessLink;
  }

  public void setWirelessLink(NestedWirelessLink wirelessLink) {
    this.wirelessLink = wirelessLink;
  }


  public ModelInterface wwn(String wwn) {
    this.wwn = wwn;
    return this;
  }

  /**
   * 64-bit World Wide Name
   * @return wwn
   */
  @javax.annotation.Nullable
  public String getWwn() {
    return wwn;
  }

  public void setWwn(String wwn) {
    this.wwn = wwn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelInterface _interface = (ModelInterface) o;
    return Objects.equals(this.occupied, _interface.occupied) &&
        Objects.equals(this.bridge, _interface.bridge) &&
        Objects.equals(this.cable, _interface.cable) &&
        Objects.equals(this.cableEnd, _interface.cableEnd) &&
        Objects.equals(this.connectedEndpoints, _interface.connectedEndpoints) &&
        Objects.equals(this.connectedEndpointsReachable, _interface.connectedEndpointsReachable) &&
        Objects.equals(this.connectedEndpointsType, _interface.connectedEndpointsType) &&
        Objects.equals(this.countFhrpGroups, _interface.countFhrpGroups) &&
        Objects.equals(this.countIpaddresses, _interface.countIpaddresses) &&
        Objects.equals(this.created, _interface.created) &&
        Objects.equals(this.customFields, _interface.customFields) &&
        Objects.equals(this.description, _interface.description) &&
        Objects.equals(this.device, _interface.device) &&
        Objects.equals(this.display, _interface.display) &&
        Objects.equals(this.duplex, _interface.duplex) &&
        Objects.equals(this.enabled, _interface.enabled) &&
        Objects.equals(this.id, _interface.id) &&
        Objects.equals(this.l2vpnTermination, _interface.l2vpnTermination) &&
        Objects.equals(this.label, _interface.label) &&
        Objects.equals(this.lag, _interface.lag) &&
        Objects.equals(this.lastUpdated, _interface.lastUpdated) &&
        Objects.equals(this.linkPeers, _interface.linkPeers) &&
        Objects.equals(this.linkPeersType, _interface.linkPeersType) &&
        Objects.equals(this.macAddress, _interface.macAddress) &&
        Objects.equals(this.markConnected, _interface.markConnected) &&
        Objects.equals(this.mgmtOnly, _interface.mgmtOnly) &&
        Objects.equals(this.mode, _interface.mode) &&
        Objects.equals(this.module, _interface.module) &&
        Objects.equals(this.mtu, _interface.mtu) &&
        Objects.equals(this.name, _interface.name) &&
        Objects.equals(this.parent, _interface.parent) &&
        Objects.equals(this.poeMode, _interface.poeMode) &&
        Objects.equals(this.poeType, _interface.poeType) &&
        Objects.equals(this.rfChannel, _interface.rfChannel) &&
        Objects.equals(this.rfChannelFrequency, _interface.rfChannelFrequency) &&
        Objects.equals(this.rfChannelWidth, _interface.rfChannelWidth) &&
        Objects.equals(this.rfRole, _interface.rfRole) &&
        Objects.equals(this.speed, _interface.speed) &&
        Objects.equals(this.taggedVlans, _interface.taggedVlans) &&
        Objects.equals(this.tags, _interface.tags) &&
        Objects.equals(this.txPower, _interface.txPower) &&
        Objects.equals(this.type, _interface.type) &&
        Objects.equals(this.untaggedVlan, _interface.untaggedVlan) &&
        Objects.equals(this.url, _interface.url) &&
        Objects.equals(this.vdcs, _interface.vdcs) &&
        Objects.equals(this.vrf, _interface.vrf) &&
        Objects.equals(this.wirelessLans, _interface.wirelessLans) &&
        Objects.equals(this.wirelessLink, _interface.wirelessLink) &&
        Objects.equals(this.wwn, _interface.wwn);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(occupied, bridge, cable, cableEnd, connectedEndpoints, connectedEndpointsReachable, connectedEndpointsType, countFhrpGroups, countIpaddresses, created, customFields, description, device, display, duplex, enabled, id, l2vpnTermination, label, lag, lastUpdated, linkPeers, linkPeersType, macAddress, markConnected, mgmtOnly, mode, module, mtu, name, parent, poeMode, poeType, rfChannel, rfChannelFrequency, rfChannelWidth, rfRole, speed, taggedVlans, tags, txPower, type, untaggedVlan, url, vdcs, vrf, wirelessLans, wirelessLink, wwn);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelInterface {\n");
    sb.append("    occupied: ").append(toIndentedString(occupied)).append("\n");
    sb.append("    bridge: ").append(toIndentedString(bridge)).append("\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    cableEnd: ").append(toIndentedString(cableEnd)).append("\n");
    sb.append("    connectedEndpoints: ").append(toIndentedString(connectedEndpoints)).append("\n");
    sb.append("    connectedEndpointsReachable: ").append(toIndentedString(connectedEndpointsReachable)).append("\n");
    sb.append("    connectedEndpointsType: ").append(toIndentedString(connectedEndpointsType)).append("\n");
    sb.append("    countFhrpGroups: ").append(toIndentedString(countFhrpGroups)).append("\n");
    sb.append("    countIpaddresses: ").append(toIndentedString(countIpaddresses)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    duplex: ").append(toIndentedString(duplex)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    l2vpnTermination: ").append(toIndentedString(l2vpnTermination)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    linkPeers: ").append(toIndentedString(linkPeers)).append("\n");
    sb.append("    linkPeersType: ").append(toIndentedString(linkPeersType)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    markConnected: ").append(toIndentedString(markConnected)).append("\n");
    sb.append("    mgmtOnly: ").append(toIndentedString(mgmtOnly)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    poeMode: ").append(toIndentedString(poeMode)).append("\n");
    sb.append("    poeType: ").append(toIndentedString(poeType)).append("\n");
    sb.append("    rfChannel: ").append(toIndentedString(rfChannel)).append("\n");
    sb.append("    rfChannelFrequency: ").append(toIndentedString(rfChannelFrequency)).append("\n");
    sb.append("    rfChannelWidth: ").append(toIndentedString(rfChannelWidth)).append("\n");
    sb.append("    rfRole: ").append(toIndentedString(rfRole)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    txPower: ").append(toIndentedString(txPower)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vdcs: ").append(toIndentedString(vdcs)).append("\n");
    sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
    sb.append("    wirelessLans: ").append(toIndentedString(wirelessLans)).append("\n");
    sb.append("    wirelessLink: ").append(toIndentedString(wirelessLink)).append("\n");
    sb.append("    wwn: ").append(toIndentedString(wwn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_occupied");
    openapiFields.add("bridge");
    openapiFields.add("cable");
    openapiFields.add("cable_end");
    openapiFields.add("connected_endpoints");
    openapiFields.add("connected_endpoints_reachable");
    openapiFields.add("connected_endpoints_type");
    openapiFields.add("count_fhrp_groups");
    openapiFields.add("count_ipaddresses");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("display");
    openapiFields.add("duplex");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("l2vpn_termination");
    openapiFields.add("label");
    openapiFields.add("lag");
    openapiFields.add("last_updated");
    openapiFields.add("link_peers");
    openapiFields.add("link_peers_type");
    openapiFields.add("mac_address");
    openapiFields.add("mark_connected");
    openapiFields.add("mgmt_only");
    openapiFields.add("mode");
    openapiFields.add("module");
    openapiFields.add("mtu");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("poe_mode");
    openapiFields.add("poe_type");
    openapiFields.add("rf_channel");
    openapiFields.add("rf_channel_frequency");
    openapiFields.add("rf_channel_width");
    openapiFields.add("rf_role");
    openapiFields.add("speed");
    openapiFields.add("tagged_vlans");
    openapiFields.add("tags");
    openapiFields.add("tx_power");
    openapiFields.add("type");
    openapiFields.add("untagged_vlan");
    openapiFields.add("url");
    openapiFields.add("vdcs");
    openapiFields.add("vrf");
    openapiFields.add("wireless_lans");
    openapiFields.add("wireless_link");
    openapiFields.add("wwn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelInterface is not found in the empty JSON string", ModelInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bridge`
      if (jsonObj.get("bridge") != null && !jsonObj.get("bridge").isJsonNull()) {
        NestedInterface.validateJsonElement(jsonObj.get("bridge"));
      }
      // validate the optional field `cable`
      if (jsonObj.get("cable") != null && !jsonObj.get("cable").isJsonNull()) {
        NestedCable.validateJsonElement(jsonObj.get("cable"));
      }
      if ((jsonObj.get("cable_end") != null && !jsonObj.get("cable_end").isJsonNull()) && !jsonObj.get("cable_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cable_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cable_end").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("connected_endpoints") != null && !jsonObj.get("connected_endpoints").isJsonNull() && !jsonObj.get("connected_endpoints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("connected_endpoints").toString()));
      }
      if ((jsonObj.get("connected_endpoints_type") != null && !jsonObj.get("connected_endpoints_type").isJsonNull()) && !jsonObj.get("connected_endpoints_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoints_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `device`
      NestedDevice.validateJsonElement(jsonObj.get("device"));
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // validate the optional field `duplex`
      if (jsonObj.get("duplex") != null && !jsonObj.get("duplex").isJsonNull()) {
        Duplex.validateJsonElement(jsonObj.get("duplex"));
      }
      // validate the optional field `l2vpn_termination`
      if (jsonObj.get("l2vpn_termination") != null && !jsonObj.get("l2vpn_termination").isJsonNull()) {
        NestedL2VPNTermination.validateJsonElement(jsonObj.get("l2vpn_termination"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `lag`
      if (jsonObj.get("lag") != null && !jsonObj.get("lag").isJsonNull()) {
        NestedInterface.validateJsonElement(jsonObj.get("lag"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("link_peers") != null && !jsonObj.get("link_peers").isJsonNull() && !jsonObj.get("link_peers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_peers` to be an array in the JSON string but got `%s`", jsonObj.get("link_peers").toString()));
      }
      if ((jsonObj.get("link_peers_type") != null && !jsonObj.get("link_peers_type").isJsonNull()) && !jsonObj.get("link_peers_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_peers_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_peers_type").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        Mode.validateJsonElement(jsonObj.get("mode"));
      }
      // validate the optional field `module`
      if (jsonObj.get("module") != null && !jsonObj.get("module").isJsonNull()) {
        ComponentNestedModule.validateJsonElement(jsonObj.get("module"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        NestedInterface.validateJsonElement(jsonObj.get("parent"));
      }
      // validate the optional field `poe_mode`
      if (jsonObj.get("poe_mode") != null && !jsonObj.get("poe_mode").isJsonNull()) {
        PoeMode.validateJsonElement(jsonObj.get("poe_mode"));
      }
      // validate the optional field `poe_type`
      if (jsonObj.get("poe_type") != null && !jsonObj.get("poe_type").isJsonNull()) {
        PoeType.validateJsonElement(jsonObj.get("poe_type"));
      }
      // validate the optional field `rf_channel`
      if (jsonObj.get("rf_channel") != null && !jsonObj.get("rf_channel").isJsonNull()) {
        RfChannel.validateJsonElement(jsonObj.get("rf_channel"));
      }
      // validate the optional field `rf_role`
      if (jsonObj.get("rf_role") != null && !jsonObj.get("rf_role").isJsonNull()) {
        RfRole.validateJsonElement(jsonObj.get("rf_role"));
      }
      if (jsonObj.get("tagged_vlans") != null && !jsonObj.get("tagged_vlans").isJsonNull()) {
        JsonArray jsonArraytaggedVlans = jsonObj.getAsJsonArray("tagged_vlans");
        if (jsonArraytaggedVlans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tagged_vlans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans").toString()));
          }

          // validate the optional field `tagged_vlans` (array)
          for (int i = 0; i < jsonArraytaggedVlans.size(); i++) {
            NestedVLAN.validateJsonElement(jsonArraytaggedVlans.get(i));
          };
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the required field `type`
      Type3.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `untagged_vlan`
      if (jsonObj.get("untagged_vlan") != null && !jsonObj.get("untagged_vlan").isJsonNull()) {
        NestedVLAN.validateJsonElement(jsonObj.get("untagged_vlan"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("vdcs") != null && !jsonObj.get("vdcs").isJsonNull()) {
        JsonArray jsonArrayvdcs = jsonObj.getAsJsonArray("vdcs");
        if (jsonArrayvdcs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vdcs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vdcs` to be an array in the JSON string but got `%s`", jsonObj.get("vdcs").toString()));
          }

          // validate the optional field `vdcs` (array)
          for (int i = 0; i < jsonArrayvdcs.size(); i++) {
            NestedVirtualDeviceContext.validateJsonElement(jsonArrayvdcs.get(i));
          };
        }
      }
      // validate the optional field `vrf`
      if (jsonObj.get("vrf") != null && !jsonObj.get("vrf").isJsonNull()) {
        NestedVRF.validateJsonElement(jsonObj.get("vrf"));
      }
      if (jsonObj.get("wireless_lans") != null && !jsonObj.get("wireless_lans").isJsonNull()) {
        JsonArray jsonArraywirelessLans = jsonObj.getAsJsonArray("wireless_lans");
        if (jsonArraywirelessLans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("wireless_lans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `wireless_lans` to be an array in the JSON string but got `%s`", jsonObj.get("wireless_lans").toString()));
          }

          // validate the optional field `wireless_lans` (array)
          for (int i = 0; i < jsonArraywirelessLans.size(); i++) {
            NestedWirelessLAN.validateJsonElement(jsonArraywirelessLans.get(i));
          };
        }
      }
      // validate the optional field `wireless_link`
      if (jsonObj.get("wireless_link") != null && !jsonObj.get("wireless_link").isJsonNull()) {
        NestedWirelessLink.validateJsonElement(jsonObj.get("wireless_link"));
      }
      if ((jsonObj.get("wwn") != null && !jsonObj.get("wwn").isJsonNull()) && !jsonObj.get("wwn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wwn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wwn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelInterface>() {
           @Override
           public void write(JsonWriter out, ModelInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelInterface
   * @throws IOException if the JSON string is invalid with respect to ModelInterface
   */
  public static ModelInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelInterface.class);
  }

  /**
   * Convert an instance of ModelInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

