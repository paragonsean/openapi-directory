/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.NestedProviderNetwork;
import org.openapitools.client.model.NestedSite;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CircuitCircuitTermination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CircuitCircuitTermination {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PORT_SPEED = "port_speed";
  @SerializedName(SERIALIZED_NAME_PORT_SPEED)
  private Integer portSpeed;

  public static final String SERIALIZED_NAME_PROVIDER_NETWORK = "provider_network";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NETWORK)
  private NestedProviderNetwork providerNetwork;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private NestedSite site;

  public static final String SERIALIZED_NAME_UPSTREAM_SPEED = "upstream_speed";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_SPEED)
  private Integer upstreamSpeed;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_XCONNECT_ID = "xconnect_id";
  @SerializedName(SERIALIZED_NAME_XCONNECT_ID)
  private String xconnectId;

  public CircuitCircuitTermination() {
  }

  public CircuitCircuitTermination(
     String display, 
     Integer id, 
     URI url
  ) {
    this();
    this.display = display;
    this.id = id;
    this.url = url;
  }

  public CircuitCircuitTermination description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public CircuitCircuitTermination portSpeed(Integer portSpeed) {
    this.portSpeed = portSpeed;
    return this;
  }

  /**
   * Get portSpeed
   * minimum: 0
   * maximum: 2147483647
   * @return portSpeed
   */
  @javax.annotation.Nullable
  public Integer getPortSpeed() {
    return portSpeed;
  }

  public void setPortSpeed(Integer portSpeed) {
    this.portSpeed = portSpeed;
  }


  public CircuitCircuitTermination providerNetwork(NestedProviderNetwork providerNetwork) {
    this.providerNetwork = providerNetwork;
    return this;
  }

  /**
   * Get providerNetwork
   * @return providerNetwork
   */
  @javax.annotation.Nullable
  public NestedProviderNetwork getProviderNetwork() {
    return providerNetwork;
  }

  public void setProviderNetwork(NestedProviderNetwork providerNetwork) {
    this.providerNetwork = providerNetwork;
  }


  public CircuitCircuitTermination site(NestedSite site) {
    this.site = site;
    return this;
  }

  /**
   * Get site
   * @return site
   */
  @javax.annotation.Nullable
  public NestedSite getSite() {
    return site;
  }

  public void setSite(NestedSite site) {
    this.site = site;
  }


  public CircuitCircuitTermination upstreamSpeed(Integer upstreamSpeed) {
    this.upstreamSpeed = upstreamSpeed;
    return this;
  }

  /**
   * Upstream speed, if different from port speed
   * minimum: 0
   * maximum: 2147483647
   * @return upstreamSpeed
   */
  @javax.annotation.Nullable
  public Integer getUpstreamSpeed() {
    return upstreamSpeed;
  }

  public void setUpstreamSpeed(Integer upstreamSpeed) {
    this.upstreamSpeed = upstreamSpeed;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public CircuitCircuitTermination xconnectId(String xconnectId) {
    this.xconnectId = xconnectId;
    return this;
  }

  /**
   * Get xconnectId
   * @return xconnectId
   */
  @javax.annotation.Nullable
  public String getXconnectId() {
    return xconnectId;
  }

  public void setXconnectId(String xconnectId) {
    this.xconnectId = xconnectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CircuitCircuitTermination circuitCircuitTermination = (CircuitCircuitTermination) o;
    return Objects.equals(this.description, circuitCircuitTermination.description) &&
        Objects.equals(this.display, circuitCircuitTermination.display) &&
        Objects.equals(this.id, circuitCircuitTermination.id) &&
        Objects.equals(this.portSpeed, circuitCircuitTermination.portSpeed) &&
        Objects.equals(this.providerNetwork, circuitCircuitTermination.providerNetwork) &&
        Objects.equals(this.site, circuitCircuitTermination.site) &&
        Objects.equals(this.upstreamSpeed, circuitCircuitTermination.upstreamSpeed) &&
        Objects.equals(this.url, circuitCircuitTermination.url) &&
        Objects.equals(this.xconnectId, circuitCircuitTermination.xconnectId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, display, id, portSpeed, providerNetwork, site, upstreamSpeed, url, xconnectId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CircuitCircuitTermination {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    portSpeed: ").append(toIndentedString(portSpeed)).append("\n");
    sb.append("    providerNetwork: ").append(toIndentedString(providerNetwork)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    upstreamSpeed: ").append(toIndentedString(upstreamSpeed)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    xconnectId: ").append(toIndentedString(xconnectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("id");
    openapiFields.add("port_speed");
    openapiFields.add("provider_network");
    openapiFields.add("site");
    openapiFields.add("upstream_speed");
    openapiFields.add("url");
    openapiFields.add("xconnect_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provider_network");
    openapiRequiredFields.add("site");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CircuitCircuitTermination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CircuitCircuitTermination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CircuitCircuitTermination is not found in the empty JSON string", CircuitCircuitTermination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CircuitCircuitTermination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CircuitCircuitTermination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CircuitCircuitTermination.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      // validate the required field `provider_network`
      NestedProviderNetwork.validateJsonElement(jsonObj.get("provider_network"));
      // validate the required field `site`
      NestedSite.validateJsonElement(jsonObj.get("site"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("xconnect_id") != null && !jsonObj.get("xconnect_id").isJsonNull()) && !jsonObj.get("xconnect_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xconnect_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xconnect_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CircuitCircuitTermination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CircuitCircuitTermination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CircuitCircuitTermination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CircuitCircuitTermination.class));

       return (TypeAdapter<T>) new TypeAdapter<CircuitCircuitTermination>() {
           @Override
           public void write(JsonWriter out, CircuitCircuitTermination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CircuitCircuitTermination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CircuitCircuitTermination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CircuitCircuitTermination
   * @throws IOException if the JSON string is invalid with respect to CircuitCircuitTermination
   */
  public static CircuitCircuitTermination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CircuitCircuitTermination.class);
  }

  /**
   * Convert an instance of CircuitCircuitTermination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

