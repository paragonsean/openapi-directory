/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cable;
import org.openapitools.client.model.CableTermination;
import org.openapitools.client.model.ConsolePort;
import org.openapitools.client.model.ConsolePortTemplate;
import org.openapitools.client.model.ConsoleServerPort;
import org.openapitools.client.model.ConsoleServerPortTemplate;
import org.openapitools.client.model.DcimCableTerminationsList200Response;
import org.openapitools.client.model.DcimCablesList200Response;
import org.openapitools.client.model.DcimConsolePortTemplatesList200Response;
import org.openapitools.client.model.DcimConsolePortsList200Response;
import org.openapitools.client.model.DcimConsoleServerPortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortsList200Response;
import org.openapitools.client.model.DcimDeviceBayTemplatesList200Response;
import org.openapitools.client.model.DcimDeviceBaysList200Response;
import org.openapitools.client.model.DcimDeviceRolesList200Response;
import org.openapitools.client.model.DcimDeviceTypesList200Response;
import org.openapitools.client.model.DcimDevicesList200Response;
import org.openapitools.client.model.DcimFrontPortTemplatesList200Response;
import org.openapitools.client.model.DcimFrontPortsList200Response;
import org.openapitools.client.model.DcimInterfaceTemplatesList200Response;
import org.openapitools.client.model.DcimInterfacesList200Response;
import org.openapitools.client.model.DcimInventoryItemRolesList200Response;
import org.openapitools.client.model.DcimInventoryItemTemplatesList200Response;
import org.openapitools.client.model.DcimInventoryItemsList200Response;
import org.openapitools.client.model.DcimLocationsList200Response;
import org.openapitools.client.model.DcimManufacturersList200Response;
import org.openapitools.client.model.DcimModuleBayTemplatesList200Response;
import org.openapitools.client.model.DcimModuleBaysList200Response;
import org.openapitools.client.model.DcimModuleTypesList200Response;
import org.openapitools.client.model.DcimModulesList200Response;
import org.openapitools.client.model.DcimPlatformsList200Response;
import org.openapitools.client.model.DcimPowerFeedsList200Response;
import org.openapitools.client.model.DcimPowerOutletTemplatesList200Response;
import org.openapitools.client.model.DcimPowerOutletsList200Response;
import org.openapitools.client.model.DcimPowerPanelsList200Response;
import org.openapitools.client.model.DcimPowerPortTemplatesList200Response;
import org.openapitools.client.model.DcimPowerPortsList200Response;
import org.openapitools.client.model.DcimRackReservationsList200Response;
import org.openapitools.client.model.DcimRackRolesList200Response;
import org.openapitools.client.model.DcimRacksList200Response;
import org.openapitools.client.model.DcimRearPortTemplatesList200Response;
import org.openapitools.client.model.DcimRearPortsList200Response;
import org.openapitools.client.model.DcimRegionsList200Response;
import org.openapitools.client.model.DcimSiteGroupsList200Response;
import org.openapitools.client.model.DcimSitesList200Response;
import org.openapitools.client.model.DcimVirtualChassisList200Response;
import org.openapitools.client.model.DcimVirtualDeviceContextsList200Response;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceBay;
import org.openapitools.client.model.DeviceBayTemplate;
import org.openapitools.client.model.DeviceNAPALM;
import org.openapitools.client.model.DeviceRole;
import org.openapitools.client.model.DeviceType;
import org.openapitools.client.model.DeviceWithConfigContext;
import org.openapitools.client.model.FrontPort;
import org.openapitools.client.model.FrontPortTemplate;
import org.openapitools.client.model.InterfaceTemplate;
import org.openapitools.client.model.InventoryItem;
import org.openapitools.client.model.InventoryItemRole;
import org.openapitools.client.model.InventoryItemTemplate;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Manufacturer;
import org.openapitools.client.model.ModelInterface;
import org.openapitools.client.model.Module;
import org.openapitools.client.model.ModuleBay;
import org.openapitools.client.model.ModuleBayTemplate;
import org.openapitools.client.model.ModuleType;
import org.openapitools.client.model.Platform;
import org.openapitools.client.model.PowerFeed;
import org.openapitools.client.model.PowerOutlet;
import org.openapitools.client.model.PowerOutletTemplate;
import org.openapitools.client.model.PowerPanel;
import org.openapitools.client.model.PowerPort;
import org.openapitools.client.model.PowerPortTemplate;
import org.openapitools.client.model.Rack;
import org.openapitools.client.model.RackReservation;
import org.openapitools.client.model.RackRole;
import org.openapitools.client.model.RackUnit;
import org.openapitools.client.model.RearPort;
import org.openapitools.client.model.RearPortTemplate;
import org.openapitools.client.model.Region;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.SiteGroup;
import org.openapitools.client.model.VirtualChassis;
import org.openapitools.client.model.VirtualDeviceContext;
import org.openapitools.client.model.WritableCable;
import org.openapitools.client.model.WritableConsolePort;
import org.openapitools.client.model.WritableConsolePortTemplate;
import org.openapitools.client.model.WritableConsoleServerPort;
import org.openapitools.client.model.WritableConsoleServerPortTemplate;
import org.openapitools.client.model.WritableDeviceBay;
import org.openapitools.client.model.WritableDeviceBayTemplate;
import org.openapitools.client.model.WritableDeviceType;
import org.openapitools.client.model.WritableDeviceWithConfigContext;
import org.openapitools.client.model.WritableFrontPort;
import org.openapitools.client.model.WritableFrontPortTemplate;
import org.openapitools.client.model.WritableInterface;
import org.openapitools.client.model.WritableInterfaceTemplate;
import org.openapitools.client.model.WritableInventoryItem;
import org.openapitools.client.model.WritableInventoryItemTemplate;
import org.openapitools.client.model.WritableLocation;
import org.openapitools.client.model.WritableModule;
import org.openapitools.client.model.WritableModuleBay;
import org.openapitools.client.model.WritableModuleBayTemplate;
import org.openapitools.client.model.WritableModuleType;
import org.openapitools.client.model.WritablePlatform;
import org.openapitools.client.model.WritablePowerFeed;
import org.openapitools.client.model.WritablePowerOutlet;
import org.openapitools.client.model.WritablePowerOutletTemplate;
import org.openapitools.client.model.WritablePowerPanel;
import org.openapitools.client.model.WritablePowerPort;
import org.openapitools.client.model.WritablePowerPortTemplate;
import org.openapitools.client.model.WritableRack;
import org.openapitools.client.model.WritableRackReservation;
import org.openapitools.client.model.WritableRearPort;
import org.openapitools.client.model.WritableRearPortTemplate;
import org.openapitools.client.model.WritableRegion;
import org.openapitools.client.model.WritableSite;
import org.openapitools.client.model.WritableSiteGroup;
import org.openapitools.client.model.WritableVirtualChassis;
import org.openapitools.client.model.WritableVirtualDeviceContext;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DcimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DcimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DcimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dcimCableTerminationsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimCableTerminationsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCableTerminationsBulkDelete() throws ApiException {
        dcimCableTerminationsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCableTerminationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsBulkPartialUpdate
     * @param cableTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkPartialUpdateCall(CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cableTermination;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsBulkPartialUpdateValidateBeforeCall(CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cableTermination' is set
        if (cableTermination == null) {
            throw new ApiException("Missing the required parameter 'cableTermination' when calling dcimCableTerminationsBulkPartialUpdate(Async)");
        }

        return dcimCableTerminationsBulkPartialUpdateCall(cableTermination, _callback);

    }

    /**
     * 
     * 
     * @param cableTermination  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsBulkPartialUpdate(CableTermination cableTermination) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsBulkPartialUpdateWithHttpInfo(cableTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cableTermination  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsBulkPartialUpdateWithHttpInfo(CableTermination cableTermination) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsBulkPartialUpdateValidateBeforeCall(cableTermination, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cableTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkPartialUpdateAsync(CableTermination cableTermination, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsBulkPartialUpdateValidateBeforeCall(cableTermination, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsBulkUpdate
     * @param cableTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkUpdateCall(CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cableTermination;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsBulkUpdateValidateBeforeCall(CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cableTermination' is set
        if (cableTermination == null) {
            throw new ApiException("Missing the required parameter 'cableTermination' when calling dcimCableTerminationsBulkUpdate(Async)");
        }

        return dcimCableTerminationsBulkUpdateCall(cableTermination, _callback);

    }

    /**
     * 
     * 
     * @param cableTermination  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsBulkUpdate(CableTermination cableTermination) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsBulkUpdateWithHttpInfo(cableTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cableTermination  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsBulkUpdateWithHttpInfo(CableTermination cableTermination) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsBulkUpdateValidateBeforeCall(cableTermination, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cableTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsBulkUpdateAsync(CableTermination cableTermination, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsBulkUpdateValidateBeforeCall(cableTermination, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsCreate
     * @param cableTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsCreateCall(CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cableTermination;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsCreateValidateBeforeCall(CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cableTermination' is set
        if (cableTermination == null) {
            throw new ApiException("Missing the required parameter 'cableTermination' when calling dcimCableTerminationsCreate(Async)");
        }

        return dcimCableTerminationsCreateCall(cableTermination, _callback);

    }

    /**
     * 
     * 
     * @param cableTermination  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsCreate(CableTermination cableTermination) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsCreateWithHttpInfo(cableTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cableTermination  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsCreateWithHttpInfo(CableTermination cableTermination) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsCreateValidateBeforeCall(cableTermination, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cableTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsCreateAsync(CableTermination cableTermination, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsCreateValidateBeforeCall(cableTermination, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsDelete
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsDelete(Async)");
        }

        return dcimCableTerminationsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCableTerminationsDelete(Integer id) throws ApiException {
        dcimCableTerminationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCableTerminationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsList
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsListCall(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (cable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable", cable));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (terminationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_type", terminationType));
        }

        if (terminationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id", terminationId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (cableN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable__n", cableN));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (terminationTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_type__n", terminationTypeN));
        }

        if (terminationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__n", terminationIdN));
        }

        if (terminationIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__lte", terminationIdLte));
        }

        if (terminationIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__lt", terminationIdLt));
        }

        if (terminationIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__gte", terminationIdGte));
        }

        if (terminationIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_id__gt", terminationIdGt));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsListValidateBeforeCall(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimCableTerminationsListCall(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimCableTerminationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimCableTerminationsList200Response dcimCableTerminationsList(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimCableTerminationsList200Response> localVarResp = dcimCableTerminationsListWithHttpInfo(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimCableTerminationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimCableTerminationsList200Response> dcimCableTerminationsListWithHttpInfo(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsListValidateBeforeCall(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimCableTerminationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param cable  (optional)
     * @param cableEnd  (optional)
     * @param terminationType  (optional)
     * @param terminationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param cableN  (optional)
     * @param cableEndN  (optional)
     * @param terminationTypeN  (optional)
     * @param terminationIdN  (optional)
     * @param terminationIdLte  (optional)
     * @param terminationIdLt  (optional)
     * @param terminationIdGte  (optional)
     * @param terminationIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsListAsync(String id, String cable, String cableEnd, String terminationType, String terminationId, String idN, String idLte, String idLt, String idGte, String idGt, String cableN, String cableEndN, String terminationTypeN, String terminationIdN, String terminationIdLte, String terminationIdLt, String terminationIdGte, String terminationIdGt, String ordering, Integer limit, Integer offset, final ApiCallback<DcimCableTerminationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsListValidateBeforeCall(id, cable, cableEnd, terminationType, terminationId, idN, idLte, idLt, idGte, idGt, cableN, cableEndN, terminationTypeN, terminationIdN, terminationIdLte, terminationIdLt, terminationIdGte, terminationIdGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimCableTerminationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsPartialUpdate
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsPartialUpdateCall(Integer id, CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cableTermination;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsPartialUpdateValidateBeforeCall(Integer id, CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsPartialUpdate(Async)");
        }

        // verify the required parameter 'cableTermination' is set
        if (cableTermination == null) {
            throw new ApiException("Missing the required parameter 'cableTermination' when calling dcimCableTerminationsPartialUpdate(Async)");
        }

        return dcimCableTerminationsPartialUpdateCall(id, cableTermination, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsPartialUpdate(Integer id, CableTermination cableTermination) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsPartialUpdateWithHttpInfo(id, cableTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsPartialUpdateWithHttpInfo(Integer id, CableTermination cableTermination) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsPartialUpdateValidateBeforeCall(id, cableTermination, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsPartialUpdateAsync(Integer id, CableTermination cableTermination, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsPartialUpdateValidateBeforeCall(id, cableTermination, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsRead
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsRead(Async)");
        }

        return dcimCableTerminationsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsRead(Integer id) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsReadAsync(Integer id, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCableTerminationsUpdate
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsUpdateCall(Integer id, CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cableTermination;

        // create path and map variables
        String localVarPath = "/dcim/cable-terminations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCableTerminationsUpdateValidateBeforeCall(Integer id, CableTermination cableTermination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCableTerminationsUpdate(Async)");
        }

        // verify the required parameter 'cableTermination' is set
        if (cableTermination == null) {
            throw new ApiException("Missing the required parameter 'cableTermination' when calling dcimCableTerminationsUpdate(Async)");
        }

        return dcimCableTerminationsUpdateCall(id, cableTermination, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @return CableTermination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CableTermination dcimCableTerminationsUpdate(Integer id, CableTermination cableTermination) throws ApiException {
        ApiResponse<CableTermination> localVarResp = dcimCableTerminationsUpdateWithHttpInfo(id, cableTermination);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @return ApiResponse&lt;CableTermination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CableTermination> dcimCableTerminationsUpdateWithHttpInfo(Integer id, CableTermination cableTermination) throws ApiException {
        okhttp3.Call localVarCall = dcimCableTerminationsUpdateValidateBeforeCall(id, cableTermination, null);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable termination. (required)
     * @param cableTermination  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCableTerminationsUpdateAsync(Integer id, CableTermination cableTermination, final ApiCallback<CableTermination> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCableTerminationsUpdateValidateBeforeCall(id, cableTermination, _callback);
        Type localVarReturnType = new TypeToken<CableTermination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimCablesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCablesBulkDelete() throws ApiException {
        dcimCablesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCablesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimCablesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesBulkPartialUpdate
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkPartialUpdateCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesBulkPartialUpdateValidateBeforeCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesBulkPartialUpdate(Async)");
        }

        return dcimCablesBulkPartialUpdateCall(writableCable, _callback);

    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesBulkPartialUpdate(WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesBulkPartialUpdateWithHttpInfo(writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesBulkPartialUpdateWithHttpInfo(WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesBulkPartialUpdateValidateBeforeCall(writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkPartialUpdateAsync(WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesBulkPartialUpdateValidateBeforeCall(writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesBulkUpdate
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkUpdateCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesBulkUpdateValidateBeforeCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesBulkUpdate(Async)");
        }

        return dcimCablesBulkUpdateCall(writableCable, _callback);

    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesBulkUpdate(WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesBulkUpdateWithHttpInfo(writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesBulkUpdateWithHttpInfo(WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesBulkUpdateValidateBeforeCall(writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesBulkUpdateAsync(WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesBulkUpdateValidateBeforeCall(writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesCreate
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesCreateCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesCreateValidateBeforeCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesCreate(Async)");
        }

        return dcimCablesCreateCall(writableCable, _callback);

    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesCreate(WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesCreateWithHttpInfo(writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesCreateWithHttpInfo(WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesCreateValidateBeforeCall(writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesCreateAsync(WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesCreateValidateBeforeCall(writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesDelete
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesDelete(Async)");
        }

        return dcimCablesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCablesDelete(Integer id) throws ApiException {
        dcimCablesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCablesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesList
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesListCall(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (lengthUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_unit", lengthUnit));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (terminationAType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_type", terminationAType));
        }

        if (terminationAId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id", terminationAId));
        }

        if (terminationBType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_type", terminationBType));
        }

        if (terminationBId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id", terminationBId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (lengthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__n", lengthN));
        }

        if (lengthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__lte", lengthLte));
        }

        if (lengthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__lt", lengthLt));
        }

        if (lengthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__gte", lengthGte));
        }

        if (lengthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__gt", lengthGt));
        }

        if (lengthUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_unit__n", lengthUnitN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (terminationATypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_type__n", terminationATypeN));
        }

        if (terminationAIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__n", terminationAIdN));
        }

        if (terminationAIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__lte", terminationAIdLte));
        }

        if (terminationAIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__lt", terminationAIdLt));
        }

        if (terminationAIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__gte", terminationAIdGte));
        }

        if (terminationAIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_a_id__gt", terminationAIdGt));
        }

        if (terminationBTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_type__n", terminationBTypeN));
        }

        if (terminationBIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__n", terminationBIdN));
        }

        if (terminationBIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__lte", terminationBIdLte));
        }

        if (terminationBIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__lt", terminationBIdLt));
        }

        if (terminationBIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__gte", terminationBIdGte));
        }

        if (terminationBIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_b_id__gt", terminationBIdGt));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesListValidateBeforeCall(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimCablesListCall(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimCablesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimCablesList200Response dcimCablesList(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimCablesList200Response> localVarResp = dcimCablesListWithHttpInfo(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimCablesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimCablesList200Response> dcimCablesListWithHttpInfo(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesListValidateBeforeCall(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimCablesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param terminationAType  (optional)
     * @param terminationAId  (optional)
     * @param terminationBType  (optional)
     * @param terminationBId  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param terminationATypeN  (optional)
     * @param terminationAIdN  (optional)
     * @param terminationAIdLte  (optional)
     * @param terminationAIdLt  (optional)
     * @param terminationAIdGte  (optional)
     * @param terminationAIdGt  (optional)
     * @param terminationBTypeN  (optional)
     * @param terminationBIdN  (optional)
     * @param terminationBIdLte  (optional)
     * @param terminationBIdLt  (optional)
     * @param terminationBIdGte  (optional)
     * @param terminationBIdGt  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesListAsync(String id, String label, String length, String lengthUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String lastUpdated, String q, String tag, String terminationAType, String terminationAId, String terminationBType, String terminationBId, String type, String status, String color, String deviceId, String device, String rackId, String rack, String locationId, String location, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String terminationATypeN, String terminationAIdN, String terminationAIdLte, String terminationAIdLt, String terminationAIdGte, String terminationAIdGt, String terminationBTypeN, String terminationBIdN, String terminationBIdLte, String terminationBIdLt, String terminationBIdGte, String terminationBIdGt, String typeN, String statusN, String colorN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimCablesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesListValidateBeforeCall(id, label, length, lengthUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, lastUpdated, q, tag, terminationAType, terminationAId, terminationBType, terminationBId, type, status, color, deviceId, device, rackId, rack, locationId, location, siteId, site, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, terminationATypeN, terminationAIdN, terminationAIdLte, terminationAIdLt, terminationAIdGte, terminationAIdGt, terminationBTypeN, terminationBIdN, terminationBIdLte, terminationBIdLt, terminationBIdGte, terminationBIdGt, typeN, statusN, colorN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimCablesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesPartialUpdate
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesPartialUpdateCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesPartialUpdateValidateBeforeCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesPartialUpdate(Async)");
        }

        return dcimCablesPartialUpdateCall(id, writableCable, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesPartialUpdate(Integer id, WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesPartialUpdateWithHttpInfo(id, writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesPartialUpdateWithHttpInfo(Integer id, WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesPartialUpdateValidateBeforeCall(id, writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesPartialUpdateAsync(Integer id, WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesPartialUpdateValidateBeforeCall(id, writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesRead
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesRead(Async)");
        }

        return dcimCablesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesRead(Integer id) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesReadAsync(Integer id, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesUpdate
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesUpdateCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesUpdateValidateBeforeCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesUpdate(Async)");
        }

        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesUpdate(Async)");
        }

        return dcimCablesUpdateCall(id, writableCable, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesUpdate(Integer id, WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesUpdateWithHttpInfo(id, writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesUpdateWithHttpInfo(Integer id, WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesUpdateValidateBeforeCall(id, writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesUpdateAsync(Integer id, WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesUpdateValidateBeforeCall(id, writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConnectedDeviceList
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/connected-device/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peerDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_device", peerDevice));
        }

        if (peerInterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_interface", peerInterface));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConnectedDeviceListValidateBeforeCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peerDevice' is set
        if (peerDevice == null) {
            throw new ApiException("Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList(Async)");
        }

        // verify the required parameter 'peerInterface' is set
        if (peerInterface == null) {
            throw new ApiException("Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList(Async)");
        }

        return dcimConnectedDeviceListCall(peerDevice, peerInterface, _callback);

    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimConnectedDeviceList(String peerDevice, String peerInterface) throws ApiException {
        ApiResponse<Device> localVarResp = dcimConnectedDeviceListWithHttpInfo(peerDevice, peerInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimConnectedDeviceListWithHttpInfo(String peerDevice, String peerInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListAsync(String peerDevice, String peerInterface, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimConsolePortTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortTemplatesBulkDelete() throws ApiException {
        dcimConsolePortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesBulkPartialUpdate
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkPartialUpdateCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesBulkPartialUpdateValidateBeforeCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesBulkPartialUpdate(Async)");
        }

        return dcimConsolePortTemplatesBulkPartialUpdateCall(writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesBulkPartialUpdate(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesBulkPartialUpdateWithHttpInfo(writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesBulkPartialUpdateWithHttpInfo(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkPartialUpdateValidateBeforeCall(writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkPartialUpdateAsync(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkPartialUpdateValidateBeforeCall(writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesBulkUpdate
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkUpdateCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesBulkUpdateValidateBeforeCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesBulkUpdate(Async)");
        }

        return dcimConsolePortTemplatesBulkUpdateCall(writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesBulkUpdate(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesBulkUpdateWithHttpInfo(writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesBulkUpdateWithHttpInfo(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkUpdateValidateBeforeCall(writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesBulkUpdateAsync(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesBulkUpdateValidateBeforeCall(writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesCreate
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesCreateValidateBeforeCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesCreate(Async)");
        }

        return dcimConsolePortTemplatesCreateCall(writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesCreate(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesCreateWithHttpInfo(writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesCreateWithHttpInfo(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateAsync(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesDelete
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete(Async)");
        }

        return dcimConsolePortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortTemplatesDelete(Integer id) throws ApiException {
        dcimConsolePortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesListValidateBeforeCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsolePortTemplatesListCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsolePortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsolePortTemplatesList200Response dcimConsolePortTemplatesList(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsolePortTemplatesList200Response> localVarResp = dcimConsolePortTemplatesListWithHttpInfo(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsolePortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsolePortTemplatesList200Response> dcimConsolePortTemplatesListWithHttpInfo(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListAsync(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsolePortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }

        return dcimConsolePortTemplatesPartialUpdateCall(id, writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesPartialUpdate(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesPartialUpdateWithHttpInfo(id, writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateAsync(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesRead
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead(Async)");
        }

        return dcimConsolePortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadAsync(Integer id, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesUpdate(Async)");
        }

        return dcimConsolePortTemplatesUpdateCall(id, writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesUpdate(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesUpdateWithHttpInfo(id, writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateAsync(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimConsolePortsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortsBulkDelete() throws ApiException {
        dcimConsolePortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsBulkPartialUpdate
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkPartialUpdateCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsBulkPartialUpdateValidateBeforeCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsBulkPartialUpdate(Async)");
        }

        return dcimConsolePortsBulkPartialUpdateCall(writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsBulkPartialUpdate(WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsBulkPartialUpdateWithHttpInfo(writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsBulkPartialUpdateWithHttpInfo(WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsBulkPartialUpdateValidateBeforeCall(writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkPartialUpdateAsync(WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsBulkPartialUpdateValidateBeforeCall(writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsBulkUpdate
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkUpdateCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsBulkUpdateValidateBeforeCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsBulkUpdate(Async)");
        }

        return dcimConsolePortsBulkUpdateCall(writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsBulkUpdate(WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsBulkUpdateWithHttpInfo(writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsBulkUpdateWithHttpInfo(WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsBulkUpdateValidateBeforeCall(writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsBulkUpdateAsync(WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsBulkUpdateValidateBeforeCall(writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsCreate
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsCreateValidateBeforeCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsCreate(Async)");
        }

        return dcimConsolePortsCreateCall(writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsCreate(WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsCreateWithHttpInfo(writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsCreateWithHttpInfo(WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateAsync(WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsDelete
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsDelete(Async)");
        }

        return dcimConsolePortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortsDelete(Integer id) throws ApiException {
        dcimConsolePortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsListValidateBeforeCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsolePortsListCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsolePortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsolePortsList200Response dcimConsolePortsList(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsolePortsList200Response> localVarResp = dcimConsolePortsListWithHttpInfo(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsolePortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsolePortsList200Response> dcimConsolePortsListWithHttpInfo(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsolePortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListAsync(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsolePortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsolePortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsPartialUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsPartialUpdateValidateBeforeCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsPartialUpdate(Async)");
        }

        return dcimConsolePortsPartialUpdateCall(id, writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsPartialUpdate(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsPartialUpdateWithHttpInfo(id, writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsPartialUpdateWithHttpInfo(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateAsync(Integer id, WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsRead
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsRead(Async)");
        }

        return dcimConsolePortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsRead(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsTrace
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsTrace(Async)");
        }

        return dcimConsolePortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsTrace(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsTraceAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsUpdateValidateBeforeCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsUpdate(Async)");
        }

        return dcimConsolePortsUpdateCall(id, writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsUpdate(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsUpdateWithHttpInfo(id, writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsUpdateWithHttpInfo(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateAsync(Integer id, WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortTemplatesBulkDelete() throws ApiException {
        dcimConsoleServerPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesBulkPartialUpdate
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkPartialUpdateCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesBulkPartialUpdateValidateBeforeCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesBulkPartialUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesBulkPartialUpdateCall(writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesBulkPartialUpdate(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesBulkPartialUpdateWithHttpInfo(writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesBulkPartialUpdateWithHttpInfo(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkPartialUpdateValidateBeforeCall(writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkPartialUpdateAsync(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkPartialUpdateValidateBeforeCall(writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesBulkUpdate
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkUpdateCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesBulkUpdateValidateBeforeCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesBulkUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesBulkUpdateCall(writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesBulkUpdate(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesBulkUpdateWithHttpInfo(writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesBulkUpdateWithHttpInfo(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkUpdateValidateBeforeCall(writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesBulkUpdateAsync(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesBulkUpdateValidateBeforeCall(writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesCreate
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesCreateValidateBeforeCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesCreate(Async)");
        }

        return dcimConsoleServerPortTemplatesCreateCall(writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesCreate(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesCreateWithHttpInfo(writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesCreateWithHttpInfo(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateAsync(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesDelete
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete(Async)");
        }

        return dcimConsoleServerPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortTemplatesDelete(Integer id) throws ApiException {
        dcimConsoleServerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesListValidateBeforeCall(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortTemplatesListCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortTemplatesList200Response dcimConsoleServerPortTemplatesList(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortTemplatesList200Response> localVarResp = dcimConsoleServerPortTemplatesListWithHttpInfo(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortTemplatesList200Response> dcimConsoleServerPortTemplatesListWithHttpInfo(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListAsync(String id, String name, String type, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(id, name, type, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesPartialUpdateCall(id, writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesPartialUpdate(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(id, writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateAsync(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesRead
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead(Async)");
        }

        return dcimConsoleServerPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadAsync(Integer id, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesUpdateCall(id, writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesUpdate(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesUpdateWithHttpInfo(id, writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateAsync(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortsBulkDelete() throws ApiException {
        dcimConsoleServerPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsBulkPartialUpdate
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkPartialUpdateCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsBulkPartialUpdateValidateBeforeCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsBulkPartialUpdate(Async)");
        }

        return dcimConsoleServerPortsBulkPartialUpdateCall(writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsBulkPartialUpdate(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsBulkPartialUpdateWithHttpInfo(writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsBulkPartialUpdateWithHttpInfo(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkPartialUpdateValidateBeforeCall(writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkPartialUpdateAsync(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkPartialUpdateValidateBeforeCall(writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsBulkUpdate
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkUpdateCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsBulkUpdateValidateBeforeCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsBulkUpdate(Async)");
        }

        return dcimConsoleServerPortsBulkUpdateCall(writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsBulkUpdate(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsBulkUpdateWithHttpInfo(writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsBulkUpdateWithHttpInfo(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkUpdateValidateBeforeCall(writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsBulkUpdateAsync(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsBulkUpdateValidateBeforeCall(writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsCreate
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsCreateValidateBeforeCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsCreate(Async)");
        }

        return dcimConsoleServerPortsCreateCall(writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsCreate(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsCreateWithHttpInfo(writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsCreateWithHttpInfo(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateAsync(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsDelete
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete(Async)");
        }

        return dcimConsoleServerPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortsDelete(Integer id) throws ApiException {
        dcimConsoleServerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsListValidateBeforeCall(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortsListCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortsList200Response dcimConsoleServerPortsList(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortsList200Response> localVarResp = dcimConsoleServerPortsListWithHttpInfo(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortsList200Response> dcimConsoleServerPortsListWithHttpInfo(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListAsync(String id, String name, String label, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(id, name, label, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsPartialUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }

        return dcimConsoleServerPortsPartialUpdateCall(id, writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsPartialUpdate(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsPartialUpdateWithHttpInfo(id, writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateAsync(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsRead
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsRead(Async)");
        }

        return dcimConsoleServerPortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsTrace
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsTrace(Async)");
        }

        return dcimConsoleServerPortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsTrace(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsTraceAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsUpdate(Async)");
        }

        return dcimConsoleServerPortsUpdateCall(id, writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsUpdate(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsUpdateWithHttpInfo(id, writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsUpdateWithHttpInfo(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateAsync(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimDeviceBayTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBayTemplatesBulkDelete() throws ApiException {
        dcimDeviceBayTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBayTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesBulkPartialUpdate
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkPartialUpdateCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesBulkPartialUpdateValidateBeforeCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesBulkPartialUpdate(Async)");
        }

        return dcimDeviceBayTemplatesBulkPartialUpdateCall(writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesBulkPartialUpdate(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesBulkPartialUpdateWithHttpInfo(writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesBulkPartialUpdateWithHttpInfo(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkPartialUpdateValidateBeforeCall(writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkPartialUpdateAsync(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkPartialUpdateValidateBeforeCall(writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesBulkUpdate
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkUpdateCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesBulkUpdateValidateBeforeCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesBulkUpdate(Async)");
        }

        return dcimDeviceBayTemplatesBulkUpdateCall(writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesBulkUpdate(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesBulkUpdateWithHttpInfo(writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesBulkUpdateWithHttpInfo(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkUpdateValidateBeforeCall(writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesBulkUpdateAsync(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesBulkUpdateValidateBeforeCall(writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesCreate
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesCreateValidateBeforeCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesCreate(Async)");
        }

        return dcimDeviceBayTemplatesCreateCall(writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesCreate(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesCreateWithHttpInfo(writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesCreateWithHttpInfo(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateAsync(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesDelete
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete(Async)");
        }

        return dcimDeviceBayTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBayTemplatesDelete(Integer id) throws ApiException {
        dcimDeviceBayTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceBayTemplatesListCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBayTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBayTemplatesList200Response dcimDeviceBayTemplatesList(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBayTemplatesList200Response> localVarResp = dcimDeviceBayTemplatesListWithHttpInfo(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBayTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBayTemplatesList200Response> dcimDeviceBayTemplatesListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListAsync(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceBayTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesPartialUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }

        return dcimDeviceBayTemplatesPartialUpdateCall(id, writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesPartialUpdate(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(id, writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateAsync(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesRead
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead(Async)");
        }

        return dcimDeviceBayTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesRead(Integer id) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadAsync(Integer id, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }

        return dcimDeviceBayTemplatesUpdateCall(id, writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesUpdate(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesUpdateWithHttpInfo(id, writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateAsync(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimDeviceBaysBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBaysBulkDelete() throws ApiException {
        dcimDeviceBaysBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBaysBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysBulkPartialUpdate
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkPartialUpdateCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysBulkPartialUpdateValidateBeforeCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysBulkPartialUpdate(Async)");
        }

        return dcimDeviceBaysBulkPartialUpdateCall(writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysBulkPartialUpdate(WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysBulkPartialUpdateWithHttpInfo(writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysBulkPartialUpdateWithHttpInfo(WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysBulkPartialUpdateValidateBeforeCall(writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkPartialUpdateAsync(WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysBulkPartialUpdateValidateBeforeCall(writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysBulkUpdate
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkUpdateCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysBulkUpdateValidateBeforeCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysBulkUpdate(Async)");
        }

        return dcimDeviceBaysBulkUpdateCall(writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysBulkUpdate(WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysBulkUpdateWithHttpInfo(writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysBulkUpdateWithHttpInfo(WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysBulkUpdateValidateBeforeCall(writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysBulkUpdateAsync(WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysBulkUpdateValidateBeforeCall(writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysCreate
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysCreateValidateBeforeCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysCreate(Async)");
        }

        return dcimDeviceBaysCreateCall(writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysCreate(WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysCreateWithHttpInfo(writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysCreateWithHttpInfo(WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateAsync(WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysDelete
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysDelete(Async)");
        }

        return dcimDeviceBaysDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBaysDelete(Integer id) throws ApiException {
        dcimDeviceBaysDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBaysDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysListValidateBeforeCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceBaysListCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBaysList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBaysList200Response dcimDeviceBaysList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBaysList200Response> localVarResp = dcimDeviceBaysListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBaysList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBaysList200Response> dcimDeviceBaysListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListAsync(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceBaysList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysPartialUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysPartialUpdate(Async)");
        }

        return dcimDeviceBaysPartialUpdateCall(id, writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysPartialUpdate(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysPartialUpdateWithHttpInfo(id, writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysPartialUpdateWithHttpInfo(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateAsync(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysRead
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysRead(Async)");
        }

        return dcimDeviceBaysReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysRead(Integer id) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadAsync(Integer id, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysUpdateValidateBeforeCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysUpdate(Async)");
        }

        return dcimDeviceBaysUpdateCall(id, writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysUpdate(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysUpdateWithHttpInfo(id, writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysUpdateWithHttpInfo(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateAsync(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimDeviceRolesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceRolesBulkDelete() throws ApiException {
        dcimDeviceRolesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesBulkPartialUpdate
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkPartialUpdateCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesBulkPartialUpdateValidateBeforeCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesBulkPartialUpdate(Async)");
        }

        return dcimDeviceRolesBulkPartialUpdateCall(deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesBulkPartialUpdate(DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesBulkPartialUpdateWithHttpInfo(deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesBulkPartialUpdateWithHttpInfo(DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesBulkPartialUpdateValidateBeforeCall(deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkPartialUpdateAsync(DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesBulkPartialUpdateValidateBeforeCall(deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesBulkUpdate
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkUpdateCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesBulkUpdateValidateBeforeCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesBulkUpdate(Async)");
        }

        return dcimDeviceRolesBulkUpdateCall(deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesBulkUpdate(DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesBulkUpdateWithHttpInfo(deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesBulkUpdateWithHttpInfo(DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesBulkUpdateValidateBeforeCall(deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesBulkUpdateAsync(DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesBulkUpdateValidateBeforeCall(deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesCreate
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesCreateValidateBeforeCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesCreate(Async)");
        }

        return dcimDeviceRolesCreateCall(deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesCreate(DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesCreateWithHttpInfo(deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesCreateWithHttpInfo(DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateAsync(DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesDelete
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesDelete(Async)");
        }

        return dcimDeviceRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceRolesDelete(Integer id) throws ApiException {
        dcimDeviceRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListCall(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (vmRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vm_role", vmRole));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesListValidateBeforeCall(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceRolesListCall(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceRolesList200Response dcimDeviceRolesList(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceRolesList200Response> localVarResp = dcimDeviceRolesListWithHttpInfo(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceRolesList200Response> dcimDeviceRolesListWithHttpInfo(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListAsync(String id, String name, String slug, String color, String vmRole, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(id, name, slug, color, vmRole, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesPartialUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesPartialUpdateValidateBeforeCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesPartialUpdate(Async)");
        }

        return dcimDeviceRolesPartialUpdateCall(id, deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesPartialUpdate(Integer id, DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesPartialUpdateWithHttpInfo(id, deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesPartialUpdateWithHttpInfo(Integer id, DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateAsync(Integer id, DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesRead
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesRead(Async)");
        }

        return dcimDeviceRolesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesRead(Integer id) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadAsync(Integer id, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesUpdateValidateBeforeCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesUpdate(Async)");
        }

        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesUpdate(Async)");
        }

        return dcimDeviceRolesUpdateCall(id, deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesUpdate(Integer id, DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesUpdateWithHttpInfo(id, deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesUpdateWithHttpInfo(Integer id, DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateAsync(Integer id, DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimDeviceTypesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceTypesBulkDelete() throws ApiException {
        dcimDeviceTypesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceTypesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesBulkPartialUpdate
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkPartialUpdateCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesBulkPartialUpdateValidateBeforeCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesBulkPartialUpdate(Async)");
        }

        return dcimDeviceTypesBulkPartialUpdateCall(writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesBulkPartialUpdate(WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesBulkPartialUpdateWithHttpInfo(writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesBulkPartialUpdateWithHttpInfo(WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesBulkPartialUpdateValidateBeforeCall(writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkPartialUpdateAsync(WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesBulkPartialUpdateValidateBeforeCall(writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesBulkUpdate
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkUpdateCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesBulkUpdateValidateBeforeCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesBulkUpdate(Async)");
        }

        return dcimDeviceTypesBulkUpdateCall(writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesBulkUpdate(WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesBulkUpdateWithHttpInfo(writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesBulkUpdateWithHttpInfo(WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesBulkUpdateValidateBeforeCall(writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesBulkUpdateAsync(WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesBulkUpdateValidateBeforeCall(writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesCreate
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesCreateValidateBeforeCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesCreate(Async)");
        }

        return dcimDeviceTypesCreateCall(writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesCreate(WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesCreateWithHttpInfo(writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesCreateWithHttpInfo(WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateAsync(WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesDelete
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesDelete(Async)");
        }

        return dcimDeviceTypesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceTypesDelete(Integer id) throws ApiException {
        dcimDeviceTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesList
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param hasFrontImage  (optional)
     * @param hasRearImage  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListCall(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String hasFrontImage, String hasRearImage, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number", partNumber));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (subdeviceRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role", subdeviceRole));
        }

        if (airflow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow", airflow));
        }

        if (weight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight", weight));
        }

        if (weightUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_unit", weightUnit));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (hasFrontImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_front_image", hasFrontImage));
        }

        if (hasRearImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_rear_image", hasRearImage));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (moduleBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bays", moduleBays));
        }

        if (deviceBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_bays", deviceBays));
        }

        if (inventoryItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inventory_items", inventoryItems));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (modelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ic", modelIc));
        }

        if (modelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nic", modelNic));
        }

        if (modelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__iew", modelIew));
        }

        if (modelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__niew", modelNiew));
        }

        if (modelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__isw", modelIsw));
        }

        if (modelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nisw", modelNisw));
        }

        if (modelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ie", modelIe));
        }

        if (modelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nie", modelNie));
        }

        if (modelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__empty", modelEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (partNumberN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__n", partNumberN));
        }

        if (partNumberIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ic", partNumberIc));
        }

        if (partNumberNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nic", partNumberNic));
        }

        if (partNumberIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__iew", partNumberIew));
        }

        if (partNumberNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__niew", partNumberNiew));
        }

        if (partNumberIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__isw", partNumberIsw));
        }

        if (partNumberNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nisw", partNumberNisw));
        }

        if (partNumberIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ie", partNumberIe));
        }

        if (partNumberNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nie", partNumberNie));
        }

        if (partNumberEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__empty", partNumberEmpty));
        }

        if (uHeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__n", uHeightN));
        }

        if (uHeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lte", uHeightLte));
        }

        if (uHeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lt", uHeightLt));
        }

        if (uHeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gte", uHeightGte));
        }

        if (uHeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gt", uHeightGt));
        }

        if (subdeviceRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role__n", subdeviceRoleN));
        }

        if (airflowN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow__n", airflowN));
        }

        if (weightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__n", weightN));
        }

        if (weightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lte", weightLte));
        }

        if (weightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lt", weightLt));
        }

        if (weightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gte", weightGte));
        }

        if (weightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gt", weightGt));
        }

        if (weightUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_unit__n", weightUnitN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesListValidateBeforeCall(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String hasFrontImage, String hasRearImage, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceTypesListCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, hasFrontImage, hasRearImage, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param hasFrontImage  (optional)
     * @param hasRearImage  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceTypesList200Response dcimDeviceTypesList(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String hasFrontImage, String hasRearImage, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceTypesList200Response> localVarResp = dcimDeviceTypesListWithHttpInfo(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, hasFrontImage, hasRearImage, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param hasFrontImage  (optional)
     * @param hasRearImage  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceTypesList200Response> dcimDeviceTypesListWithHttpInfo(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String hasFrontImage, String hasRearImage, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, hasFrontImage, hasRearImage, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param airflow  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param hasFrontImage  (optional)
     * @param hasRearImage  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param inventoryItems  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param airflowN  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListAsync(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String airflow, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String hasFrontImage, String hasRearImage, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String inventoryItems, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String airflowN, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDeviceTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, airflow, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, hasFrontImage, hasRearImage, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, inventoryItems, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, airflowN, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesPartialUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesPartialUpdate(Async)");
        }

        return dcimDeviceTypesPartialUpdateCall(id, writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesPartialUpdate(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesPartialUpdateWithHttpInfo(id, writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesPartialUpdateWithHttpInfo(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateAsync(Integer id, WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesRead
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesRead(Async)");
        }

        return dcimDeviceTypesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesRead(Integer id) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadAsync(Integer id, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesUpdateValidateBeforeCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesUpdate(Async)");
        }

        return dcimDeviceTypesUpdateCall(id, writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesUpdate(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesUpdateWithHttpInfo(id, writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesUpdateWithHttpInfo(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateAsync(Integer id, WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimDevicesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDevicesBulkDelete() throws ApiException {
        dcimDevicesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDevicesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesBulkPartialUpdate
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkPartialUpdateCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesBulkPartialUpdateValidateBeforeCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesBulkPartialUpdate(Async)");
        }

        return dcimDevicesBulkPartialUpdateCall(writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesBulkPartialUpdate(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesBulkPartialUpdateWithHttpInfo(writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesBulkPartialUpdateWithHttpInfo(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesBulkPartialUpdateValidateBeforeCall(writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkPartialUpdateAsync(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesBulkPartialUpdateValidateBeforeCall(writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesBulkUpdate
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkUpdateCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesBulkUpdateValidateBeforeCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesBulkUpdate(Async)");
        }

        return dcimDevicesBulkUpdateCall(writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesBulkUpdate(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesBulkUpdateWithHttpInfo(writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesBulkUpdateWithHttpInfo(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesBulkUpdateValidateBeforeCall(writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesBulkUpdateAsync(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesBulkUpdateValidateBeforeCall(writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesCreate
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesCreateValidateBeforeCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesCreate(Async)");
        }

        return dcimDevicesCreateCall(writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesCreate(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesCreateWithHttpInfo(writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesCreateWithHttpInfo(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateAsync(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesDelete
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesDelete(Async)");
        }

        return dcimDevicesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDevicesDelete(Integer id) throws ApiException {
        dcimDevicesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDevicesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesList
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceType  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param primaryIp4Id  (optional)
     * @param primaryIp6Id  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param virtualChassisIdN  (optional)
     * @param primaryIp4IdN  (optional)
     * @param primaryIp6IdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListCall(String id, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceType, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String name, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String primaryIp4Id, String primaryIp6Id, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String virtualChassisIdN, String primaryIp4IdN, String primaryIp6IdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (face != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face", face));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (airflow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow", airflow));
        }

        if (vcPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position", vcPosition));
        }

        if (vcPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority", vcPriority));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (localContextData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local_context_data", localContextData));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (deviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type", deviceType));
        }

        if (deviceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id", deviceTypeId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (parentDeviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_device_id", parentDeviceId));
        }

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (hasPrimaryIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_primary_ip", hasPrimaryIp));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassisMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_member", virtualChassisMember));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (moduleBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bays", moduleBays));
        }

        if (deviceBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_bays", deviceBays));
        }

        if (primaryIp4Id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primary_ip4_id", primaryIp4Id));
        }

        if (primaryIp6Id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primary_ip6_id", primaryIp6Id));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (assetTagEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__empty", assetTagEmpty));
        }

        if (faceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face__n", faceN));
        }

        if (positionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__n", positionN));
        }

        if (positionLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__lte", positionLte));
        }

        if (positionLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__lt", positionLt));
        }

        if (positionGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__gte", positionGte));
        }

        if (positionGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__gt", positionGt));
        }

        if (airflowN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("airflow__n", airflowN));
        }

        if (vcPositionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__n", vcPositionN));
        }

        if (vcPositionLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__lte", vcPositionLte));
        }

        if (vcPositionLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__lt", vcPositionLt));
        }

        if (vcPositionGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__gte", vcPositionGte));
        }

        if (vcPositionGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__gt", vcPositionGt));
        }

        if (vcPriorityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__n", vcPriorityN));
        }

        if (vcPriorityLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__lte", vcPriorityLte));
        }

        if (vcPriorityLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__lt", vcPriorityLt));
        }

        if (vcPriorityGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__gte", vcPriorityGte));
        }

        if (vcPriorityGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__gt", vcPriorityGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (deviceTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type__n", deviceTypeN));
        }

        if (deviceTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id__n", deviceTypeIdN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (parentDeviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_device_id__n", parentDeviceIdN));
        }

        if (platformIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id__n", platformIdN));
        }

        if (platformN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform__n", platformN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }

        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }

        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }

        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }

        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }

        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }

        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }

        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }

        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (serialEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__empty", serialEmpty));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (primaryIp4IdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primary_ip4_id__n", primaryIp4IdN));
        }

        if (primaryIp6IdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primary_ip6_id__n", primaryIp6IdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesListValidateBeforeCall(String id, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceType, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String name, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String primaryIp4Id, String primaryIp6Id, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String virtualChassisIdN, String primaryIp4IdN, String primaryIp6IdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDevicesListCall(id, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceType, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, name, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, primaryIp4Id, primaryIp6Id, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, virtualChassisIdN, primaryIp4IdN, primaryIp6IdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceType  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param primaryIp4Id  (optional)
     * @param primaryIp6Id  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param virtualChassisIdN  (optional)
     * @param primaryIp4IdN  (optional)
     * @param primaryIp6IdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDevicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDevicesList200Response dcimDevicesList(String id, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceType, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String name, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String primaryIp4Id, String primaryIp6Id, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String virtualChassisIdN, String primaryIp4IdN, String primaryIp6IdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDevicesList200Response> localVarResp = dcimDevicesListWithHttpInfo(id, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceType, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, name, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, primaryIp4Id, primaryIp6Id, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, virtualChassisIdN, primaryIp4IdN, primaryIp6IdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceType  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param primaryIp4Id  (optional)
     * @param primaryIp6Id  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param virtualChassisIdN  (optional)
     * @param primaryIp4IdN  (optional)
     * @param primaryIp6IdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDevicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDevicesList200Response> dcimDevicesListWithHttpInfo(String id, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceType, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String name, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String primaryIp4Id, String primaryIp6Id, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String virtualChassisIdN, String primaryIp4IdN, String primaryIp6IdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(id, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceType, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, name, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, primaryIp4Id, primaryIp6Id, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, virtualChassisIdN, primaryIp4IdN, primaryIp6IdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param airflow  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param localContextData  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceType  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param parentDeviceId  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param moduleBays  (optional)
     * @param deviceBays  (optional)
     * @param primaryIp4Id  (optional)
     * @param primaryIp6Id  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param airflowN  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param parentDeviceIdN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param virtualChassisIdN  (optional)
     * @param primaryIp4IdN  (optional)
     * @param primaryIp6IdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListAsync(String id, String assetTag, String face, String position, String airflow, String vcPosition, String vcPriority, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String localContextData, String manufacturerId, String manufacturer, String deviceType, String deviceTypeId, String roleId, String role, String parentDeviceId, String platformId, String platform, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String rackId, String clusterId, String model, String name, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String moduleBays, String deviceBays, String primaryIp4Id, String primaryIp6Id, String idN, String idLte, String idLt, String idGte, String idGt, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String airflowN, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String manufacturerIdN, String manufacturerN, String deviceTypeN, String deviceTypeIdN, String roleIdN, String roleN, String parentDeviceIdN, String platformIdN, String platformN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String rackIdN, String clusterIdN, String modelN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String virtualChassisIdN, String primaryIp4IdN, String primaryIp6IdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimDevicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(id, assetTag, face, position, airflow, vcPosition, vcPriority, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, localContextData, manufacturerId, manufacturer, deviceType, deviceTypeId, roleId, role, parentDeviceId, platformId, platform, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, rackId, clusterId, model, name, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, moduleBays, deviceBays, primaryIp4Id, primaryIp6Id, idN, idLte, idLt, idGte, idGt, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, faceN, positionN, positionLte, positionLt, positionGte, positionGt, airflowN, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, manufacturerIdN, manufacturerN, deviceTypeN, deviceTypeIdN, roleIdN, roleN, parentDeviceIdN, platformIdN, platformN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, rackIdN, clusterIdN, modelN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, virtualChassisIdN, primaryIp4IdN, primaryIp6IdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesNapalm
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmCall(Integer id, String method, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/napalm/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesNapalmValidateBeforeCall(Integer id, String method, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesNapalm(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling dcimDevicesNapalm(Async)");
        }

        return dcimDevicesNapalmCall(id, method, _callback);

    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @return DeviceNAPALM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceNAPALM dcimDevicesNapalm(Integer id, String method) throws ApiException {
        ApiResponse<DeviceNAPALM> localVarResp = dcimDevicesNapalmWithHttpInfo(id, method);
        return localVarResp.getData();
    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @return ApiResponse&lt;DeviceNAPALM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceNAPALM> dcimDevicesNapalmWithHttpInfo(Integer id, String method) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, method, null);
        Type localVarReturnType = new TypeToken<DeviceNAPALM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmAsync(Integer id, String method, final ApiCallback<DeviceNAPALM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, method, _callback);
        Type localVarReturnType = new TypeToken<DeviceNAPALM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesPartialUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesPartialUpdate(Async)");
        }

        return dcimDevicesPartialUpdateCall(id, writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesPartialUpdate(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesPartialUpdateWithHttpInfo(id, writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesPartialUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateAsync(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesRead
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesRead(Async)");
        }

        return dcimDevicesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesRead(Integer id) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadAsync(Integer id, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesUpdateValidateBeforeCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesUpdate(Async)");
        }

        return dcimDevicesUpdateCall(id, writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesUpdate(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesUpdateWithHttpInfo(id, writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateAsync(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimFrontPortTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortTemplatesBulkDelete() throws ApiException {
        dcimFrontPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesBulkPartialUpdate
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkPartialUpdateCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesBulkPartialUpdateValidateBeforeCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesBulkPartialUpdate(Async)");
        }

        return dcimFrontPortTemplatesBulkPartialUpdateCall(writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesBulkPartialUpdate(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesBulkPartialUpdateWithHttpInfo(writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesBulkPartialUpdateWithHttpInfo(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkPartialUpdateValidateBeforeCall(writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkPartialUpdateAsync(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkPartialUpdateValidateBeforeCall(writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesBulkUpdate
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkUpdateCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesBulkUpdateValidateBeforeCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesBulkUpdate(Async)");
        }

        return dcimFrontPortTemplatesBulkUpdateCall(writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesBulkUpdate(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesBulkUpdateWithHttpInfo(writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesBulkUpdateWithHttpInfo(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkUpdateValidateBeforeCall(writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesBulkUpdateAsync(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesBulkUpdateValidateBeforeCall(writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesCreate
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesCreateCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesCreateValidateBeforeCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesCreate(Async)");
        }

        return dcimFrontPortTemplatesCreateCall(writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesCreate(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesCreateWithHttpInfo(writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesCreateWithHttpInfo(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateValidateBeforeCall(writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesCreateAsync(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateValidateBeforeCall(writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesDelete
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesDelete(Async)");
        }

        return dcimFrontPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortTemplatesDelete(Integer id) throws ApiException {
        dcimFrontPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesListCall(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesListValidateBeforeCall(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimFrontPortTemplatesListCall(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimFrontPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimFrontPortTemplatesList200Response dcimFrontPortTemplatesList(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimFrontPortTemplatesList200Response> localVarResp = dcimFrontPortTemplatesListWithHttpInfo(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimFrontPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimFrontPortTemplatesList200Response> dcimFrontPortTemplatesListWithHttpInfo(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesListValidateBeforeCall(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimFrontPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesListAsync(String id, String name, String type, String color, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimFrontPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesListValidateBeforeCall(id, name, type, color, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimFrontPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesPartialUpdateCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesPartialUpdate(Async)");
        }

        return dcimFrontPortTemplatesPartialUpdateCall(id, writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesPartialUpdate(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesPartialUpdateWithHttpInfo(id, writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(id, writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesPartialUpdateAsync(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(id, writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesRead
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesRead(Async)");
        }

        return dcimFrontPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesReadAsync(Integer id, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesUpdate
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesUpdateCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesUpdateValidateBeforeCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesUpdate(Async)");
        }

        return dcimFrontPortTemplatesUpdateCall(id, writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesUpdate(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesUpdateWithHttpInfo(id, writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateValidateBeforeCall(id, writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesUpdateAsync(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateValidateBeforeCall(id, writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimFrontPortsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortsBulkDelete() throws ApiException {
        dcimFrontPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsBulkPartialUpdate
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkPartialUpdateCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsBulkPartialUpdateValidateBeforeCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsBulkPartialUpdate(Async)");
        }

        return dcimFrontPortsBulkPartialUpdateCall(writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsBulkPartialUpdate(WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsBulkPartialUpdateWithHttpInfo(writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsBulkPartialUpdateWithHttpInfo(WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsBulkPartialUpdateValidateBeforeCall(writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkPartialUpdateAsync(WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsBulkPartialUpdateValidateBeforeCall(writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsBulkUpdate
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkUpdateCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsBulkUpdateValidateBeforeCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsBulkUpdate(Async)");
        }

        return dcimFrontPortsBulkUpdateCall(writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsBulkUpdate(WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsBulkUpdateWithHttpInfo(writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsBulkUpdateWithHttpInfo(WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsBulkUpdateValidateBeforeCall(writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsBulkUpdateAsync(WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsBulkUpdateValidateBeforeCall(writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsCreate
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsCreateCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsCreateValidateBeforeCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsCreate(Async)");
        }

        return dcimFrontPortsCreateCall(writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsCreate(WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsCreateWithHttpInfo(writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsCreateWithHttpInfo(WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsCreateValidateBeforeCall(writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsCreateAsync(WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsCreateValidateBeforeCall(writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsDelete
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsDelete(Async)");
        }

        return dcimFrontPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortsDelete(Integer id) throws ApiException {
        dcimFrontPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsListCall(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsListValidateBeforeCall(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimFrontPortsListCall(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimFrontPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimFrontPortsList200Response dcimFrontPortsList(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimFrontPortsList200Response> localVarResp = dcimFrontPortsListWithHttpInfo(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimFrontPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimFrontPortsList200Response> dcimFrontPortsListWithHttpInfo(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsListValidateBeforeCall(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimFrontPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsListAsync(String id, String name, String label, String type, String color, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimFrontPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsListValidateBeforeCall(id, name, label, type, color, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimFrontPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsPartialUpdate
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPartialUpdateCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsPartialUpdateValidateBeforeCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsPartialUpdate(Async)");
        }

        return dcimFrontPortsPartialUpdateCall(id, writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsPartialUpdate(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsPartialUpdateWithHttpInfo(id, writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsPartialUpdateWithHttpInfo(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateValidateBeforeCall(id, writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPartialUpdateAsync(Integer id, WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateValidateBeforeCall(id, writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsPaths
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPathsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/paths/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsPathsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsPaths(Async)");
        }

        return dcimFrontPortsPathsCall(id, _callback);

    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this front port. (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsPaths(Integer id) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsPathsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsPathsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsPathsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPathsAsync(Integer id, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsPathsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsRead
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsRead(Async)");
        }

        return dcimFrontPortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsRead(Integer id) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsReadAsync(Integer id, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsUpdate
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsUpdateCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsUpdateValidateBeforeCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsUpdate(Async)");
        }

        return dcimFrontPortsUpdateCall(id, writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsUpdate(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsUpdateWithHttpInfo(id, writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsUpdateWithHttpInfo(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsUpdateValidateBeforeCall(id, writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsUpdateAsync(Integer id, WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsUpdateValidateBeforeCall(id, writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimInterfaceTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceTemplatesBulkDelete() throws ApiException {
        dcimInterfaceTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesBulkPartialUpdate
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkPartialUpdateCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesBulkPartialUpdateValidateBeforeCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesBulkPartialUpdate(Async)");
        }

        return dcimInterfaceTemplatesBulkPartialUpdateCall(writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesBulkPartialUpdate(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesBulkPartialUpdateWithHttpInfo(writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesBulkPartialUpdateWithHttpInfo(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkPartialUpdateValidateBeforeCall(writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkPartialUpdateAsync(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkPartialUpdateValidateBeforeCall(writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesBulkUpdate
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkUpdateCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesBulkUpdateValidateBeforeCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesBulkUpdate(Async)");
        }

        return dcimInterfaceTemplatesBulkUpdateCall(writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesBulkUpdate(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesBulkUpdateWithHttpInfo(writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesBulkUpdateWithHttpInfo(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkUpdateValidateBeforeCall(writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesBulkUpdateAsync(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesBulkUpdateValidateBeforeCall(writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesCreate
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesCreateValidateBeforeCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesCreate(Async)");
        }

        return dcimInterfaceTemplatesCreateCall(writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesCreate(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesCreateWithHttpInfo(writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesCreateWithHttpInfo(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateAsync(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesDelete
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete(Async)");
        }

        return dcimInterfaceTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceTemplatesDelete(Integer id) throws ApiException {
        dcimInterfaceTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListCall(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (poeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode", poeMode));
        }

        if (poeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type", poeType));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (poeModeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode__n", poeModeN));
        }

        if (poeTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type__n", poeTypeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesListValidateBeforeCall(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfaceTemplatesListCall(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfaceTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfaceTemplatesList200Response dcimInterfaceTemplatesList(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfaceTemplatesList200Response> localVarResp = dcimInterfaceTemplatesListWithHttpInfo(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfaceTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfaceTemplatesList200Response> dcimInterfaceTemplatesListWithHttpInfo(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListAsync(String id, String name, String type, String mgmtOnly, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String poeMode, String poeType, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String poeModeN, String poeTypeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInterfaceTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(id, name, type, mgmtOnly, created, lastUpdated, q, devicetypeId, moduletypeId, poeMode, poeType, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, poeModeN, poeTypeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesPartialUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }

        return dcimInterfaceTemplatesPartialUpdateCall(id, writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesPartialUpdate(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesPartialUpdateWithHttpInfo(id, writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateAsync(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesRead
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead(Async)");
        }

        return dcimInterfaceTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesRead(Integer id) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadAsync(Integer id, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesUpdate(Async)");
        }

        return dcimInterfaceTemplatesUpdateCall(id, writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesUpdate(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesUpdateWithHttpInfo(id, writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateAsync(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimInterfacesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfacesBulkDelete() throws ApiException {
        dcimInterfacesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfacesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesBulkPartialUpdate
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkPartialUpdateCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesBulkPartialUpdateValidateBeforeCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesBulkPartialUpdate(Async)");
        }

        return dcimInterfacesBulkPartialUpdateCall(writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesBulkPartialUpdate(WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesBulkPartialUpdateWithHttpInfo(writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesBulkPartialUpdateWithHttpInfo(WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesBulkPartialUpdateValidateBeforeCall(writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkPartialUpdateAsync(WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesBulkPartialUpdateValidateBeforeCall(writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesBulkUpdate
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkUpdateCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesBulkUpdateValidateBeforeCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesBulkUpdate(Async)");
        }

        return dcimInterfacesBulkUpdateCall(writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesBulkUpdate(WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesBulkUpdateWithHttpInfo(writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesBulkUpdateWithHttpInfo(WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesBulkUpdateValidateBeforeCall(writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesBulkUpdateAsync(WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesBulkUpdateValidateBeforeCall(writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesCreate
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesCreateValidateBeforeCall(WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesCreate(Async)");
        }

        return dcimInterfacesCreateCall(writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesCreate(WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesCreateWithHttpInfo(writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesCreateWithHttpInfo(WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateAsync(WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesDelete
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesDelete(Async)");
        }

        return dcimInterfacesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfacesDelete(Integer id) throws ApiException {
        dcimInterfacesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param vdcId  (optional)
     * @param vdcIdentifier  (optional)
     * @param vdc  (optional)
     * @param l2vpnId  (optional)
     * @param l2vpn  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param vdcIdN  (optional)
     * @param vdcIdentifierN  (optional)
     * @param vdcN  (optional)
     * @param l2vpnIdN  (optional)
     * @param l2vpnN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListCall(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String vdcId, String vdcIdentifier, String vdc, String l2vpnId, String l2vpn, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String vdcIdN, String vdcIdentifierN, String vdcN, String l2vpnIdN, String l2vpnN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (mtu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu", mtu));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (poeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode", poeMode));
        }

        if (poeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type", poeType));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (rfRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_role", rfRole));
        }

        if (rfChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel", rfChannel));
        }

        if (rfChannelFrequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency", rfChannelFrequency));
        }

        if (rfChannelWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width", rfChannelWidth));
        }

        if (txPower != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power", txPower));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (bridgeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_id", bridgeId));
        }

        if (lagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id", lagId));
        }

        if (speed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed", speed));
        }

        if (duplex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplex", duplex));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (wwn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn", wwn));
        }

        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (vrfId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id", vrfId));
        }

        if (vrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf", vrf));
        }

        if (vdcId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vdc_id", vdcId));
        }

        if (vdcIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vdc_identifier", vdcIdentifier));
        }

        if (vdc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vdc", vdc));
        }

        if (l2vpnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn_id", l2vpnId));
        }

        if (l2vpn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn", l2vpn));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (mtuN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__n", mtuN));
        }

        if (mtuLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lte", mtuLte));
        }

        if (mtuLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lt", mtuLt));
        }

        if (mtuGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gte", mtuGte));
        }

        if (mtuGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gt", mtuGt));
        }

        if (poeModeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_mode__n", poeModeN));
        }

        if (poeTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poe_type__n", poeTypeN));
        }

        if (modeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode__n", modeN));
        }

        if (rfRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_role__n", rfRoleN));
        }

        if (rfChannelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel__n", rfChannelN));
        }

        if (rfChannelFrequencyN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__n", rfChannelFrequencyN));
        }

        if (rfChannelFrequencyLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__lte", rfChannelFrequencyLte));
        }

        if (rfChannelFrequencyLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__lt", rfChannelFrequencyLt));
        }

        if (rfChannelFrequencyGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__gte", rfChannelFrequencyGte));
        }

        if (rfChannelFrequencyGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_frequency__gt", rfChannelFrequencyGt));
        }

        if (rfChannelWidthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__n", rfChannelWidthN));
        }

        if (rfChannelWidthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__lte", rfChannelWidthLte));
        }

        if (rfChannelWidthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__lt", rfChannelWidthLt));
        }

        if (rfChannelWidthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__gte", rfChannelWidthGte));
        }

        if (rfChannelWidthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rf_channel_width__gt", rfChannelWidthGt));
        }

        if (txPowerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__n", txPowerN));
        }

        if (txPowerLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__lte", txPowerLte));
        }

        if (txPowerLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__lt", txPowerLt));
        }

        if (txPowerGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__gte", txPowerGte));
        }

        if (txPowerGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tx_power__gt", txPowerGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (bridgeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_id__n", bridgeIdN));
        }

        if (lagIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id__n", lagIdN));
        }

        if (speedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__n", speedN));
        }

        if (speedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__lte", speedLte));
        }

        if (speedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__lt", speedLt));
        }

        if (speedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__gte", speedGte));
        }

        if (speedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed__gt", speedGt));
        }

        if (duplexN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duplex__n", duplexN));
        }

        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }

        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }

        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }

        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }

        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }

        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }

        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }

        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }

        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }

        if (wwnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__n", wwnN));
        }

        if (wwnIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__ic", wwnIc));
        }

        if (wwnNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__nic", wwnNic));
        }

        if (wwnIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__iew", wwnIew));
        }

        if (wwnNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__niew", wwnNiew));
        }

        if (wwnIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__isw", wwnIsw));
        }

        if (wwnNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__nisw", wwnNisw));
        }

        if (wwnIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__ie", wwnIe));
        }

        if (wwnNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wwn__nie", wwnNie));
        }

        if (vrfIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf_id__n", vrfIdN));
        }

        if (vrfN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vrf__n", vrfN));
        }

        if (vdcIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vdc_id__n", vdcIdN));
        }

        if (vdcIdentifierN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vdc_identifier__n", vdcIdentifierN));
        }

        if (vdcN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vdc__n", vdcN));
        }

        if (l2vpnIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn_id__n", l2vpnIdN));
        }

        if (l2vpnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l2vpn__n", l2vpnN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesListValidateBeforeCall(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String vdcId, String vdcIdentifier, String vdc, String l2vpnId, String l2vpn, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String vdcIdN, String vdcIdentifierN, String vdcN, String l2vpnIdN, String l2vpnN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfacesListCall(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, vdcId, vdcIdentifier, vdc, l2vpnId, l2vpn, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, vdcIdN, vdcIdentifierN, vdcN, l2vpnIdN, l2vpnN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param vdcId  (optional)
     * @param vdcIdentifier  (optional)
     * @param vdc  (optional)
     * @param l2vpnId  (optional)
     * @param l2vpn  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param vdcIdN  (optional)
     * @param vdcIdentifierN  (optional)
     * @param vdcN  (optional)
     * @param l2vpnIdN  (optional)
     * @param l2vpnN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfacesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfacesList200Response dcimInterfacesList(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String vdcId, String vdcIdentifier, String vdc, String l2vpnId, String l2vpn, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String vdcIdN, String vdcIdentifierN, String vdcN, String l2vpnIdN, String l2vpnN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfacesList200Response> localVarResp = dcimInterfacesListWithHttpInfo(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, vdcId, vdcIdentifier, vdc, l2vpnId, l2vpn, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, vdcIdN, vdcIdentifierN, vdcN, l2vpnIdN, l2vpnN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param vdcId  (optional)
     * @param vdcIdentifier  (optional)
     * @param vdc  (optional)
     * @param l2vpnId  (optional)
     * @param l2vpn  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param vdcIdN  (optional)
     * @param vdcIdentifierN  (optional)
     * @param vdcN  (optional)
     * @param l2vpnIdN  (optional)
     * @param l2vpnN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfacesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfacesList200Response> dcimInterfacesListWithHttpInfo(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String vdcId, String vdcIdentifier, String vdc, String l2vpnId, String l2vpn, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String vdcIdN, String vdcIdentifierN, String vdcN, String l2vpnIdN, String l2vpnN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, vdcId, vdcIdentifier, vdc, l2vpnId, l2vpn, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, vdcIdN, vdcIdentifierN, vdcN, l2vpnIdN, l2vpnN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param poeMode  (optional)
     * @param poeType  (optional)
     * @param mode  (optional)
     * @param rfRole  (optional)
     * @param rfChannel  (optional)
     * @param rfChannelFrequency  (optional)
     * @param rfChannelWidth  (optional)
     * @param txPower  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param kind  (optional)
     * @param parentId  (optional)
     * @param bridgeId  (optional)
     * @param lagId  (optional)
     * @param speed  (optional)
     * @param duplex  (optional)
     * @param macAddress  (optional)
     * @param wwn  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param vrfId  (optional)
     * @param vrf  (optional)
     * @param vdcId  (optional)
     * @param vdcIdentifier  (optional)
     * @param vdc  (optional)
     * @param l2vpnId  (optional)
     * @param l2vpn  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param poeModeN  (optional)
     * @param poeTypeN  (optional)
     * @param modeN  (optional)
     * @param rfRoleN  (optional)
     * @param rfChannelN  (optional)
     * @param rfChannelFrequencyN  (optional)
     * @param rfChannelFrequencyLte  (optional)
     * @param rfChannelFrequencyLt  (optional)
     * @param rfChannelFrequencyGte  (optional)
     * @param rfChannelFrequencyGt  (optional)
     * @param rfChannelWidthN  (optional)
     * @param rfChannelWidthLte  (optional)
     * @param rfChannelWidthLt  (optional)
     * @param rfChannelWidthGte  (optional)
     * @param rfChannelWidthGt  (optional)
     * @param txPowerN  (optional)
     * @param txPowerLte  (optional)
     * @param txPowerLt  (optional)
     * @param txPowerGte  (optional)
     * @param txPowerGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param bridgeIdN  (optional)
     * @param lagIdN  (optional)
     * @param speedN  (optional)
     * @param speedLte  (optional)
     * @param speedLt  (optional)
     * @param speedGte  (optional)
     * @param speedGt  (optional)
     * @param duplexN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param wwnN  (optional)
     * @param wwnIc  (optional)
     * @param wwnNic  (optional)
     * @param wwnIew  (optional)
     * @param wwnNiew  (optional)
     * @param wwnIsw  (optional)
     * @param wwnNisw  (optional)
     * @param wwnIe  (optional)
     * @param wwnNie  (optional)
     * @param vrfIdN  (optional)
     * @param vrfN  (optional)
     * @param vdcIdN  (optional)
     * @param vdcIdentifierN  (optional)
     * @param vdcN  (optional)
     * @param l2vpnIdN  (optional)
     * @param l2vpnN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListAsync(String id, String name, String label, String type, String enabled, String mtu, String mgmtOnly, String poeMode, String poeType, String mode, String rfRole, String rfChannel, String rfChannelFrequency, String rfChannelWidth, String txPower, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String kind, String parentId, String bridgeId, String lagId, String speed, String duplex, String macAddress, String wwn, String vlanId, String vlan, String vrfId, String vrf, String vdcId, String vdcIdentifier, String vdc, String l2vpnId, String l2vpn, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String poeModeN, String poeTypeN, String modeN, String rfRoleN, String rfChannelN, String rfChannelFrequencyN, String rfChannelFrequencyLte, String rfChannelFrequencyLt, String rfChannelFrequencyGte, String rfChannelFrequencyGt, String rfChannelWidthN, String rfChannelWidthLte, String rfChannelWidthLt, String rfChannelWidthGte, String rfChannelWidthGt, String txPowerN, String txPowerLte, String txPowerLt, String txPowerGte, String txPowerGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String bridgeIdN, String lagIdN, String speedN, String speedLte, String speedLt, String speedGte, String speedGt, String duplexN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String wwnN, String wwnIc, String wwnNic, String wwnIew, String wwnNiew, String wwnIsw, String wwnNisw, String wwnIe, String wwnNie, String vrfIdN, String vrfN, String vdcIdN, String vdcIdentifierN, String vdcN, String l2vpnIdN, String l2vpnN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInterfacesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(id, name, label, type, enabled, mtu, mgmtOnly, poeMode, poeType, mode, rfRole, rfChannel, rfChannelFrequency, rfChannelWidth, txPower, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, kind, parentId, bridgeId, lagId, speed, duplex, macAddress, wwn, vlanId, vlan, vrfId, vrf, vdcId, vdcIdentifier, vdc, l2vpnId, l2vpn, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, poeModeN, poeTypeN, modeN, rfRoleN, rfChannelN, rfChannelFrequencyN, rfChannelFrequencyLte, rfChannelFrequencyLt, rfChannelFrequencyGte, rfChannelFrequencyGt, rfChannelWidthN, rfChannelWidthLte, rfChannelWidthLt, rfChannelWidthGte, rfChannelWidthGt, txPowerN, txPowerLte, txPowerLt, txPowerGte, txPowerGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, bridgeIdN, lagIdN, speedN, speedLte, speedLt, speedGte, speedGt, duplexN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, wwnN, wwnIc, wwnNic, wwnIew, wwnNiew, wwnIsw, wwnNisw, wwnIe, wwnNie, vrfIdN, vrfN, vdcIdN, vdcIdentifierN, vdcN, l2vpnIdN, l2vpnN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesPartialUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesPartialUpdateValidateBeforeCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesPartialUpdate(Async)");
        }

        return dcimInterfacesPartialUpdateCall(id, writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesPartialUpdate(Integer id, WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesPartialUpdateWithHttpInfo(id, writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesPartialUpdateWithHttpInfo(Integer id, WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateAsync(Integer id, WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesRead
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesRead(Async)");
        }

        return dcimInterfacesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesRead(Integer id) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadAsync(Integer id, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesTrace
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesTrace(Async)");
        }

        return dcimInterfacesTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesTrace(Integer id) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesTraceAsync(Integer id, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesUpdateValidateBeforeCall(Integer id, WritableInterface writableInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesUpdate(Async)");
        }

        // verify the required parameter 'writableInterface' is set
        if (writableInterface == null) {
            throw new ApiException("Missing the required parameter 'writableInterface' when calling dcimInterfacesUpdate(Async)");
        }

        return dcimInterfacesUpdateCall(id, writableInterface, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ModelInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelInterface dcimInterfacesUpdate(Integer id, WritableInterface writableInterface) throws ApiException {
        ApiResponse<ModelInterface> localVarResp = dcimInterfacesUpdateWithHttpInfo(id, writableInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @return ApiResponse&lt;ModelInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelInterface> dcimInterfacesUpdateWithHttpInfo(Integer id, WritableInterface writableInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, writableInterface, null);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateAsync(Integer id, WritableInterface writableInterface, final ApiCallback<ModelInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, writableInterface, _callback);
        Type localVarReturnType = new TypeToken<ModelInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemRolesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemRolesBulkDelete() throws ApiException {
        dcimInventoryItemRolesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesBulkPartialUpdate
     * @param inventoryItemRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkPartialUpdateCall(InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryItemRole;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesBulkPartialUpdateValidateBeforeCall(InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryItemRole' is set
        if (inventoryItemRole == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemRole' when calling dcimInventoryItemRolesBulkPartialUpdate(Async)");
        }

        return dcimInventoryItemRolesBulkPartialUpdateCall(inventoryItemRole, _callback);

    }

    /**
     * 
     * 
     * @param inventoryItemRole  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesBulkPartialUpdate(InventoryItemRole inventoryItemRole) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesBulkPartialUpdateWithHttpInfo(inventoryItemRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param inventoryItemRole  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesBulkPartialUpdateWithHttpInfo(InventoryItemRole inventoryItemRole) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkPartialUpdateValidateBeforeCall(inventoryItemRole, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param inventoryItemRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkPartialUpdateAsync(InventoryItemRole inventoryItemRole, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkPartialUpdateValidateBeforeCall(inventoryItemRole, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesBulkUpdate
     * @param inventoryItemRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkUpdateCall(InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryItemRole;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesBulkUpdateValidateBeforeCall(InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryItemRole' is set
        if (inventoryItemRole == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemRole' when calling dcimInventoryItemRolesBulkUpdate(Async)");
        }

        return dcimInventoryItemRolesBulkUpdateCall(inventoryItemRole, _callback);

    }

    /**
     * 
     * 
     * @param inventoryItemRole  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesBulkUpdate(InventoryItemRole inventoryItemRole) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesBulkUpdateWithHttpInfo(inventoryItemRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param inventoryItemRole  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesBulkUpdateWithHttpInfo(InventoryItemRole inventoryItemRole) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkUpdateValidateBeforeCall(inventoryItemRole, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param inventoryItemRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesBulkUpdateAsync(InventoryItemRole inventoryItemRole, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesBulkUpdateValidateBeforeCall(inventoryItemRole, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesCreate
     * @param inventoryItemRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesCreateCall(InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryItemRole;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesCreateValidateBeforeCall(InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inventoryItemRole' is set
        if (inventoryItemRole == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemRole' when calling dcimInventoryItemRolesCreate(Async)");
        }

        return dcimInventoryItemRolesCreateCall(inventoryItemRole, _callback);

    }

    /**
     * 
     * 
     * @param inventoryItemRole  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesCreate(InventoryItemRole inventoryItemRole) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesCreateWithHttpInfo(inventoryItemRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param inventoryItemRole  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesCreateWithHttpInfo(InventoryItemRole inventoryItemRole) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesCreateValidateBeforeCall(inventoryItemRole, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param inventoryItemRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesCreateAsync(InventoryItemRole inventoryItemRole, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesCreateValidateBeforeCall(inventoryItemRole, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesDelete
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesDelete(Async)");
        }

        return dcimInventoryItemRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemRolesDelete(Integer id) throws ApiException {
        dcimInventoryItemRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesListCall(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesListValidateBeforeCall(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemRolesListCall(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemRolesList200Response dcimInventoryItemRolesList(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemRolesList200Response> localVarResp = dcimInventoryItemRolesListWithHttpInfo(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemRolesList200Response> dcimInventoryItemRolesListWithHttpInfo(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesListValidateBeforeCall(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesListAsync(String id, String name, String slug, String color, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesListValidateBeforeCall(id, name, slug, color, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesPartialUpdate
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesPartialUpdateCall(Integer id, InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryItemRole;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesPartialUpdateValidateBeforeCall(Integer id, InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'inventoryItemRole' is set
        if (inventoryItemRole == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemRole' when calling dcimInventoryItemRolesPartialUpdate(Async)");
        }

        return dcimInventoryItemRolesPartialUpdateCall(id, inventoryItemRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesPartialUpdate(Integer id, InventoryItemRole inventoryItemRole) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesPartialUpdateWithHttpInfo(id, inventoryItemRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesPartialUpdateWithHttpInfo(Integer id, InventoryItemRole inventoryItemRole) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesPartialUpdateValidateBeforeCall(id, inventoryItemRole, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesPartialUpdateAsync(Integer id, InventoryItemRole inventoryItemRole, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesPartialUpdateValidateBeforeCall(id, inventoryItemRole, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesRead
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesRead(Async)");
        }

        return dcimInventoryItemRolesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesRead(Integer id) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesReadAsync(Integer id, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemRolesUpdate
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesUpdateCall(Integer id, InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryItemRole;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemRolesUpdateValidateBeforeCall(Integer id, InventoryItemRole inventoryItemRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemRolesUpdate(Async)");
        }

        // verify the required parameter 'inventoryItemRole' is set
        if (inventoryItemRole == null) {
            throw new ApiException("Missing the required parameter 'inventoryItemRole' when calling dcimInventoryItemRolesUpdate(Async)");
        }

        return dcimInventoryItemRolesUpdateCall(id, inventoryItemRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @return InventoryItemRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemRole dcimInventoryItemRolesUpdate(Integer id, InventoryItemRole inventoryItemRole) throws ApiException {
        ApiResponse<InventoryItemRole> localVarResp = dcimInventoryItemRolesUpdateWithHttpInfo(id, inventoryItemRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @return ApiResponse&lt;InventoryItemRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemRole> dcimInventoryItemRolesUpdateWithHttpInfo(Integer id, InventoryItemRole inventoryItemRole) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemRolesUpdateValidateBeforeCall(id, inventoryItemRole, null);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item role. (required)
     * @param inventoryItemRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemRolesUpdateAsync(Integer id, InventoryItemRole inventoryItemRole, final ApiCallback<InventoryItemRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemRolesUpdateValidateBeforeCall(id, inventoryItemRole, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemTemplatesBulkDelete() throws ApiException {
        dcimInventoryItemTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesBulkPartialUpdate
     * @param writableInventoryItemTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkPartialUpdateCall(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItemTemplate;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesBulkPartialUpdateValidateBeforeCall(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItemTemplate' is set
        if (writableInventoryItemTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItemTemplate' when calling dcimInventoryItemTemplatesBulkPartialUpdate(Async)");
        }

        return dcimInventoryItemTemplatesBulkPartialUpdateCall(writableInventoryItemTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItemTemplate  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesBulkPartialUpdate(WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesBulkPartialUpdateWithHttpInfo(writableInventoryItemTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItemTemplate  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesBulkPartialUpdateWithHttpInfo(WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkPartialUpdateValidateBeforeCall(writableInventoryItemTemplate, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItemTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkPartialUpdateAsync(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkPartialUpdateValidateBeforeCall(writableInventoryItemTemplate, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesBulkUpdate
     * @param writableInventoryItemTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkUpdateCall(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItemTemplate;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesBulkUpdateValidateBeforeCall(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItemTemplate' is set
        if (writableInventoryItemTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItemTemplate' when calling dcimInventoryItemTemplatesBulkUpdate(Async)");
        }

        return dcimInventoryItemTemplatesBulkUpdateCall(writableInventoryItemTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItemTemplate  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesBulkUpdate(WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesBulkUpdateWithHttpInfo(writableInventoryItemTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItemTemplate  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesBulkUpdateWithHttpInfo(WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkUpdateValidateBeforeCall(writableInventoryItemTemplate, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItemTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesBulkUpdateAsync(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesBulkUpdateValidateBeforeCall(writableInventoryItemTemplate, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesCreate
     * @param writableInventoryItemTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesCreateCall(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItemTemplate;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesCreateValidateBeforeCall(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItemTemplate' is set
        if (writableInventoryItemTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItemTemplate' when calling dcimInventoryItemTemplatesCreate(Async)");
        }

        return dcimInventoryItemTemplatesCreateCall(writableInventoryItemTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItemTemplate  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesCreate(WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesCreateWithHttpInfo(writableInventoryItemTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItemTemplate  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesCreateWithHttpInfo(WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesCreateValidateBeforeCall(writableInventoryItemTemplate, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItemTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesCreateAsync(WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesCreateValidateBeforeCall(writableInventoryItemTemplate, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesDelete
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesDelete(Async)");
        }

        return dcimInventoryItemTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemTemplatesDelete(Integer id) throws ApiException {
        dcimInventoryItemTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesListCall(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (partId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id", partId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (componentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type", componentType));
        }

        if (componentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id", componentId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (partIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__n", partIdN));
        }

        if (partIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ic", partIdIc));
        }

        if (partIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nic", partIdNic));
        }

        if (partIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__iew", partIdIew));
        }

        if (partIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__niew", partIdNiew));
        }

        if (partIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__isw", partIdIsw));
        }

        if (partIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nisw", partIdNisw));
        }

        if (partIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ie", partIdIe));
        }

        if (partIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nie", partIdNie));
        }

        if (partIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__empty", partIdEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (componentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type__n", componentTypeN));
        }

        if (componentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__n", componentIdN));
        }

        if (componentIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lte", componentIdLte));
        }

        if (componentIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lt", componentIdLt));
        }

        if (componentIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gte", componentIdGte));
        }

        if (componentIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gt", componentIdGt));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesListValidateBeforeCall(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemTemplatesListCall(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemTemplatesList200Response dcimInventoryItemTemplatesList(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemTemplatesList200Response> localVarResp = dcimInventoryItemTemplatesListWithHttpInfo(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemTemplatesList200Response> dcimInventoryItemTemplatesListWithHttpInfo(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesListValidateBeforeCall(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesListAsync(String id, String name, String label, String partId, String created, String lastUpdated, String q, String devicetypeId, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesListValidateBeforeCall(id, name, label, partId, created, lastUpdated, q, devicetypeId, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesPartialUpdate
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesPartialUpdateCall(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItemTemplate;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItemTemplate' is set
        if (writableInventoryItemTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItemTemplate' when calling dcimInventoryItemTemplatesPartialUpdate(Async)");
        }

        return dcimInventoryItemTemplatesPartialUpdateCall(id, writableInventoryItemTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesPartialUpdate(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesPartialUpdateWithHttpInfo(id, writableInventoryItemTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesPartialUpdateValidateBeforeCall(id, writableInventoryItemTemplate, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesPartialUpdateAsync(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesPartialUpdateValidateBeforeCall(id, writableInventoryItemTemplate, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesRead
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesRead(Async)");
        }

        return dcimInventoryItemTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesRead(Integer id) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesReadAsync(Integer id, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemTemplatesUpdate
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesUpdateCall(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItemTemplate;

        // create path and map variables
        String localVarPath = "/dcim/inventory-item-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemTemplatesUpdateValidateBeforeCall(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItemTemplate' is set
        if (writableInventoryItemTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItemTemplate' when calling dcimInventoryItemTemplatesUpdate(Async)");
        }

        return dcimInventoryItemTemplatesUpdateCall(id, writableInventoryItemTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @return InventoryItemTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItemTemplate dcimInventoryItemTemplatesUpdate(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        ApiResponse<InventoryItemTemplate> localVarResp = dcimInventoryItemTemplatesUpdateWithHttpInfo(id, writableInventoryItemTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @return ApiResponse&lt;InventoryItemTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItemTemplate> dcimInventoryItemTemplatesUpdateWithHttpInfo(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemTemplatesUpdateValidateBeforeCall(id, writableInventoryItemTemplate, null);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item template. (required)
     * @param writableInventoryItemTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemTemplatesUpdateAsync(Integer id, WritableInventoryItemTemplate writableInventoryItemTemplate, final ApiCallback<InventoryItemTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemTemplatesUpdateValidateBeforeCall(id, writableInventoryItemTemplate, _callback);
        Type localVarReturnType = new TypeToken<InventoryItemTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemsBulkDelete() throws ApiException {
        dcimInventoryItemsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsBulkPartialUpdate
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkPartialUpdateCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsBulkPartialUpdateValidateBeforeCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsBulkPartialUpdate(Async)");
        }

        return dcimInventoryItemsBulkPartialUpdateCall(writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsBulkPartialUpdate(WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsBulkPartialUpdateWithHttpInfo(writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsBulkPartialUpdateWithHttpInfo(WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsBulkPartialUpdateValidateBeforeCall(writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkPartialUpdateAsync(WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsBulkPartialUpdateValidateBeforeCall(writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsBulkUpdate
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkUpdateCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsBulkUpdateValidateBeforeCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsBulkUpdate(Async)");
        }

        return dcimInventoryItemsBulkUpdateCall(writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsBulkUpdate(WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsBulkUpdateWithHttpInfo(writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsBulkUpdateWithHttpInfo(WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsBulkUpdateValidateBeforeCall(writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsBulkUpdateAsync(WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsBulkUpdateValidateBeforeCall(writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsCreate
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsCreateValidateBeforeCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsCreate(Async)");
        }

        return dcimInventoryItemsCreateCall(writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsCreate(WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsCreateWithHttpInfo(writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsCreateWithHttpInfo(WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateAsync(WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsDelete
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsDelete(Async)");
        }

        return dcimInventoryItemsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemsDelete(Integer id) throws ApiException {
        dcimInventoryItemsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListCall(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (partId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id", partId));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (discovered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("discovered", discovered));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (componentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type", componentType));
        }

        if (componentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id", componentId));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (partIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__n", partIdN));
        }

        if (partIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ic", partIdIc));
        }

        if (partIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nic", partIdNic));
        }

        if (partIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__iew", partIdIew));
        }

        if (partIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__niew", partIdNiew));
        }

        if (partIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__isw", partIdIsw));
        }

        if (partIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nisw", partIdNisw));
        }

        if (partIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ie", partIdIe));
        }

        if (partIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nie", partIdNie));
        }

        if (partIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__empty", partIdEmpty));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (assetTagEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__empty", assetTagEmpty));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (componentTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_type__n", componentTypeN));
        }

        if (componentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__n", componentIdN));
        }

        if (componentIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lte", componentIdLte));
        }

        if (componentIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__lt", componentIdLt));
        }

        if (componentIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gte", componentIdGte));
        }

        if (componentIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("component_id__gt", componentIdGt));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (serialEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__empty", serialEmpty));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsListValidateBeforeCall(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemsListCall(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemsList200Response dcimInventoryItemsList(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemsList200Response> localVarResp = dcimInventoryItemsListWithHttpInfo(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemsList200Response> dcimInventoryItemsListWithHttpInfo(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param componentType  (optional)
     * @param componentId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param partIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param componentTypeN  (optional)
     * @param componentIdN  (optional)
     * @param componentIdLte  (optional)
     * @param componentIdLt  (optional)
     * @param componentIdGte  (optional)
     * @param componentIdGt  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListAsync(String id, String name, String label, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String parentId, String manufacturerId, String manufacturer, String roleId, String role, String componentType, String componentId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String partIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, String roleIdN, String roleN, String componentTypeN, String componentIdN, String componentIdLte, String componentIdLt, String componentIdGte, String componentIdGt, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(id, name, label, partId, assetTag, discovered, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, parentId, manufacturerId, manufacturer, roleId, role, componentType, componentId, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, partIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, manufacturerIdN, manufacturerN, roleIdN, roleN, componentTypeN, componentIdN, componentIdLte, componentIdLt, componentIdGte, componentIdGt, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsPartialUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsPartialUpdateValidateBeforeCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsPartialUpdate(Async)");
        }

        return dcimInventoryItemsPartialUpdateCall(id, writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsPartialUpdate(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsPartialUpdateWithHttpInfo(id, writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsPartialUpdateWithHttpInfo(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateAsync(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsRead
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsRead(Async)");
        }

        return dcimInventoryItemsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsRead(Integer id) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadAsync(Integer id, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsUpdateValidateBeforeCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsUpdate(Async)");
        }

        return dcimInventoryItemsUpdateCall(id, writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsUpdate(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsUpdateWithHttpInfo(id, writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsUpdateWithHttpInfo(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateAsync(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimLocationsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimLocationsBulkDelete() throws ApiException {
        dcimLocationsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimLocationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsBulkPartialUpdate
     * @param writableLocation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkPartialUpdateCall(WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableLocation;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsBulkPartialUpdateValidateBeforeCall(WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableLocation' is set
        if (writableLocation == null) {
            throw new ApiException("Missing the required parameter 'writableLocation' when calling dcimLocationsBulkPartialUpdate(Async)");
        }

        return dcimLocationsBulkPartialUpdateCall(writableLocation, _callback);

    }

    /**
     * 
     * 
     * @param writableLocation  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsBulkPartialUpdate(WritableLocation writableLocation) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsBulkPartialUpdateWithHttpInfo(writableLocation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableLocation  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsBulkPartialUpdateWithHttpInfo(WritableLocation writableLocation) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsBulkPartialUpdateValidateBeforeCall(writableLocation, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableLocation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkPartialUpdateAsync(WritableLocation writableLocation, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsBulkPartialUpdateValidateBeforeCall(writableLocation, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsBulkUpdate
     * @param writableLocation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkUpdateCall(WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableLocation;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsBulkUpdateValidateBeforeCall(WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableLocation' is set
        if (writableLocation == null) {
            throw new ApiException("Missing the required parameter 'writableLocation' when calling dcimLocationsBulkUpdate(Async)");
        }

        return dcimLocationsBulkUpdateCall(writableLocation, _callback);

    }

    /**
     * 
     * 
     * @param writableLocation  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsBulkUpdate(WritableLocation writableLocation) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsBulkUpdateWithHttpInfo(writableLocation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableLocation  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsBulkUpdateWithHttpInfo(WritableLocation writableLocation) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsBulkUpdateValidateBeforeCall(writableLocation, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableLocation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsBulkUpdateAsync(WritableLocation writableLocation, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsBulkUpdateValidateBeforeCall(writableLocation, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsCreate
     * @param writableLocation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsCreateCall(WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableLocation;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsCreateValidateBeforeCall(WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableLocation' is set
        if (writableLocation == null) {
            throw new ApiException("Missing the required parameter 'writableLocation' when calling dcimLocationsCreate(Async)");
        }

        return dcimLocationsCreateCall(writableLocation, _callback);

    }

    /**
     * 
     * 
     * @param writableLocation  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsCreate(WritableLocation writableLocation) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsCreateWithHttpInfo(writableLocation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableLocation  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsCreateWithHttpInfo(WritableLocation writableLocation) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsCreateValidateBeforeCall(writableLocation, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableLocation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsCreateAsync(WritableLocation writableLocation, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsCreateValidateBeforeCall(writableLocation, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsDelete
     * @param id A unique integer value identifying this location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsDelete(Async)");
        }

        return dcimLocationsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimLocationsDelete(Integer id) throws ApiException {
        dcimLocationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimLocationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsListCall(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsListValidateBeforeCall(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimLocationsListCall(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimLocationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimLocationsList200Response dcimLocationsList(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimLocationsList200Response> localVarResp = dcimLocationsListWithHttpInfo(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimLocationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimLocationsList200Response> dcimLocationsListWithHttpInfo(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsListValidateBeforeCall(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimLocationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param status  (optional)
     * @param description  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param statusN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsListAsync(String id, String name, String slug, String status, String description, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String created, String lastUpdated, String q, String tag, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String statusN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimLocationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsListValidateBeforeCall(id, name, slug, status, description, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, created, lastUpdated, q, tag, regionId, region, siteGroupId, siteGroup, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, statusN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimLocationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsPartialUpdate
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsPartialUpdateCall(Integer id, WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableLocation;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsPartialUpdateValidateBeforeCall(Integer id, WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableLocation' is set
        if (writableLocation == null) {
            throw new ApiException("Missing the required parameter 'writableLocation' when calling dcimLocationsPartialUpdate(Async)");
        }

        return dcimLocationsPartialUpdateCall(id, writableLocation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsPartialUpdate(Integer id, WritableLocation writableLocation) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsPartialUpdateWithHttpInfo(id, writableLocation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsPartialUpdateWithHttpInfo(Integer id, WritableLocation writableLocation) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsPartialUpdateValidateBeforeCall(id, writableLocation, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsPartialUpdateAsync(Integer id, WritableLocation writableLocation, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsPartialUpdateValidateBeforeCall(id, writableLocation, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsRead
     * @param id A unique integer value identifying this location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsRead(Async)");
        }

        return dcimLocationsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsRead(Integer id) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsReadAsync(Integer id, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimLocationsUpdate
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsUpdateCall(Integer id, WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableLocation;

        // create path and map variables
        String localVarPath = "/dcim/locations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimLocationsUpdateValidateBeforeCall(Integer id, WritableLocation writableLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimLocationsUpdate(Async)");
        }

        // verify the required parameter 'writableLocation' is set
        if (writableLocation == null) {
            throw new ApiException("Missing the required parameter 'writableLocation' when calling dcimLocationsUpdate(Async)");
        }

        return dcimLocationsUpdateCall(id, writableLocation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Location dcimLocationsUpdate(Integer id, WritableLocation writableLocation) throws ApiException {
        ApiResponse<Location> localVarResp = dcimLocationsUpdateWithHttpInfo(id, writableLocation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> dcimLocationsUpdateWithHttpInfo(Integer id, WritableLocation writableLocation) throws ApiException {
        okhttp3.Call localVarCall = dcimLocationsUpdateValidateBeforeCall(id, writableLocation, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this location. (required)
     * @param writableLocation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimLocationsUpdateAsync(Integer id, WritableLocation writableLocation, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimLocationsUpdateValidateBeforeCall(id, writableLocation, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimManufacturersBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimManufacturersBulkDelete() throws ApiException {
        dcimManufacturersBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimManufacturersBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersBulkPartialUpdate
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkPartialUpdateCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersBulkPartialUpdateValidateBeforeCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersBulkPartialUpdate(Async)");
        }

        return dcimManufacturersBulkPartialUpdateCall(manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersBulkPartialUpdate(Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersBulkPartialUpdateWithHttpInfo(manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersBulkPartialUpdateWithHttpInfo(Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersBulkPartialUpdateValidateBeforeCall(manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkPartialUpdateAsync(Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersBulkPartialUpdateValidateBeforeCall(manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersBulkUpdate
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkUpdateCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersBulkUpdateValidateBeforeCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersBulkUpdate(Async)");
        }

        return dcimManufacturersBulkUpdateCall(manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersBulkUpdate(Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersBulkUpdateWithHttpInfo(manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersBulkUpdateWithHttpInfo(Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersBulkUpdateValidateBeforeCall(manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersBulkUpdateAsync(Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersBulkUpdateValidateBeforeCall(manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersCreate
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersCreateValidateBeforeCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersCreate(Async)");
        }

        return dcimManufacturersCreateCall(manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersCreate(Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersCreateWithHttpInfo(manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersCreateWithHttpInfo(Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateAsync(Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersDelete
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersDelete(Async)");
        }

        return dcimManufacturersDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimManufacturersDelete(Integer id) throws ApiException {
        dcimManufacturersDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimManufacturersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimManufacturersListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimManufacturersList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimManufacturersList200Response dcimManufacturersList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimManufacturersList200Response> localVarResp = dcimManufacturersListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimManufacturersList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimManufacturersList200Response> dcimManufacturersListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimManufacturersList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersPartialUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersPartialUpdateValidateBeforeCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersPartialUpdate(Async)");
        }

        return dcimManufacturersPartialUpdateCall(id, manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersPartialUpdate(Integer id, Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersPartialUpdateWithHttpInfo(id, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersPartialUpdateWithHttpInfo(Integer id, Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateAsync(Integer id, Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersRead
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersRead(Async)");
        }

        return dcimManufacturersReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersRead(Integer id) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadAsync(Integer id, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersUpdateValidateBeforeCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersUpdate(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersUpdate(Async)");
        }

        return dcimManufacturersUpdateCall(id, manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersUpdate(Integer id, Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersUpdateWithHttpInfo(id, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersUpdateWithHttpInfo(Integer id, Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateAsync(Integer id, Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimModuleBayTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBayTemplatesBulkDelete() throws ApiException {
        dcimModuleBayTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBayTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesBulkPartialUpdate
     * @param writableModuleBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkPartialUpdateCall(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesBulkPartialUpdateValidateBeforeCall(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleBayTemplate' is set
        if (writableModuleBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBayTemplate' when calling dcimModuleBayTemplatesBulkPartialUpdate(Async)");
        }

        return dcimModuleBayTemplatesBulkPartialUpdateCall(writableModuleBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleBayTemplate  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesBulkPartialUpdate(WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesBulkPartialUpdateWithHttpInfo(writableModuleBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleBayTemplate  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesBulkPartialUpdateWithHttpInfo(WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkPartialUpdateValidateBeforeCall(writableModuleBayTemplate, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkPartialUpdateAsync(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkPartialUpdateValidateBeforeCall(writableModuleBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesBulkUpdate
     * @param writableModuleBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkUpdateCall(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesBulkUpdateValidateBeforeCall(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleBayTemplate' is set
        if (writableModuleBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBayTemplate' when calling dcimModuleBayTemplatesBulkUpdate(Async)");
        }

        return dcimModuleBayTemplatesBulkUpdateCall(writableModuleBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleBayTemplate  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesBulkUpdate(WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesBulkUpdateWithHttpInfo(writableModuleBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleBayTemplate  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesBulkUpdateWithHttpInfo(WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkUpdateValidateBeforeCall(writableModuleBayTemplate, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesBulkUpdateAsync(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesBulkUpdateValidateBeforeCall(writableModuleBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesCreate
     * @param writableModuleBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesCreateCall(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesCreateValidateBeforeCall(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleBayTemplate' is set
        if (writableModuleBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBayTemplate' when calling dcimModuleBayTemplatesCreate(Async)");
        }

        return dcimModuleBayTemplatesCreateCall(writableModuleBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleBayTemplate  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesCreate(WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesCreateWithHttpInfo(writableModuleBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleBayTemplate  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesCreateWithHttpInfo(WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesCreateValidateBeforeCall(writableModuleBayTemplate, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesCreateAsync(WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesCreateValidateBeforeCall(writableModuleBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesDelete
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesDelete(Async)");
        }

        return dcimModuleBayTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBayTemplatesDelete(Integer id) throws ApiException {
        dcimModuleBayTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesListCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimModuleBayTemplatesListCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModuleBayTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModuleBayTemplatesList200Response dcimModuleBayTemplatesList(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModuleBayTemplatesList200Response> localVarResp = dcimModuleBayTemplatesListWithHttpInfo(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModuleBayTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModuleBayTemplatesList200Response> dcimModuleBayTemplatesListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModuleBayTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesListAsync(String id, String name, String created, String lastUpdated, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModuleBayTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesListValidateBeforeCall(id, name, created, lastUpdated, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModuleBayTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesPartialUpdate
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesPartialUpdateCall(Integer id, WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableModuleBayTemplate' is set
        if (writableModuleBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBayTemplate' when calling dcimModuleBayTemplatesPartialUpdate(Async)");
        }

        return dcimModuleBayTemplatesPartialUpdateCall(id, writableModuleBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesPartialUpdate(Integer id, WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesPartialUpdateWithHttpInfo(id, writableModuleBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesPartialUpdateValidateBeforeCall(id, writableModuleBayTemplate, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesPartialUpdateAsync(Integer id, WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesPartialUpdateValidateBeforeCall(id, writableModuleBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesRead
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesRead(Async)");
        }

        return dcimModuleBayTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesReadAsync(Integer id, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBayTemplatesUpdate
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesUpdateCall(Integer id, WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/module-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBayTemplatesUpdateValidateBeforeCall(Integer id, WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBayTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableModuleBayTemplate' is set
        if (writableModuleBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBayTemplate' when calling dcimModuleBayTemplatesUpdate(Async)");
        }

        return dcimModuleBayTemplatesUpdateCall(id, writableModuleBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @return ModuleBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBayTemplate dcimModuleBayTemplatesUpdate(Integer id, WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        ApiResponse<ModuleBayTemplate> localVarResp = dcimModuleBayTemplatesUpdateWithHttpInfo(id, writableModuleBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @return ApiResponse&lt;ModuleBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBayTemplate> dcimModuleBayTemplatesUpdateWithHttpInfo(Integer id, WritableModuleBayTemplate writableModuleBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBayTemplatesUpdateValidateBeforeCall(id, writableModuleBayTemplate, null);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay template. (required)
     * @param writableModuleBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBayTemplatesUpdateAsync(Integer id, WritableModuleBayTemplate writableModuleBayTemplate, final ApiCallback<ModuleBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBayTemplatesUpdateValidateBeforeCall(id, writableModuleBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<ModuleBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimModuleBaysBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBaysBulkDelete() throws ApiException {
        dcimModuleBaysBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBaysBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysBulkPartialUpdate
     * @param writableModuleBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkPartialUpdateCall(WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBay;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysBulkPartialUpdateValidateBeforeCall(WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleBay' is set
        if (writableModuleBay == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBay' when calling dcimModuleBaysBulkPartialUpdate(Async)");
        }

        return dcimModuleBaysBulkPartialUpdateCall(writableModuleBay, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleBay  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysBulkPartialUpdate(WritableModuleBay writableModuleBay) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysBulkPartialUpdateWithHttpInfo(writableModuleBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleBay  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysBulkPartialUpdateWithHttpInfo(WritableModuleBay writableModuleBay) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysBulkPartialUpdateValidateBeforeCall(writableModuleBay, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkPartialUpdateAsync(WritableModuleBay writableModuleBay, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysBulkPartialUpdateValidateBeforeCall(writableModuleBay, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysBulkUpdate
     * @param writableModuleBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkUpdateCall(WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBay;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysBulkUpdateValidateBeforeCall(WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleBay' is set
        if (writableModuleBay == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBay' when calling dcimModuleBaysBulkUpdate(Async)");
        }

        return dcimModuleBaysBulkUpdateCall(writableModuleBay, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleBay  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysBulkUpdate(WritableModuleBay writableModuleBay) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysBulkUpdateWithHttpInfo(writableModuleBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleBay  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysBulkUpdateWithHttpInfo(WritableModuleBay writableModuleBay) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysBulkUpdateValidateBeforeCall(writableModuleBay, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysBulkUpdateAsync(WritableModuleBay writableModuleBay, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysBulkUpdateValidateBeforeCall(writableModuleBay, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysCreate
     * @param writableModuleBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysCreateCall(WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBay;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysCreateValidateBeforeCall(WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleBay' is set
        if (writableModuleBay == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBay' when calling dcimModuleBaysCreate(Async)");
        }

        return dcimModuleBaysCreateCall(writableModuleBay, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleBay  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysCreate(WritableModuleBay writableModuleBay) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysCreateWithHttpInfo(writableModuleBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleBay  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysCreateWithHttpInfo(WritableModuleBay writableModuleBay) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysCreateValidateBeforeCall(writableModuleBay, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysCreateAsync(WritableModuleBay writableModuleBay, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysCreateValidateBeforeCall(writableModuleBay, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysDelete
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysDelete(Async)");
        }

        return dcimModuleBaysDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleBaysDelete(Integer id) throws ApiException {
        dcimModuleBaysDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleBaysDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysListCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysListValidateBeforeCall(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimModuleBaysListCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModuleBaysList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModuleBaysList200Response dcimModuleBaysList(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModuleBaysList200Response> localVarResp = dcimModuleBaysListWithHttpInfo(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModuleBaysList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModuleBaysList200Response> dcimModuleBaysListWithHttpInfo(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModuleBaysList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysListAsync(String id, String name, String label, String description, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String created, String lastUpdated, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModuleBaysList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysListValidateBeforeCall(id, name, label, description, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, created, lastUpdated, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModuleBaysList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysPartialUpdate
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysPartialUpdateCall(Integer id, WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBay;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysPartialUpdateValidateBeforeCall(Integer id, WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysPartialUpdate(Async)");
        }

        // verify the required parameter 'writableModuleBay' is set
        if (writableModuleBay == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBay' when calling dcimModuleBaysPartialUpdate(Async)");
        }

        return dcimModuleBaysPartialUpdateCall(id, writableModuleBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysPartialUpdate(Integer id, WritableModuleBay writableModuleBay) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysPartialUpdateWithHttpInfo(id, writableModuleBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysPartialUpdateWithHttpInfo(Integer id, WritableModuleBay writableModuleBay) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysPartialUpdateValidateBeforeCall(id, writableModuleBay, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysPartialUpdateAsync(Integer id, WritableModuleBay writableModuleBay, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysPartialUpdateValidateBeforeCall(id, writableModuleBay, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysRead
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysRead(Async)");
        }

        return dcimModuleBaysReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysRead(Integer id) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysReadAsync(Integer id, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleBaysUpdate
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysUpdateCall(Integer id, WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleBay;

        // create path and map variables
        String localVarPath = "/dcim/module-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleBaysUpdateValidateBeforeCall(Integer id, WritableModuleBay writableModuleBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleBaysUpdate(Async)");
        }

        // verify the required parameter 'writableModuleBay' is set
        if (writableModuleBay == null) {
            throw new ApiException("Missing the required parameter 'writableModuleBay' when calling dcimModuleBaysUpdate(Async)");
        }

        return dcimModuleBaysUpdateCall(id, writableModuleBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @return ModuleBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleBay dcimModuleBaysUpdate(Integer id, WritableModuleBay writableModuleBay) throws ApiException {
        ApiResponse<ModuleBay> localVarResp = dcimModuleBaysUpdateWithHttpInfo(id, writableModuleBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @return ApiResponse&lt;ModuleBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleBay> dcimModuleBaysUpdateWithHttpInfo(Integer id, WritableModuleBay writableModuleBay) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleBaysUpdateValidateBeforeCall(id, writableModuleBay, null);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module bay. (required)
     * @param writableModuleBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleBaysUpdateAsync(Integer id, WritableModuleBay writableModuleBay, final ApiCallback<ModuleBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleBaysUpdateValidateBeforeCall(id, writableModuleBay, _callback);
        Type localVarReturnType = new TypeToken<ModuleBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimModuleTypesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleTypesBulkDelete() throws ApiException {
        dcimModuleTypesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleTypesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesBulkPartialUpdate
     * @param writableModuleType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkPartialUpdateCall(WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleType;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesBulkPartialUpdateValidateBeforeCall(WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleType' is set
        if (writableModuleType == null) {
            throw new ApiException("Missing the required parameter 'writableModuleType' when calling dcimModuleTypesBulkPartialUpdate(Async)");
        }

        return dcimModuleTypesBulkPartialUpdateCall(writableModuleType, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleType  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesBulkPartialUpdate(WritableModuleType writableModuleType) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesBulkPartialUpdateWithHttpInfo(writableModuleType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleType  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesBulkPartialUpdateWithHttpInfo(WritableModuleType writableModuleType) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesBulkPartialUpdateValidateBeforeCall(writableModuleType, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkPartialUpdateAsync(WritableModuleType writableModuleType, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesBulkPartialUpdateValidateBeforeCall(writableModuleType, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesBulkUpdate
     * @param writableModuleType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkUpdateCall(WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleType;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesBulkUpdateValidateBeforeCall(WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleType' is set
        if (writableModuleType == null) {
            throw new ApiException("Missing the required parameter 'writableModuleType' when calling dcimModuleTypesBulkUpdate(Async)");
        }

        return dcimModuleTypesBulkUpdateCall(writableModuleType, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleType  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesBulkUpdate(WritableModuleType writableModuleType) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesBulkUpdateWithHttpInfo(writableModuleType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleType  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesBulkUpdateWithHttpInfo(WritableModuleType writableModuleType) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesBulkUpdateValidateBeforeCall(writableModuleType, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesBulkUpdateAsync(WritableModuleType writableModuleType, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesBulkUpdateValidateBeforeCall(writableModuleType, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesCreate
     * @param writableModuleType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesCreateCall(WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleType;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesCreateValidateBeforeCall(WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModuleType' is set
        if (writableModuleType == null) {
            throw new ApiException("Missing the required parameter 'writableModuleType' when calling dcimModuleTypesCreate(Async)");
        }

        return dcimModuleTypesCreateCall(writableModuleType, _callback);

    }

    /**
     * 
     * 
     * @param writableModuleType  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesCreate(WritableModuleType writableModuleType) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesCreateWithHttpInfo(writableModuleType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModuleType  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesCreateWithHttpInfo(WritableModuleType writableModuleType) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesCreateValidateBeforeCall(writableModuleType, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModuleType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesCreateAsync(WritableModuleType writableModuleType, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesCreateValidateBeforeCall(writableModuleType, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesDelete
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesDelete(Async)");
        }

        return dcimModuleTypesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModuleTypesDelete(Integer id) throws ApiException {
        dcimModuleTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModuleTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesList
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesListCall(String id, String model, String partNumber, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number", partNumber));
        }

        if (weight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight", weight));
        }

        if (weightUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_unit", weightUnit));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (modelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ic", modelIc));
        }

        if (modelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nic", modelNic));
        }

        if (modelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__iew", modelIew));
        }

        if (modelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__niew", modelNiew));
        }

        if (modelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__isw", modelIsw));
        }

        if (modelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nisw", modelNisw));
        }

        if (modelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ie", modelIe));
        }

        if (modelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nie", modelNie));
        }

        if (modelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__empty", modelEmpty));
        }

        if (partNumberN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__n", partNumberN));
        }

        if (partNumberIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ic", partNumberIc));
        }

        if (partNumberNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nic", partNumberNic));
        }

        if (partNumberIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__iew", partNumberIew));
        }

        if (partNumberNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__niew", partNumberNiew));
        }

        if (partNumberIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__isw", partNumberIsw));
        }

        if (partNumberNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nisw", partNumberNisw));
        }

        if (partNumberIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ie", partNumberIe));
        }

        if (partNumberNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nie", partNumberNie));
        }

        if (partNumberEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__empty", partNumberEmpty));
        }

        if (weightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__n", weightN));
        }

        if (weightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lte", weightLte));
        }

        if (weightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lt", weightLt));
        }

        if (weightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gte", weightGte));
        }

        if (weightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gt", weightGt));
        }

        if (weightUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_unit__n", weightUnitN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesListValidateBeforeCall(String id, String model, String partNumber, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimModuleTypesListCall(id, model, partNumber, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModuleTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModuleTypesList200Response dcimModuleTypesList(String id, String model, String partNumber, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModuleTypesList200Response> localVarResp = dcimModuleTypesListWithHttpInfo(id, model, partNumber, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModuleTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModuleTypesList200Response> dcimModuleTypesListWithHttpInfo(String id, String model, String partNumber, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesListValidateBeforeCall(id, model, partNumber, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModuleTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param model  (optional)
     * @param partNumber  (optional)
     * @param weight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param modelEmpty  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param partNumberEmpty  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesListAsync(String id, String model, String partNumber, String weight, String weightUnit, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String modelEmpty, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String partNumberEmpty, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModuleTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesListValidateBeforeCall(id, model, partNumber, weight, weightUnit, created, lastUpdated, q, tag, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, modelEmpty, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, partNumberEmpty, weightN, weightLte, weightLt, weightGte, weightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModuleTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesPartialUpdate
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesPartialUpdateCall(Integer id, WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleType;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesPartialUpdateValidateBeforeCall(Integer id, WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableModuleType' is set
        if (writableModuleType == null) {
            throw new ApiException("Missing the required parameter 'writableModuleType' when calling dcimModuleTypesPartialUpdate(Async)");
        }

        return dcimModuleTypesPartialUpdateCall(id, writableModuleType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesPartialUpdate(Integer id, WritableModuleType writableModuleType) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesPartialUpdateWithHttpInfo(id, writableModuleType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesPartialUpdateWithHttpInfo(Integer id, WritableModuleType writableModuleType) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesPartialUpdateValidateBeforeCall(id, writableModuleType, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesPartialUpdateAsync(Integer id, WritableModuleType writableModuleType, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesPartialUpdateValidateBeforeCall(id, writableModuleType, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesRead
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesRead(Async)");
        }

        return dcimModuleTypesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesRead(Integer id) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesReadAsync(Integer id, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModuleTypesUpdate
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesUpdateCall(Integer id, WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModuleType;

        // create path and map variables
        String localVarPath = "/dcim/module-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModuleTypesUpdateValidateBeforeCall(Integer id, WritableModuleType writableModuleType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModuleTypesUpdate(Async)");
        }

        // verify the required parameter 'writableModuleType' is set
        if (writableModuleType == null) {
            throw new ApiException("Missing the required parameter 'writableModuleType' when calling dcimModuleTypesUpdate(Async)");
        }

        return dcimModuleTypesUpdateCall(id, writableModuleType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @return ModuleType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModuleType dcimModuleTypesUpdate(Integer id, WritableModuleType writableModuleType) throws ApiException {
        ApiResponse<ModuleType> localVarResp = dcimModuleTypesUpdateWithHttpInfo(id, writableModuleType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @return ApiResponse&lt;ModuleType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModuleType> dcimModuleTypesUpdateWithHttpInfo(Integer id, WritableModuleType writableModuleType) throws ApiException {
        okhttp3.Call localVarCall = dcimModuleTypesUpdateValidateBeforeCall(id, writableModuleType, null);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module type. (required)
     * @param writableModuleType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModuleTypesUpdateAsync(Integer id, WritableModuleType writableModuleType, final ApiCallback<ModuleType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModuleTypesUpdateValidateBeforeCall(id, writableModuleType, _callback);
        Type localVarReturnType = new TypeToken<ModuleType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimModulesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModulesBulkDelete() throws ApiException {
        dcimModulesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModulesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimModulesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesBulkPartialUpdate
     * @param writableModule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkPartialUpdateCall(WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModule;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesBulkPartialUpdateValidateBeforeCall(WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModule' is set
        if (writableModule == null) {
            throw new ApiException("Missing the required parameter 'writableModule' when calling dcimModulesBulkPartialUpdate(Async)");
        }

        return dcimModulesBulkPartialUpdateCall(writableModule, _callback);

    }

    /**
     * 
     * 
     * @param writableModule  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesBulkPartialUpdate(WritableModule writableModule) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesBulkPartialUpdateWithHttpInfo(writableModule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModule  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesBulkPartialUpdateWithHttpInfo(WritableModule writableModule) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesBulkPartialUpdateValidateBeforeCall(writableModule, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkPartialUpdateAsync(WritableModule writableModule, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesBulkPartialUpdateValidateBeforeCall(writableModule, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesBulkUpdate
     * @param writableModule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkUpdateCall(WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModule;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesBulkUpdateValidateBeforeCall(WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModule' is set
        if (writableModule == null) {
            throw new ApiException("Missing the required parameter 'writableModule' when calling dcimModulesBulkUpdate(Async)");
        }

        return dcimModulesBulkUpdateCall(writableModule, _callback);

    }

    /**
     * 
     * 
     * @param writableModule  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesBulkUpdate(WritableModule writableModule) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesBulkUpdateWithHttpInfo(writableModule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModule  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesBulkUpdateWithHttpInfo(WritableModule writableModule) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesBulkUpdateValidateBeforeCall(writableModule, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesBulkUpdateAsync(WritableModule writableModule, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesBulkUpdateValidateBeforeCall(writableModule, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesCreate
     * @param writableModule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesCreateCall(WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModule;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesCreateValidateBeforeCall(WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableModule' is set
        if (writableModule == null) {
            throw new ApiException("Missing the required parameter 'writableModule' when calling dcimModulesCreate(Async)");
        }

        return dcimModulesCreateCall(writableModule, _callback);

    }

    /**
     * 
     * 
     * @param writableModule  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesCreate(WritableModule writableModule) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesCreateWithHttpInfo(writableModule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableModule  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesCreateWithHttpInfo(WritableModule writableModule) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesCreateValidateBeforeCall(writableModule, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableModule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesCreateAsync(WritableModule writableModule, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesCreateValidateBeforeCall(writableModule, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesDelete
     * @param id A unique integer value identifying this module. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesDelete(Async)");
        }

        return dcimModulesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimModulesDelete(Integer id) throws ApiException {
        dcimModulesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimModulesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesList
     * @param id  (optional)
     * @param status  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesListCall(String id, String status, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (moduleTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type_id", moduleTypeId));
        }

        if (moduleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type", moduleType));
        }

        if (moduleBayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bay_id", moduleBayId));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (assetTagEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__empty", assetTagEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (moduleTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type_id__n", moduleTypeIdN));
        }

        if (moduleTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_type__n", moduleTypeN));
        }

        if (moduleBayIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_bay_id__n", moduleBayIdN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (serialEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__empty", serialEmpty));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesListValidateBeforeCall(String id, String status, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimModulesListCall(id, status, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, statusN, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param status  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimModulesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimModulesList200Response dcimModulesList(String id, String status, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimModulesList200Response> localVarResp = dcimModulesListWithHttpInfo(id, status, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, statusN, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param status  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimModulesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimModulesList200Response> dcimModulesListWithHttpInfo(String id, String status, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesListValidateBeforeCall(id, status, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, statusN, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimModulesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param status  (optional)
     * @param assetTag  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param moduleTypeId  (optional)
     * @param moduleType  (optional)
     * @param moduleBayId  (optional)
     * @param deviceId  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param statusN  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param moduleTypeIdN  (optional)
     * @param moduleTypeN  (optional)
     * @param moduleBayIdN  (optional)
     * @param deviceIdN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesListAsync(String id, String status, String assetTag, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String moduleTypeId, String moduleType, String moduleBayId, String deviceId, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String statusN, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String moduleTypeIdN, String moduleTypeN, String moduleBayIdN, String deviceIdN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback<DcimModulesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesListValidateBeforeCall(id, status, assetTag, created, lastUpdated, q, tag, manufacturerId, manufacturer, moduleTypeId, moduleType, moduleBayId, deviceId, serial, idN, idLte, idLt, idGte, idGt, statusN, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, moduleTypeIdN, moduleTypeN, moduleBayIdN, deviceIdN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimModulesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesPartialUpdate
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesPartialUpdateCall(Integer id, WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModule;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesPartialUpdateValidateBeforeCall(Integer id, WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableModule' is set
        if (writableModule == null) {
            throw new ApiException("Missing the required parameter 'writableModule' when calling dcimModulesPartialUpdate(Async)");
        }

        return dcimModulesPartialUpdateCall(id, writableModule, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesPartialUpdate(Integer id, WritableModule writableModule) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesPartialUpdateWithHttpInfo(id, writableModule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesPartialUpdateWithHttpInfo(Integer id, WritableModule writableModule) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesPartialUpdateValidateBeforeCall(id, writableModule, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesPartialUpdateAsync(Integer id, WritableModule writableModule, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesPartialUpdateValidateBeforeCall(id, writableModule, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesRead
     * @param id A unique integer value identifying this module. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesRead(Async)");
        }

        return dcimModulesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesRead(Integer id) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesReadAsync(Integer id, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimModulesUpdate
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesUpdateCall(Integer id, WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableModule;

        // create path and map variables
        String localVarPath = "/dcim/modules/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimModulesUpdateValidateBeforeCall(Integer id, WritableModule writableModule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimModulesUpdate(Async)");
        }

        // verify the required parameter 'writableModule' is set
        if (writableModule == null) {
            throw new ApiException("Missing the required parameter 'writableModule' when calling dcimModulesUpdate(Async)");
        }

        return dcimModulesUpdateCall(id, writableModule, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @return Module
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Module dcimModulesUpdate(Integer id, WritableModule writableModule) throws ApiException {
        ApiResponse<Module> localVarResp = dcimModulesUpdateWithHttpInfo(id, writableModule);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @return ApiResponse&lt;Module&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Module> dcimModulesUpdateWithHttpInfo(Integer id, WritableModule writableModule) throws ApiException {
        okhttp3.Call localVarCall = dcimModulesUpdateValidateBeforeCall(id, writableModule, null);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this module. (required)
     * @param writableModule  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimModulesUpdateAsync(Integer id, WritableModule writableModule, final ApiCallback<Module> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimModulesUpdateValidateBeforeCall(id, writableModule, _callback);
        Type localVarReturnType = new TypeToken<Module>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPlatformsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPlatformsBulkDelete() throws ApiException {
        dcimPlatformsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPlatformsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsBulkPartialUpdate
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkPartialUpdateCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsBulkPartialUpdateValidateBeforeCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsBulkPartialUpdate(Async)");
        }

        return dcimPlatformsBulkPartialUpdateCall(writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsBulkPartialUpdate(WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsBulkPartialUpdateWithHttpInfo(writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsBulkPartialUpdateWithHttpInfo(WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsBulkPartialUpdateValidateBeforeCall(writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkPartialUpdateAsync(WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsBulkPartialUpdateValidateBeforeCall(writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsBulkUpdate
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkUpdateCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsBulkUpdateValidateBeforeCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsBulkUpdate(Async)");
        }

        return dcimPlatformsBulkUpdateCall(writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsBulkUpdate(WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsBulkUpdateWithHttpInfo(writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsBulkUpdateWithHttpInfo(WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsBulkUpdateValidateBeforeCall(writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsBulkUpdateAsync(WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsBulkUpdateValidateBeforeCall(writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsCreate
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsCreateValidateBeforeCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsCreate(Async)");
        }

        return dcimPlatformsCreateCall(writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsCreate(WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsCreateWithHttpInfo(writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsCreateWithHttpInfo(WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateAsync(WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsDelete
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsDelete(Async)");
        }

        return dcimPlatformsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPlatformsDelete(Integer id) throws ApiException {
        dcimPlatformsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPlatformsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param napalmDriverEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListCall(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String napalmDriverEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (napalmDriver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver", napalmDriver));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (napalmDriverN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__n", napalmDriverN));
        }

        if (napalmDriverIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__ic", napalmDriverIc));
        }

        if (napalmDriverNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nic", napalmDriverNic));
        }

        if (napalmDriverIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__iew", napalmDriverIew));
        }

        if (napalmDriverNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__niew", napalmDriverNiew));
        }

        if (napalmDriverIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__isw", napalmDriverIsw));
        }

        if (napalmDriverNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nisw", napalmDriverNisw));
        }

        if (napalmDriverIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__ie", napalmDriverIe));
        }

        if (napalmDriverNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nie", napalmDriverNie));
        }

        if (napalmDriverEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__empty", napalmDriverEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsListValidateBeforeCall(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String napalmDriverEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPlatformsListCall(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, napalmDriverEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param napalmDriverEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPlatformsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPlatformsList200Response dcimPlatformsList(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String napalmDriverEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPlatformsList200Response> localVarResp = dcimPlatformsListWithHttpInfo(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, napalmDriverEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param napalmDriverEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPlatformsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPlatformsList200Response> dcimPlatformsListWithHttpInfo(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String napalmDriverEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, napalmDriverEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param napalmDriverEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListAsync(String id, String name, String slug, String napalmDriver, String description, String created, String lastUpdated, String q, String tag, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String napalmDriverEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String manufacturerIdN, String manufacturerN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPlatformsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(id, name, slug, napalmDriver, description, created, lastUpdated, q, tag, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, napalmDriverEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, manufacturerIdN, manufacturerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsPartialUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsPartialUpdateValidateBeforeCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsPartialUpdate(Async)");
        }

        return dcimPlatformsPartialUpdateCall(id, writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsPartialUpdate(Integer id, WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsPartialUpdateWithHttpInfo(id, writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsPartialUpdateWithHttpInfo(Integer id, WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateAsync(Integer id, WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsRead
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsRead(Async)");
        }

        return dcimPlatformsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsRead(Integer id) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadAsync(Integer id, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsUpdateValidateBeforeCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsUpdate(Async)");
        }

        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsUpdate(Async)");
        }

        return dcimPlatformsUpdateCall(id, writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsUpdate(Integer id, WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsUpdateWithHttpInfo(id, writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsUpdateWithHttpInfo(Integer id, WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateAsync(Integer id, WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPowerFeedsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerFeedsBulkDelete() throws ApiException {
        dcimPowerFeedsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerFeedsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsBulkPartialUpdate
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkPartialUpdateCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsBulkPartialUpdateValidateBeforeCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsBulkPartialUpdate(Async)");
        }

        return dcimPowerFeedsBulkPartialUpdateCall(writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsBulkPartialUpdate(WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsBulkPartialUpdateWithHttpInfo(writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsBulkPartialUpdateWithHttpInfo(WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsBulkPartialUpdateValidateBeforeCall(writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkPartialUpdateAsync(WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsBulkPartialUpdateValidateBeforeCall(writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsBulkUpdate
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkUpdateCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsBulkUpdateValidateBeforeCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsBulkUpdate(Async)");
        }

        return dcimPowerFeedsBulkUpdateCall(writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsBulkUpdate(WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsBulkUpdateWithHttpInfo(writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsBulkUpdateWithHttpInfo(WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsBulkUpdateValidateBeforeCall(writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsBulkUpdateAsync(WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsBulkUpdateValidateBeforeCall(writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsCreate
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsCreateCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsCreateValidateBeforeCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsCreate(Async)");
        }

        return dcimPowerFeedsCreateCall(writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsCreate(WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsCreateWithHttpInfo(writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsCreateWithHttpInfo(WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsCreateValidateBeforeCall(writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsCreateAsync(WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsCreateValidateBeforeCall(writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsDelete
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsDelete(Async)");
        }

        return dcimPowerFeedsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerFeedsDelete(Integer id) throws ApiException {
        dcimPowerFeedsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerFeedsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsList
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsListCall(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String occupied, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (supply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supply", supply));
        }

        if (phase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phase", phase));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (amperage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage", amperage));
        }

        if (maxUtilization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization", maxUtilization));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (powerPanelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_panel_id", powerPanelId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (supplyN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supply__n", supplyN));
        }

        if (phaseN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phase__n", phaseN));
        }

        if (voltageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__n", voltageN));
        }

        if (voltageLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__lte", voltageLte));
        }

        if (voltageLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__lt", voltageLt));
        }

        if (voltageGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__gte", voltageGte));
        }

        if (voltageGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__gt", voltageGt));
        }

        if (amperageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__n", amperageN));
        }

        if (amperageLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__lte", amperageLte));
        }

        if (amperageLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__lt", amperageLt));
        }

        if (amperageGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__gte", amperageGte));
        }

        if (amperageGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__gt", amperageGt));
        }

        if (maxUtilizationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__n", maxUtilizationN));
        }

        if (maxUtilizationLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__lte", maxUtilizationLte));
        }

        if (maxUtilizationLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__lt", maxUtilizationLt));
        }

        if (maxUtilizationGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__gte", maxUtilizationGte));
        }

        if (maxUtilizationGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__gt", maxUtilizationGt));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (powerPanelIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_panel_id__n", powerPanelIdN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsListValidateBeforeCall(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String occupied, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerFeedsListCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, occupied, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerFeedsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerFeedsList200Response dcimPowerFeedsList(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String occupied, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerFeedsList200Response> localVarResp = dcimPowerFeedsListWithHttpInfo(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, occupied, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerFeedsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerFeedsList200Response> dcimPowerFeedsListWithHttpInfo(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String occupied, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsListValidateBeforeCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, occupied, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerFeedsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param cableEnd  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param cableEndN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsListAsync(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String occupied, String connected, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String powerPanelId, String rackId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerFeedsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsListValidateBeforeCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, cableEnd, created, lastUpdated, q, tag, cabled, occupied, connected, regionId, region, siteGroupId, siteGroup, siteId, site, powerPanelId, rackId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, powerPanelIdN, rackIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerFeedsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsPartialUpdate
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsPartialUpdateCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsPartialUpdateValidateBeforeCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsPartialUpdate(Async)");
        }

        return dcimPowerFeedsPartialUpdateCall(id, writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsPartialUpdate(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsPartialUpdateWithHttpInfo(id, writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsPartialUpdateWithHttpInfo(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateValidateBeforeCall(id, writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsPartialUpdateAsync(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateValidateBeforeCall(id, writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsRead
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsRead(Async)");
        }

        return dcimPowerFeedsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsRead(Integer id) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsReadAsync(Integer id, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsTrace
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsTrace(Async)");
        }

        return dcimPowerFeedsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power feed. (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsTrace(Integer id) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsTraceAsync(Integer id, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsUpdate
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsUpdateCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsUpdateValidateBeforeCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsUpdate(Async)");
        }

        return dcimPowerFeedsUpdateCall(id, writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsUpdate(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsUpdateWithHttpInfo(id, writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsUpdateWithHttpInfo(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsUpdateValidateBeforeCall(id, writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsUpdateAsync(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsUpdateValidateBeforeCall(id, writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletTemplatesBulkDelete() throws ApiException {
        dcimPowerOutletTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesBulkPartialUpdate
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkPartialUpdateCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesBulkPartialUpdateValidateBeforeCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesBulkPartialUpdate(Async)");
        }

        return dcimPowerOutletTemplatesBulkPartialUpdateCall(writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesBulkPartialUpdate(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesBulkPartialUpdateWithHttpInfo(writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesBulkPartialUpdateWithHttpInfo(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkPartialUpdateValidateBeforeCall(writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkPartialUpdateAsync(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkPartialUpdateValidateBeforeCall(writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesBulkUpdate
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkUpdateCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesBulkUpdateValidateBeforeCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesBulkUpdate(Async)");
        }

        return dcimPowerOutletTemplatesBulkUpdateCall(writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesBulkUpdate(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesBulkUpdateWithHttpInfo(writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesBulkUpdateWithHttpInfo(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkUpdateValidateBeforeCall(writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesBulkUpdateAsync(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesBulkUpdateValidateBeforeCall(writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesCreate
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesCreateValidateBeforeCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesCreate(Async)");
        }

        return dcimPowerOutletTemplatesCreateCall(writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesCreate(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesCreateWithHttpInfo(writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesCreateWithHttpInfo(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateAsync(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesDelete
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete(Async)");
        }

        return dcimPowerOutletTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletTemplatesDelete(Integer id) throws ApiException {
        dcimPowerOutletTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListCall(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (feedLeg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg", feedLeg));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (feedLegN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg__n", feedLegN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesListValidateBeforeCall(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletTemplatesListCall(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletTemplatesList200Response dcimPowerOutletTemplatesList(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletTemplatesList200Response> localVarResp = dcimPowerOutletTemplatesListWithHttpInfo(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletTemplatesList200Response> dcimPowerOutletTemplatesListWithHttpInfo(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListAsync(String id, String name, String type, String feedLeg, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String feedLegN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(id, name, type, feedLeg, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, feedLegN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesPartialUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }

        return dcimPowerOutletTemplatesPartialUpdateCall(id, writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesPartialUpdate(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(id, writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateAsync(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesRead
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead(Async)");
        }

        return dcimPowerOutletTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadAsync(Integer id, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }

        return dcimPowerOutletTemplatesUpdateCall(id, writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesUpdate(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesUpdateWithHttpInfo(id, writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateAsync(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletsBulkDelete() throws ApiException {
        dcimPowerOutletsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsBulkPartialUpdate
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkPartialUpdateCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsBulkPartialUpdateValidateBeforeCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsBulkPartialUpdate(Async)");
        }

        return dcimPowerOutletsBulkPartialUpdateCall(writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsBulkPartialUpdate(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsBulkPartialUpdateWithHttpInfo(writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsBulkPartialUpdateWithHttpInfo(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsBulkPartialUpdateValidateBeforeCall(writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkPartialUpdateAsync(WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsBulkPartialUpdateValidateBeforeCall(writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsBulkUpdate
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkUpdateCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsBulkUpdateValidateBeforeCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsBulkUpdate(Async)");
        }

        return dcimPowerOutletsBulkUpdateCall(writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsBulkUpdate(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsBulkUpdateWithHttpInfo(writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsBulkUpdateWithHttpInfo(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsBulkUpdateValidateBeforeCall(writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsBulkUpdateAsync(WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsBulkUpdateValidateBeforeCall(writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsCreate
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsCreateValidateBeforeCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsCreate(Async)");
        }

        return dcimPowerOutletsCreateCall(writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsCreate(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsCreateWithHttpInfo(writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsCreateWithHttpInfo(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateAsync(WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsDelete
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsDelete(Async)");
        }

        return dcimPowerOutletsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletsDelete(Integer id) throws ApiException {
        dcimPowerOutletsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListCall(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (feedLeg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg", feedLeg));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (feedLegN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg__n", feedLegN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsListValidateBeforeCall(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletsListCall(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletsList200Response dcimPowerOutletsList(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletsList200Response> localVarResp = dcimPowerOutletsListWithHttpInfo(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletsList200Response> dcimPowerOutletsListWithHttpInfo(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListAsync(String id, String name, String label, String feedLeg, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(id, name, label, feedLeg, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsPartialUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsPartialUpdate(Async)");
        }

        return dcimPowerOutletsPartialUpdateCall(id, writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsPartialUpdate(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsPartialUpdateWithHttpInfo(id, writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsPartialUpdateWithHttpInfo(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateAsync(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsRead
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsRead(Async)");
        }

        return dcimPowerOutletsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsRead(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsTrace
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsTrace(Async)");
        }

        return dcimPowerOutletsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsTrace(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsTraceAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsUpdateValidateBeforeCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsUpdate(Async)");
        }

        return dcimPowerOutletsUpdateCall(id, writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsUpdate(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsUpdateWithHttpInfo(id, writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsUpdateWithHttpInfo(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateAsync(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPowerPanelsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPanelsBulkDelete() throws ApiException {
        dcimPowerPanelsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPanelsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsBulkPartialUpdate
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkPartialUpdateCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsBulkPartialUpdateValidateBeforeCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsBulkPartialUpdate(Async)");
        }

        return dcimPowerPanelsBulkPartialUpdateCall(writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsBulkPartialUpdate(WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsBulkPartialUpdateWithHttpInfo(writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsBulkPartialUpdateWithHttpInfo(WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsBulkPartialUpdateValidateBeforeCall(writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkPartialUpdateAsync(WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsBulkPartialUpdateValidateBeforeCall(writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsBulkUpdate
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkUpdateCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsBulkUpdateValidateBeforeCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsBulkUpdate(Async)");
        }

        return dcimPowerPanelsBulkUpdateCall(writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsBulkUpdate(WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsBulkUpdateWithHttpInfo(writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsBulkUpdateWithHttpInfo(WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsBulkUpdateValidateBeforeCall(writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsBulkUpdateAsync(WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsBulkUpdateValidateBeforeCall(writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsCreate
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsCreateCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsCreateValidateBeforeCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsCreate(Async)");
        }

        return dcimPowerPanelsCreateCall(writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsCreate(WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsCreateWithHttpInfo(writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsCreateWithHttpInfo(WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsCreateValidateBeforeCall(writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsCreateAsync(WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsCreateValidateBeforeCall(writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsDelete
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsDelete(Async)");
        }

        return dcimPowerPanelsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPanelsDelete(Integer id) throws ApiException {
        dcimPowerPanelsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPanelsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsList
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsListCall(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsListValidateBeforeCall(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPanelsListCall(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPanelsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPanelsList200Response dcimPowerPanelsList(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPanelsList200Response> localVarResp = dcimPowerPanelsListWithHttpInfo(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPanelsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPanelsList200Response> dcimPowerPanelsListWithHttpInfo(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsListValidateBeforeCall(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPanelsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsListAsync(String id, String name, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerPanelsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsListValidateBeforeCall(id, name, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPanelsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsPartialUpdate
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsPartialUpdateCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsPartialUpdate(Async)");
        }

        return dcimPowerPanelsPartialUpdateCall(id, writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsPartialUpdate(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsPartialUpdateWithHttpInfo(id, writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsPartialUpdateWithHttpInfo(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateValidateBeforeCall(id, writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsPartialUpdateAsync(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateValidateBeforeCall(id, writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsRead
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsRead(Async)");
        }

        return dcimPowerPanelsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsRead(Integer id) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsReadAsync(Integer id, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsUpdate
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsUpdateCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsUpdateValidateBeforeCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsUpdate(Async)");
        }

        return dcimPowerPanelsUpdateCall(id, writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsUpdate(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsUpdateWithHttpInfo(id, writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsUpdateWithHttpInfo(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsUpdateValidateBeforeCall(id, writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsUpdateAsync(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsUpdateValidateBeforeCall(id, writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPowerPortTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortTemplatesBulkDelete() throws ApiException {
        dcimPowerPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesBulkPartialUpdate
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkPartialUpdateCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesBulkPartialUpdateValidateBeforeCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesBulkPartialUpdate(Async)");
        }

        return dcimPowerPortTemplatesBulkPartialUpdateCall(writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesBulkPartialUpdate(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesBulkPartialUpdateWithHttpInfo(writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesBulkPartialUpdateWithHttpInfo(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkPartialUpdateValidateBeforeCall(writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkPartialUpdateAsync(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkPartialUpdateValidateBeforeCall(writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesBulkUpdate
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkUpdateCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesBulkUpdateValidateBeforeCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesBulkUpdate(Async)");
        }

        return dcimPowerPortTemplatesBulkUpdateCall(writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesBulkUpdate(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesBulkUpdateWithHttpInfo(writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesBulkUpdateWithHttpInfo(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkUpdateValidateBeforeCall(writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesBulkUpdateAsync(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesBulkUpdateValidateBeforeCall(writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesCreate
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesCreateValidateBeforeCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesCreate(Async)");
        }

        return dcimPowerPortTemplatesCreateCall(writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesCreate(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesCreateWithHttpInfo(writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesCreateWithHttpInfo(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateAsync(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesDelete
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete(Async)");
        }

        return dcimPowerPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortTemplatesDelete(Integer id) throws ApiException {
        dcimPowerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListCall(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (maximumDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw", maximumDraw));
        }

        if (allocatedDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw", allocatedDraw));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (maximumDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__n", maximumDrawN));
        }

        if (maximumDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lte", maximumDrawLte));
        }

        if (maximumDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lt", maximumDrawLt));
        }

        if (maximumDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gte", maximumDrawGte));
        }

        if (maximumDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gt", maximumDrawGt));
        }

        if (allocatedDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__n", allocatedDrawN));
        }

        if (allocatedDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lte", allocatedDrawLte));
        }

        if (allocatedDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lt", allocatedDrawLt));
        }

        if (allocatedDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gte", allocatedDrawGte));
        }

        if (allocatedDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gt", allocatedDrawGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesListValidateBeforeCall(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPortTemplatesListCall(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPortTemplatesList200Response dcimPowerPortTemplatesList(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPortTemplatesList200Response> localVarResp = dcimPowerPortTemplatesListWithHttpInfo(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPortTemplatesList200Response> dcimPowerPortTemplatesListWithHttpInfo(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListAsync(String id, String name, String type, String maximumDraw, String allocatedDraw, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(id, name, type, maximumDraw, allocatedDraw, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }

        return dcimPowerPortTemplatesPartialUpdateCall(id, writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesPartialUpdate(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesPartialUpdateWithHttpInfo(id, writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateAsync(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesRead
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead(Async)");
        }

        return dcimPowerPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadAsync(Integer id, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesUpdate(Async)");
        }

        return dcimPowerPortTemplatesUpdateCall(id, writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesUpdate(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesUpdateWithHttpInfo(id, writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateAsync(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimPowerPortsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortsBulkDelete() throws ApiException {
        dcimPowerPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsBulkPartialUpdate
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkPartialUpdateCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsBulkPartialUpdateValidateBeforeCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsBulkPartialUpdate(Async)");
        }

        return dcimPowerPortsBulkPartialUpdateCall(writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsBulkPartialUpdate(WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsBulkPartialUpdateWithHttpInfo(writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsBulkPartialUpdateWithHttpInfo(WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsBulkPartialUpdateValidateBeforeCall(writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkPartialUpdateAsync(WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsBulkPartialUpdateValidateBeforeCall(writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsBulkUpdate
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkUpdateCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsBulkUpdateValidateBeforeCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsBulkUpdate(Async)");
        }

        return dcimPowerPortsBulkUpdateCall(writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsBulkUpdate(WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsBulkUpdateWithHttpInfo(writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsBulkUpdateWithHttpInfo(WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsBulkUpdateValidateBeforeCall(writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsBulkUpdateAsync(WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsBulkUpdateValidateBeforeCall(writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsCreate
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsCreateValidateBeforeCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsCreate(Async)");
        }

        return dcimPowerPortsCreateCall(writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsCreate(WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsCreateWithHttpInfo(writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsCreateWithHttpInfo(WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateAsync(WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsDelete
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsDelete(Async)");
        }

        return dcimPowerPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortsDelete(Integer id) throws ApiException {
        dcimPowerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListCall(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (maximumDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw", maximumDraw));
        }

        if (allocatedDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw", allocatedDraw));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (connected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connected", connected));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (maximumDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__n", maximumDrawN));
        }

        if (maximumDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lte", maximumDrawLte));
        }

        if (maximumDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lt", maximumDrawLt));
        }

        if (maximumDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gte", maximumDrawGte));
        }

        if (maximumDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gt", maximumDrawGt));
        }

        if (allocatedDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__n", allocatedDrawN));
        }

        if (allocatedDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lte", allocatedDrawLte));
        }

        if (allocatedDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lt", allocatedDrawLt));
        }

        if (allocatedDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gte", allocatedDrawGte));
        }

        if (allocatedDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gt", allocatedDrawGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsListValidateBeforeCall(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPortsListCall(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPortsList200Response dcimPowerPortsList(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPortsList200Response> localVarResp = dcimPowerPortsListWithHttpInfo(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPortsList200Response> dcimPowerPortsListWithHttpInfo(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param connected  (optional)
     * @param type  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListAsync(String id, String name, String label, String maximumDraw, String allocatedDraw, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String connected, String type, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String typeN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimPowerPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(id, name, label, maximumDraw, allocatedDraw, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, connected, type, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, typeN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsPartialUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsPartialUpdate(Async)");
        }

        return dcimPowerPortsPartialUpdateCall(id, writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsPartialUpdate(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsPartialUpdateWithHttpInfo(id, writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsPartialUpdateWithHttpInfo(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateAsync(Integer id, WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsRead
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsRead(Async)");
        }

        return dcimPowerPortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsRead(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsTrace
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsTrace(Async)");
        }

        return dcimPowerPortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsTrace(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsTraceAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsUpdateValidateBeforeCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsUpdate(Async)");
        }

        return dcimPowerPortsUpdateCall(id, writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsUpdate(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsUpdateWithHttpInfo(id, writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsUpdateWithHttpInfo(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateAsync(Integer id, WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimRackReservationsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackReservationsBulkDelete() throws ApiException {
        dcimRackReservationsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackReservationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsBulkPartialUpdate
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkPartialUpdateCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsBulkPartialUpdateValidateBeforeCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsBulkPartialUpdate(Async)");
        }

        return dcimRackReservationsBulkPartialUpdateCall(writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsBulkPartialUpdate(WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsBulkPartialUpdateWithHttpInfo(writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsBulkPartialUpdateWithHttpInfo(WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsBulkPartialUpdateValidateBeforeCall(writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkPartialUpdateAsync(WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsBulkPartialUpdateValidateBeforeCall(writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsBulkUpdate
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkUpdateCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsBulkUpdateValidateBeforeCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsBulkUpdate(Async)");
        }

        return dcimRackReservationsBulkUpdateCall(writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsBulkUpdate(WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsBulkUpdateWithHttpInfo(writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsBulkUpdateWithHttpInfo(WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsBulkUpdateValidateBeforeCall(writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsBulkUpdateAsync(WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsBulkUpdateValidateBeforeCall(writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsCreate
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsCreateValidateBeforeCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsCreate(Async)");
        }

        return dcimRackReservationsCreateCall(writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsCreate(WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsCreateWithHttpInfo(writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsCreateWithHttpInfo(WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateAsync(WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsDelete
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsDelete(Async)");
        }

        return dcimRackReservationsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackReservationsDelete(Integer id) throws ApiException {
        dcimRackReservationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackReservationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsList
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListCall(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (userIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id__n", userIdN));
        }

        if (userN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__n", userN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsListValidateBeforeCall(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackReservationsListCall(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackReservationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackReservationsList200Response dcimRackReservationsList(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackReservationsList200Response> localVarResp = dcimRackReservationsListWithHttpInfo(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackReservationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackReservationsList200Response> dcimRackReservationsListWithHttpInfo(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param created  (optional)
     * @param description  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListAsync(String id, String created, String description, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String rackId, String siteId, String site, String regionId, String region, String siteGroupId, String siteGroup, String locationId, String location, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String locationIdN, String locationN, String userIdN, String userN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRackReservationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(id, created, description, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, rackId, siteId, site, regionId, region, siteGroupId, siteGroup, locationId, location, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, regionIdN, regionN, siteGroupIdN, siteGroupN, locationIdN, locationN, userIdN, userN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsPartialUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsPartialUpdateValidateBeforeCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsPartialUpdate(Async)");
        }

        return dcimRackReservationsPartialUpdateCall(id, writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsPartialUpdate(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsPartialUpdateWithHttpInfo(id, writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsPartialUpdateWithHttpInfo(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateAsync(Integer id, WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsRead
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsRead(Async)");
        }

        return dcimRackReservationsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsRead(Integer id) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadAsync(Integer id, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsUpdateValidateBeforeCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsUpdate(Async)");
        }

        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsUpdate(Async)");
        }

        return dcimRackReservationsUpdateCall(id, writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsUpdate(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsUpdateWithHttpInfo(id, writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsUpdateWithHttpInfo(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateAsync(Integer id, WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimRackRolesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackRolesBulkDelete() throws ApiException {
        dcimRackRolesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackRolesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesBulkPartialUpdate
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkPartialUpdateCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesBulkPartialUpdateValidateBeforeCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesBulkPartialUpdate(Async)");
        }

        return dcimRackRolesBulkPartialUpdateCall(rackRole, _callback);

    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesBulkPartialUpdate(RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesBulkPartialUpdateWithHttpInfo(rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesBulkPartialUpdateWithHttpInfo(RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesBulkPartialUpdateValidateBeforeCall(rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkPartialUpdateAsync(RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesBulkPartialUpdateValidateBeforeCall(rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesBulkUpdate
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkUpdateCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesBulkUpdateValidateBeforeCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesBulkUpdate(Async)");
        }

        return dcimRackRolesBulkUpdateCall(rackRole, _callback);

    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesBulkUpdate(RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesBulkUpdateWithHttpInfo(rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesBulkUpdateWithHttpInfo(RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesBulkUpdateValidateBeforeCall(rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesBulkUpdateAsync(RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesBulkUpdateValidateBeforeCall(rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesCreate
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesCreateValidateBeforeCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesCreate(Async)");
        }

        return dcimRackRolesCreateCall(rackRole, _callback);

    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesCreate(RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesCreateWithHttpInfo(rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesCreateWithHttpInfo(RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateAsync(RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesDelete
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesDelete(Async)");
        }

        return dcimRackRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackRolesDelete(Integer id) throws ApiException {
        dcimRackRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListCall(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesListValidateBeforeCall(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackRolesListCall(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackRolesList200Response dcimRackRolesList(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackRolesList200Response> localVarResp = dcimRackRolesListWithHttpInfo(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackRolesList200Response> dcimRackRolesListWithHttpInfo(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListAsync(String id, String name, String slug, String color, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRackRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(id, name, slug, color, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesPartialUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesPartialUpdateValidateBeforeCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesPartialUpdate(Async)");
        }

        return dcimRackRolesPartialUpdateCall(id, rackRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesPartialUpdate(Integer id, RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesPartialUpdateWithHttpInfo(id, rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesPartialUpdateWithHttpInfo(Integer id, RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateAsync(Integer id, RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesRead
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesRead(Async)");
        }

        return dcimRackRolesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesRead(Integer id) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadAsync(Integer id, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesUpdateValidateBeforeCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesUpdate(Async)");
        }

        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesUpdate(Async)");
        }

        return dcimRackRolesUpdateCall(id, rackRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesUpdate(Integer id, RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesUpdateWithHttpInfo(id, rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesUpdateWithHttpInfo(Integer id, RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateAsync(Integer id, RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimRacksBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRacksBulkDelete() throws ApiException {
        dcimRacksBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRacksBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRacksBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksBulkPartialUpdate
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkPartialUpdateCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksBulkPartialUpdateValidateBeforeCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksBulkPartialUpdate(Async)");
        }

        return dcimRacksBulkPartialUpdateCall(writableRack, _callback);

    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksBulkPartialUpdate(WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksBulkPartialUpdateWithHttpInfo(writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksBulkPartialUpdateWithHttpInfo(WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksBulkPartialUpdateValidateBeforeCall(writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkPartialUpdateAsync(WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksBulkPartialUpdateValidateBeforeCall(writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksBulkUpdate
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkUpdateCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksBulkUpdateValidateBeforeCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksBulkUpdate(Async)");
        }

        return dcimRacksBulkUpdateCall(writableRack, _callback);

    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksBulkUpdate(WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksBulkUpdateWithHttpInfo(writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksBulkUpdateWithHttpInfo(WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksBulkUpdateValidateBeforeCall(writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksBulkUpdateAsync(WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksBulkUpdateValidateBeforeCall(writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksCreate
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksCreateValidateBeforeCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksCreate(Async)");
        }

        return dcimRacksCreateCall(writableRack, _callback);

    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksCreate(WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksCreateWithHttpInfo(writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksCreateWithHttpInfo(WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateAsync(WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksDelete
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksDelete(Async)");
        }

        return dcimRacksDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRacksDelete(Integer id) throws ApiException {
        dcimRacksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRacksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksElevation
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksElevationCall(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/elevation/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (face != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face", face));
        }

        if (render != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("render", render));
        }

        if (unitWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_width", unitWidth));
        }

        if (unitHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_height", unitHeight));
        }

        if (legendWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("legend_width", legendWidth));
        }

        if (marginWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("margin_width", marginWidth));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (expandDevices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand_devices", expandDevices));
        }

        if (includeImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_images", includeImages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksElevationValidateBeforeCall(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksElevation(Async)");
        }

        return dcimRacksElevationCall(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages, _callback);

    }

    /**
     * 
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @return List&lt;RackUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<RackUnit> dcimRacksElevation(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
        ApiResponse<List<RackUnit>> localVarResp = dcimRacksElevationWithHttpInfo(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages);
        return localVarResp.getData();
    }

    /**
     * 
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @return ApiResponse&lt;List&lt;RackUnit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RackUnit>> dcimRacksElevationWithHttpInfo(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksElevationValidateBeforeCall(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages, null);
        Type localVarReturnType = new TypeToken<List<RackUnit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param marginWidth  (optional, default to 15)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksElevationAsync(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer marginWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback<List<RackUnit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksElevationValidateBeforeCall(id, q, face, render, unitWidth, unitHeight, legendWidth, marginWidth, exclude, expandDevices, includeImages, _callback);
        Type localVarReturnType = new TypeToken<List<RackUnit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksList
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param mountingDepth  (optional)
     * @param weight  (optional)
     * @param maxWeight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param facilityIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param mountingDepthN  (optional)
     * @param mountingDepthLte  (optional)
     * @param mountingDepthLt  (optional)
     * @param mountingDepthGte  (optional)
     * @param mountingDepthGt  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param maxWeightN  (optional)
     * @param maxWeightLte  (optional)
     * @param maxWeightLt  (optional)
     * @param maxWeightGte  (optional)
     * @param maxWeightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListCall(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String mountingDepth, String weight, String maxWeight, String weightUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String facilityIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String mountingDepthN, String mountingDepthLte, String mountingDepthLt, String mountingDepthGte, String mountingDepthGt, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String maxWeightN, String maxWeightLte, String maxWeightLt, String maxWeightGte, String maxWeightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (facilityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id", facilityId));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (descUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc_units", descUnits));
        }

        if (outerWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width", outerWidth));
        }

        if (outerDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth", outerDepth));
        }

        if (outerUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_unit", outerUnit));
        }

        if (mountingDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounting_depth", mountingDepth));
        }

        if (weight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight", weight));
        }

        if (maxWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_weight", maxWeight));
        }

        if (weightUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_unit", weightUnit));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (facilityIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__n", facilityIdN));
        }

        if (facilityIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__ic", facilityIdIc));
        }

        if (facilityIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nic", facilityIdNic));
        }

        if (facilityIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__iew", facilityIdIew));
        }

        if (facilityIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__niew", facilityIdNiew));
        }

        if (facilityIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__isw", facilityIdIsw));
        }

        if (facilityIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nisw", facilityIdNisw));
        }

        if (facilityIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__ie", facilityIdIe));
        }

        if (facilityIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nie", facilityIdNie));
        }

        if (facilityIdEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__empty", facilityIdEmpty));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (assetTagEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__empty", assetTagEmpty));
        }

        if (uHeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__n", uHeightN));
        }

        if (uHeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lte", uHeightLte));
        }

        if (uHeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lt", uHeightLt));
        }

        if (uHeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gte", uHeightGte));
        }

        if (uHeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gt", uHeightGt));
        }

        if (outerWidthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__n", outerWidthN));
        }

        if (outerWidthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__lte", outerWidthLte));
        }

        if (outerWidthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__lt", outerWidthLt));
        }

        if (outerWidthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__gte", outerWidthGte));
        }

        if (outerWidthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__gt", outerWidthGt));
        }

        if (outerDepthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__n", outerDepthN));
        }

        if (outerDepthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__lte", outerDepthLte));
        }

        if (outerDepthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__lt", outerDepthLt));
        }

        if (outerDepthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__gte", outerDepthGte));
        }

        if (outerDepthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__gt", outerDepthGt));
        }

        if (outerUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_unit__n", outerUnitN));
        }

        if (mountingDepthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounting_depth__n", mountingDepthN));
        }

        if (mountingDepthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounting_depth__lte", mountingDepthLte));
        }

        if (mountingDepthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounting_depth__lt", mountingDepthLt));
        }

        if (mountingDepthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounting_depth__gte", mountingDepthGte));
        }

        if (mountingDepthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mounting_depth__gt", mountingDepthGt));
        }

        if (weightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__n", weightN));
        }

        if (weightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lte", weightLte));
        }

        if (weightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__lt", weightLt));
        }

        if (weightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gte", weightGte));
        }

        if (weightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight__gt", weightGt));
        }

        if (maxWeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_weight__n", maxWeightN));
        }

        if (maxWeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_weight__lte", maxWeightLte));
        }

        if (maxWeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_weight__lt", maxWeightLt));
        }

        if (maxWeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_weight__gte", maxWeightGte));
        }

        if (maxWeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_weight__gt", maxWeightGt));
        }

        if (weightUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_unit__n", weightUnitN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (widthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width__n", widthN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (serialN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__n", serialN));
        }

        if (serialIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ic", serialIc));
        }

        if (serialNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nic", serialNic));
        }

        if (serialIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__iew", serialIew));
        }

        if (serialNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__niew", serialNiew));
        }

        if (serialIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__isw", serialIsw));
        }

        if (serialNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nisw", serialNisw));
        }

        if (serialIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__ie", serialIe));
        }

        if (serialNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__nie", serialNie));
        }

        if (serialEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial__empty", serialEmpty));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksListValidateBeforeCall(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String mountingDepth, String weight, String maxWeight, String weightUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String facilityIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String mountingDepthN, String mountingDepthLte, String mountingDepthLt, String mountingDepthGte, String mountingDepthGt, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String maxWeightN, String maxWeightLte, String maxWeightLt, String maxWeightGte, String maxWeightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRacksListCall(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, mountingDepth, weight, maxWeight, weightUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, facilityIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, mountingDepthN, mountingDepthLte, mountingDepthLt, mountingDepthGte, mountingDepthGt, weightN, weightLte, weightLt, weightGte, weightGt, maxWeightN, maxWeightLte, maxWeightLt, maxWeightGte, maxWeightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param mountingDepth  (optional)
     * @param weight  (optional)
     * @param maxWeight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param facilityIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param mountingDepthN  (optional)
     * @param mountingDepthLte  (optional)
     * @param mountingDepthLt  (optional)
     * @param mountingDepthGte  (optional)
     * @param mountingDepthGt  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param maxWeightN  (optional)
     * @param maxWeightLte  (optional)
     * @param maxWeightLt  (optional)
     * @param maxWeightGte  (optional)
     * @param maxWeightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRacksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRacksList200Response dcimRacksList(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String mountingDepth, String weight, String maxWeight, String weightUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String facilityIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String mountingDepthN, String mountingDepthLte, String mountingDepthLt, String mountingDepthGte, String mountingDepthGt, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String maxWeightN, String maxWeightLte, String maxWeightLt, String maxWeightGte, String maxWeightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRacksList200Response> localVarResp = dcimRacksListWithHttpInfo(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, mountingDepth, weight, maxWeight, weightUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, facilityIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, mountingDepthN, mountingDepthLte, mountingDepthLt, mountingDepthGte, mountingDepthGt, weightN, weightLte, weightLt, weightGte, weightGt, maxWeightN, maxWeightLte, maxWeightLt, maxWeightGte, maxWeightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param mountingDepth  (optional)
     * @param weight  (optional)
     * @param maxWeight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param facilityIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param mountingDepthN  (optional)
     * @param mountingDepthLte  (optional)
     * @param mountingDepthLt  (optional)
     * @param mountingDepthGte  (optional)
     * @param mountingDepthGt  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param maxWeightN  (optional)
     * @param maxWeightLte  (optional)
     * @param maxWeightLt  (optional)
     * @param maxWeightGte  (optional)
     * @param maxWeightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRacksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRacksList200Response> dcimRacksListWithHttpInfo(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String mountingDepth, String weight, String maxWeight, String weightUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String facilityIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String mountingDepthN, String mountingDepthLte, String mountingDepthLt, String mountingDepthGte, String mountingDepthGt, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String maxWeightN, String maxWeightLte, String maxWeightLt, String maxWeightGte, String maxWeightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, mountingDepth, weight, maxWeight, weightUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, facilityIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, mountingDepthN, mountingDepthLte, mountingDepthLt, mountingDepthGte, mountingDepthGt, weightN, weightLte, weightLt, weightGte, weightGt, maxWeightN, maxWeightLte, maxWeightLt, maxWeightGte, maxWeightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param mountingDepth  (optional)
     * @param weight  (optional)
     * @param maxWeight  (optional)
     * @param weightUnit  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param facilityIdEmpty  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param assetTagEmpty  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param mountingDepthN  (optional)
     * @param mountingDepthLte  (optional)
     * @param mountingDepthLt  (optional)
     * @param mountingDepthGte  (optional)
     * @param mountingDepthGt  (optional)
     * @param weightN  (optional)
     * @param weightLte  (optional)
     * @param weightLt  (optional)
     * @param weightGte  (optional)
     * @param weightGt  (optional)
     * @param maxWeightN  (optional)
     * @param maxWeightLte  (optional)
     * @param maxWeightLt  (optional)
     * @param maxWeightGte  (optional)
     * @param maxWeightGt  (optional)
     * @param weightUnitN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param serialN  (optional)
     * @param serialIc  (optional)
     * @param serialNic  (optional)
     * @param serialIew  (optional)
     * @param serialNiew  (optional)
     * @param serialIsw  (optional)
     * @param serialNisw  (optional)
     * @param serialIe  (optional)
     * @param serialNie  (optional)
     * @param serialEmpty  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListAsync(String id, String name, String facilityId, String assetTag, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String mountingDepth, String weight, String maxWeight, String weightUnit, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String status, String type, String width, String roleId, String role, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String facilityIdEmpty, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String assetTagEmpty, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String mountingDepthN, String mountingDepthLte, String mountingDepthLt, String mountingDepthGte, String mountingDepthGt, String weightN, String weightLte, String weightLt, String weightGte, String weightGt, String maxWeightN, String maxWeightLte, String maxWeightLt, String maxWeightGte, String maxWeightGt, String weightUnitN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String statusN, String typeN, String widthN, String roleIdN, String roleN, String serialN, String serialIc, String serialNic, String serialIew, String serialNiew, String serialIsw, String serialNisw, String serialIe, String serialNie, String serialEmpty, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRacksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(id, name, facilityId, assetTag, uHeight, descUnits, outerWidth, outerDepth, outerUnit, mountingDepth, weight, maxWeight, weightUnit, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, status, type, width, roleId, role, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, facilityIdEmpty, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, assetTagEmpty, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, mountingDepthN, mountingDepthLte, mountingDepthLt, mountingDepthGte, mountingDepthGt, weightN, weightLte, weightLt, weightGte, weightGt, maxWeightN, maxWeightLte, maxWeightLt, maxWeightGte, maxWeightGt, weightUnitN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, statusN, typeN, widthN, roleIdN, roleN, serialN, serialIc, serialNic, serialIew, serialNiew, serialIsw, serialNisw, serialIe, serialNie, serialEmpty, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksPartialUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksPartialUpdateValidateBeforeCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksPartialUpdate(Async)");
        }

        return dcimRacksPartialUpdateCall(id, writableRack, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksPartialUpdate(Integer id, WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksPartialUpdateWithHttpInfo(id, writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksPartialUpdateWithHttpInfo(Integer id, WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateAsync(Integer id, WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksRead
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksRead(Async)");
        }

        return dcimRacksReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksRead(Integer id) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadAsync(Integer id, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksUpdateValidateBeforeCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksUpdate(Async)");
        }

        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksUpdate(Async)");
        }

        return dcimRacksUpdateCall(id, writableRack, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksUpdate(Integer id, WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksUpdateWithHttpInfo(id, writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksUpdateWithHttpInfo(Integer id, WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateAsync(Integer id, WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimRearPortTemplatesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortTemplatesBulkDelete() throws ApiException {
        dcimRearPortTemplatesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortTemplatesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesBulkPartialUpdate
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkPartialUpdateCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesBulkPartialUpdateValidateBeforeCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesBulkPartialUpdate(Async)");
        }

        return dcimRearPortTemplatesBulkPartialUpdateCall(writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesBulkPartialUpdate(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesBulkPartialUpdateWithHttpInfo(writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesBulkPartialUpdateWithHttpInfo(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkPartialUpdateValidateBeforeCall(writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkPartialUpdateAsync(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkPartialUpdateValidateBeforeCall(writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesBulkUpdate
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkUpdateCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesBulkUpdateValidateBeforeCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesBulkUpdate(Async)");
        }

        return dcimRearPortTemplatesBulkUpdateCall(writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesBulkUpdate(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesBulkUpdateWithHttpInfo(writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesBulkUpdateWithHttpInfo(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkUpdateValidateBeforeCall(writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesBulkUpdateAsync(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesBulkUpdateValidateBeforeCall(writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesCreate
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesCreateCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesCreateValidateBeforeCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesCreate(Async)");
        }

        return dcimRearPortTemplatesCreateCall(writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesCreate(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesCreateWithHttpInfo(writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesCreateWithHttpInfo(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateValidateBeforeCall(writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesCreateAsync(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateValidateBeforeCall(writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesDelete
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesDelete(Async)");
        }

        return dcimRearPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortTemplatesDelete(Integer id) throws ApiException {
        dcimRearPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesListCall(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (positions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions", positions));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (moduletypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id", moduletypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (positionsN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__n", positionsN));
        }

        if (positionsLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lte", positionsLte));
        }

        if (positionsLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lt", positionsLt));
        }

        if (positionsGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gte", positionsGte));
        }

        if (positionsGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gt", positionsGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (moduletypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moduletype_id__n", moduletypeIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesListValidateBeforeCall(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRearPortTemplatesListCall(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRearPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRearPortTemplatesList200Response dcimRearPortTemplatesList(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRearPortTemplatesList200Response> localVarResp = dcimRearPortTemplatesListWithHttpInfo(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRearPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRearPortTemplatesList200Response> dcimRearPortTemplatesListWithHttpInfo(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesListValidateBeforeCall(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRearPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param moduletypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param moduletypeIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesListAsync(String id, String name, String type, String color, String positions, String created, String lastUpdated, String q, String devicetypeId, String moduletypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String devicetypeIdN, String moduletypeIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRearPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesListValidateBeforeCall(id, name, type, color, positions, created, lastUpdated, q, devicetypeId, moduletypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, devicetypeIdN, moduletypeIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRearPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesPartialUpdateCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesPartialUpdate(Async)");
        }

        return dcimRearPortTemplatesPartialUpdateCall(id, writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesPartialUpdate(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesPartialUpdateWithHttpInfo(id, writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateValidateBeforeCall(id, writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesPartialUpdateAsync(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateValidateBeforeCall(id, writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesRead
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesRead(Async)");
        }

        return dcimRearPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesReadAsync(Integer id, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesUpdate
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesUpdateCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesUpdateValidateBeforeCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesUpdate(Async)");
        }

        return dcimRearPortTemplatesUpdateCall(id, writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesUpdate(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesUpdateWithHttpInfo(id, writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesUpdateWithHttpInfo(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateValidateBeforeCall(id, writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesUpdateAsync(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateValidateBeforeCall(id, writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimRearPortsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortsBulkDelete() throws ApiException {
        dcimRearPortsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsBulkPartialUpdate
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkPartialUpdateCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsBulkPartialUpdateValidateBeforeCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsBulkPartialUpdate(Async)");
        }

        return dcimRearPortsBulkPartialUpdateCall(writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsBulkPartialUpdate(WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsBulkPartialUpdateWithHttpInfo(writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsBulkPartialUpdateWithHttpInfo(WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsBulkPartialUpdateValidateBeforeCall(writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkPartialUpdateAsync(WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsBulkPartialUpdateValidateBeforeCall(writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsBulkUpdate
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkUpdateCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsBulkUpdateValidateBeforeCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsBulkUpdate(Async)");
        }

        return dcimRearPortsBulkUpdateCall(writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsBulkUpdate(WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsBulkUpdateWithHttpInfo(writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsBulkUpdateWithHttpInfo(WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsBulkUpdateValidateBeforeCall(writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsBulkUpdateAsync(WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsBulkUpdateValidateBeforeCall(writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsCreate
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsCreateCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsCreateValidateBeforeCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsCreate(Async)");
        }

        return dcimRearPortsCreateCall(writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsCreate(WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsCreateWithHttpInfo(writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsCreateWithHttpInfo(WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsCreateValidateBeforeCall(writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsCreateAsync(WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsCreateValidateBeforeCall(writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsDelete
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsDelete(Async)");
        }

        return dcimRearPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortsDelete(Integer id) throws ApiException {
        dcimRearPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsListCall(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (positions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions", positions));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis", virtualChassis));
        }

        if (moduleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id", moduleId));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (occupied != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("occupied", occupied));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (labelEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__empty", labelEmpty));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (colorEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__empty", colorEmpty));
        }

        if (positionsN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__n", positionsN));
        }

        if (positionsLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lte", positionsLte));
        }

        if (positionsLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lt", positionsLt));
        }

        if (positionsGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gte", positionsGte));
        }

        if (positionsGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gt", positionsGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (locationIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id__n", locationIdN));
        }

        if (locationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location__n", locationN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (rackN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack__n", rackN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (virtualChassisN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis__n", virtualChassisN));
        }

        if (moduleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("module_id__n", moduleIdN));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsListValidateBeforeCall(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRearPortsListCall(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRearPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRearPortsList200Response dcimRearPortsList(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRearPortsList200Response> localVarResp = dcimRearPortsListWithHttpInfo(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRearPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRearPortsList200Response> dcimRearPortsListWithHttpInfo(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsListValidateBeforeCall(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRearPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param label  (optional)
     * @param type  (optional)
     * @param color  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param cableEnd  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassis  (optional)
     * @param moduleId  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param occupied  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param labelEmpty  (optional)
     * @param typeN  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param colorEmpty  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param cableEndN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param locationIdN  (optional)
     * @param locationN  (optional)
     * @param rackIdN  (optional)
     * @param rackN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param virtualChassisIdN  (optional)
     * @param virtualChassisN  (optional)
     * @param moduleIdN  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsListAsync(String id, String name, String label, String type, String color, String positions, String description, String cableEnd, String q, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String locationId, String location, String rackId, String rack, String deviceId, String device, String virtualChassisId, String virtualChassis, String moduleId, String created, String lastUpdated, String tag, String cabled, String occupied, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String labelEmpty, String typeN, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, String colorEmpty, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String cableEndN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String locationIdN, String locationN, String rackIdN, String rackN, String deviceIdN, String deviceN, String virtualChassisIdN, String virtualChassisN, String moduleIdN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRearPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsListValidateBeforeCall(id, name, label, type, color, positions, description, cableEnd, q, regionId, region, siteGroupId, siteGroup, siteId, site, locationId, location, rackId, rack, deviceId, device, virtualChassisId, virtualChassis, moduleId, created, lastUpdated, tag, cabled, occupied, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, labelEmpty, typeN, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, colorEmpty, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, cableEndN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, locationIdN, locationN, rackIdN, rackN, deviceIdN, deviceN, virtualChassisIdN, virtualChassisN, moduleIdN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRearPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsPartialUpdate
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPartialUpdateCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsPartialUpdateValidateBeforeCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsPartialUpdate(Async)");
        }

        return dcimRearPortsPartialUpdateCall(id, writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsPartialUpdate(Integer id, WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsPartialUpdateWithHttpInfo(id, writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsPartialUpdateWithHttpInfo(Integer id, WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateValidateBeforeCall(id, writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPartialUpdateAsync(Integer id, WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateValidateBeforeCall(id, writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsPaths
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPathsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/paths/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsPathsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsPaths(Async)");
        }

        return dcimRearPortsPathsCall(id, _callback);

    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this rear port. (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsPaths(Integer id) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsPathsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsPathsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsPathsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return all CablePaths which traverse a given pass-through port.
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPathsAsync(Integer id, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsPathsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsRead
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsRead(Async)");
        }

        return dcimRearPortsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsRead(Integer id) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsReadAsync(Integer id, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsUpdate
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsUpdateCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsUpdateValidateBeforeCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsUpdate(Async)");
        }

        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsUpdate(Async)");
        }

        return dcimRearPortsUpdateCall(id, writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsUpdate(Integer id, WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsUpdateWithHttpInfo(id, writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsUpdateWithHttpInfo(Integer id, WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsUpdateValidateBeforeCall(id, writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsUpdateAsync(Integer id, WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsUpdateValidateBeforeCall(id, writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimRegionsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRegionsBulkDelete() throws ApiException {
        dcimRegionsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRegionsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsBulkPartialUpdate
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkPartialUpdateCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsBulkPartialUpdateValidateBeforeCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsBulkPartialUpdate(Async)");
        }

        return dcimRegionsBulkPartialUpdateCall(writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsBulkPartialUpdate(WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsBulkPartialUpdateWithHttpInfo(writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsBulkPartialUpdateWithHttpInfo(WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsBulkPartialUpdateValidateBeforeCall(writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkPartialUpdateAsync(WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsBulkPartialUpdateValidateBeforeCall(writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsBulkUpdate
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkUpdateCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsBulkUpdateValidateBeforeCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsBulkUpdate(Async)");
        }

        return dcimRegionsBulkUpdateCall(writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsBulkUpdate(WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsBulkUpdateWithHttpInfo(writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsBulkUpdateWithHttpInfo(WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsBulkUpdateValidateBeforeCall(writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsBulkUpdateAsync(WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsBulkUpdateValidateBeforeCall(writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsCreate
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsCreateValidateBeforeCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsCreate(Async)");
        }

        return dcimRegionsCreateCall(writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsCreate(WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsCreateWithHttpInfo(writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsCreateWithHttpInfo(WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateAsync(WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsDelete
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsDelete(Async)");
        }

        return dcimRegionsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRegionsDelete(Integer id) throws ApiException {
        dcimRegionsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRegionsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRegionsListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRegionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRegionsList200Response dcimRegionsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRegionsList200Response> localVarResp = dcimRegionsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRegionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRegionsList200Response> dcimRegionsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimRegionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsPartialUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsPartialUpdateValidateBeforeCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsPartialUpdate(Async)");
        }

        return dcimRegionsPartialUpdateCall(id, writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsPartialUpdate(Integer id, WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsPartialUpdateWithHttpInfo(id, writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsPartialUpdateWithHttpInfo(Integer id, WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateAsync(Integer id, WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsRead
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsRead(Async)");
        }

        return dcimRegionsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsRead(Integer id) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadAsync(Integer id, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsUpdateValidateBeforeCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsUpdate(Async)");
        }

        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsUpdate(Async)");
        }

        return dcimRegionsUpdateCall(id, writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsUpdate(Integer id, WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsUpdateWithHttpInfo(id, writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsUpdateWithHttpInfo(Integer id, WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateAsync(Integer id, WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimSiteGroupsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSiteGroupsBulkDelete() throws ApiException {
        dcimSiteGroupsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSiteGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsBulkPartialUpdate
     * @param writableSiteGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkPartialUpdateCall(WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSiteGroup;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsBulkPartialUpdateValidateBeforeCall(WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSiteGroup' is set
        if (writableSiteGroup == null) {
            throw new ApiException("Missing the required parameter 'writableSiteGroup' when calling dcimSiteGroupsBulkPartialUpdate(Async)");
        }

        return dcimSiteGroupsBulkPartialUpdateCall(writableSiteGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableSiteGroup  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsBulkPartialUpdate(WritableSiteGroup writableSiteGroup) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsBulkPartialUpdateWithHttpInfo(writableSiteGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSiteGroup  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsBulkPartialUpdateWithHttpInfo(WritableSiteGroup writableSiteGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsBulkPartialUpdateValidateBeforeCall(writableSiteGroup, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSiteGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkPartialUpdateAsync(WritableSiteGroup writableSiteGroup, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsBulkPartialUpdateValidateBeforeCall(writableSiteGroup, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsBulkUpdate
     * @param writableSiteGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkUpdateCall(WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSiteGroup;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsBulkUpdateValidateBeforeCall(WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSiteGroup' is set
        if (writableSiteGroup == null) {
            throw new ApiException("Missing the required parameter 'writableSiteGroup' when calling dcimSiteGroupsBulkUpdate(Async)");
        }

        return dcimSiteGroupsBulkUpdateCall(writableSiteGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableSiteGroup  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsBulkUpdate(WritableSiteGroup writableSiteGroup) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsBulkUpdateWithHttpInfo(writableSiteGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSiteGroup  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsBulkUpdateWithHttpInfo(WritableSiteGroup writableSiteGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsBulkUpdateValidateBeforeCall(writableSiteGroup, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSiteGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsBulkUpdateAsync(WritableSiteGroup writableSiteGroup, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsBulkUpdateValidateBeforeCall(writableSiteGroup, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsCreate
     * @param writableSiteGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsCreateCall(WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSiteGroup;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsCreateValidateBeforeCall(WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSiteGroup' is set
        if (writableSiteGroup == null) {
            throw new ApiException("Missing the required parameter 'writableSiteGroup' when calling dcimSiteGroupsCreate(Async)");
        }

        return dcimSiteGroupsCreateCall(writableSiteGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableSiteGroup  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsCreate(WritableSiteGroup writableSiteGroup) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsCreateWithHttpInfo(writableSiteGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSiteGroup  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsCreateWithHttpInfo(WritableSiteGroup writableSiteGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsCreateValidateBeforeCall(writableSiteGroup, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSiteGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsCreateAsync(WritableSiteGroup writableSiteGroup, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsCreateValidateBeforeCall(writableSiteGroup, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsDelete
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsDelete(Async)");
        }

        return dcimSiteGroupsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSiteGroupsDelete(Integer id) throws ApiException {
        dcimSiteGroupsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSiteGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimSiteGroupsListCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimSiteGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimSiteGroupsList200Response dcimSiteGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimSiteGroupsList200Response> localVarResp = dcimSiteGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimSiteGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimSiteGroupsList200Response> dcimSiteGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimSiteGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimSiteGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, contact, contactRole, contactGroup, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimSiteGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsPartialUpdate
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsPartialUpdateCall(Integer id, WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSiteGroup;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsPartialUpdateValidateBeforeCall(Integer id, WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableSiteGroup' is set
        if (writableSiteGroup == null) {
            throw new ApiException("Missing the required parameter 'writableSiteGroup' when calling dcimSiteGroupsPartialUpdate(Async)");
        }

        return dcimSiteGroupsPartialUpdateCall(id, writableSiteGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsPartialUpdate(Integer id, WritableSiteGroup writableSiteGroup) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsPartialUpdateWithHttpInfo(id, writableSiteGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsPartialUpdateWithHttpInfo(Integer id, WritableSiteGroup writableSiteGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsPartialUpdateValidateBeforeCall(id, writableSiteGroup, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsPartialUpdateAsync(Integer id, WritableSiteGroup writableSiteGroup, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsPartialUpdateValidateBeforeCall(id, writableSiteGroup, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsRead
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsRead(Async)");
        }

        return dcimSiteGroupsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsRead(Integer id) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsReadAsync(Integer id, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSiteGroupsUpdate
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsUpdateCall(Integer id, WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSiteGroup;

        // create path and map variables
        String localVarPath = "/dcim/site-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSiteGroupsUpdateValidateBeforeCall(Integer id, WritableSiteGroup writableSiteGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSiteGroupsUpdate(Async)");
        }

        // verify the required parameter 'writableSiteGroup' is set
        if (writableSiteGroup == null) {
            throw new ApiException("Missing the required parameter 'writableSiteGroup' when calling dcimSiteGroupsUpdate(Async)");
        }

        return dcimSiteGroupsUpdateCall(id, writableSiteGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @return SiteGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SiteGroup dcimSiteGroupsUpdate(Integer id, WritableSiteGroup writableSiteGroup) throws ApiException {
        ApiResponse<SiteGroup> localVarResp = dcimSiteGroupsUpdateWithHttpInfo(id, writableSiteGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @return ApiResponse&lt;SiteGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteGroup> dcimSiteGroupsUpdateWithHttpInfo(Integer id, WritableSiteGroup writableSiteGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimSiteGroupsUpdateValidateBeforeCall(id, writableSiteGroup, null);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site group. (required)
     * @param writableSiteGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSiteGroupsUpdateAsync(Integer id, WritableSiteGroup writableSiteGroup, final ApiCallback<SiteGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSiteGroupsUpdateValidateBeforeCall(id, writableSiteGroup, _callback);
        Type localVarReturnType = new TypeToken<SiteGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimSitesBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSitesBulkDelete() throws ApiException {
        dcimSitesBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSitesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimSitesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesBulkPartialUpdate
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkPartialUpdateCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesBulkPartialUpdateValidateBeforeCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesBulkPartialUpdate(Async)");
        }

        return dcimSitesBulkPartialUpdateCall(writableSite, _callback);

    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesBulkPartialUpdate(WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesBulkPartialUpdateWithHttpInfo(writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesBulkPartialUpdateWithHttpInfo(WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesBulkPartialUpdateValidateBeforeCall(writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkPartialUpdateAsync(WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesBulkPartialUpdateValidateBeforeCall(writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesBulkUpdate
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkUpdateCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesBulkUpdateValidateBeforeCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesBulkUpdate(Async)");
        }

        return dcimSitesBulkUpdateCall(writableSite, _callback);

    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesBulkUpdate(WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesBulkUpdateWithHttpInfo(writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesBulkUpdateWithHttpInfo(WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesBulkUpdateValidateBeforeCall(writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesBulkUpdateAsync(WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesBulkUpdateValidateBeforeCall(writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesCreate
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesCreateValidateBeforeCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesCreate(Async)");
        }

        return dcimSitesCreateCall(writableSite, _callback);

    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesCreate(WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesCreateWithHttpInfo(writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesCreateWithHttpInfo(WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateAsync(WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesDelete
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesDelete(Async)");
        }

        return dcimSitesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSitesDelete(Integer id) throws ApiException {
        dcimSitesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSitesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param facilityEmpty  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListCall(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String facilityEmpty, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (facility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility", facility));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }

        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (asnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn_id", asnId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (facilityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__n", facilityN));
        }

        if (facilityIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__ic", facilityIc));
        }

        if (facilityNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nic", facilityNic));
        }

        if (facilityIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__iew", facilityIew));
        }

        if (facilityNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__niew", facilityNiew));
        }

        if (facilityIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__isw", facilityIsw));
        }

        if (facilityNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nisw", facilityNisw));
        }

        if (facilityIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__ie", facilityIe));
        }

        if (facilityNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nie", facilityNie));
        }

        if (facilityEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__empty", facilityEmpty));
        }

        if (latitudeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__n", latitudeN));
        }

        if (latitudeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__lte", latitudeLte));
        }

        if (latitudeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__lt", latitudeLt));
        }

        if (latitudeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__gte", latitudeGte));
        }

        if (latitudeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__gt", latitudeGt));
        }

        if (longitudeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__n", longitudeN));
        }

        if (longitudeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__lte", longitudeLte));
        }

        if (longitudeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__lt", longitudeLt));
        }

        if (longitudeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__gte", longitudeGte));
        }

        if (longitudeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__gt", longitudeGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }

        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }

        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }

        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }

        if (asnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__n", asnN));
        }

        if (asnIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn_id__n", asnIdN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesListValidateBeforeCall(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String facilityEmpty, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimSitesListCall(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, facilityEmpty, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param facilityEmpty  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimSitesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimSitesList200Response dcimSitesList(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String facilityEmpty, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimSitesList200Response> localVarResp = dcimSitesListWithHttpInfo(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, facilityEmpty, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param facilityEmpty  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimSitesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimSitesList200Response> dcimSitesListWithHttpInfo(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String facilityEmpty, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, facilityEmpty, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param contact  (optional)
     * @param contactRole  (optional)
     * @param contactGroup  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param asn  (optional)
     * @param asnId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param facilityEmpty  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param contactN  (optional)
     * @param contactRoleN  (optional)
     * @param contactGroupN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param asnN  (optional)
     * @param asnIdN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListAsync(String id, String name, String slug, String facility, String latitude, String longitude, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String status, String regionId, String region, String groupId, String group, String asn, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String facilityEmpty, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String statusN, String regionIdN, String regionN, String groupIdN, String groupN, String asnN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimSitesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(id, name, slug, facility, latitude, longitude, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, status, regionId, region, groupId, group, asn, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, facilityEmpty, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, statusN, regionIdN, regionN, groupIdN, groupN, asnN, asnIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesPartialUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesPartialUpdateValidateBeforeCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesPartialUpdate(Async)");
        }

        return dcimSitesPartialUpdateCall(id, writableSite, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesPartialUpdate(Integer id, WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesPartialUpdateWithHttpInfo(id, writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesPartialUpdateWithHttpInfo(Integer id, WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateAsync(Integer id, WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesRead
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesRead(Async)");
        }

        return dcimSitesReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesRead(Integer id) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadAsync(Integer id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesUpdateValidateBeforeCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesUpdate(Async)");
        }

        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesUpdate(Async)");
        }

        return dcimSitesUpdateCall(id, writableSite, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesUpdate(Integer id, WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesUpdateWithHttpInfo(id, writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesUpdateWithHttpInfo(Integer id, WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateAsync(Integer id, WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimVirtualChassisBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualChassisBulkDelete() throws ApiException {
        dcimVirtualChassisBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualChassisBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisBulkPartialUpdate
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkPartialUpdateCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisBulkPartialUpdateValidateBeforeCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisBulkPartialUpdate(Async)");
        }

        return dcimVirtualChassisBulkPartialUpdateCall(writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisBulkPartialUpdate(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisBulkPartialUpdateWithHttpInfo(writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisBulkPartialUpdateWithHttpInfo(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisBulkPartialUpdateValidateBeforeCall(writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkPartialUpdateAsync(WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisBulkPartialUpdateValidateBeforeCall(writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisBulkUpdate
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkUpdateCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisBulkUpdateValidateBeforeCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisBulkUpdate(Async)");
        }

        return dcimVirtualChassisBulkUpdateCall(writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisBulkUpdate(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisBulkUpdateWithHttpInfo(writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisBulkUpdateWithHttpInfo(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisBulkUpdateValidateBeforeCall(writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisBulkUpdateAsync(WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisBulkUpdateValidateBeforeCall(writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisCreate
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisCreateValidateBeforeCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisCreate(Async)");
        }

        return dcimVirtualChassisCreateCall(writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisCreate(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisCreateWithHttpInfo(writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisCreateWithHttpInfo(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateAsync(WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisDelete
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisDelete(Async)");
        }

        return dcimVirtualChassisDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualChassisDelete(Integer id) throws ApiException {
        dcimVirtualChassisDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualChassisDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisList
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param domainEmpty  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListCall(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String domainEmpty, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (masterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master_id", masterId));
        }

        if (master != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master", master));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }

        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (domainN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__n", domainN));
        }

        if (domainIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__ic", domainIc));
        }

        if (domainNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nic", domainNic));
        }

        if (domainIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__iew", domainIew));
        }

        if (domainNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__niew", domainNiew));
        }

        if (domainIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__isw", domainIsw));
        }

        if (domainNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nisw", domainNisw));
        }

        if (domainIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__ie", domainIe));
        }

        if (domainNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nie", domainNie));
        }

        if (domainEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__empty", domainEmpty));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (masterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master_id__n", masterIdN));
        }

        if (masterN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("master__n", masterN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }

        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisListValidateBeforeCall(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String domainEmpty, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimVirtualChassisListCall(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, domainEmpty, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param domainEmpty  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimVirtualChassisList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimVirtualChassisList200Response dcimVirtualChassisList(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String domainEmpty, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimVirtualChassisList200Response> localVarResp = dcimVirtualChassisListWithHttpInfo(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, domainEmpty, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param domainEmpty  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimVirtualChassisList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimVirtualChassisList200Response> dcimVirtualChassisListWithHttpInfo(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String domainEmpty, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, domainEmpty, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param domain  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param masterId  (optional)
     * @param master  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteGroupId  (optional)
     * @param siteGroup  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param domainEmpty  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param masterIdN  (optional)
     * @param masterN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteGroupIdN  (optional)
     * @param siteGroupN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListAsync(String id, String domain, String name, String created, String lastUpdated, String q, String tag, String masterId, String master, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String domainEmpty, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String masterIdN, String masterN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String tenantIdN, String tenantN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimVirtualChassisList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(id, domain, name, created, lastUpdated, q, tag, masterId, master, regionId, region, siteGroupId, siteGroup, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, domainEmpty, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, masterIdN, masterN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, tenantIdN, tenantN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisPartialUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisPartialUpdateValidateBeforeCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisPartialUpdate(Async)");
        }

        return dcimVirtualChassisPartialUpdateCall(id, writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisPartialUpdate(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisPartialUpdateWithHttpInfo(id, writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisPartialUpdateWithHttpInfo(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateAsync(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisRead
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisRead(Async)");
        }

        return dcimVirtualChassisReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisRead(Integer id) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadAsync(Integer id, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisUpdateValidateBeforeCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisUpdate(Async)");
        }

        return dcimVirtualChassisUpdateCall(id, writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisUpdate(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisUpdateWithHttpInfo(id, writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisUpdateWithHttpInfo(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateAsync(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dcimVirtualDeviceContextsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualDeviceContextsBulkDelete() throws ApiException {
        dcimVirtualDeviceContextsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualDeviceContextsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsBulkPartialUpdate
     * @param writableVirtualDeviceContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsBulkPartialUpdateCall(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualDeviceContext;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsBulkPartialUpdateValidateBeforeCall(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualDeviceContext' is set
        if (writableVirtualDeviceContext == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualDeviceContext' when calling dcimVirtualDeviceContextsBulkPartialUpdate(Async)");
        }

        return dcimVirtualDeviceContextsBulkPartialUpdateCall(writableVirtualDeviceContext, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualDeviceContext  (required)
     * @return VirtualDeviceContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualDeviceContext dcimVirtualDeviceContextsBulkPartialUpdate(WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        ApiResponse<VirtualDeviceContext> localVarResp = dcimVirtualDeviceContextsBulkPartialUpdateWithHttpInfo(writableVirtualDeviceContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualDeviceContext  (required)
     * @return ApiResponse&lt;VirtualDeviceContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualDeviceContext> dcimVirtualDeviceContextsBulkPartialUpdateWithHttpInfo(WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsBulkPartialUpdateValidateBeforeCall(writableVirtualDeviceContext, null);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualDeviceContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsBulkPartialUpdateAsync(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback<VirtualDeviceContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsBulkPartialUpdateValidateBeforeCall(writableVirtualDeviceContext, _callback);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsBulkUpdate
     * @param writableVirtualDeviceContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsBulkUpdateCall(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualDeviceContext;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsBulkUpdateValidateBeforeCall(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualDeviceContext' is set
        if (writableVirtualDeviceContext == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualDeviceContext' when calling dcimVirtualDeviceContextsBulkUpdate(Async)");
        }

        return dcimVirtualDeviceContextsBulkUpdateCall(writableVirtualDeviceContext, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualDeviceContext  (required)
     * @return VirtualDeviceContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualDeviceContext dcimVirtualDeviceContextsBulkUpdate(WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        ApiResponse<VirtualDeviceContext> localVarResp = dcimVirtualDeviceContextsBulkUpdateWithHttpInfo(writableVirtualDeviceContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualDeviceContext  (required)
     * @return ApiResponse&lt;VirtualDeviceContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualDeviceContext> dcimVirtualDeviceContextsBulkUpdateWithHttpInfo(WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsBulkUpdateValidateBeforeCall(writableVirtualDeviceContext, null);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualDeviceContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsBulkUpdateAsync(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback<VirtualDeviceContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsBulkUpdateValidateBeforeCall(writableVirtualDeviceContext, _callback);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsCreate
     * @param writableVirtualDeviceContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsCreateCall(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualDeviceContext;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsCreateValidateBeforeCall(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualDeviceContext' is set
        if (writableVirtualDeviceContext == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualDeviceContext' when calling dcimVirtualDeviceContextsCreate(Async)");
        }

        return dcimVirtualDeviceContextsCreateCall(writableVirtualDeviceContext, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualDeviceContext  (required)
     * @return VirtualDeviceContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualDeviceContext dcimVirtualDeviceContextsCreate(WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        ApiResponse<VirtualDeviceContext> localVarResp = dcimVirtualDeviceContextsCreateWithHttpInfo(writableVirtualDeviceContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualDeviceContext  (required)
     * @return ApiResponse&lt;VirtualDeviceContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualDeviceContext> dcimVirtualDeviceContextsCreateWithHttpInfo(WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsCreateValidateBeforeCall(writableVirtualDeviceContext, null);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualDeviceContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsCreateAsync(WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback<VirtualDeviceContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsCreateValidateBeforeCall(writableVirtualDeviceContext, _callback);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsDelete
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualDeviceContextsDelete(Async)");
        }

        return dcimVirtualDeviceContextsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualDeviceContextsDelete(Integer id) throws ApiException {
        dcimVirtualDeviceContextsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualDeviceContextsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsList
     * @param id  (optional)
     * @param device  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param deviceId  (optional)
     * @param status  (optional)
     * @param hasPrimaryIp  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param deviceN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param deviceIdN  (optional)
     * @param statusN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsListCall(String id, String device, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String deviceId, String status, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String deviceN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String deviceIdN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (hasPrimaryIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_primary_ip", hasPrimaryIp));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsListValidateBeforeCall(String id, String device, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String deviceId, String status, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String deviceN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String deviceIdN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimVirtualDeviceContextsListCall(id, device, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, deviceId, status, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, deviceN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, deviceIdN, statusN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param device  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param deviceId  (optional)
     * @param status  (optional)
     * @param hasPrimaryIp  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param deviceN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param deviceIdN  (optional)
     * @param statusN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimVirtualDeviceContextsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimVirtualDeviceContextsList200Response dcimVirtualDeviceContextsList(String id, String device, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String deviceId, String status, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String deviceN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String deviceIdN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimVirtualDeviceContextsList200Response> localVarResp = dcimVirtualDeviceContextsListWithHttpInfo(id, device, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, deviceId, status, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, deviceN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, deviceIdN, statusN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param device  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param deviceId  (optional)
     * @param status  (optional)
     * @param hasPrimaryIp  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param deviceN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param deviceIdN  (optional)
     * @param statusN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimVirtualDeviceContextsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimVirtualDeviceContextsList200Response> dcimVirtualDeviceContextsListWithHttpInfo(String id, String device, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String deviceId, String status, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String deviceN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String deviceIdN, String statusN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsListValidateBeforeCall(id, device, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, deviceId, status, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, deviceN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, deviceIdN, statusN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimVirtualDeviceContextsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param device  (optional)
     * @param name  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param deviceId  (optional)
     * @param status  (optional)
     * @param hasPrimaryIp  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param deviceN  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param deviceIdN  (optional)
     * @param statusN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsListAsync(String id, String device, String name, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String deviceId, String status, String hasPrimaryIp, String idN, String idLte, String idLt, String idGte, String idGt, String deviceN, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String deviceIdN, String statusN, String ordering, Integer limit, Integer offset, final ApiCallback<DcimVirtualDeviceContextsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsListValidateBeforeCall(id, device, name, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, deviceId, status, hasPrimaryIp, idN, idLte, idLt, idGte, idGt, deviceN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, deviceIdN, statusN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimVirtualDeviceContextsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsPartialUpdate
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsPartialUpdateCall(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualDeviceContext;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsPartialUpdateValidateBeforeCall(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualDeviceContextsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualDeviceContext' is set
        if (writableVirtualDeviceContext == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualDeviceContext' when calling dcimVirtualDeviceContextsPartialUpdate(Async)");
        }

        return dcimVirtualDeviceContextsPartialUpdateCall(id, writableVirtualDeviceContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @return VirtualDeviceContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualDeviceContext dcimVirtualDeviceContextsPartialUpdate(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        ApiResponse<VirtualDeviceContext> localVarResp = dcimVirtualDeviceContextsPartialUpdateWithHttpInfo(id, writableVirtualDeviceContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @return ApiResponse&lt;VirtualDeviceContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualDeviceContext> dcimVirtualDeviceContextsPartialUpdateWithHttpInfo(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsPartialUpdateValidateBeforeCall(id, writableVirtualDeviceContext, null);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsPartialUpdateAsync(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback<VirtualDeviceContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsPartialUpdateValidateBeforeCall(id, writableVirtualDeviceContext, _callback);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsRead
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualDeviceContextsRead(Async)");
        }

        return dcimVirtualDeviceContextsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @return VirtualDeviceContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualDeviceContext dcimVirtualDeviceContextsRead(Integer id) throws ApiException {
        ApiResponse<VirtualDeviceContext> localVarResp = dcimVirtualDeviceContextsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @return ApiResponse&lt;VirtualDeviceContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualDeviceContext> dcimVirtualDeviceContextsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsReadAsync(Integer id, final ApiCallback<VirtualDeviceContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualDeviceContextsUpdate
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsUpdateCall(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualDeviceContext;

        // create path and map variables
        String localVarPath = "/dcim/virtual-device-contexts/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualDeviceContextsUpdateValidateBeforeCall(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualDeviceContextsUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualDeviceContext' is set
        if (writableVirtualDeviceContext == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualDeviceContext' when calling dcimVirtualDeviceContextsUpdate(Async)");
        }

        return dcimVirtualDeviceContextsUpdateCall(id, writableVirtualDeviceContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @return VirtualDeviceContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualDeviceContext dcimVirtualDeviceContextsUpdate(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        ApiResponse<VirtualDeviceContext> localVarResp = dcimVirtualDeviceContextsUpdateWithHttpInfo(id, writableVirtualDeviceContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @return ApiResponse&lt;VirtualDeviceContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualDeviceContext> dcimVirtualDeviceContextsUpdateWithHttpInfo(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualDeviceContextsUpdateValidateBeforeCall(id, writableVirtualDeviceContext, null);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual device context. (required)
     * @param writableVirtualDeviceContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualDeviceContextsUpdateAsync(Integer id, WritableVirtualDeviceContext writableVirtualDeviceContext, final ApiCallback<VirtualDeviceContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualDeviceContextsUpdateValidateBeforeCall(id, writableVirtualDeviceContext, _callback);
        Type localVarReturnType = new TypeToken<VirtualDeviceContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
