/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NestedDeviceType;
import org.openapitools.client.model.NestedModuleType;
import org.openapitools.client.model.Type7;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PowerPortTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PowerPortTemplate {
  public static final String SERIALIZED_NAME_ALLOCATED_DRAW = "allocated_draw";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_DRAW)
  private Integer allocatedDraw;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private NestedDeviceType deviceType;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MAXIMUM_DRAW = "maximum_draw";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_DRAW)
  private Integer maximumDraw;

  public static final String SERIALIZED_NAME_MODULE_TYPE = "module_type";
  @SerializedName(SERIALIZED_NAME_MODULE_TYPE)
  private NestedModuleType moduleType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type7 type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public PowerPortTemplate() {
  }

  public PowerPortTemplate(
     OffsetDateTime created, 
     String display, 
     Integer id, 
     OffsetDateTime lastUpdated, 
     URI url
  ) {
    this();
    this.created = created;
    this.display = display;
    this.id = id;
    this.lastUpdated = lastUpdated;
    this.url = url;
  }

  public PowerPortTemplate allocatedDraw(Integer allocatedDraw) {
    this.allocatedDraw = allocatedDraw;
    return this;
  }

  /**
   * Allocated power draw (watts)
   * minimum: 1
   * maximum: 32767
   * @return allocatedDraw
   */
  @javax.annotation.Nullable
  public Integer getAllocatedDraw() {
    return allocatedDraw;
  }

  public void setAllocatedDraw(Integer allocatedDraw) {
    this.allocatedDraw = allocatedDraw;
  }


  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public PowerPortTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PowerPortTemplate deviceType(NestedDeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nullable
  public NestedDeviceType getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(NestedDeviceType deviceType) {
    this.deviceType = deviceType;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public PowerPortTemplate label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Physical label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public PowerPortTemplate maximumDraw(Integer maximumDraw) {
    this.maximumDraw = maximumDraw;
    return this;
  }

  /**
   * Maximum power draw (watts)
   * minimum: 1
   * maximum: 32767
   * @return maximumDraw
   */
  @javax.annotation.Nullable
  public Integer getMaximumDraw() {
    return maximumDraw;
  }

  public void setMaximumDraw(Integer maximumDraw) {
    this.maximumDraw = maximumDraw;
  }


  public PowerPortTemplate moduleType(NestedModuleType moduleType) {
    this.moduleType = moduleType;
    return this;
  }

  /**
   * Get moduleType
   * @return moduleType
   */
  @javax.annotation.Nullable
  public NestedModuleType getModuleType() {
    return moduleType;
  }

  public void setModuleType(NestedModuleType moduleType) {
    this.moduleType = moduleType;
  }


  public PowerPortTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   *  {module} is accepted as a substitution for the module bay position when attached to a module type. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PowerPortTemplate type(Type7 type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type7 getType() {
    return type;
  }

  public void setType(Type7 type) {
    this.type = type;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PowerPortTemplate powerPortTemplate = (PowerPortTemplate) o;
    return Objects.equals(this.allocatedDraw, powerPortTemplate.allocatedDraw) &&
        Objects.equals(this.created, powerPortTemplate.created) &&
        Objects.equals(this.description, powerPortTemplate.description) &&
        Objects.equals(this.deviceType, powerPortTemplate.deviceType) &&
        Objects.equals(this.display, powerPortTemplate.display) &&
        Objects.equals(this.id, powerPortTemplate.id) &&
        Objects.equals(this.label, powerPortTemplate.label) &&
        Objects.equals(this.lastUpdated, powerPortTemplate.lastUpdated) &&
        Objects.equals(this.maximumDraw, powerPortTemplate.maximumDraw) &&
        Objects.equals(this.moduleType, powerPortTemplate.moduleType) &&
        Objects.equals(this.name, powerPortTemplate.name) &&
        Objects.equals(this.type, powerPortTemplate.type) &&
        Objects.equals(this.url, powerPortTemplate.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedDraw, created, description, deviceType, display, id, label, lastUpdated, maximumDraw, moduleType, name, type, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PowerPortTemplate {\n");
    sb.append("    allocatedDraw: ").append(toIndentedString(allocatedDraw)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    maximumDraw: ").append(toIndentedString(maximumDraw)).append("\n");
    sb.append("    moduleType: ").append(toIndentedString(moduleType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocated_draw");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("device_type");
    openapiFields.add("display");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("last_updated");
    openapiFields.add("maximum_draw");
    openapiFields.add("module_type");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PowerPortTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PowerPortTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PowerPortTemplate is not found in the empty JSON string", PowerPortTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PowerPortTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PowerPortTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PowerPortTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `device_type`
      if (jsonObj.get("device_type") != null && !jsonObj.get("device_type").isJsonNull()) {
        NestedDeviceType.validateJsonElement(jsonObj.get("device_type"));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `module_type`
      if (jsonObj.get("module_type") != null && !jsonObj.get("module_type").isJsonNull()) {
        NestedModuleType.validateJsonElement(jsonObj.get("module_type"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type7.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PowerPortTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PowerPortTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PowerPortTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PowerPortTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<PowerPortTemplate>() {
           @Override
           public void write(JsonWriter out, PowerPortTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PowerPortTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PowerPortTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PowerPortTemplate
   * @throws IOException if the JSON string is invalid with respect to PowerPortTemplate
   */
  public static PowerPortTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PowerPortTemplate.class);
  }

  /**
   * Convert an instance of PowerPortTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

