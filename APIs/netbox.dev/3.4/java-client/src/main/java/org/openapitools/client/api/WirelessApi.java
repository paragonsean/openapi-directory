/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WirelessLAN;
import org.openapitools.client.model.WirelessLANGroup;
import org.openapitools.client.model.WirelessLink;
import org.openapitools.client.model.WirelessWirelessLanGroupsList200Response;
import org.openapitools.client.model.WirelessWirelessLansList200Response;
import org.openapitools.client.model.WirelessWirelessLinksList200Response;
import org.openapitools.client.model.WritableWirelessLAN;
import org.openapitools.client.model.WritableWirelessLANGroup;
import org.openapitools.client.model.WritableWirelessLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WirelessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WirelessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WirelessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wirelessWirelessLanGroupsBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return wirelessWirelessLanGroupsBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void wirelessWirelessLanGroupsBulkDelete() throws ApiException {
        wirelessWirelessLanGroupsBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wirelessWirelessLanGroupsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsBulkPartialUpdate
     * @param writableWirelessLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsBulkPartialUpdateCall(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLANGroup;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsBulkPartialUpdateValidateBeforeCall(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLANGroup' is set
        if (writableWirelessLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLANGroup' when calling wirelessWirelessLanGroupsBulkPartialUpdate(Async)");
        }

        return wirelessWirelessLanGroupsBulkPartialUpdateCall(writableWirelessLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLANGroup  (required)
     * @return WirelessLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLANGroup wirelessWirelessLanGroupsBulkPartialUpdate(WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        ApiResponse<WirelessLANGroup> localVarResp = wirelessWirelessLanGroupsBulkPartialUpdateWithHttpInfo(writableWirelessLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLANGroup  (required)
     * @return ApiResponse&lt;WirelessLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsBulkPartialUpdateWithHttpInfo(WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsBulkPartialUpdateValidateBeforeCall(writableWirelessLANGroup, null);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsBulkPartialUpdateAsync(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback<WirelessLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsBulkPartialUpdateValidateBeforeCall(writableWirelessLANGroup, _callback);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsBulkUpdate
     * @param writableWirelessLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsBulkUpdateCall(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLANGroup;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsBulkUpdateValidateBeforeCall(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLANGroup' is set
        if (writableWirelessLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLANGroup' when calling wirelessWirelessLanGroupsBulkUpdate(Async)");
        }

        return wirelessWirelessLanGroupsBulkUpdateCall(writableWirelessLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLANGroup  (required)
     * @return WirelessLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLANGroup wirelessWirelessLanGroupsBulkUpdate(WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        ApiResponse<WirelessLANGroup> localVarResp = wirelessWirelessLanGroupsBulkUpdateWithHttpInfo(writableWirelessLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLANGroup  (required)
     * @return ApiResponse&lt;WirelessLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsBulkUpdateWithHttpInfo(WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsBulkUpdateValidateBeforeCall(writableWirelessLANGroup, null);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsBulkUpdateAsync(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback<WirelessLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsBulkUpdateValidateBeforeCall(writableWirelessLANGroup, _callback);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsCreate
     * @param writableWirelessLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsCreateCall(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLANGroup;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsCreateValidateBeforeCall(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLANGroup' is set
        if (writableWirelessLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLANGroup' when calling wirelessWirelessLanGroupsCreate(Async)");
        }

        return wirelessWirelessLanGroupsCreateCall(writableWirelessLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLANGroup  (required)
     * @return WirelessLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLANGroup wirelessWirelessLanGroupsCreate(WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        ApiResponse<WirelessLANGroup> localVarResp = wirelessWirelessLanGroupsCreateWithHttpInfo(writableWirelessLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLANGroup  (required)
     * @return ApiResponse&lt;WirelessLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsCreateWithHttpInfo(WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsCreateValidateBeforeCall(writableWirelessLANGroup, null);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsCreateAsync(WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback<WirelessLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsCreateValidateBeforeCall(writableWirelessLANGroup, _callback);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsDelete
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLanGroupsDelete(Async)");
        }

        return wirelessWirelessLanGroupsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void wirelessWirelessLanGroupsDelete(Integer id) throws ApiException {
        wirelessWirelessLanGroupsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wirelessWirelessLanGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (nameEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__empty", nameEmpty));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (slugEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__empty", slugEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return wirelessWirelessLanGroupsListCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return WirelessWirelessLanGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessWirelessLanGroupsList200Response wirelessWirelessLanGroupsList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<WirelessWirelessLanGroupsList200Response> localVarResp = wirelessWirelessLanGroupsListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;WirelessWirelessLanGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessWirelessLanGroupsList200Response> wirelessWirelessLanGroupsListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<WirelessWirelessLanGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param nameEmpty  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param slugEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String nameEmpty, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String slugEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String parentIdN, String parentN, String ordering, Integer limit, Integer offset, final ApiCallback<WirelessWirelessLanGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, nameEmpty, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, slugEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, parentIdN, parentN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WirelessWirelessLanGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsPartialUpdate
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsPartialUpdateCall(Integer id, WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLANGroup;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsPartialUpdateValidateBeforeCall(Integer id, WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLanGroupsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableWirelessLANGroup' is set
        if (writableWirelessLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLANGroup' when calling wirelessWirelessLanGroupsPartialUpdate(Async)");
        }

        return wirelessWirelessLanGroupsPartialUpdateCall(id, writableWirelessLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @return WirelessLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLANGroup wirelessWirelessLanGroupsPartialUpdate(Integer id, WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        ApiResponse<WirelessLANGroup> localVarResp = wirelessWirelessLanGroupsPartialUpdateWithHttpInfo(id, writableWirelessLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @return ApiResponse&lt;WirelessLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsPartialUpdateWithHttpInfo(Integer id, WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsPartialUpdateValidateBeforeCall(id, writableWirelessLANGroup, null);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsPartialUpdateAsync(Integer id, WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback<WirelessLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsPartialUpdateValidateBeforeCall(id, writableWirelessLANGroup, _callback);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsRead
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLanGroupsRead(Async)");
        }

        return wirelessWirelessLanGroupsReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @return WirelessLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLANGroup wirelessWirelessLanGroupsRead(Integer id) throws ApiException {
        ApiResponse<WirelessLANGroup> localVarResp = wirelessWirelessLanGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @return ApiResponse&lt;WirelessLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsReadAsync(Integer id, final ApiCallback<WirelessLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLanGroupsUpdate
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsUpdateCall(Integer id, WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLANGroup;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lan-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLanGroupsUpdateValidateBeforeCall(Integer id, WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLanGroupsUpdate(Async)");
        }

        // verify the required parameter 'writableWirelessLANGroup' is set
        if (writableWirelessLANGroup == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLANGroup' when calling wirelessWirelessLanGroupsUpdate(Async)");
        }

        return wirelessWirelessLanGroupsUpdateCall(id, writableWirelessLANGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @return WirelessLANGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLANGroup wirelessWirelessLanGroupsUpdate(Integer id, WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        ApiResponse<WirelessLANGroup> localVarResp = wirelessWirelessLanGroupsUpdateWithHttpInfo(id, writableWirelessLANGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @return ApiResponse&lt;WirelessLANGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLANGroup> wirelessWirelessLanGroupsUpdateWithHttpInfo(Integer id, WritableWirelessLANGroup writableWirelessLANGroup) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLanGroupsUpdateValidateBeforeCall(id, writableWirelessLANGroup, null);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN Group. (required)
     * @param writableWirelessLANGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLanGroupsUpdateAsync(Integer id, WritableWirelessLANGroup writableWirelessLANGroup, final ApiCallback<WirelessLANGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLanGroupsUpdateValidateBeforeCall(id, writableWirelessLANGroup, _callback);
        Type localVarReturnType = new TypeToken<WirelessLANGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return wirelessWirelessLansBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void wirelessWirelessLansBulkDelete() throws ApiException {
        wirelessWirelessLansBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wirelessWirelessLansBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansBulkPartialUpdate
     * @param writableWirelessLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansBulkPartialUpdateCall(WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLAN;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansBulkPartialUpdateValidateBeforeCall(WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLAN' is set
        if (writableWirelessLAN == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLAN' when calling wirelessWirelessLansBulkPartialUpdate(Async)");
        }

        return wirelessWirelessLansBulkPartialUpdateCall(writableWirelessLAN, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLAN  (required)
     * @return WirelessLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLAN wirelessWirelessLansBulkPartialUpdate(WritableWirelessLAN writableWirelessLAN) throws ApiException {
        ApiResponse<WirelessLAN> localVarResp = wirelessWirelessLansBulkPartialUpdateWithHttpInfo(writableWirelessLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLAN  (required)
     * @return ApiResponse&lt;WirelessLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLAN> wirelessWirelessLansBulkPartialUpdateWithHttpInfo(WritableWirelessLAN writableWirelessLAN) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansBulkPartialUpdateValidateBeforeCall(writableWirelessLAN, null);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansBulkPartialUpdateAsync(WritableWirelessLAN writableWirelessLAN, final ApiCallback<WirelessLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansBulkPartialUpdateValidateBeforeCall(writableWirelessLAN, _callback);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansBulkUpdate
     * @param writableWirelessLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansBulkUpdateCall(WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLAN;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansBulkUpdateValidateBeforeCall(WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLAN' is set
        if (writableWirelessLAN == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLAN' when calling wirelessWirelessLansBulkUpdate(Async)");
        }

        return wirelessWirelessLansBulkUpdateCall(writableWirelessLAN, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLAN  (required)
     * @return WirelessLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLAN wirelessWirelessLansBulkUpdate(WritableWirelessLAN writableWirelessLAN) throws ApiException {
        ApiResponse<WirelessLAN> localVarResp = wirelessWirelessLansBulkUpdateWithHttpInfo(writableWirelessLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLAN  (required)
     * @return ApiResponse&lt;WirelessLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLAN> wirelessWirelessLansBulkUpdateWithHttpInfo(WritableWirelessLAN writableWirelessLAN) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansBulkUpdateValidateBeforeCall(writableWirelessLAN, null);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansBulkUpdateAsync(WritableWirelessLAN writableWirelessLAN, final ApiCallback<WirelessLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansBulkUpdateValidateBeforeCall(writableWirelessLAN, _callback);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansCreate
     * @param writableWirelessLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansCreateCall(WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLAN;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansCreateValidateBeforeCall(WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLAN' is set
        if (writableWirelessLAN == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLAN' when calling wirelessWirelessLansCreate(Async)");
        }

        return wirelessWirelessLansCreateCall(writableWirelessLAN, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLAN  (required)
     * @return WirelessLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLAN wirelessWirelessLansCreate(WritableWirelessLAN writableWirelessLAN) throws ApiException {
        ApiResponse<WirelessLAN> localVarResp = wirelessWirelessLansCreateWithHttpInfo(writableWirelessLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLAN  (required)
     * @return ApiResponse&lt;WirelessLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLAN> wirelessWirelessLansCreateWithHttpInfo(WritableWirelessLAN writableWirelessLAN) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansCreateValidateBeforeCall(writableWirelessLAN, null);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansCreateAsync(WritableWirelessLAN writableWirelessLAN, final ApiCallback<WirelessLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansCreateValidateBeforeCall(writableWirelessLAN, _callback);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansDelete
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLansDelete(Async)");
        }

        return wirelessWirelessLansDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void wirelessWirelessLansDelete(Integer id) throws ApiException {
        wirelessWirelessLansDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wirelessWirelessLansDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansList
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param vlanId  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param vlanIdN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansListCall(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String status, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String statusN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (authPsk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk", authPsk));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }

        if (authType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type", authType));
        }

        if (authCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_cipher", authCipher));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (ssidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__n", ssidN));
        }

        if (ssidIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__ic", ssidIc));
        }

        if (ssidNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__nic", ssidNic));
        }

        if (ssidIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__iew", ssidIew));
        }

        if (ssidNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__niew", ssidNiew));
        }

        if (ssidIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__isw", ssidIsw));
        }

        if (ssidNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__nisw", ssidNisw));
        }

        if (ssidIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__ie", ssidIe));
        }

        if (ssidNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__nie", ssidNie));
        }

        if (ssidEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__empty", ssidEmpty));
        }

        if (authPskN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__n", authPskN));
        }

        if (authPskIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__ic", authPskIc));
        }

        if (authPskNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__nic", authPskNic));
        }

        if (authPskIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__iew", authPskIew));
        }

        if (authPskNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__niew", authPskNiew));
        }

        if (authPskIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__isw", authPskIsw));
        }

        if (authPskNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__nisw", authPskNisw));
        }

        if (authPskIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__ie", authPskIe));
        }

        if (authPskNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__nie", authPskNie));
        }

        if (authPskEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__empty", authPskEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }

        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (vlanIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id__n", vlanIdN));
        }

        if (authTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type__n", authTypeN));
        }

        if (authCipherN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_cipher__n", authCipherN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansListValidateBeforeCall(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String status, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String statusN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return wirelessWirelessLansListCall(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, status, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, statusN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param vlanId  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param vlanIdN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return WirelessWirelessLansList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessWirelessLansList200Response wirelessWirelessLansList(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String status, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String statusN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<WirelessWirelessLansList200Response> localVarResp = wirelessWirelessLansListWithHttpInfo(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, status, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, statusN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param vlanId  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param vlanIdN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;WirelessWirelessLansList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessWirelessLansList200Response> wirelessWirelessLansListWithHttpInfo(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String status, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String statusN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansListValidateBeforeCall(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, status, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, statusN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<WirelessWirelessLansList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param vlanId  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param vlanIdN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansListAsync(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String groupId, String group, String status, String vlanId, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String groupIdN, String groupN, String statusN, String vlanIdN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset, final ApiCallback<WirelessWirelessLansList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansListValidateBeforeCall(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, groupId, group, status, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, groupIdN, groupN, statusN, vlanIdN, authTypeN, authCipherN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WirelessWirelessLansList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansPartialUpdate
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansPartialUpdateCall(Integer id, WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLAN;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansPartialUpdateValidateBeforeCall(Integer id, WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLansPartialUpdate(Async)");
        }

        // verify the required parameter 'writableWirelessLAN' is set
        if (writableWirelessLAN == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLAN' when calling wirelessWirelessLansPartialUpdate(Async)");
        }

        return wirelessWirelessLansPartialUpdateCall(id, writableWirelessLAN, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @return WirelessLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLAN wirelessWirelessLansPartialUpdate(Integer id, WritableWirelessLAN writableWirelessLAN) throws ApiException {
        ApiResponse<WirelessLAN> localVarResp = wirelessWirelessLansPartialUpdateWithHttpInfo(id, writableWirelessLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @return ApiResponse&lt;WirelessLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLAN> wirelessWirelessLansPartialUpdateWithHttpInfo(Integer id, WritableWirelessLAN writableWirelessLAN) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansPartialUpdateValidateBeforeCall(id, writableWirelessLAN, null);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansPartialUpdateAsync(Integer id, WritableWirelessLAN writableWirelessLAN, final ApiCallback<WirelessLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansPartialUpdateValidateBeforeCall(id, writableWirelessLAN, _callback);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansRead
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLansRead(Async)");
        }

        return wirelessWirelessLansReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @return WirelessLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLAN wirelessWirelessLansRead(Integer id) throws ApiException {
        ApiResponse<WirelessLAN> localVarResp = wirelessWirelessLansReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @return ApiResponse&lt;WirelessLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLAN> wirelessWirelessLansReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansReadAsync(Integer id, final ApiCallback<WirelessLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLansUpdate
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansUpdateCall(Integer id, WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLAN;

        // create path and map variables
        String localVarPath = "/wireless/wireless-lans/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLansUpdateValidateBeforeCall(Integer id, WritableWirelessLAN writableWirelessLAN, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLansUpdate(Async)");
        }

        // verify the required parameter 'writableWirelessLAN' is set
        if (writableWirelessLAN == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLAN' when calling wirelessWirelessLansUpdate(Async)");
        }

        return wirelessWirelessLansUpdateCall(id, writableWirelessLAN, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @return WirelessLAN
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLAN wirelessWirelessLansUpdate(Integer id, WritableWirelessLAN writableWirelessLAN) throws ApiException {
        ApiResponse<WirelessLAN> localVarResp = wirelessWirelessLansUpdateWithHttpInfo(id, writableWirelessLAN);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @return ApiResponse&lt;WirelessLAN&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLAN> wirelessWirelessLansUpdateWithHttpInfo(Integer id, WritableWirelessLAN writableWirelessLAN) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLansUpdateValidateBeforeCall(id, writableWirelessLAN, null);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this Wireless LAN. (required)
     * @param writableWirelessLAN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLansUpdateAsync(Integer id, WritableWirelessLAN writableWirelessLAN, final ApiCallback<WirelessLAN> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLansUpdateValidateBeforeCall(id, writableWirelessLAN, _callback);
        Type localVarReturnType = new TypeToken<WirelessLAN>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksBulkDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return wirelessWirelessLinksBulkDeleteCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void wirelessWirelessLinksBulkDelete() throws ApiException {
        wirelessWirelessLinksBulkDeleteWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wirelessWirelessLinksBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksBulkPartialUpdate
     * @param writableWirelessLink  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksBulkPartialUpdateCall(WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLink;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksBulkPartialUpdateValidateBeforeCall(WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLink' is set
        if (writableWirelessLink == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLink' when calling wirelessWirelessLinksBulkPartialUpdate(Async)");
        }

        return wirelessWirelessLinksBulkPartialUpdateCall(writableWirelessLink, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLink  (required)
     * @return WirelessLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLink wirelessWirelessLinksBulkPartialUpdate(WritableWirelessLink writableWirelessLink) throws ApiException {
        ApiResponse<WirelessLink> localVarResp = wirelessWirelessLinksBulkPartialUpdateWithHttpInfo(writableWirelessLink);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLink  (required)
     * @return ApiResponse&lt;WirelessLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLink> wirelessWirelessLinksBulkPartialUpdateWithHttpInfo(WritableWirelessLink writableWirelessLink) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksBulkPartialUpdateValidateBeforeCall(writableWirelessLink, null);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLink  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksBulkPartialUpdateAsync(WritableWirelessLink writableWirelessLink, final ApiCallback<WirelessLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksBulkPartialUpdateValidateBeforeCall(writableWirelessLink, _callback);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksBulkUpdate
     * @param writableWirelessLink  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksBulkUpdateCall(WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLink;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksBulkUpdateValidateBeforeCall(WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLink' is set
        if (writableWirelessLink == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLink' when calling wirelessWirelessLinksBulkUpdate(Async)");
        }

        return wirelessWirelessLinksBulkUpdateCall(writableWirelessLink, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLink  (required)
     * @return WirelessLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLink wirelessWirelessLinksBulkUpdate(WritableWirelessLink writableWirelessLink) throws ApiException {
        ApiResponse<WirelessLink> localVarResp = wirelessWirelessLinksBulkUpdateWithHttpInfo(writableWirelessLink);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLink  (required)
     * @return ApiResponse&lt;WirelessLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLink> wirelessWirelessLinksBulkUpdateWithHttpInfo(WritableWirelessLink writableWirelessLink) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksBulkUpdateValidateBeforeCall(writableWirelessLink, null);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLink  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksBulkUpdateAsync(WritableWirelessLink writableWirelessLink, final ApiCallback<WirelessLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksBulkUpdateValidateBeforeCall(writableWirelessLink, _callback);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksCreate
     * @param writableWirelessLink  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksCreateCall(WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLink;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksCreateValidateBeforeCall(WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableWirelessLink' is set
        if (writableWirelessLink == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLink' when calling wirelessWirelessLinksCreate(Async)");
        }

        return wirelessWirelessLinksCreateCall(writableWirelessLink, _callback);

    }

    /**
     * 
     * 
     * @param writableWirelessLink  (required)
     * @return WirelessLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLink wirelessWirelessLinksCreate(WritableWirelessLink writableWirelessLink) throws ApiException {
        ApiResponse<WirelessLink> localVarResp = wirelessWirelessLinksCreateWithHttpInfo(writableWirelessLink);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableWirelessLink  (required)
     * @return ApiResponse&lt;WirelessLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLink> wirelessWirelessLinksCreateWithHttpInfo(WritableWirelessLink writableWirelessLink) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksCreateValidateBeforeCall(writableWirelessLink, null);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableWirelessLink  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksCreateAsync(WritableWirelessLink writableWirelessLink, final ApiCallback<WirelessLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksCreateValidateBeforeCall(writableWirelessLink, _callback);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksDelete
     * @param id A unique integer value identifying this wireless link. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLinksDelete(Async)");
        }

        return wirelessWirelessLinksDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void wirelessWirelessLinksDelete(Integer id) throws ApiException {
        wirelessWirelessLinksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wirelessWirelessLinksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksList
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param interfaceAId  (optional)
     * @param interfaceBId  (optional)
     * @param status  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param interfaceAIdN  (optional)
     * @param interfaceAIdLte  (optional)
     * @param interfaceAIdLt  (optional)
     * @param interfaceAIdGte  (optional)
     * @param interfaceAIdGt  (optional)
     * @param interfaceBIdN  (optional)
     * @param interfaceBIdLte  (optional)
     * @param interfaceBIdLt  (optional)
     * @param interfaceBIdGte  (optional)
     * @param interfaceBIdGt  (optional)
     * @param statusN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksListCall(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ssid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid", ssid));
        }

        if (authPsk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk", authPsk));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (interfaceAId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_a_id", interfaceAId));
        }

        if (interfaceBId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_b_id", interfaceBId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (authType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type", authType));
        }

        if (authCipher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_cipher", authCipher));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (ssidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__n", ssidN));
        }

        if (ssidIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__ic", ssidIc));
        }

        if (ssidNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__nic", ssidNic));
        }

        if (ssidIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__iew", ssidIew));
        }

        if (ssidNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__niew", ssidNiew));
        }

        if (ssidIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__isw", ssidIsw));
        }

        if (ssidNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__nisw", ssidNisw));
        }

        if (ssidIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__ie", ssidIe));
        }

        if (ssidNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__nie", ssidNie));
        }

        if (ssidEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssid__empty", ssidEmpty));
        }

        if (authPskN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__n", authPskN));
        }

        if (authPskIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__ic", authPskIc));
        }

        if (authPskNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__nic", authPskNic));
        }

        if (authPskIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__iew", authPskIew));
        }

        if (authPskNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__niew", authPskNiew));
        }

        if (authPskIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__isw", authPskIsw));
        }

        if (authPskNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__nisw", authPskNisw));
        }

        if (authPskIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__ie", authPskIe));
        }

        if (authPskNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__nie", authPskNie));
        }

        if (authPskEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_psk__empty", authPskEmpty));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (descriptionEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__empty", descriptionEmpty));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (interfaceAIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_a_id__n", interfaceAIdN));
        }

        if (interfaceAIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_a_id__lte", interfaceAIdLte));
        }

        if (interfaceAIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_a_id__lt", interfaceAIdLt));
        }

        if (interfaceAIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_a_id__gte", interfaceAIdGte));
        }

        if (interfaceAIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_a_id__gt", interfaceAIdGt));
        }

        if (interfaceBIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_b_id__n", interfaceBIdN));
        }

        if (interfaceBIdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_b_id__lte", interfaceBIdLte));
        }

        if (interfaceBIdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_b_id__lt", interfaceBIdLt));
        }

        if (interfaceBIdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_b_id__gte", interfaceBIdGte));
        }

        if (interfaceBIdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interface_b_id__gt", interfaceBIdGt));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (authTypeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type__n", authTypeN));
        }

        if (authCipherN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_cipher__n", authCipherN));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksListValidateBeforeCall(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return wirelessWirelessLinksListCall(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param interfaceAId  (optional)
     * @param interfaceBId  (optional)
     * @param status  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param interfaceAIdN  (optional)
     * @param interfaceAIdLte  (optional)
     * @param interfaceAIdLt  (optional)
     * @param interfaceAIdGte  (optional)
     * @param interfaceAIdGt  (optional)
     * @param interfaceBIdN  (optional)
     * @param interfaceBIdLte  (optional)
     * @param interfaceBIdLt  (optional)
     * @param interfaceBIdGte  (optional)
     * @param interfaceBIdGt  (optional)
     * @param statusN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return WirelessWirelessLinksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessWirelessLinksList200Response wirelessWirelessLinksList(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<WirelessWirelessLinksList200Response> localVarResp = wirelessWirelessLinksListWithHttpInfo(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param interfaceAId  (optional)
     * @param interfaceBId  (optional)
     * @param status  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param interfaceAIdN  (optional)
     * @param interfaceAIdLte  (optional)
     * @param interfaceAIdLt  (optional)
     * @param interfaceAIdGte  (optional)
     * @param interfaceAIdGt  (optional)
     * @param interfaceBIdN  (optional)
     * @param interfaceBIdLte  (optional)
     * @param interfaceBIdLt  (optional)
     * @param interfaceBIdGte  (optional)
     * @param interfaceBIdGt  (optional)
     * @param statusN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;WirelessWirelessLinksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessWirelessLinksList200Response> wirelessWirelessLinksListWithHttpInfo(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksListValidateBeforeCall(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<WirelessWirelessLinksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (optional)
     * @param ssid  (optional)
     * @param authPsk  (optional)
     * @param description  (optional)
     * @param created  (optional)
     * @param lastUpdated  (optional)
     * @param q  (optional)
     * @param tag  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param interfaceAId  (optional)
     * @param interfaceBId  (optional)
     * @param status  (optional)
     * @param authType  (optional)
     * @param authCipher  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param ssidN  (optional)
     * @param ssidIc  (optional)
     * @param ssidNic  (optional)
     * @param ssidIew  (optional)
     * @param ssidNiew  (optional)
     * @param ssidIsw  (optional)
     * @param ssidNisw  (optional)
     * @param ssidIe  (optional)
     * @param ssidNie  (optional)
     * @param ssidEmpty  (optional)
     * @param authPskN  (optional)
     * @param authPskIc  (optional)
     * @param authPskNic  (optional)
     * @param authPskIew  (optional)
     * @param authPskNiew  (optional)
     * @param authPskIsw  (optional)
     * @param authPskNisw  (optional)
     * @param authPskIe  (optional)
     * @param authPskNie  (optional)
     * @param authPskEmpty  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param descriptionEmpty  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param lastUpdatedN  (optional)
     * @param lastUpdatedLte  (optional)
     * @param lastUpdatedLt  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedGt  (optional)
     * @param tagN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param interfaceAIdN  (optional)
     * @param interfaceAIdLte  (optional)
     * @param interfaceAIdLt  (optional)
     * @param interfaceAIdGte  (optional)
     * @param interfaceAIdGt  (optional)
     * @param interfaceBIdN  (optional)
     * @param interfaceBIdLte  (optional)
     * @param interfaceBIdLt  (optional)
     * @param interfaceBIdGte  (optional)
     * @param interfaceBIdGt  (optional)
     * @param statusN  (optional)
     * @param authTypeN  (optional)
     * @param authCipherN  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksListAsync(String id, String ssid, String authPsk, String description, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String interfaceAId, String interfaceBId, String status, String authType, String authCipher, String idN, String idLte, String idLt, String idGte, String idGt, String ssidN, String ssidIc, String ssidNic, String ssidIew, String ssidNiew, String ssidIsw, String ssidNisw, String ssidIe, String ssidNie, String ssidEmpty, String authPskN, String authPskIc, String authPskNic, String authPskIew, String authPskNiew, String authPskIsw, String authPskNisw, String authPskIe, String authPskNie, String authPskEmpty, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String descriptionEmpty, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String interfaceAIdN, String interfaceAIdLte, String interfaceAIdLt, String interfaceAIdGte, String interfaceAIdGt, String interfaceBIdN, String interfaceBIdLte, String interfaceBIdLt, String interfaceBIdGte, String interfaceBIdGt, String statusN, String authTypeN, String authCipherN, String ordering, Integer limit, Integer offset, final ApiCallback<WirelessWirelessLinksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksListValidateBeforeCall(id, ssid, authPsk, description, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, ssidEmpty, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, authPskEmpty, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, descriptionEmpty, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<WirelessWirelessLinksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksPartialUpdate
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksPartialUpdateCall(Integer id, WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLink;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksPartialUpdateValidateBeforeCall(Integer id, WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLinksPartialUpdate(Async)");
        }

        // verify the required parameter 'writableWirelessLink' is set
        if (writableWirelessLink == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLink' when calling wirelessWirelessLinksPartialUpdate(Async)");
        }

        return wirelessWirelessLinksPartialUpdateCall(id, writableWirelessLink, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @return WirelessLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLink wirelessWirelessLinksPartialUpdate(Integer id, WritableWirelessLink writableWirelessLink) throws ApiException {
        ApiResponse<WirelessLink> localVarResp = wirelessWirelessLinksPartialUpdateWithHttpInfo(id, writableWirelessLink);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @return ApiResponse&lt;WirelessLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLink> wirelessWirelessLinksPartialUpdateWithHttpInfo(Integer id, WritableWirelessLink writableWirelessLink) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksPartialUpdateValidateBeforeCall(id, writableWirelessLink, null);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksPartialUpdateAsync(Integer id, WritableWirelessLink writableWirelessLink, final ApiCallback<WirelessLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksPartialUpdateValidateBeforeCall(id, writableWirelessLink, _callback);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksRead
     * @param id A unique integer value identifying this wireless link. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLinksRead(Async)");
        }

        return wirelessWirelessLinksReadCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @return WirelessLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLink wirelessWirelessLinksRead(Integer id) throws ApiException {
        ApiResponse<WirelessLink> localVarResp = wirelessWirelessLinksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @return ApiResponse&lt;WirelessLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLink> wirelessWirelessLinksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksReadAsync(Integer id, final ApiCallback<WirelessLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wirelessWirelessLinksUpdate
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksUpdateCall(Integer id, WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableWirelessLink;

        // create path and map variables
        String localVarPath = "/wireless/wireless-links/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wirelessWirelessLinksUpdateValidateBeforeCall(Integer id, WritableWirelessLink writableWirelessLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling wirelessWirelessLinksUpdate(Async)");
        }

        // verify the required parameter 'writableWirelessLink' is set
        if (writableWirelessLink == null) {
            throw new ApiException("Missing the required parameter 'writableWirelessLink' when calling wirelessWirelessLinksUpdate(Async)");
        }

        return wirelessWirelessLinksUpdateCall(id, writableWirelessLink, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @return WirelessLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WirelessLink wirelessWirelessLinksUpdate(Integer id, WritableWirelessLink writableWirelessLink) throws ApiException {
        ApiResponse<WirelessLink> localVarResp = wirelessWirelessLinksUpdateWithHttpInfo(id, writableWirelessLink);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @return ApiResponse&lt;WirelessLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WirelessLink> wirelessWirelessLinksUpdateWithHttpInfo(Integer id, WritableWirelessLink writableWirelessLink) throws ApiException {
        okhttp3.Call localVarCall = wirelessWirelessLinksUpdateValidateBeforeCall(id, writableWirelessLink, null);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this wireless link. (required)
     * @param writableWirelessLink  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wirelessWirelessLinksUpdateAsync(Integer id, WritableWirelessLink writableWirelessLink, final ApiCallback<WirelessLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = wirelessWirelessLinksUpdateValidateBeforeCall(id, writableWirelessLink, _callback);
        Type localVarReturnType = new TypeToken<WirelessLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
