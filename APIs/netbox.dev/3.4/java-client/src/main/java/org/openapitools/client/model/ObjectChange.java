/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.NestedUser;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjectChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjectChange {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private Action action;

  public static final String SERIALIZED_NAME_CHANGED_OBJECT = "changed_object";
  @SerializedName(SERIALIZED_NAME_CHANGED_OBJECT)
  private Object changedObject;

  public static final String SERIALIZED_NAME_CHANGED_OBJECT_ID = "changed_object_id";
  @SerializedName(SERIALIZED_NAME_CHANGED_OBJECT_ID)
  private Integer changedObjectId;

  public static final String SERIALIZED_NAME_CHANGED_OBJECT_TYPE = "changed_object_type";
  @SerializedName(SERIALIZED_NAME_CHANGED_OBJECT_TYPE)
  private String changedObjectType;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_POSTCHANGE_DATA = "postchange_data";
  @SerializedName(SERIALIZED_NAME_POSTCHANGE_DATA)
  private Object postchangeData;

  public static final String SERIALIZED_NAME_PRECHANGE_DATA = "prechange_data";
  @SerializedName(SERIALIZED_NAME_PRECHANGE_DATA)
  private Object prechangeData;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private NestedUser user;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ObjectChange() {
  }

  public ObjectChange(
     Object changedObject, 
     String changedObjectType, 
     String display, 
     Integer id, 
     Object postchangeData, 
     Object prechangeData, 
     UUID requestId, 
     OffsetDateTime time, 
     URI url, 
     String userName
  ) {
    this();
    this.changedObject = changedObject;
    this.changedObjectType = changedObjectType;
    this.display = display;
    this.id = id;
    this.postchangeData = postchangeData;
    this.prechangeData = prechangeData;
    this.requestId = requestId;
    this.time = time;
    this.url = url;
    this.userName = userName;
  }

  public ObjectChange action(Action action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public Action getAction() {
    return action;
  }

  public void setAction(Action action) {
    this.action = action;
  }


  /**
   *  Serialize a nested representation of the changed object. 
   * @return changedObject
   */
  @javax.annotation.Nullable
  public Object getChangedObject() {
    return changedObject;
  }



  public ObjectChange changedObjectId(Integer changedObjectId) {
    this.changedObjectId = changedObjectId;
    return this;
  }

  /**
   * Get changedObjectId
   * minimum: 0
   * maximum: -9223372036854775616
   * @return changedObjectId
   */
  @javax.annotation.Nonnull
  public Integer getChangedObjectId() {
    return changedObjectId;
  }

  public void setChangedObjectId(Integer changedObjectId) {
    this.changedObjectId = changedObjectId;
  }


  /**
   * Get changedObjectType
   * @return changedObjectType
   */
  @javax.annotation.Nullable
  public String getChangedObjectType() {
    return changedObjectType;
  }



  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get postchangeData
   * @return postchangeData
   */
  @javax.annotation.Nullable
  public Object getPostchangeData() {
    return postchangeData;
  }



  /**
   * Get prechangeData
   * @return prechangeData
   */
  @javax.annotation.Nullable
  public Object getPrechangeData() {
    return prechangeData;
  }



  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nullable
  public UUID getRequestId() {
    return requestId;
  }



  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }



  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public ObjectChange user(NestedUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public NestedUser getUser() {
    return user;
  }

  public void setUser(NestedUser user) {
    this.user = user;
  }


  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectChange objectChange = (ObjectChange) o;
    return Objects.equals(this.action, objectChange.action) &&
        Objects.equals(this.changedObject, objectChange.changedObject) &&
        Objects.equals(this.changedObjectId, objectChange.changedObjectId) &&
        Objects.equals(this.changedObjectType, objectChange.changedObjectType) &&
        Objects.equals(this.display, objectChange.display) &&
        Objects.equals(this.id, objectChange.id) &&
        Objects.equals(this.postchangeData, objectChange.postchangeData) &&
        Objects.equals(this.prechangeData, objectChange.prechangeData) &&
        Objects.equals(this.requestId, objectChange.requestId) &&
        Objects.equals(this.time, objectChange.time) &&
        Objects.equals(this.url, objectChange.url) &&
        Objects.equals(this.user, objectChange.user) &&
        Objects.equals(this.userName, objectChange.userName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, changedObject, changedObjectId, changedObjectType, display, id, postchangeData, prechangeData, requestId, time, url, user, userName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectChange {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    changedObject: ").append(toIndentedString(changedObject)).append("\n");
    sb.append("    changedObjectId: ").append(toIndentedString(changedObjectId)).append("\n");
    sb.append("    changedObjectType: ").append(toIndentedString(changedObjectType)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    postchangeData: ").append(toIndentedString(postchangeData)).append("\n");
    sb.append("    prechangeData: ").append(toIndentedString(prechangeData)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("changed_object");
    openapiFields.add("changed_object_id");
    openapiFields.add("changed_object_type");
    openapiFields.add("display");
    openapiFields.add("id");
    openapiFields.add("postchange_data");
    openapiFields.add("prechange_data");
    openapiFields.add("request_id");
    openapiFields.add("time");
    openapiFields.add("url");
    openapiFields.add("user");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("changed_object_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjectChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectChange is not found in the empty JSON string", ObjectChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjectChange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        Action.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("changed_object_type") != null && !jsonObj.get("changed_object_type").isJsonNull()) && !jsonObj.get("changed_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changed_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changed_object_type").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        NestedUser.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonNull()) && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectChange.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectChange>() {
           @Override
           public void write(JsonWriter out, ObjectChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjectChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjectChange
   * @throws IOException if the JSON string is invalid with respect to ObjectChange
   */
  public static ObjectChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectChange.class);
  }

  /**
   * Convert an instance of ObjectChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

