/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.NestedTag;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableVMInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:40.219620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableVMInterface {
  public static final String SERIALIZED_NAME_BRIDGE = "bridge";
  @SerializedName(SERIALIZED_NAME_BRIDGE)
  private Integer bridge;

  public static final String SERIALIZED_NAME_COUNT_FHRP_GROUPS = "count_fhrp_groups";
  @SerializedName(SERIALIZED_NAME_COUNT_FHRP_GROUPS)
  private Integer countFhrpGroups;

  public static final String SERIALIZED_NAME_COUNT_IPADDRESSES = "count_ipaddresses";
  @SerializedName(SERIALIZED_NAME_COUNT_IPADDRESSES)
  private Integer countIpaddresses;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields = {};

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_L2VPN_TERMINATION = "l2vpn_termination";
  @SerializedName(SERIALIZED_NAME_L2VPN_TERMINATION)
  private String l2vpnTermination;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ACCESS("access"),
    
    TAGGED("tagged"),
    
    TAGGED_ALL("tagged-all");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MTU = "mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private Integer mtu;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Integer parent;

  public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
  @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
  private Set<Integer> taggedVlans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<NestedTag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
  @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
  private Integer untaggedVlan;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE = "virtual_machine";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE)
  private Integer virtualMachine;

  public static final String SERIALIZED_NAME_VRF = "vrf";
  @SerializedName(SERIALIZED_NAME_VRF)
  private Integer vrf;

  public WritableVMInterface() {
  }

  public WritableVMInterface(
     Integer countFhrpGroups, 
     Integer countIpaddresses, 
     OffsetDateTime created, 
     String display, 
     Integer id, 
     String l2vpnTermination, 
     OffsetDateTime lastUpdated, 
     URI url
  ) {
    this();
    this.countFhrpGroups = countFhrpGroups;
    this.countIpaddresses = countIpaddresses;
    this.created = created;
    this.display = display;
    this.id = id;
    this.l2vpnTermination = l2vpnTermination;
    this.lastUpdated = lastUpdated;
    this.url = url;
  }

  public WritableVMInterface bridge(Integer bridge) {
    this.bridge = bridge;
    return this;
  }

  /**
   * Get bridge
   * @return bridge
   */
  @javax.annotation.Nullable
  public Integer getBridge() {
    return bridge;
  }

  public void setBridge(Integer bridge) {
    this.bridge = bridge;
  }


  /**
   * Get countFhrpGroups
   * @return countFhrpGroups
   */
  @javax.annotation.Nullable
  public Integer getCountFhrpGroups() {
    return countFhrpGroups;
  }



  /**
   * Get countIpaddresses
   * @return countIpaddresses
   */
  @javax.annotation.Nullable
  public Integer getCountIpaddresses() {
    return countIpaddresses;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public WritableVMInterface customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public WritableVMInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }



  public WritableVMInterface enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get l2vpnTermination
   * @return l2vpnTermination
   */
  @javax.annotation.Nullable
  public String getL2vpnTermination() {
    return l2vpnTermination;
  }



  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public WritableVMInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public WritableVMInterface mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public WritableVMInterface mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * Get mtu
   * minimum: 1
   * maximum: 65536
   * @return mtu
   */
  @javax.annotation.Nullable
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  public WritableVMInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritableVMInterface parent(Integer parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public Integer getParent() {
    return parent;
  }

  public void setParent(Integer parent) {
    this.parent = parent;
  }


  public WritableVMInterface taggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
    return this;
  }

  public WritableVMInterface addTaggedVlansItem(Integer taggedVlansItem) {
    if (this.taggedVlans == null) {
      this.taggedVlans = new LinkedHashSet<>();
    }
    this.taggedVlans.add(taggedVlansItem);
    return this;
  }

  /**
   * Get taggedVlans
   * @return taggedVlans
   */
  @javax.annotation.Nullable
  public Set<Integer> getTaggedVlans() {
    return taggedVlans;
  }

  public void setTaggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
  }


  public WritableVMInterface tags(List<NestedTag> tags) {
    this.tags = tags;
    return this;
  }

  public WritableVMInterface addTagsItem(NestedTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<NestedTag> getTags() {
    return tags;
  }

  public void setTags(List<NestedTag> tags) {
    this.tags = tags;
  }


  public WritableVMInterface untaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
    return this;
  }

  /**
   * Get untaggedVlan
   * @return untaggedVlan
   */
  @javax.annotation.Nullable
  public Integer getUntaggedVlan() {
    return untaggedVlan;
  }

  public void setUntaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
  }


  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }



  public WritableVMInterface virtualMachine(Integer virtualMachine) {
    this.virtualMachine = virtualMachine;
    return this;
  }

  /**
   * Get virtualMachine
   * @return virtualMachine
   */
  @javax.annotation.Nonnull
  public Integer getVirtualMachine() {
    return virtualMachine;
  }

  public void setVirtualMachine(Integer virtualMachine) {
    this.virtualMachine = virtualMachine;
  }


  public WritableVMInterface vrf(Integer vrf) {
    this.vrf = vrf;
    return this;
  }

  /**
   * Get vrf
   * @return vrf
   */
  @javax.annotation.Nullable
  public Integer getVrf() {
    return vrf;
  }

  public void setVrf(Integer vrf) {
    this.vrf = vrf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableVMInterface writableVMInterface = (WritableVMInterface) o;
    return Objects.equals(this.bridge, writableVMInterface.bridge) &&
        Objects.equals(this.countFhrpGroups, writableVMInterface.countFhrpGroups) &&
        Objects.equals(this.countIpaddresses, writableVMInterface.countIpaddresses) &&
        Objects.equals(this.created, writableVMInterface.created) &&
        Objects.equals(this.customFields, writableVMInterface.customFields) &&
        Objects.equals(this.description, writableVMInterface.description) &&
        Objects.equals(this.display, writableVMInterface.display) &&
        Objects.equals(this.enabled, writableVMInterface.enabled) &&
        Objects.equals(this.id, writableVMInterface.id) &&
        Objects.equals(this.l2vpnTermination, writableVMInterface.l2vpnTermination) &&
        Objects.equals(this.lastUpdated, writableVMInterface.lastUpdated) &&
        Objects.equals(this.macAddress, writableVMInterface.macAddress) &&
        Objects.equals(this.mode, writableVMInterface.mode) &&
        Objects.equals(this.mtu, writableVMInterface.mtu) &&
        Objects.equals(this.name, writableVMInterface.name) &&
        Objects.equals(this.parent, writableVMInterface.parent) &&
        Objects.equals(this.taggedVlans, writableVMInterface.taggedVlans) &&
        Objects.equals(this.tags, writableVMInterface.tags) &&
        Objects.equals(this.untaggedVlan, writableVMInterface.untaggedVlan) &&
        Objects.equals(this.url, writableVMInterface.url) &&
        Objects.equals(this.virtualMachine, writableVMInterface.virtualMachine) &&
        Objects.equals(this.vrf, writableVMInterface.vrf);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bridge, countFhrpGroups, countIpaddresses, created, customFields, description, display, enabled, id, l2vpnTermination, lastUpdated, macAddress, mode, mtu, name, parent, taggedVlans, tags, untaggedVlan, url, virtualMachine, vrf);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableVMInterface {\n");
    sb.append("    bridge: ").append(toIndentedString(bridge)).append("\n");
    sb.append("    countFhrpGroups: ").append(toIndentedString(countFhrpGroups)).append("\n");
    sb.append("    countIpaddresses: ").append(toIndentedString(countIpaddresses)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    l2vpnTermination: ").append(toIndentedString(l2vpnTermination)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    virtualMachine: ").append(toIndentedString(virtualMachine)).append("\n");
    sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bridge");
    openapiFields.add("count_fhrp_groups");
    openapiFields.add("count_ipaddresses");
    openapiFields.add("created");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("display");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("l2vpn_termination");
    openapiFields.add("last_updated");
    openapiFields.add("mac_address");
    openapiFields.add("mode");
    openapiFields.add("mtu");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("tagged_vlans");
    openapiFields.add("tags");
    openapiFields.add("untagged_vlan");
    openapiFields.add("url");
    openapiFields.add("virtual_machine");
    openapiFields.add("vrf");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("virtual_machine");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableVMInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableVMInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableVMInterface is not found in the empty JSON string", WritableVMInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableVMInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableVMInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableVMInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("l2vpn_termination") != null && !jsonObj.get("l2vpn_termination").isJsonNull()) && !jsonObj.get("l2vpn_termination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `l2vpn_termination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("l2vpn_termination").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagged_vlans") != null && !jsonObj.get("tagged_vlans").isJsonNull() && !jsonObj.get("tagged_vlans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            NestedTag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableVMInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableVMInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableVMInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableVMInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableVMInterface>() {
           @Override
           public void write(JsonWriter out, WritableVMInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableVMInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableVMInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableVMInterface
   * @throws IOException if the JSON string is invalid with respect to WritableVMInterface
   */
  public static WritableVMInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableVMInterface.class);
  }

  /**
   * Convert an instance of WritableVMInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

