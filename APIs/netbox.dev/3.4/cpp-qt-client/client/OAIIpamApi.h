/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIpamApi_H
#define OAI_OAIIpamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIASN.h"
#include "OAIAggregate.h"
#include "OAIAvailableIP.h"
#include "OAIAvailablePrefix.h"
#include "OAIAvailableVLAN.h"
#include "OAIFHRPGroup.h"
#include "OAIFHRPGroupAssignment.h"
#include "OAIIPAddress.h"
#include "OAIIPRange.h"
#include "OAIIpam_aggregates_list_200_response.h"
#include "OAIIpam_asns_list_200_response.h"
#include "OAIIpam_fhrp_group_assignments_list_200_response.h"
#include "OAIIpam_fhrp_groups_list_200_response.h"
#include "OAIIpam_ip_addresses_list_200_response.h"
#include "OAIIpam_ip_ranges_list_200_response.h"
#include "OAIIpam_l2vpn_terminations_list_200_response.h"
#include "OAIIpam_l2vpns_list_200_response.h"
#include "OAIIpam_prefixes_list_200_response.h"
#include "OAIIpam_rirs_list_200_response.h"
#include "OAIIpam_roles_list_200_response.h"
#include "OAIIpam_route_targets_list_200_response.h"
#include "OAIIpam_service_templates_list_200_response.h"
#include "OAIIpam_services_list_200_response.h"
#include "OAIIpam_vlan_groups_list_200_response.h"
#include "OAIIpam_vlans_list_200_response.h"
#include "OAIIpam_vrfs_list_200_response.h"
#include "OAIL2VPN.h"
#include "OAIL2VPNTermination.h"
#include "OAIPrefix.h"
#include "OAIPrefixLength.h"
#include "OAIRIR.h"
#include "OAIRole.h"
#include "OAIRouteTarget.h"
#include "OAIService.h"
#include "OAIServiceTemplate.h"
#include "OAIVLAN.h"
#include "OAIVLANGroup.h"
#include "OAIVRF.h"
#include "OAIWritableASN.h"
#include "OAIWritableAggregate.h"
#include "OAIWritableAvailableIP.h"
#include "OAIWritableCreateAvailableVLAN.h"
#include "OAIWritableFHRPGroupAssignment.h"
#include "OAIWritableIPAddress.h"
#include "OAIWritableIPRange.h"
#include "OAIWritableL2VPN.h"
#include "OAIWritableL2VPNTermination.h"
#include "OAIWritablePrefix.h"
#include "OAIWritableRouteTarget.h"
#include "OAIWritableService.h"
#include "OAIWritableServiceTemplate.h"
#include "OAIWritableVLAN.h"
#include "OAIWritableVRF.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIpamApi : public QObject {
    Q_OBJECT

public:
    OAIIpamApi(const int timeOut = 0);
    ~OAIIpamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void ipamAggregatesBulkDelete();

    /**
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesBulkPartialUpdate(const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesBulkUpdate(const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesCreate(const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamAggregatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  date_added QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  rir_id QString [optional]
    * @param[in]  rir QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  date_added__n QString [optional]
    * @param[in]  date_added__lte QString [optional]
    * @param[in]  date_added__lt QString [optional]
    * @param[in]  date_added__gte QString [optional]
    * @param[in]  date_added__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  rir_id__n QString [optional]
    * @param[in]  rir__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamAggregatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesPartialUpdate(const qint32 &id, const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamAggregatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesUpdate(const qint32 &id, const OAIWritableAggregate &oai_writable_aggregate);


    virtual void ipamAsnsBulkDelete();

    /**
    * @param[in]  oai_writable_asn OAIWritableASN [required]
    */
    virtual void ipamAsnsBulkPartialUpdate(const OAIWritableASN &oai_writable_asn);

    /**
    * @param[in]  oai_writable_asn OAIWritableASN [required]
    */
    virtual void ipamAsnsBulkUpdate(const OAIWritableASN &oai_writable_asn);

    /**
    * @param[in]  oai_writable_asn OAIWritableASN [required]
    */
    virtual void ipamAsnsCreate(const OAIWritableASN &oai_writable_asn);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamAsnsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  asn QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  rir_id QString [optional]
    * @param[in]  rir QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  asn__n QString [optional]
    * @param[in]  asn__lte QString [optional]
    * @param[in]  asn__lt QString [optional]
    * @param[in]  asn__gte QString [optional]
    * @param[in]  asn__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  rir_id__n QString [optional]
    * @param[in]  rir__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamAsnsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_asn OAIWritableASN [required]
    */
    virtual void ipamAsnsPartialUpdate(const qint32 &id, const OAIWritableASN &oai_writable_asn);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamAsnsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_asn OAIWritableASN [required]
    */
    virtual void ipamAsnsUpdate(const qint32 &id, const OAIWritableASN &oai_writable_asn);


    virtual void ipamFhrpGroupAssignmentsBulkDelete();

    /**
    * @param[in]  oai_writable_fhrp_group_assignment OAIWritableFHRPGroupAssignment [required]
    */
    virtual void ipamFhrpGroupAssignmentsBulkPartialUpdate(const OAIWritableFHRPGroupAssignment &oai_writable_fhrp_group_assignment);

    /**
    * @param[in]  oai_writable_fhrp_group_assignment OAIWritableFHRPGroupAssignment [required]
    */
    virtual void ipamFhrpGroupAssignmentsBulkUpdate(const OAIWritableFHRPGroupAssignment &oai_writable_fhrp_group_assignment);

    /**
    * @param[in]  oai_writable_fhrp_group_assignment OAIWritableFHRPGroupAssignment [required]
    */
    virtual void ipamFhrpGroupAssignmentsCreate(const OAIWritableFHRPGroupAssignment &oai_writable_fhrp_group_assignment);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamFhrpGroupAssignmentsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  interface_type QString [optional]
    * @param[in]  interface_id QString [optional]
    * @param[in]  priority QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  interface_type__n QString [optional]
    * @param[in]  interface_id__n QString [optional]
    * @param[in]  interface_id__lte QString [optional]
    * @param[in]  interface_id__lt QString [optional]
    * @param[in]  interface_id__gte QString [optional]
    * @param[in]  interface_id__gt QString [optional]
    * @param[in]  priority__n QString [optional]
    * @param[in]  priority__lte QString [optional]
    * @param[in]  priority__lt QString [optional]
    * @param[in]  priority__gte QString [optional]
    * @param[in]  priority__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamFhrpGroupAssignmentsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_fhrp_group_assignment OAIWritableFHRPGroupAssignment [required]
    */
    virtual void ipamFhrpGroupAssignmentsPartialUpdate(const qint32 &id, const OAIWritableFHRPGroupAssignment &oai_writable_fhrp_group_assignment);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamFhrpGroupAssignmentsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_fhrp_group_assignment OAIWritableFHRPGroupAssignment [required]
    */
    virtual void ipamFhrpGroupAssignmentsUpdate(const qint32 &id, const OAIWritableFHRPGroupAssignment &oai_writable_fhrp_group_assignment);


    virtual void ipamFhrpGroupsBulkDelete();

    /**
    * @param[in]  oaifhrp_group OAIFHRPGroup [required]
    */
    virtual void ipamFhrpGroupsBulkPartialUpdate(const OAIFHRPGroup &oaifhrp_group);

    /**
    * @param[in]  oaifhrp_group OAIFHRPGroup [required]
    */
    virtual void ipamFhrpGroupsBulkUpdate(const OAIFHRPGroup &oaifhrp_group);

    /**
    * @param[in]  oaifhrp_group OAIFHRPGroup [required]
    */
    virtual void ipamFhrpGroupsCreate(const OAIFHRPGroup &oaifhrp_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamFhrpGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  auth_key QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  auth_type QString [optional]
    * @param[in]  related_ip QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group_id__lte QString [optional]
    * @param[in]  group_id__lt QString [optional]
    * @param[in]  group_id__gte QString [optional]
    * @param[in]  group_id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  auth_key__n QString [optional]
    * @param[in]  auth_key__ic QString [optional]
    * @param[in]  auth_key__nic QString [optional]
    * @param[in]  auth_key__iew QString [optional]
    * @param[in]  auth_key__niew QString [optional]
    * @param[in]  auth_key__isw QString [optional]
    * @param[in]  auth_key__nisw QString [optional]
    * @param[in]  auth_key__ie QString [optional]
    * @param[in]  auth_key__nie QString [optional]
    * @param[in]  auth_key__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  protocol__n QString [optional]
    * @param[in]  auth_type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamFhrpGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &related_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_key__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaifhrp_group OAIFHRPGroup [required]
    */
    virtual void ipamFhrpGroupsPartialUpdate(const qint32 &id, const OAIFHRPGroup &oaifhrp_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamFhrpGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaifhrp_group OAIFHRPGroup [required]
    */
    virtual void ipamFhrpGroupsUpdate(const qint32 &id, const OAIFHRPGroup &oaifhrp_group);


    virtual void ipamIpAddressesBulkDelete();

    /**
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesBulkPartialUpdate(const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesBulkUpdate(const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesCreate(const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpAddressesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  dns_name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  address QString [optional]
    * @param[in]  mask_length double [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  present_in_vrf_id QString [optional]
    * @param[in]  present_in_vrf QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  interface QString [optional]
    * @param[in]  interface_id QString [optional]
    * @param[in]  vminterface QString [optional]
    * @param[in]  vminterface_id QString [optional]
    * @param[in]  fhrpgroup_id QString [optional]
    * @param[in]  assigned_to_interface QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  dns_name__n QString [optional]
    * @param[in]  dns_name__ic QString [optional]
    * @param[in]  dns_name__nic QString [optional]
    * @param[in]  dns_name__iew QString [optional]
    * @param[in]  dns_name__niew QString [optional]
    * @param[in]  dns_name__isw QString [optional]
    * @param[in]  dns_name__nisw QString [optional]
    * @param[in]  dns_name__ie QString [optional]
    * @param[in]  dns_name__nie QString [optional]
    * @param[in]  dns_name__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  interface__n QString [optional]
    * @param[in]  interface_id__n QString [optional]
    * @param[in]  vminterface__n QString [optional]
    * @param[in]  vminterface_id__n QString [optional]
    * @param[in]  fhrpgroup_id__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamIpAddressesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &mask_length = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &present_in_vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &present_in_vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fhrpgroup_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_to_interface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fhrpgroup_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesPartialUpdate(const qint32 &id, const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpAddressesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesUpdate(const qint32 &id, const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_available_ip OAIWritableAvailableIP [required]
    */
    virtual void ipamIpRangesAvailableIpsCreate(const qint32 &id, const OAIWritableAvailableIP &oai_writable_available_ip);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpRangesAvailableIpsList(const qint32 &id);


    virtual void ipamIpRangesBulkDelete();

    /**
    * @param[in]  oai_writable_ip_range OAIWritableIPRange [required]
    */
    virtual void ipamIpRangesBulkPartialUpdate(const OAIWritableIPRange &oai_writable_ip_range);

    /**
    * @param[in]  oai_writable_ip_range OAIWritableIPRange [required]
    */
    virtual void ipamIpRangesBulkUpdate(const OAIWritableIPRange &oai_writable_ip_range);

    /**
    * @param[in]  oai_writable_ip_range OAIWritableIPRange [required]
    */
    virtual void ipamIpRangesCreate(const OAIWritableIPRange &oai_writable_ip_range);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpRangesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  start_address QString [optional]
    * @param[in]  end_address QString [optional]
    * @param[in]  contains QString [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamIpRangesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &start_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_ip_range OAIWritableIPRange [required]
    */
    virtual void ipamIpRangesPartialUpdate(const qint32 &id, const OAIWritableIPRange &oai_writable_ip_range);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpRangesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_ip_range OAIWritableIPRange [required]
    */
    virtual void ipamIpRangesUpdate(const qint32 &id, const OAIWritableIPRange &oai_writable_ip_range);


    virtual void ipamL2vpnTerminationsBulkDelete();

    /**
    * @param[in]  oai_writable_l2_vpn_termination OAIWritableL2VPNTermination [required]
    */
    virtual void ipamL2vpnTerminationsBulkPartialUpdate(const OAIWritableL2VPNTermination &oai_writable_l2_vpn_termination);

    /**
    * @param[in]  oai_writable_l2_vpn_termination OAIWritableL2VPNTermination [required]
    */
    virtual void ipamL2vpnTerminationsBulkUpdate(const OAIWritableL2VPNTermination &oai_writable_l2_vpn_termination);

    /**
    * @param[in]  oai_writable_l2_vpn_termination OAIWritableL2VPNTermination [required]
    */
    virtual void ipamL2vpnTerminationsCreate(const OAIWritableL2VPNTermination &oai_writable_l2_vpn_termination);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamL2vpnTerminationsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  assigned_object_type_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  l2vpn_id QString [optional]
    * @param[in]  l2vpn QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  interface QString [optional]
    * @param[in]  interface_id QString [optional]
    * @param[in]  vminterface QString [optional]
    * @param[in]  vminterface_id QString [optional]
    * @param[in]  vlan QString [optional]
    * @param[in]  vlan_vid double [optional]
    * @param[in]  vlan_id QString [optional]
    * @param[in]  assigned_object_type QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  assigned_object_type_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  l2vpn_id__n QString [optional]
    * @param[in]  l2vpn__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  virtual_machine__n QString [optional]
    * @param[in]  virtual_machine_id__n QString [optional]
    * @param[in]  interface__n QString [optional]
    * @param[in]  interface_id__n QString [optional]
    * @param[in]  vminterface__n QString [optional]
    * @param[in]  vminterface_id__n QString [optional]
    * @param[in]  vlan__n QString [optional]
    * @param[in]  vlan_vid__n double [optional]
    * @param[in]  vlan_vid__lte double [optional]
    * @param[in]  vlan_vid__lt double [optional]
    * @param[in]  vlan_vid__gte double [optional]
    * @param[in]  vlan_vid__gt double [optional]
    * @param[in]  vlan_id__n QString [optional]
    * @param[in]  assigned_object_type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamL2vpnTerminationsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_object_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &vlan_vid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &vlan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_object_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_object_type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vminterface_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__n = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__lte = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__lt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__gte = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__gt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &vlan_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_object_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_l2_vpn_termination OAIWritableL2VPNTermination [required]
    */
    virtual void ipamL2vpnTerminationsPartialUpdate(const qint32 &id, const OAIWritableL2VPNTermination &oai_writable_l2_vpn_termination);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamL2vpnTerminationsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_l2_vpn_termination OAIWritableL2VPNTermination [required]
    */
    virtual void ipamL2vpnTerminationsUpdate(const qint32 &id, const OAIWritableL2VPNTermination &oai_writable_l2_vpn_termination);


    virtual void ipamL2vpnsBulkDelete();

    /**
    * @param[in]  oai_writable_l2_vpn OAIWritableL2VPN [required]
    */
    virtual void ipamL2vpnsBulkPartialUpdate(const OAIWritableL2VPN &oai_writable_l2_vpn);

    /**
    * @param[in]  oai_writable_l2_vpn OAIWritableL2VPN [required]
    */
    virtual void ipamL2vpnsBulkUpdate(const OAIWritableL2VPN &oai_writable_l2_vpn);

    /**
    * @param[in]  oai_writable_l2_vpn OAIWritableL2VPN [required]
    */
    virtual void ipamL2vpnsCreate(const OAIWritableL2VPN &oai_writable_l2_vpn);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamL2vpnsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  identifier QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  import_target_id QString [optional]
    * @param[in]  import_target QString [optional]
    * @param[in]  export_target_id QString [optional]
    * @param[in]  export_target QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  identifier__n QString [optional]
    * @param[in]  identifier__lte QString [optional]
    * @param[in]  identifier__lt QString [optional]
    * @param[in]  identifier__gte QString [optional]
    * @param[in]  identifier__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  import_target_id__n QString [optional]
    * @param[in]  import_target__n QString [optional]
    * @param[in]  export_target_id__n QString [optional]
    * @param[in]  export_target__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamL2vpnsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identifier__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_l2_vpn OAIWritableL2VPN [required]
    */
    virtual void ipamL2vpnsPartialUpdate(const qint32 &id, const OAIWritableL2VPN &oai_writable_l2_vpn);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamL2vpnsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_l2_vpn OAIWritableL2VPN [required]
    */
    virtual void ipamL2vpnsUpdate(const qint32 &id, const OAIWritableL2VPN &oai_writable_l2_vpn);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_available_ip OAIWritableAvailableIP [required]
    */
    virtual void ipamPrefixesAvailableIpsCreate(const qint32 &id, const OAIWritableAvailableIP &oai_writable_available_ip);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesAvailableIpsList(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_prefix_length OAIPrefixLength [required]
    */
    virtual void ipamPrefixesAvailablePrefixesCreate(const qint32 &id, const OAIPrefixLength &oai_prefix_length);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesAvailablePrefixesList(const qint32 &id);


    virtual void ipamPrefixesBulkDelete();

    /**
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesBulkPartialUpdate(const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesBulkUpdate(const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesCreate(const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  is_pool QString [optional]
    * @param[in]  mark_utilized QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  within QString [optional]
    * @param[in]  within_include QString [optional]
    * @param[in]  contains QString [optional]
    * @param[in]  depth QString [optional]
    * @param[in]  children QString [optional]
    * @param[in]  mask_length QString [optional]
    * @param[in]  mask_length__gte double [optional]
    * @param[in]  mask_length__lte double [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  present_in_vrf_id QString [optional]
    * @param[in]  present_in_vrf QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  vlan_id QString [optional]
    * @param[in]  vlan_vid double [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  depth__n QString [optional]
    * @param[in]  depth__lte QString [optional]
    * @param[in]  depth__lt QString [optional]
    * @param[in]  depth__gte QString [optional]
    * @param[in]  depth__gt QString [optional]
    * @param[in]  children__n QString [optional]
    * @param[in]  children__lte QString [optional]
    * @param[in]  children__lt QString [optional]
    * @param[in]  children__gte QString [optional]
    * @param[in]  children__gt QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  vlan_id__n QString [optional]
    * @param[in]  vlan_vid__n double [optional]
    * @param[in]  vlan_vid__lte double [optional]
    * @param[in]  vlan_vid__lt double [optional]
    * @param[in]  vlan_vid__gte double [optional]
    * @param[in]  vlan_vid__gt double [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamPrefixesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_pool = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mark_utilized = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &within_include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &children = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mask_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &mask_length__gte = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &mask_length__lte = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &present_in_vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &present_in_vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &vlan_vid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depth__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depth__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depth__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depth__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depth__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &children__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &children__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &children__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &children__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &children__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__n = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__lte = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__lt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__gte = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &vlan_vid__gt = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesPartialUpdate(const qint32 &id, const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesUpdate(const qint32 &id, const OAIWritablePrefix &oai_writable_prefix);


    virtual void ipamRirsBulkDelete();

    /**
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsBulkPartialUpdate(const OAIRIR &oairir);

    /**
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsBulkUpdate(const OAIRIR &oairir);

    /**
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsCreate(const OAIRIR &oairir);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRirsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  is_private QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamRirsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_private = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsPartialUpdate(const qint32 &id, const OAIRIR &oairir);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRirsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsUpdate(const qint32 &id, const OAIRIR &oairir);


    virtual void ipamRolesBulkDelete();

    /**
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesBulkPartialUpdate(const OAIRole &oai_role);

    /**
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesBulkUpdate(const OAIRole &oai_role);

    /**
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesCreate(const OAIRole &oai_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesPartialUpdate(const qint32 &id, const OAIRole &oai_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesUpdate(const qint32 &id, const OAIRole &oai_role);


    virtual void ipamRouteTargetsBulkDelete();

    /**
    * @param[in]  oai_writable_route_target OAIWritableRouteTarget [required]
    */
    virtual void ipamRouteTargetsBulkPartialUpdate(const OAIWritableRouteTarget &oai_writable_route_target);

    /**
    * @param[in]  oai_writable_route_target OAIWritableRouteTarget [required]
    */
    virtual void ipamRouteTargetsBulkUpdate(const OAIWritableRouteTarget &oai_writable_route_target);

    /**
    * @param[in]  oai_writable_route_target OAIWritableRouteTarget [required]
    */
    virtual void ipamRouteTargetsCreate(const OAIWritableRouteTarget &oai_writable_route_target);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRouteTargetsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  importing_vrf_id QString [optional]
    * @param[in]  importing_vrf QString [optional]
    * @param[in]  exporting_vrf_id QString [optional]
    * @param[in]  exporting_vrf QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  importing_vrf_id__n QString [optional]
    * @param[in]  importing_vrf__n QString [optional]
    * @param[in]  exporting_vrf_id__n QString [optional]
    * @param[in]  exporting_vrf__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamRouteTargetsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &importing_vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &importing_vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exporting_vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exporting_vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &importing_vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &importing_vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exporting_vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exporting_vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_route_target OAIWritableRouteTarget [required]
    */
    virtual void ipamRouteTargetsPartialUpdate(const qint32 &id, const OAIWritableRouteTarget &oai_writable_route_target);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRouteTargetsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_route_target OAIWritableRouteTarget [required]
    */
    virtual void ipamRouteTargetsUpdate(const qint32 &id, const OAIWritableRouteTarget &oai_writable_route_target);


    virtual void ipamServiceTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_service_template OAIWritableServiceTemplate [required]
    */
    virtual void ipamServiceTemplatesBulkPartialUpdate(const OAIWritableServiceTemplate &oai_writable_service_template);

    /**
    * @param[in]  oai_writable_service_template OAIWritableServiceTemplate [required]
    */
    virtual void ipamServiceTemplatesBulkUpdate(const OAIWritableServiceTemplate &oai_writable_service_template);

    /**
    * @param[in]  oai_writable_service_template OAIWritableServiceTemplate [required]
    */
    virtual void ipamServiceTemplatesCreate(const OAIWritableServiceTemplate &oai_writable_service_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamServiceTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  port double [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  protocol__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamServiceTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &port = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_service_template OAIWritableServiceTemplate [required]
    */
    virtual void ipamServiceTemplatesPartialUpdate(const qint32 &id, const OAIWritableServiceTemplate &oai_writable_service_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamServiceTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_service_template OAIWritableServiceTemplate [required]
    */
    virtual void ipamServiceTemplatesUpdate(const qint32 &id, const OAIWritableServiceTemplate &oai_writable_service_template);


    virtual void ipamServicesBulkDelete();

    /**
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesBulkPartialUpdate(const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesBulkUpdate(const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesCreate(const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamServicesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  ipaddress_id QString [optional]
    * @param[in]  ipaddress QString [optional]
    * @param[in]  port double [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  protocol__n QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_machine_id__n QString [optional]
    * @param[in]  virtual_machine__n QString [optional]
    * @param[in]  ipaddress_id__n QString [optional]
    * @param[in]  ipaddress__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamServicesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ipaddress_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ipaddress = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &port = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ipaddress_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ipaddress__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesPartialUpdate(const qint32 &id, const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamServicesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesUpdate(const qint32 &id, const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_create_available_vlan OAIWritableCreateAvailableVLAN [required]
    */
    virtual void ipamVlanGroupsAvailableVlansCreate(const qint32 &id, const OAIWritableCreateAvailableVLAN &oai_writable_create_available_vlan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlanGroupsAvailableVlansList(const qint32 &id);


    virtual void ipamVlanGroupsBulkDelete();

    /**
    * @param[in]  oaivlan_group OAIVLANGroup [required]
    */
    virtual void ipamVlanGroupsBulkPartialUpdate(const OAIVLANGroup &oaivlan_group);

    /**
    * @param[in]  oaivlan_group OAIVLANGroup [required]
    */
    virtual void ipamVlanGroupsBulkUpdate(const OAIVLANGroup &oaivlan_group);

    /**
    * @param[in]  oaivlan_group OAIVLANGroup [required]
    */
    virtual void ipamVlanGroupsCreate(const OAIVLANGroup &oaivlan_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlanGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  min_vid QString [optional]
    * @param[in]  max_vid QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  scope_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  scope_type QString [optional]
    * @param[in]  region double [optional]
    * @param[in]  sitegroup double [optional]
    * @param[in]  site double [optional]
    * @param[in]  location double [optional]
    * @param[in]  rack double [optional]
    * @param[in]  clustergroup double [optional]
    * @param[in]  cluster double [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  min_vid__n QString [optional]
    * @param[in]  min_vid__lte QString [optional]
    * @param[in]  min_vid__lt QString [optional]
    * @param[in]  min_vid__gte QString [optional]
    * @param[in]  min_vid__gt QString [optional]
    * @param[in]  max_vid__n QString [optional]
    * @param[in]  max_vid__lte QString [optional]
    * @param[in]  max_vid__lt QString [optional]
    * @param[in]  max_vid__gte QString [optional]
    * @param[in]  max_vid__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  scope_id__n QString [optional]
    * @param[in]  scope_id__lte QString [optional]
    * @param[in]  scope_id__lt QString [optional]
    * @param[in]  scope_id__gte QString [optional]
    * @param[in]  scope_id__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  scope_type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamVlanGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_vid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_vid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &region = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &sitegroup = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &site = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &location = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &rack = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &clustergroup = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &cluster = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_vid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_vid__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_vid__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_vid__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_vid__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_vid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_vid__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_vid__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_vid__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_vid__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaivlan_group OAIVLANGroup [required]
    */
    virtual void ipamVlanGroupsPartialUpdate(const qint32 &id, const OAIVLANGroup &oaivlan_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlanGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oaivlan_group OAIVLANGroup [required]
    */
    virtual void ipamVlanGroupsUpdate(const qint32 &id, const OAIVLANGroup &oaivlan_group);


    virtual void ipamVlansBulkDelete();

    /**
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansBulkPartialUpdate(const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansBulkUpdate(const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansCreate(const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlansDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  vid QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  available_on_device QString [optional]
    * @param[in]  available_on_virtualmachine QString [optional]
    * @param[in]  l2vpn_id QString [optional]
    * @param[in]  l2vpn QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  vid__n QString [optional]
    * @param[in]  vid__lte QString [optional]
    * @param[in]  vid__lt QString [optional]
    * @param[in]  vid__gte QString [optional]
    * @param[in]  vid__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  l2vpn_id__n QString [optional]
    * @param[in]  l2vpn__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamVlansList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &available_on_device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &available_on_virtualmachine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansPartialUpdate(const qint32 &id, const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlansRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansUpdate(const qint32 &id, const OAIWritableVLAN &oai_writable_vlan);


    virtual void ipamVrfsBulkDelete();

    /**
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsBulkPartialUpdate(const OAIWritableVRF &oai_writable_vrf);

    /**
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsBulkUpdate(const OAIWritableVRF &oai_writable_vrf);

    /**
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsCreate(const OAIWritableVRF &oai_writable_vrf);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVrfsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  rd QString [optional]
    * @param[in]  enforce_unique QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  import_target_id QString [optional]
    * @param[in]  import_target QString [optional]
    * @param[in]  export_target_id QString [optional]
    * @param[in]  export_target QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  rd__n QString [optional]
    * @param[in]  rd__ic QString [optional]
    * @param[in]  rd__nic QString [optional]
    * @param[in]  rd__iew QString [optional]
    * @param[in]  rd__niew QString [optional]
    * @param[in]  rd__isw QString [optional]
    * @param[in]  rd__nisw QString [optional]
    * @param[in]  rd__ie QString [optional]
    * @param[in]  rd__nie QString [optional]
    * @param[in]  rd__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  import_target_id__n QString [optional]
    * @param[in]  import_target__n QString [optional]
    * @param[in]  export_target_id__n QString [optional]
    * @param[in]  export_target__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamVrfsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enforce_unique = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_target__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &export_target__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsPartialUpdate(const qint32 &id, const OAIWritableVRF &oai_writable_vrf);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVrfsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsUpdate(const qint32 &id, const OAIWritableVRF &oai_writable_vrf);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ipamAggregatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesListCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesReadCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsListCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsReadCallback(OAIHttpRequestWorker *worker);
    void ipamAsnsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsListCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsReadCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsListCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsReadCallback(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesListCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesReadCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesAvailableIpsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesAvailableIpsListCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesListCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesReadCallback(OAIHttpRequestWorker *worker);
    void ipamIpRangesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsListCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsReadCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsListCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsReadCallback(OAIHttpRequestWorker *worker);
    void ipamL2vpnsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailableIpsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailableIpsListCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailablePrefixesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailablePrefixesListCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesListCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesReadCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRirsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRirsListCallback(OAIHttpRequestWorker *worker);
    void ipamRirsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsReadCallback(OAIHttpRequestWorker *worker);
    void ipamRirsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRolesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRolesListCallback(OAIHttpRequestWorker *worker);
    void ipamRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesReadCallback(OAIHttpRequestWorker *worker);
    void ipamRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsListCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsReadCallback(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesListCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamServicesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamServicesListCallback(OAIHttpRequestWorker *worker);
    void ipamServicesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesReadCallback(OAIHttpRequestWorker *worker);
    void ipamServicesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsAvailableVlansCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsAvailableVlansListCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsListCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsReadCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVlansBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVlansListCallback(OAIHttpRequestWorker *worker);
    void ipamVlansPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansReadCallback(OAIHttpRequestWorker *worker);
    void ipamVlansUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsListCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsReadCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ipamAggregatesBulkDeleteSignal();
    void ipamAggregatesBulkPartialUpdateSignal(OAIAggregate summary);
    void ipamAggregatesBulkUpdateSignal(OAIAggregate summary);
    void ipamAggregatesCreateSignal(OAIAggregate summary);
    void ipamAggregatesDeleteSignal();
    void ipamAggregatesListSignal(OAIIpam_aggregates_list_200_response summary);
    void ipamAggregatesPartialUpdateSignal(OAIAggregate summary);
    void ipamAggregatesReadSignal(OAIAggregate summary);
    void ipamAggregatesUpdateSignal(OAIAggregate summary);
    void ipamAsnsBulkDeleteSignal();
    void ipamAsnsBulkPartialUpdateSignal(OAIASN summary);
    void ipamAsnsBulkUpdateSignal(OAIASN summary);
    void ipamAsnsCreateSignal(OAIASN summary);
    void ipamAsnsDeleteSignal();
    void ipamAsnsListSignal(OAIIpam_asns_list_200_response summary);
    void ipamAsnsPartialUpdateSignal(OAIASN summary);
    void ipamAsnsReadSignal(OAIASN summary);
    void ipamAsnsUpdateSignal(OAIASN summary);
    void ipamFhrpGroupAssignmentsBulkDeleteSignal();
    void ipamFhrpGroupAssignmentsBulkPartialUpdateSignal(OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsBulkUpdateSignal(OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsCreateSignal(OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsDeleteSignal();
    void ipamFhrpGroupAssignmentsListSignal(OAIIpam_fhrp_group_assignments_list_200_response summary);
    void ipamFhrpGroupAssignmentsPartialUpdateSignal(OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsReadSignal(OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsUpdateSignal(OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupsBulkDeleteSignal();
    void ipamFhrpGroupsBulkPartialUpdateSignal(OAIFHRPGroup summary);
    void ipamFhrpGroupsBulkUpdateSignal(OAIFHRPGroup summary);
    void ipamFhrpGroupsCreateSignal(OAIFHRPGroup summary);
    void ipamFhrpGroupsDeleteSignal();
    void ipamFhrpGroupsListSignal(OAIIpam_fhrp_groups_list_200_response summary);
    void ipamFhrpGroupsPartialUpdateSignal(OAIFHRPGroup summary);
    void ipamFhrpGroupsReadSignal(OAIFHRPGroup summary);
    void ipamFhrpGroupsUpdateSignal(OAIFHRPGroup summary);
    void ipamIpAddressesBulkDeleteSignal();
    void ipamIpAddressesBulkPartialUpdateSignal(OAIIPAddress summary);
    void ipamIpAddressesBulkUpdateSignal(OAIIPAddress summary);
    void ipamIpAddressesCreateSignal(OAIIPAddress summary);
    void ipamIpAddressesDeleteSignal();
    void ipamIpAddressesListSignal(OAIIpam_ip_addresses_list_200_response summary);
    void ipamIpAddressesPartialUpdateSignal(OAIIPAddress summary);
    void ipamIpAddressesReadSignal(OAIIPAddress summary);
    void ipamIpAddressesUpdateSignal(OAIIPAddress summary);
    void ipamIpRangesAvailableIpsCreateSignal(QList<OAIIPAddress> summary);
    void ipamIpRangesAvailableIpsListSignal(QList<OAIAvailableIP> summary);
    void ipamIpRangesBulkDeleteSignal();
    void ipamIpRangesBulkPartialUpdateSignal(OAIIPRange summary);
    void ipamIpRangesBulkUpdateSignal(OAIIPRange summary);
    void ipamIpRangesCreateSignal(OAIIPRange summary);
    void ipamIpRangesDeleteSignal();
    void ipamIpRangesListSignal(OAIIpam_ip_ranges_list_200_response summary);
    void ipamIpRangesPartialUpdateSignal(OAIIPRange summary);
    void ipamIpRangesReadSignal(OAIIPRange summary);
    void ipamIpRangesUpdateSignal(OAIIPRange summary);
    void ipamL2vpnTerminationsBulkDeleteSignal();
    void ipamL2vpnTerminationsBulkPartialUpdateSignal(OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsBulkUpdateSignal(OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsCreateSignal(OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsDeleteSignal();
    void ipamL2vpnTerminationsListSignal(OAIIpam_l2vpn_terminations_list_200_response summary);
    void ipamL2vpnTerminationsPartialUpdateSignal(OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsReadSignal(OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsUpdateSignal(OAIL2VPNTermination summary);
    void ipamL2vpnsBulkDeleteSignal();
    void ipamL2vpnsBulkPartialUpdateSignal(OAIL2VPN summary);
    void ipamL2vpnsBulkUpdateSignal(OAIL2VPN summary);
    void ipamL2vpnsCreateSignal(OAIL2VPN summary);
    void ipamL2vpnsDeleteSignal();
    void ipamL2vpnsListSignal(OAIIpam_l2vpns_list_200_response summary);
    void ipamL2vpnsPartialUpdateSignal(OAIL2VPN summary);
    void ipamL2vpnsReadSignal(OAIL2VPN summary);
    void ipamL2vpnsUpdateSignal(OAIL2VPN summary);
    void ipamPrefixesAvailableIpsCreateSignal(QList<OAIIPAddress> summary);
    void ipamPrefixesAvailableIpsListSignal(QList<OAIAvailableIP> summary);
    void ipamPrefixesAvailablePrefixesCreateSignal(QList<OAIPrefix> summary);
    void ipamPrefixesAvailablePrefixesListSignal(QList<OAIAvailablePrefix> summary);
    void ipamPrefixesBulkDeleteSignal();
    void ipamPrefixesBulkPartialUpdateSignal(OAIPrefix summary);
    void ipamPrefixesBulkUpdateSignal(OAIPrefix summary);
    void ipamPrefixesCreateSignal(OAIPrefix summary);
    void ipamPrefixesDeleteSignal();
    void ipamPrefixesListSignal(OAIIpam_prefixes_list_200_response summary);
    void ipamPrefixesPartialUpdateSignal(OAIPrefix summary);
    void ipamPrefixesReadSignal(OAIPrefix summary);
    void ipamPrefixesUpdateSignal(OAIPrefix summary);
    void ipamRirsBulkDeleteSignal();
    void ipamRirsBulkPartialUpdateSignal(OAIRIR summary);
    void ipamRirsBulkUpdateSignal(OAIRIR summary);
    void ipamRirsCreateSignal(OAIRIR summary);
    void ipamRirsDeleteSignal();
    void ipamRirsListSignal(OAIIpam_rirs_list_200_response summary);
    void ipamRirsPartialUpdateSignal(OAIRIR summary);
    void ipamRirsReadSignal(OAIRIR summary);
    void ipamRirsUpdateSignal(OAIRIR summary);
    void ipamRolesBulkDeleteSignal();
    void ipamRolesBulkPartialUpdateSignal(OAIRole summary);
    void ipamRolesBulkUpdateSignal(OAIRole summary);
    void ipamRolesCreateSignal(OAIRole summary);
    void ipamRolesDeleteSignal();
    void ipamRolesListSignal(OAIIpam_roles_list_200_response summary);
    void ipamRolesPartialUpdateSignal(OAIRole summary);
    void ipamRolesReadSignal(OAIRole summary);
    void ipamRolesUpdateSignal(OAIRole summary);
    void ipamRouteTargetsBulkDeleteSignal();
    void ipamRouteTargetsBulkPartialUpdateSignal(OAIRouteTarget summary);
    void ipamRouteTargetsBulkUpdateSignal(OAIRouteTarget summary);
    void ipamRouteTargetsCreateSignal(OAIRouteTarget summary);
    void ipamRouteTargetsDeleteSignal();
    void ipamRouteTargetsListSignal(OAIIpam_route_targets_list_200_response summary);
    void ipamRouteTargetsPartialUpdateSignal(OAIRouteTarget summary);
    void ipamRouteTargetsReadSignal(OAIRouteTarget summary);
    void ipamRouteTargetsUpdateSignal(OAIRouteTarget summary);
    void ipamServiceTemplatesBulkDeleteSignal();
    void ipamServiceTemplatesBulkPartialUpdateSignal(OAIServiceTemplate summary);
    void ipamServiceTemplatesBulkUpdateSignal(OAIServiceTemplate summary);
    void ipamServiceTemplatesCreateSignal(OAIServiceTemplate summary);
    void ipamServiceTemplatesDeleteSignal();
    void ipamServiceTemplatesListSignal(OAIIpam_service_templates_list_200_response summary);
    void ipamServiceTemplatesPartialUpdateSignal(OAIServiceTemplate summary);
    void ipamServiceTemplatesReadSignal(OAIServiceTemplate summary);
    void ipamServiceTemplatesUpdateSignal(OAIServiceTemplate summary);
    void ipamServicesBulkDeleteSignal();
    void ipamServicesBulkPartialUpdateSignal(OAIService summary);
    void ipamServicesBulkUpdateSignal(OAIService summary);
    void ipamServicesCreateSignal(OAIService summary);
    void ipamServicesDeleteSignal();
    void ipamServicesListSignal(OAIIpam_services_list_200_response summary);
    void ipamServicesPartialUpdateSignal(OAIService summary);
    void ipamServicesReadSignal(OAIService summary);
    void ipamServicesUpdateSignal(OAIService summary);
    void ipamVlanGroupsAvailableVlansCreateSignal(QList<OAIVLAN> summary);
    void ipamVlanGroupsAvailableVlansListSignal(QList<OAIAvailableVLAN> summary);
    void ipamVlanGroupsBulkDeleteSignal();
    void ipamVlanGroupsBulkPartialUpdateSignal(OAIVLANGroup summary);
    void ipamVlanGroupsBulkUpdateSignal(OAIVLANGroup summary);
    void ipamVlanGroupsCreateSignal(OAIVLANGroup summary);
    void ipamVlanGroupsDeleteSignal();
    void ipamVlanGroupsListSignal(OAIIpam_vlan_groups_list_200_response summary);
    void ipamVlanGroupsPartialUpdateSignal(OAIVLANGroup summary);
    void ipamVlanGroupsReadSignal(OAIVLANGroup summary);
    void ipamVlanGroupsUpdateSignal(OAIVLANGroup summary);
    void ipamVlansBulkDeleteSignal();
    void ipamVlansBulkPartialUpdateSignal(OAIVLAN summary);
    void ipamVlansBulkUpdateSignal(OAIVLAN summary);
    void ipamVlansCreateSignal(OAIVLAN summary);
    void ipamVlansDeleteSignal();
    void ipamVlansListSignal(OAIIpam_vlans_list_200_response summary);
    void ipamVlansPartialUpdateSignal(OAIVLAN summary);
    void ipamVlansReadSignal(OAIVLAN summary);
    void ipamVlansUpdateSignal(OAIVLAN summary);
    void ipamVrfsBulkDeleteSignal();
    void ipamVrfsBulkPartialUpdateSignal(OAIVRF summary);
    void ipamVrfsBulkUpdateSignal(OAIVRF summary);
    void ipamVrfsCreateSignal(OAIVRF summary);
    void ipamVrfsDeleteSignal();
    void ipamVrfsListSignal(OAIIpam_vrfs_list_200_response summary);
    void ipamVrfsPartialUpdateSignal(OAIVRF summary);
    void ipamVrfsReadSignal(OAIVRF summary);
    void ipamVrfsUpdateSignal(OAIVRF summary);


    void ipamAggregatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamAggregatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamAggregatesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_aggregates_list_200_response summary);
    void ipamAggregatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesReadSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAsnsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamAsnsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIASN summary);
    void ipamAsnsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIASN summary);
    void ipamAsnsCreateSignalFull(OAIHttpRequestWorker *worker, OAIASN summary);
    void ipamAsnsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamAsnsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_asns_list_200_response summary);
    void ipamAsnsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIASN summary);
    void ipamAsnsReadSignalFull(OAIHttpRequestWorker *worker, OAIASN summary);
    void ipamAsnsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIASN summary);
    void ipamFhrpGroupAssignmentsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupAssignmentsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_fhrp_group_assignments_list_200_response summary);
    void ipamFhrpGroupAssignmentsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsReadSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupAssignmentsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroupAssignment summary);
    void ipamFhrpGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroup summary);
    void ipamFhrpGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroup summary);
    void ipamFhrpGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroup summary);
    void ipamFhrpGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamFhrpGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_fhrp_groups_list_200_response summary);
    void ipamFhrpGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroup summary);
    void ipamFhrpGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroup summary);
    void ipamFhrpGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFHRPGroup summary);
    void ipamIpAddressesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamIpAddressesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesCreateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamIpAddressesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_ip_addresses_list_200_response summary);
    void ipamIpAddressesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesReadSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpRangesAvailableIpsCreateSignalFull(OAIHttpRequestWorker *worker, QList<OAIIPAddress> summary);
    void ipamIpRangesAvailableIpsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailableIP> summary);
    void ipamIpRangesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamIpRangesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPRange summary);
    void ipamIpRangesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPRange summary);
    void ipamIpRangesCreateSignalFull(OAIHttpRequestWorker *worker, OAIIPRange summary);
    void ipamIpRangesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamIpRangesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_ip_ranges_list_200_response summary);
    void ipamIpRangesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPRange summary);
    void ipamIpRangesReadSignalFull(OAIHttpRequestWorker *worker, OAIIPRange summary);
    void ipamIpRangesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPRange summary);
    void ipamL2vpnTerminationsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamL2vpnTerminationsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_l2vpn_terminations_list_200_response summary);
    void ipamL2vpnTerminationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsReadSignalFull(OAIHttpRequestWorker *worker, OAIL2VPNTermination summary);
    void ipamL2vpnTerminationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPNTermination summary);
    void ipamL2vpnsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamL2vpnsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPN summary);
    void ipamL2vpnsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPN summary);
    void ipamL2vpnsCreateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPN summary);
    void ipamL2vpnsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamL2vpnsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_l2vpns_list_200_response summary);
    void ipamL2vpnsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPN summary);
    void ipamL2vpnsReadSignalFull(OAIHttpRequestWorker *worker, OAIL2VPN summary);
    void ipamL2vpnsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIL2VPN summary);
    void ipamPrefixesAvailableIpsCreateSignalFull(OAIHttpRequestWorker *worker, QList<OAIIPAddress> summary);
    void ipamPrefixesAvailableIpsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailableIP> summary);
    void ipamPrefixesAvailablePrefixesCreateSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrefix> summary);
    void ipamPrefixesAvailablePrefixesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailablePrefix> summary);
    void ipamPrefixesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamPrefixesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamPrefixesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_prefixes_list_200_response summary);
    void ipamPrefixesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesReadSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamRirsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRirsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRirsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_rirs_list_200_response summary);
    void ipamRirsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsReadSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRolesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRolesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRolesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_roles_list_200_response summary);
    void ipamRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRouteTargetsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteTarget summary);
    void ipamRouteTargetsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteTarget summary);
    void ipamRouteTargetsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRouteTarget summary);
    void ipamRouteTargetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRouteTargetsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_route_targets_list_200_response summary);
    void ipamRouteTargetsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteTarget summary);
    void ipamRouteTargetsReadSignalFull(OAIHttpRequestWorker *worker, OAIRouteTarget summary);
    void ipamRouteTargetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRouteTarget summary);
    void ipamServiceTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceTemplate summary);
    void ipamServiceTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceTemplate summary);
    void ipamServiceTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIServiceTemplate summary);
    void ipamServiceTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamServiceTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_service_templates_list_200_response summary);
    void ipamServiceTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceTemplate summary);
    void ipamServiceTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIServiceTemplate summary);
    void ipamServiceTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceTemplate summary);
    void ipamServicesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamServicesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesCreateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamServicesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_services_list_200_response summary);
    void ipamServicesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesReadSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamVlanGroupsAvailableVlansCreateSignalFull(OAIHttpRequestWorker *worker, QList<OAIVLAN> summary);
    void ipamVlanGroupsAvailableVlansListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailableVLAN> summary);
    void ipamVlanGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_vlan_groups_list_200_response summary);
    void ipamVlanGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlansBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVlansBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansCreateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVlansListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_vlans_list_200_response summary);
    void ipamVlansPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansReadSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVrfsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVrfsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsCreateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVrfsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_vrfs_list_200_response summary);
    void ipamVrfsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsReadSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);

    Q_DECL_DEPRECATED_X("Use ipamAggregatesBulkDeleteSignalError() instead")
    void ipamAggregatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesBulkPartialUpdateSignalError() instead")
    void ipamAggregatesBulkPartialUpdateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesBulkPartialUpdateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesBulkUpdateSignalError() instead")
    void ipamAggregatesBulkUpdateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesBulkUpdateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesCreateSignalError() instead")
    void ipamAggregatesCreateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesCreateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesDeleteSignalError() instead")
    void ipamAggregatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesListSignalError() instead")
    void ipamAggregatesListSignalE(OAIIpam_aggregates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesListSignalError(OAIIpam_aggregates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesPartialUpdateSignalError() instead")
    void ipamAggregatesPartialUpdateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesPartialUpdateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesReadSignalError() instead")
    void ipamAggregatesReadSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesReadSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesUpdateSignalError() instead")
    void ipamAggregatesUpdateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesUpdateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsBulkDeleteSignalError() instead")
    void ipamAsnsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsBulkPartialUpdateSignalError() instead")
    void ipamAsnsBulkPartialUpdateSignalE(OAIASN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsBulkPartialUpdateSignalError(OAIASN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsBulkUpdateSignalError() instead")
    void ipamAsnsBulkUpdateSignalE(OAIASN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsBulkUpdateSignalError(OAIASN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsCreateSignalError() instead")
    void ipamAsnsCreateSignalE(OAIASN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsCreateSignalError(OAIASN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsDeleteSignalError() instead")
    void ipamAsnsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsListSignalError() instead")
    void ipamAsnsListSignalE(OAIIpam_asns_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsListSignalError(OAIIpam_asns_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsPartialUpdateSignalError() instead")
    void ipamAsnsPartialUpdateSignalE(OAIASN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsPartialUpdateSignalError(OAIASN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsReadSignalError() instead")
    void ipamAsnsReadSignalE(OAIASN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsReadSignalError(OAIASN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsUpdateSignalError() instead")
    void ipamAsnsUpdateSignalE(OAIASN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsUpdateSignalError(OAIASN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsBulkDeleteSignalError() instead")
    void ipamFhrpGroupAssignmentsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsBulkPartialUpdateSignalError() instead")
    void ipamFhrpGroupAssignmentsBulkPartialUpdateSignalE(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsBulkPartialUpdateSignalError(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsBulkUpdateSignalError() instead")
    void ipamFhrpGroupAssignmentsBulkUpdateSignalE(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsBulkUpdateSignalError(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsCreateSignalError() instead")
    void ipamFhrpGroupAssignmentsCreateSignalE(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsCreateSignalError(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsDeleteSignalError() instead")
    void ipamFhrpGroupAssignmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsListSignalError() instead")
    void ipamFhrpGroupAssignmentsListSignalE(OAIIpam_fhrp_group_assignments_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsListSignalError(OAIIpam_fhrp_group_assignments_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsPartialUpdateSignalError() instead")
    void ipamFhrpGroupAssignmentsPartialUpdateSignalE(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsPartialUpdateSignalError(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsReadSignalError() instead")
    void ipamFhrpGroupAssignmentsReadSignalE(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsReadSignalError(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsUpdateSignalError() instead")
    void ipamFhrpGroupAssignmentsUpdateSignalE(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsUpdateSignalError(OAIFHRPGroupAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsBulkDeleteSignalError() instead")
    void ipamFhrpGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsBulkPartialUpdateSignalError() instead")
    void ipamFhrpGroupsBulkPartialUpdateSignalE(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsBulkPartialUpdateSignalError(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsBulkUpdateSignalError() instead")
    void ipamFhrpGroupsBulkUpdateSignalE(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsBulkUpdateSignalError(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsCreateSignalError() instead")
    void ipamFhrpGroupsCreateSignalE(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsCreateSignalError(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsDeleteSignalError() instead")
    void ipamFhrpGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsListSignalError() instead")
    void ipamFhrpGroupsListSignalE(OAIIpam_fhrp_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsListSignalError(OAIIpam_fhrp_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsPartialUpdateSignalError() instead")
    void ipamFhrpGroupsPartialUpdateSignalE(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsPartialUpdateSignalError(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsReadSignalError() instead")
    void ipamFhrpGroupsReadSignalE(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsReadSignalError(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsUpdateSignalError() instead")
    void ipamFhrpGroupsUpdateSignalE(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsUpdateSignalError(OAIFHRPGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesBulkDeleteSignalError() instead")
    void ipamIpAddressesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesBulkPartialUpdateSignalError() instead")
    void ipamIpAddressesBulkPartialUpdateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesBulkPartialUpdateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesBulkUpdateSignalError() instead")
    void ipamIpAddressesBulkUpdateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesBulkUpdateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesCreateSignalError() instead")
    void ipamIpAddressesCreateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesCreateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesDeleteSignalError() instead")
    void ipamIpAddressesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesListSignalError() instead")
    void ipamIpAddressesListSignalE(OAIIpam_ip_addresses_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesListSignalError(OAIIpam_ip_addresses_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesPartialUpdateSignalError() instead")
    void ipamIpAddressesPartialUpdateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesPartialUpdateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesReadSignalError() instead")
    void ipamIpAddressesReadSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesReadSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesUpdateSignalError() instead")
    void ipamIpAddressesUpdateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesUpdateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesAvailableIpsCreateSignalError() instead")
    void ipamIpRangesAvailableIpsCreateSignalE(QList<OAIIPAddress> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesAvailableIpsCreateSignalError(QList<OAIIPAddress> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesAvailableIpsListSignalError() instead")
    void ipamIpRangesAvailableIpsListSignalE(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesAvailableIpsListSignalError(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesBulkDeleteSignalError() instead")
    void ipamIpRangesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesBulkPartialUpdateSignalError() instead")
    void ipamIpRangesBulkPartialUpdateSignalE(OAIIPRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesBulkPartialUpdateSignalError(OAIIPRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesBulkUpdateSignalError() instead")
    void ipamIpRangesBulkUpdateSignalE(OAIIPRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesBulkUpdateSignalError(OAIIPRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesCreateSignalError() instead")
    void ipamIpRangesCreateSignalE(OAIIPRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesCreateSignalError(OAIIPRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesDeleteSignalError() instead")
    void ipamIpRangesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesListSignalError() instead")
    void ipamIpRangesListSignalE(OAIIpam_ip_ranges_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesListSignalError(OAIIpam_ip_ranges_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesPartialUpdateSignalError() instead")
    void ipamIpRangesPartialUpdateSignalE(OAIIPRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesPartialUpdateSignalError(OAIIPRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesReadSignalError() instead")
    void ipamIpRangesReadSignalE(OAIIPRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesReadSignalError(OAIIPRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesUpdateSignalError() instead")
    void ipamIpRangesUpdateSignalE(OAIIPRange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesUpdateSignalError(OAIIPRange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsBulkDeleteSignalError() instead")
    void ipamL2vpnTerminationsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsBulkPartialUpdateSignalError() instead")
    void ipamL2vpnTerminationsBulkPartialUpdateSignalE(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsBulkPartialUpdateSignalError(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsBulkUpdateSignalError() instead")
    void ipamL2vpnTerminationsBulkUpdateSignalE(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsBulkUpdateSignalError(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsCreateSignalError() instead")
    void ipamL2vpnTerminationsCreateSignalE(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsCreateSignalError(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsDeleteSignalError() instead")
    void ipamL2vpnTerminationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsListSignalError() instead")
    void ipamL2vpnTerminationsListSignalE(OAIIpam_l2vpn_terminations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsListSignalError(OAIIpam_l2vpn_terminations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsPartialUpdateSignalError() instead")
    void ipamL2vpnTerminationsPartialUpdateSignalE(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsPartialUpdateSignalError(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsReadSignalError() instead")
    void ipamL2vpnTerminationsReadSignalE(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsReadSignalError(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsUpdateSignalError() instead")
    void ipamL2vpnTerminationsUpdateSignalE(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsUpdateSignalError(OAIL2VPNTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsBulkDeleteSignalError() instead")
    void ipamL2vpnsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsBulkPartialUpdateSignalError() instead")
    void ipamL2vpnsBulkPartialUpdateSignalE(OAIL2VPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsBulkPartialUpdateSignalError(OAIL2VPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsBulkUpdateSignalError() instead")
    void ipamL2vpnsBulkUpdateSignalE(OAIL2VPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsBulkUpdateSignalError(OAIL2VPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsCreateSignalError() instead")
    void ipamL2vpnsCreateSignalE(OAIL2VPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsCreateSignalError(OAIL2VPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsDeleteSignalError() instead")
    void ipamL2vpnsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsListSignalError() instead")
    void ipamL2vpnsListSignalE(OAIIpam_l2vpns_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsListSignalError(OAIIpam_l2vpns_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsPartialUpdateSignalError() instead")
    void ipamL2vpnsPartialUpdateSignalE(OAIL2VPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsPartialUpdateSignalError(OAIL2VPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsReadSignalError() instead")
    void ipamL2vpnsReadSignalE(OAIL2VPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsReadSignalError(OAIL2VPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsUpdateSignalError() instead")
    void ipamL2vpnsUpdateSignalE(OAIL2VPN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsUpdateSignalError(OAIL2VPN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsCreateSignalError() instead")
    void ipamPrefixesAvailableIpsCreateSignalE(QList<OAIIPAddress> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsCreateSignalError(QList<OAIIPAddress> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsListSignalError() instead")
    void ipamPrefixesAvailableIpsListSignalE(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsListSignalError(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesCreateSignalError() instead")
    void ipamPrefixesAvailablePrefixesCreateSignalE(QList<OAIPrefix> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesCreateSignalError(QList<OAIPrefix> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesListSignalError() instead")
    void ipamPrefixesAvailablePrefixesListSignalE(QList<OAIAvailablePrefix> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesListSignalError(QList<OAIAvailablePrefix> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesBulkDeleteSignalError() instead")
    void ipamPrefixesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesBulkPartialUpdateSignalError() instead")
    void ipamPrefixesBulkPartialUpdateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesBulkPartialUpdateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesBulkUpdateSignalError() instead")
    void ipamPrefixesBulkUpdateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesBulkUpdateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesCreateSignalError() instead")
    void ipamPrefixesCreateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesCreateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesDeleteSignalError() instead")
    void ipamPrefixesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesListSignalError() instead")
    void ipamPrefixesListSignalE(OAIIpam_prefixes_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesListSignalError(OAIIpam_prefixes_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesPartialUpdateSignalError() instead")
    void ipamPrefixesPartialUpdateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesPartialUpdateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesReadSignalError() instead")
    void ipamPrefixesReadSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesReadSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesUpdateSignalError() instead")
    void ipamPrefixesUpdateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesUpdateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsBulkDeleteSignalError() instead")
    void ipamRirsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsBulkPartialUpdateSignalError() instead")
    void ipamRirsBulkPartialUpdateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsBulkPartialUpdateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsBulkUpdateSignalError() instead")
    void ipamRirsBulkUpdateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsBulkUpdateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsCreateSignalError() instead")
    void ipamRirsCreateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsCreateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsDeleteSignalError() instead")
    void ipamRirsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsListSignalError() instead")
    void ipamRirsListSignalE(OAIIpam_rirs_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsListSignalError(OAIIpam_rirs_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsPartialUpdateSignalError() instead")
    void ipamRirsPartialUpdateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsPartialUpdateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsReadSignalError() instead")
    void ipamRirsReadSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsReadSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsUpdateSignalError() instead")
    void ipamRirsUpdateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsUpdateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesBulkDeleteSignalError() instead")
    void ipamRolesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesBulkPartialUpdateSignalError() instead")
    void ipamRolesBulkPartialUpdateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesBulkPartialUpdateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesBulkUpdateSignalError() instead")
    void ipamRolesBulkUpdateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesBulkUpdateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesCreateSignalError() instead")
    void ipamRolesCreateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesCreateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesDeleteSignalError() instead")
    void ipamRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesListSignalError() instead")
    void ipamRolesListSignalE(OAIIpam_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesListSignalError(OAIIpam_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesPartialUpdateSignalError() instead")
    void ipamRolesPartialUpdateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesPartialUpdateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesReadSignalError() instead")
    void ipamRolesReadSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesReadSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesUpdateSignalError() instead")
    void ipamRolesUpdateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesUpdateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsBulkDeleteSignalError() instead")
    void ipamRouteTargetsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsBulkPartialUpdateSignalError() instead")
    void ipamRouteTargetsBulkPartialUpdateSignalE(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsBulkPartialUpdateSignalError(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsBulkUpdateSignalError() instead")
    void ipamRouteTargetsBulkUpdateSignalE(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsBulkUpdateSignalError(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsCreateSignalError() instead")
    void ipamRouteTargetsCreateSignalE(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsCreateSignalError(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsDeleteSignalError() instead")
    void ipamRouteTargetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsListSignalError() instead")
    void ipamRouteTargetsListSignalE(OAIIpam_route_targets_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsListSignalError(OAIIpam_route_targets_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsPartialUpdateSignalError() instead")
    void ipamRouteTargetsPartialUpdateSignalE(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsPartialUpdateSignalError(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsReadSignalError() instead")
    void ipamRouteTargetsReadSignalE(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsReadSignalError(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsUpdateSignalError() instead")
    void ipamRouteTargetsUpdateSignalE(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsUpdateSignalError(OAIRouteTarget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesBulkDeleteSignalError() instead")
    void ipamServiceTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesBulkPartialUpdateSignalError() instead")
    void ipamServiceTemplatesBulkPartialUpdateSignalE(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesBulkPartialUpdateSignalError(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesBulkUpdateSignalError() instead")
    void ipamServiceTemplatesBulkUpdateSignalE(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesBulkUpdateSignalError(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesCreateSignalError() instead")
    void ipamServiceTemplatesCreateSignalE(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesCreateSignalError(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesDeleteSignalError() instead")
    void ipamServiceTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesListSignalError() instead")
    void ipamServiceTemplatesListSignalE(OAIIpam_service_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesListSignalError(OAIIpam_service_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesPartialUpdateSignalError() instead")
    void ipamServiceTemplatesPartialUpdateSignalE(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesPartialUpdateSignalError(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesReadSignalError() instead")
    void ipamServiceTemplatesReadSignalE(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesReadSignalError(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesUpdateSignalError() instead")
    void ipamServiceTemplatesUpdateSignalE(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesUpdateSignalError(OAIServiceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesBulkDeleteSignalError() instead")
    void ipamServicesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesBulkPartialUpdateSignalError() instead")
    void ipamServicesBulkPartialUpdateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesBulkPartialUpdateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesBulkUpdateSignalError() instead")
    void ipamServicesBulkUpdateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesBulkUpdateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesCreateSignalError() instead")
    void ipamServicesCreateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesCreateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesDeleteSignalError() instead")
    void ipamServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesListSignalError() instead")
    void ipamServicesListSignalE(OAIIpam_services_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesListSignalError(OAIIpam_services_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesPartialUpdateSignalError() instead")
    void ipamServicesPartialUpdateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesPartialUpdateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesReadSignalError() instead")
    void ipamServicesReadSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesReadSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesUpdateSignalError() instead")
    void ipamServicesUpdateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesUpdateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsAvailableVlansCreateSignalError() instead")
    void ipamVlanGroupsAvailableVlansCreateSignalE(QList<OAIVLAN> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsAvailableVlansCreateSignalError(QList<OAIVLAN> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsAvailableVlansListSignalError() instead")
    void ipamVlanGroupsAvailableVlansListSignalE(QList<OAIAvailableVLAN> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsAvailableVlansListSignalError(QList<OAIAvailableVLAN> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsBulkDeleteSignalError() instead")
    void ipamVlanGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsBulkPartialUpdateSignalError() instead")
    void ipamVlanGroupsBulkPartialUpdateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsBulkPartialUpdateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsBulkUpdateSignalError() instead")
    void ipamVlanGroupsBulkUpdateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsBulkUpdateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsCreateSignalError() instead")
    void ipamVlanGroupsCreateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsCreateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsDeleteSignalError() instead")
    void ipamVlanGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsListSignalError() instead")
    void ipamVlanGroupsListSignalE(OAIIpam_vlan_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsListSignalError(OAIIpam_vlan_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsPartialUpdateSignalError() instead")
    void ipamVlanGroupsPartialUpdateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsPartialUpdateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsReadSignalError() instead")
    void ipamVlanGroupsReadSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsReadSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsUpdateSignalError() instead")
    void ipamVlanGroupsUpdateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsUpdateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansBulkDeleteSignalError() instead")
    void ipamVlansBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansBulkPartialUpdateSignalError() instead")
    void ipamVlansBulkPartialUpdateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansBulkPartialUpdateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansBulkUpdateSignalError() instead")
    void ipamVlansBulkUpdateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansBulkUpdateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansCreateSignalError() instead")
    void ipamVlansCreateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansCreateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansDeleteSignalError() instead")
    void ipamVlansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansListSignalError() instead")
    void ipamVlansListSignalE(OAIIpam_vlans_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansListSignalError(OAIIpam_vlans_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansPartialUpdateSignalError() instead")
    void ipamVlansPartialUpdateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansPartialUpdateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansReadSignalError() instead")
    void ipamVlansReadSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansReadSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansUpdateSignalError() instead")
    void ipamVlansUpdateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansUpdateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsBulkDeleteSignalError() instead")
    void ipamVrfsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsBulkPartialUpdateSignalError() instead")
    void ipamVrfsBulkPartialUpdateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsBulkPartialUpdateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsBulkUpdateSignalError() instead")
    void ipamVrfsBulkUpdateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsBulkUpdateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsCreateSignalError() instead")
    void ipamVrfsCreateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsCreateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsDeleteSignalError() instead")
    void ipamVrfsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsListSignalError() instead")
    void ipamVrfsListSignalE(OAIIpam_vrfs_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsListSignalError(OAIIpam_vrfs_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsPartialUpdateSignalError() instead")
    void ipamVrfsPartialUpdateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsPartialUpdateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsReadSignalError() instead")
    void ipamVrfsReadSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsReadSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsUpdateSignalError() instead")
    void ipamVrfsUpdateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsUpdateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ipamAggregatesBulkDeleteSignalErrorFull() instead")
    void ipamAggregatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesBulkPartialUpdateSignalErrorFull() instead")
    void ipamAggregatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesBulkUpdateSignalErrorFull() instead")
    void ipamAggregatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesCreateSignalErrorFull() instead")
    void ipamAggregatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesDeleteSignalErrorFull() instead")
    void ipamAggregatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesListSignalErrorFull() instead")
    void ipamAggregatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesPartialUpdateSignalErrorFull() instead")
    void ipamAggregatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesReadSignalErrorFull() instead")
    void ipamAggregatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesUpdateSignalErrorFull() instead")
    void ipamAggregatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsBulkDeleteSignalErrorFull() instead")
    void ipamAsnsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsBulkPartialUpdateSignalErrorFull() instead")
    void ipamAsnsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsBulkUpdateSignalErrorFull() instead")
    void ipamAsnsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsCreateSignalErrorFull() instead")
    void ipamAsnsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsDeleteSignalErrorFull() instead")
    void ipamAsnsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsListSignalErrorFull() instead")
    void ipamAsnsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsPartialUpdateSignalErrorFull() instead")
    void ipamAsnsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsReadSignalErrorFull() instead")
    void ipamAsnsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAsnsUpdateSignalErrorFull() instead")
    void ipamAsnsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAsnsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsBulkDeleteSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsBulkPartialUpdateSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsBulkUpdateSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsCreateSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsDeleteSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsListSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsPartialUpdateSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsReadSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupAssignmentsUpdateSignalErrorFull() instead")
    void ipamFhrpGroupAssignmentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupAssignmentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsBulkDeleteSignalErrorFull() instead")
    void ipamFhrpGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsBulkPartialUpdateSignalErrorFull() instead")
    void ipamFhrpGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsBulkUpdateSignalErrorFull() instead")
    void ipamFhrpGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsCreateSignalErrorFull() instead")
    void ipamFhrpGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsDeleteSignalErrorFull() instead")
    void ipamFhrpGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsListSignalErrorFull() instead")
    void ipamFhrpGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsPartialUpdateSignalErrorFull() instead")
    void ipamFhrpGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsReadSignalErrorFull() instead")
    void ipamFhrpGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamFhrpGroupsUpdateSignalErrorFull() instead")
    void ipamFhrpGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamFhrpGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesBulkDeleteSignalErrorFull() instead")
    void ipamIpAddressesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesBulkPartialUpdateSignalErrorFull() instead")
    void ipamIpAddressesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesBulkUpdateSignalErrorFull() instead")
    void ipamIpAddressesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesCreateSignalErrorFull() instead")
    void ipamIpAddressesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesDeleteSignalErrorFull() instead")
    void ipamIpAddressesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesListSignalErrorFull() instead")
    void ipamIpAddressesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesPartialUpdateSignalErrorFull() instead")
    void ipamIpAddressesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesReadSignalErrorFull() instead")
    void ipamIpAddressesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesUpdateSignalErrorFull() instead")
    void ipamIpAddressesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesAvailableIpsCreateSignalErrorFull() instead")
    void ipamIpRangesAvailableIpsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesAvailableIpsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesAvailableIpsListSignalErrorFull() instead")
    void ipamIpRangesAvailableIpsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesAvailableIpsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesBulkDeleteSignalErrorFull() instead")
    void ipamIpRangesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesBulkPartialUpdateSignalErrorFull() instead")
    void ipamIpRangesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesBulkUpdateSignalErrorFull() instead")
    void ipamIpRangesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesCreateSignalErrorFull() instead")
    void ipamIpRangesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesDeleteSignalErrorFull() instead")
    void ipamIpRangesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesListSignalErrorFull() instead")
    void ipamIpRangesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesPartialUpdateSignalErrorFull() instead")
    void ipamIpRangesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesReadSignalErrorFull() instead")
    void ipamIpRangesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpRangesUpdateSignalErrorFull() instead")
    void ipamIpRangesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpRangesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsBulkDeleteSignalErrorFull() instead")
    void ipamL2vpnTerminationsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsBulkPartialUpdateSignalErrorFull() instead")
    void ipamL2vpnTerminationsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsBulkUpdateSignalErrorFull() instead")
    void ipamL2vpnTerminationsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsCreateSignalErrorFull() instead")
    void ipamL2vpnTerminationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsDeleteSignalErrorFull() instead")
    void ipamL2vpnTerminationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsListSignalErrorFull() instead")
    void ipamL2vpnTerminationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsPartialUpdateSignalErrorFull() instead")
    void ipamL2vpnTerminationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsReadSignalErrorFull() instead")
    void ipamL2vpnTerminationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnTerminationsUpdateSignalErrorFull() instead")
    void ipamL2vpnTerminationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnTerminationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsBulkDeleteSignalErrorFull() instead")
    void ipamL2vpnsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsBulkPartialUpdateSignalErrorFull() instead")
    void ipamL2vpnsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsBulkUpdateSignalErrorFull() instead")
    void ipamL2vpnsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsCreateSignalErrorFull() instead")
    void ipamL2vpnsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsDeleteSignalErrorFull() instead")
    void ipamL2vpnsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsListSignalErrorFull() instead")
    void ipamL2vpnsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsPartialUpdateSignalErrorFull() instead")
    void ipamL2vpnsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsReadSignalErrorFull() instead")
    void ipamL2vpnsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamL2vpnsUpdateSignalErrorFull() instead")
    void ipamL2vpnsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamL2vpnsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsCreateSignalErrorFull() instead")
    void ipamPrefixesAvailableIpsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsListSignalErrorFull() instead")
    void ipamPrefixesAvailableIpsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesCreateSignalErrorFull() instead")
    void ipamPrefixesAvailablePrefixesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesListSignalErrorFull() instead")
    void ipamPrefixesAvailablePrefixesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesBulkDeleteSignalErrorFull() instead")
    void ipamPrefixesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesBulkPartialUpdateSignalErrorFull() instead")
    void ipamPrefixesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesBulkUpdateSignalErrorFull() instead")
    void ipamPrefixesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesCreateSignalErrorFull() instead")
    void ipamPrefixesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesDeleteSignalErrorFull() instead")
    void ipamPrefixesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesListSignalErrorFull() instead")
    void ipamPrefixesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesPartialUpdateSignalErrorFull() instead")
    void ipamPrefixesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesReadSignalErrorFull() instead")
    void ipamPrefixesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesUpdateSignalErrorFull() instead")
    void ipamPrefixesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsBulkDeleteSignalErrorFull() instead")
    void ipamRirsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsBulkPartialUpdateSignalErrorFull() instead")
    void ipamRirsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsBulkUpdateSignalErrorFull() instead")
    void ipamRirsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsCreateSignalErrorFull() instead")
    void ipamRirsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsDeleteSignalErrorFull() instead")
    void ipamRirsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsListSignalErrorFull() instead")
    void ipamRirsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsPartialUpdateSignalErrorFull() instead")
    void ipamRirsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsReadSignalErrorFull() instead")
    void ipamRirsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsUpdateSignalErrorFull() instead")
    void ipamRirsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesBulkDeleteSignalErrorFull() instead")
    void ipamRolesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesBulkPartialUpdateSignalErrorFull() instead")
    void ipamRolesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesBulkUpdateSignalErrorFull() instead")
    void ipamRolesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesCreateSignalErrorFull() instead")
    void ipamRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesDeleteSignalErrorFull() instead")
    void ipamRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesListSignalErrorFull() instead")
    void ipamRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesPartialUpdateSignalErrorFull() instead")
    void ipamRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesReadSignalErrorFull() instead")
    void ipamRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesUpdateSignalErrorFull() instead")
    void ipamRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsBulkDeleteSignalErrorFull() instead")
    void ipamRouteTargetsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsBulkPartialUpdateSignalErrorFull() instead")
    void ipamRouteTargetsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsBulkUpdateSignalErrorFull() instead")
    void ipamRouteTargetsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsCreateSignalErrorFull() instead")
    void ipamRouteTargetsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsDeleteSignalErrorFull() instead")
    void ipamRouteTargetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsListSignalErrorFull() instead")
    void ipamRouteTargetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsPartialUpdateSignalErrorFull() instead")
    void ipamRouteTargetsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsReadSignalErrorFull() instead")
    void ipamRouteTargetsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRouteTargetsUpdateSignalErrorFull() instead")
    void ipamRouteTargetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRouteTargetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesBulkDeleteSignalErrorFull() instead")
    void ipamServiceTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void ipamServiceTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesBulkUpdateSignalErrorFull() instead")
    void ipamServiceTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesCreateSignalErrorFull() instead")
    void ipamServiceTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesDeleteSignalErrorFull() instead")
    void ipamServiceTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesListSignalErrorFull() instead")
    void ipamServiceTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesPartialUpdateSignalErrorFull() instead")
    void ipamServiceTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesReadSignalErrorFull() instead")
    void ipamServiceTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServiceTemplatesUpdateSignalErrorFull() instead")
    void ipamServiceTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServiceTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesBulkDeleteSignalErrorFull() instead")
    void ipamServicesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesBulkPartialUpdateSignalErrorFull() instead")
    void ipamServicesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesBulkUpdateSignalErrorFull() instead")
    void ipamServicesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesCreateSignalErrorFull() instead")
    void ipamServicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesDeleteSignalErrorFull() instead")
    void ipamServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesListSignalErrorFull() instead")
    void ipamServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesPartialUpdateSignalErrorFull() instead")
    void ipamServicesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesReadSignalErrorFull() instead")
    void ipamServicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesUpdateSignalErrorFull() instead")
    void ipamServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsAvailableVlansCreateSignalErrorFull() instead")
    void ipamVlanGroupsAvailableVlansCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsAvailableVlansCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsAvailableVlansListSignalErrorFull() instead")
    void ipamVlanGroupsAvailableVlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsAvailableVlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsBulkDeleteSignalErrorFull() instead")
    void ipamVlanGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsBulkPartialUpdateSignalErrorFull() instead")
    void ipamVlanGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsBulkUpdateSignalErrorFull() instead")
    void ipamVlanGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsCreateSignalErrorFull() instead")
    void ipamVlanGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsDeleteSignalErrorFull() instead")
    void ipamVlanGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsListSignalErrorFull() instead")
    void ipamVlanGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsPartialUpdateSignalErrorFull() instead")
    void ipamVlanGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsReadSignalErrorFull() instead")
    void ipamVlanGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsUpdateSignalErrorFull() instead")
    void ipamVlanGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansBulkDeleteSignalErrorFull() instead")
    void ipamVlansBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansBulkPartialUpdateSignalErrorFull() instead")
    void ipamVlansBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansBulkUpdateSignalErrorFull() instead")
    void ipamVlansBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansCreateSignalErrorFull() instead")
    void ipamVlansCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansDeleteSignalErrorFull() instead")
    void ipamVlansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansListSignalErrorFull() instead")
    void ipamVlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansPartialUpdateSignalErrorFull() instead")
    void ipamVlansPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansReadSignalErrorFull() instead")
    void ipamVlansReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansUpdateSignalErrorFull() instead")
    void ipamVlansUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsBulkDeleteSignalErrorFull() instead")
    void ipamVrfsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsBulkPartialUpdateSignalErrorFull() instead")
    void ipamVrfsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsBulkUpdateSignalErrorFull() instead")
    void ipamVrfsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsCreateSignalErrorFull() instead")
    void ipamVrfsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsDeleteSignalErrorFull() instead")
    void ipamVrfsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsListSignalErrorFull() instead")
    void ipamVrfsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsPartialUpdateSignalErrorFull() instead")
    void ipamVrfsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsReadSignalErrorFull() instead")
    void ipamVrfsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsUpdateSignalErrorFull() instead")
    void ipamVrfsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
