/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWirelessLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWirelessLink::OAIWirelessLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWirelessLink::OAIWirelessLink() {
    this->initializeModel();
}

OAIWirelessLink::~OAIWirelessLink() {}

void OAIWirelessLink::initializeModel() {

    m_auth_cipher_isSet = false;
    m_auth_cipher_isValid = false;

    m_auth_psk_isSet = false;
    m_auth_psk_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_a_isSet = false;
    m_interface_a_isValid = false;

    m_interface_b_isSet = false;
    m_interface_b_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWirelessLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWirelessLink::fromJsonObject(QJsonObject json) {

    m_auth_cipher_isValid = ::OpenAPI::fromJsonValue(m_auth_cipher, json[QString("auth_cipher")]);
    m_auth_cipher_isSet = !json[QString("auth_cipher")].isNull() && m_auth_cipher_isValid;

    m_auth_psk_isValid = ::OpenAPI::fromJsonValue(m_auth_psk, json[QString("auth_psk")]);
    m_auth_psk_isSet = !json[QString("auth_psk")].isNull() && m_auth_psk_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("auth_type")]);
    m_auth_type_isSet = !json[QString("auth_type")].isNull() && m_auth_type_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_a_isValid = ::OpenAPI::fromJsonValue(m_interface_a, json[QString("interface_a")]);
    m_interface_a_isSet = !json[QString("interface_a")].isNull() && m_interface_a_isValid;

    m_interface_b_isValid = ::OpenAPI::fromJsonValue(m_interface_b, json[QString("interface_b")]);
    m_interface_b_isSet = !json[QString("interface_b")].isNull() && m_interface_b_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWirelessLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWirelessLink::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_cipher.isSet()) {
        obj.insert(QString("auth_cipher"), ::OpenAPI::toJsonValue(m_auth_cipher));
    }
    if (m_auth_psk_isSet) {
        obj.insert(QString("auth_psk"), ::OpenAPI::toJsonValue(m_auth_psk));
    }
    if (m_auth_type.isSet()) {
        obj.insert(QString("auth_type"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_a.isSet()) {
        obj.insert(QString("interface_a"), ::OpenAPI::toJsonValue(m_interface_a));
    }
    if (m_interface_b.isSet()) {
        obj.insert(QString("interface_b"), ::OpenAPI::toJsonValue(m_interface_b));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_ssid_isSet) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant.isSet()) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAuth_cipher OAIWirelessLink::getAuthCipher() const {
    return m_auth_cipher;
}
void OAIWirelessLink::setAuthCipher(const OAIAuth_cipher &auth_cipher) {
    m_auth_cipher = auth_cipher;
    m_auth_cipher_isSet = true;
}

bool OAIWirelessLink::is_auth_cipher_Set() const{
    return m_auth_cipher_isSet;
}

bool OAIWirelessLink::is_auth_cipher_Valid() const{
    return m_auth_cipher_isValid;
}

QString OAIWirelessLink::getAuthPsk() const {
    return m_auth_psk;
}
void OAIWirelessLink::setAuthPsk(const QString &auth_psk) {
    m_auth_psk = auth_psk;
    m_auth_psk_isSet = true;
}

bool OAIWirelessLink::is_auth_psk_Set() const{
    return m_auth_psk_isSet;
}

bool OAIWirelessLink::is_auth_psk_Valid() const{
    return m_auth_psk_isValid;
}

OAIAuth_type OAIWirelessLink::getAuthType() const {
    return m_auth_type;
}
void OAIWirelessLink::setAuthType(const OAIAuth_type &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIWirelessLink::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIWirelessLink::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIWirelessLink::getComments() const {
    return m_comments;
}
void OAIWirelessLink::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWirelessLink::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWirelessLink::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWirelessLink::getCreated() const {
    return m_created;
}
void OAIWirelessLink::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWirelessLink::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWirelessLink::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWirelessLink::getCustomFields() const {
    return m_custom_fields;
}
void OAIWirelessLink::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWirelessLink::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWirelessLink::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWirelessLink::getDescription() const {
    return m_description;
}
void OAIWirelessLink::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWirelessLink::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWirelessLink::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWirelessLink::getDisplay() const {
    return m_display;
}
void OAIWirelessLink::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWirelessLink::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWirelessLink::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWirelessLink::getId() const {
    return m_id;
}
void OAIWirelessLink::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWirelessLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWirelessLink::is_id_Valid() const{
    return m_id_isValid;
}

OAINestedInterface OAIWirelessLink::getInterfaceA() const {
    return m_interface_a;
}
void OAIWirelessLink::setInterfaceA(const OAINestedInterface &interface_a) {
    m_interface_a = interface_a;
    m_interface_a_isSet = true;
}

bool OAIWirelessLink::is_interface_a_Set() const{
    return m_interface_a_isSet;
}

bool OAIWirelessLink::is_interface_a_Valid() const{
    return m_interface_a_isValid;
}

OAINestedInterface OAIWirelessLink::getInterfaceB() const {
    return m_interface_b;
}
void OAIWirelessLink::setInterfaceB(const OAINestedInterface &interface_b) {
    m_interface_b = interface_b;
    m_interface_b_isSet = true;
}

bool OAIWirelessLink::is_interface_b_Set() const{
    return m_interface_b_isSet;
}

bool OAIWirelessLink::is_interface_b_Valid() const{
    return m_interface_b_isValid;
}

QDateTime OAIWirelessLink::getLastUpdated() const {
    return m_last_updated;
}
void OAIWirelessLink::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWirelessLink::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWirelessLink::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWirelessLink::getSsid() const {
    return m_ssid;
}
void OAIWirelessLink::setSsid(const QString &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIWirelessLink::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIWirelessLink::is_ssid_Valid() const{
    return m_ssid_isValid;
}

OAIStatus OAIWirelessLink::getStatus() const {
    return m_status;
}
void OAIWirelessLink::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWirelessLink::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWirelessLink::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWirelessLink::getTags() const {
    return m_tags;
}
void OAIWirelessLink::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWirelessLink::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWirelessLink::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedTenant OAIWirelessLink::getTenant() const {
    return m_tenant;
}
void OAIWirelessLink::setTenant(const OAINestedTenant &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWirelessLink::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWirelessLink::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWirelessLink::getUrl() const {
    return m_url;
}
void OAIWirelessLink::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWirelessLink::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWirelessLink::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWirelessLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_cipher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_psk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_b.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWirelessLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interface_a_isValid && m_interface_b_isValid && true;
}

} // namespace OpenAPI
