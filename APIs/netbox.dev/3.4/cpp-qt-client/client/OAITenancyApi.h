/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITenancyApi_H
#define OAI_OAITenancyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContact.h"
#include "OAIContactAssignment.h"
#include "OAIContactGroup.h"
#include "OAIContactRole.h"
#include "OAITenancy_contact_assignments_list_200_response.h"
#include "OAITenancy_contact_groups_list_200_response.h"
#include "OAITenancy_contact_roles_list_200_response.h"
#include "OAITenancy_contacts_list_200_response.h"
#include "OAITenancy_tenant_groups_list_200_response.h"
#include "OAITenancy_tenants_list_200_response.h"
#include "OAITenant.h"
#include "OAITenantGroup.h"
#include "OAIWritableContact.h"
#include "OAIWritableContactAssignment.h"
#include "OAIWritableContactGroup.h"
#include "OAIWritableTenant.h"
#include "OAIWritableTenantGroup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITenancyApi : public QObject {
    Q_OBJECT

public:
    OAITenancyApi(const int timeOut = 0);
    ~OAITenancyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void tenancyContactAssignmentsBulkDelete();

    /**
    * @param[in]  oai_writable_contact_assignment OAIWritableContactAssignment [required]
    */
    virtual void tenancyContactAssignmentsBulkPartialUpdate(const OAIWritableContactAssignment &oai_writable_contact_assignment);

    /**
    * @param[in]  oai_writable_contact_assignment OAIWritableContactAssignment [required]
    */
    virtual void tenancyContactAssignmentsBulkUpdate(const OAIWritableContactAssignment &oai_writable_contact_assignment);

    /**
    * @param[in]  oai_writable_contact_assignment OAIWritableContactAssignment [required]
    */
    virtual void tenancyContactAssignmentsCreate(const OAIWritableContactAssignment &oai_writable_contact_assignment);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactAssignmentsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  content_type_id QString [optional]
    * @param[in]  object_id QString [optional]
    * @param[in]  priority QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  contact_id QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  content_type_id__n QString [optional]
    * @param[in]  object_id__n QString [optional]
    * @param[in]  object_id__lte QString [optional]
    * @param[in]  object_id__lt QString [optional]
    * @param[in]  object_id__gte QString [optional]
    * @param[in]  object_id__gt QString [optional]
    * @param[in]  priority__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  content_type__n QString [optional]
    * @param[in]  contact_id__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyContactAssignmentsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_contact_assignment OAIWritableContactAssignment [required]
    */
    virtual void tenancyContactAssignmentsPartialUpdate(const qint32 &id, const OAIWritableContactAssignment &oai_writable_contact_assignment);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactAssignmentsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_contact_assignment OAIWritableContactAssignment [required]
    */
    virtual void tenancyContactAssignmentsUpdate(const qint32 &id, const OAIWritableContactAssignment &oai_writable_contact_assignment);


    virtual void tenancyContactGroupsBulkDelete();

    /**
    * @param[in]  oai_writable_contact_group OAIWritableContactGroup [required]
    */
    virtual void tenancyContactGroupsBulkPartialUpdate(const OAIWritableContactGroup &oai_writable_contact_group);

    /**
    * @param[in]  oai_writable_contact_group OAIWritableContactGroup [required]
    */
    virtual void tenancyContactGroupsBulkUpdate(const OAIWritableContactGroup &oai_writable_contact_group);

    /**
    * @param[in]  oai_writable_contact_group OAIWritableContactGroup [required]
    */
    virtual void tenancyContactGroupsCreate(const OAIWritableContactGroup &oai_writable_contact_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  parent__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyContactGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_contact_group OAIWritableContactGroup [required]
    */
    virtual void tenancyContactGroupsPartialUpdate(const qint32 &id, const OAIWritableContactGroup &oai_writable_contact_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_contact_group OAIWritableContactGroup [required]
    */
    virtual void tenancyContactGroupsUpdate(const qint32 &id, const OAIWritableContactGroup &oai_writable_contact_group);


    virtual void tenancyContactRolesBulkDelete();

    /**
    * @param[in]  oai_contact_role OAIContactRole [required]
    */
    virtual void tenancyContactRolesBulkPartialUpdate(const OAIContactRole &oai_contact_role);

    /**
    * @param[in]  oai_contact_role OAIContactRole [required]
    */
    virtual void tenancyContactRolesBulkUpdate(const OAIContactRole &oai_contact_role);

    /**
    * @param[in]  oai_contact_role OAIContactRole [required]
    */
    virtual void tenancyContactRolesCreate(const OAIContactRole &oai_contact_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyContactRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_contact_role OAIContactRole [required]
    */
    virtual void tenancyContactRolesPartialUpdate(const qint32 &id, const OAIContactRole &oai_contact_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_contact_role OAIContactRole [required]
    */
    virtual void tenancyContactRolesUpdate(const qint32 &id, const OAIContactRole &oai_contact_role);


    virtual void tenancyContactsBulkDelete();

    /**
    * @param[in]  oai_writable_contact OAIWritableContact [required]
    */
    virtual void tenancyContactsBulkPartialUpdate(const OAIWritableContact &oai_writable_contact);

    /**
    * @param[in]  oai_writable_contact OAIWritableContact [required]
    */
    virtual void tenancyContactsBulkUpdate(const OAIWritableContact &oai_writable_contact);

    /**
    * @param[in]  oai_writable_contact OAIWritableContact [required]
    */
    virtual void tenancyContactsCreate(const OAIWritableContact &oai_writable_contact);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  address QString [optional]
    * @param[in]  link QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  title__n QString [optional]
    * @param[in]  title__ic QString [optional]
    * @param[in]  title__nic QString [optional]
    * @param[in]  title__iew QString [optional]
    * @param[in]  title__niew QString [optional]
    * @param[in]  title__isw QString [optional]
    * @param[in]  title__nisw QString [optional]
    * @param[in]  title__ie QString [optional]
    * @param[in]  title__nie QString [optional]
    * @param[in]  title__empty QString [optional]
    * @param[in]  phone__n QString [optional]
    * @param[in]  phone__ic QString [optional]
    * @param[in]  phone__nic QString [optional]
    * @param[in]  phone__iew QString [optional]
    * @param[in]  phone__niew QString [optional]
    * @param[in]  phone__isw QString [optional]
    * @param[in]  phone__nisw QString [optional]
    * @param[in]  phone__ie QString [optional]
    * @param[in]  phone__nie QString [optional]
    * @param[in]  phone__empty QString [optional]
    * @param[in]  email__n QString [optional]
    * @param[in]  email__ic QString [optional]
    * @param[in]  email__nic QString [optional]
    * @param[in]  email__iew QString [optional]
    * @param[in]  email__niew QString [optional]
    * @param[in]  email__isw QString [optional]
    * @param[in]  email__nisw QString [optional]
    * @param[in]  email__ie QString [optional]
    * @param[in]  email__nie QString [optional]
    * @param[in]  email__empty QString [optional]
    * @param[in]  address__n QString [optional]
    * @param[in]  address__ic QString [optional]
    * @param[in]  address__nic QString [optional]
    * @param[in]  address__iew QString [optional]
    * @param[in]  address__niew QString [optional]
    * @param[in]  address__isw QString [optional]
    * @param[in]  address__nisw QString [optional]
    * @param[in]  address__ie QString [optional]
    * @param[in]  address__nie QString [optional]
    * @param[in]  address__empty QString [optional]
    * @param[in]  link__n QString [optional]
    * @param[in]  link__ic QString [optional]
    * @param[in]  link__nic QString [optional]
    * @param[in]  link__iew QString [optional]
    * @param[in]  link__niew QString [optional]
    * @param[in]  link__isw QString [optional]
    * @param[in]  link__nisw QString [optional]
    * @param[in]  link__ie QString [optional]
    * @param[in]  link__nie QString [optional]
    * @param[in]  link__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyContactsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_contact OAIWritableContact [required]
    */
    virtual void tenancyContactsPartialUpdate(const qint32 &id, const OAIWritableContact &oai_writable_contact);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyContactsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_contact OAIWritableContact [required]
    */
    virtual void tenancyContactsUpdate(const qint32 &id, const OAIWritableContact &oai_writable_contact);


    virtual void tenancyTenantGroupsBulkDelete();

    /**
    * @param[in]  oai_writable_tenant_group OAIWritableTenantGroup [required]
    */
    virtual void tenancyTenantGroupsBulkPartialUpdate(const OAIWritableTenantGroup &oai_writable_tenant_group);

    /**
    * @param[in]  oai_writable_tenant_group OAIWritableTenantGroup [required]
    */
    virtual void tenancyTenantGroupsBulkUpdate(const OAIWritableTenantGroup &oai_writable_tenant_group);

    /**
    * @param[in]  oai_writable_tenant_group OAIWritableTenantGroup [required]
    */
    virtual void tenancyTenantGroupsCreate(const OAIWritableTenantGroup &oai_writable_tenant_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  parent__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyTenantGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_tenant_group OAIWritableTenantGroup [required]
    */
    virtual void tenancyTenantGroupsPartialUpdate(const qint32 &id, const OAIWritableTenantGroup &oai_writable_tenant_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_tenant_group OAIWritableTenantGroup [required]
    */
    virtual void tenancyTenantGroupsUpdate(const qint32 &id, const OAIWritableTenantGroup &oai_writable_tenant_group);


    virtual void tenancyTenantsBulkDelete();

    /**
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsBulkPartialUpdate(const OAIWritableTenant &oai_writable_tenant);

    /**
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsBulkUpdate(const OAIWritableTenant &oai_writable_tenant);

    /**
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsCreate(const OAIWritableTenant &oai_writable_tenant);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void tenancyTenantsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsPartialUpdate(const qint32 &id, const OAIWritableTenant &oai_writable_tenant);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void tenancyTenantsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_tenant OAIWritableTenant [required]
    */
    virtual void tenancyTenantsUpdate(const qint32 &id, const OAIWritableTenant &oai_writable_tenant);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tenancyContactAssignmentsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsListCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsListCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesListCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesReadCallback(OAIHttpRequestWorker *worker);
    void tenancyContactRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsListCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyContactsUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsListCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsCreateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsDeleteCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsListCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsReadCallback(OAIHttpRequestWorker *worker);
    void tenancyTenantsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tenancyContactAssignmentsBulkDeleteSignal();
    void tenancyContactAssignmentsBulkPartialUpdateSignal(OAIContactAssignment summary);
    void tenancyContactAssignmentsBulkUpdateSignal(OAIContactAssignment summary);
    void tenancyContactAssignmentsCreateSignal(OAIContactAssignment summary);
    void tenancyContactAssignmentsDeleteSignal();
    void tenancyContactAssignmentsListSignal(OAITenancy_contact_assignments_list_200_response summary);
    void tenancyContactAssignmentsPartialUpdateSignal(OAIContactAssignment summary);
    void tenancyContactAssignmentsReadSignal(OAIContactAssignment summary);
    void tenancyContactAssignmentsUpdateSignal(OAIContactAssignment summary);
    void tenancyContactGroupsBulkDeleteSignal();
    void tenancyContactGroupsBulkPartialUpdateSignal(OAIContactGroup summary);
    void tenancyContactGroupsBulkUpdateSignal(OAIContactGroup summary);
    void tenancyContactGroupsCreateSignal(OAIContactGroup summary);
    void tenancyContactGroupsDeleteSignal();
    void tenancyContactGroupsListSignal(OAITenancy_contact_groups_list_200_response summary);
    void tenancyContactGroupsPartialUpdateSignal(OAIContactGroup summary);
    void tenancyContactGroupsReadSignal(OAIContactGroup summary);
    void tenancyContactGroupsUpdateSignal(OAIContactGroup summary);
    void tenancyContactRolesBulkDeleteSignal();
    void tenancyContactRolesBulkPartialUpdateSignal(OAIContactRole summary);
    void tenancyContactRolesBulkUpdateSignal(OAIContactRole summary);
    void tenancyContactRolesCreateSignal(OAIContactRole summary);
    void tenancyContactRolesDeleteSignal();
    void tenancyContactRolesListSignal(OAITenancy_contact_roles_list_200_response summary);
    void tenancyContactRolesPartialUpdateSignal(OAIContactRole summary);
    void tenancyContactRolesReadSignal(OAIContactRole summary);
    void tenancyContactRolesUpdateSignal(OAIContactRole summary);
    void tenancyContactsBulkDeleteSignal();
    void tenancyContactsBulkPartialUpdateSignal(OAIContact summary);
    void tenancyContactsBulkUpdateSignal(OAIContact summary);
    void tenancyContactsCreateSignal(OAIContact summary);
    void tenancyContactsDeleteSignal();
    void tenancyContactsListSignal(OAITenancy_contacts_list_200_response summary);
    void tenancyContactsPartialUpdateSignal(OAIContact summary);
    void tenancyContactsReadSignal(OAIContact summary);
    void tenancyContactsUpdateSignal(OAIContact summary);
    void tenancyTenantGroupsBulkDeleteSignal();
    void tenancyTenantGroupsBulkPartialUpdateSignal(OAITenantGroup summary);
    void tenancyTenantGroupsBulkUpdateSignal(OAITenantGroup summary);
    void tenancyTenantGroupsCreateSignal(OAITenantGroup summary);
    void tenancyTenantGroupsDeleteSignal();
    void tenancyTenantGroupsListSignal(OAITenancy_tenant_groups_list_200_response summary);
    void tenancyTenantGroupsPartialUpdateSignal(OAITenantGroup summary);
    void tenancyTenantGroupsReadSignal(OAITenantGroup summary);
    void tenancyTenantGroupsUpdateSignal(OAITenantGroup summary);
    void tenancyTenantsBulkDeleteSignal();
    void tenancyTenantsBulkPartialUpdateSignal(OAITenant summary);
    void tenancyTenantsBulkUpdateSignal(OAITenant summary);
    void tenancyTenantsCreateSignal(OAITenant summary);
    void tenancyTenantsDeleteSignal();
    void tenancyTenantsListSignal(OAITenancy_tenants_list_200_response summary);
    void tenancyTenantsPartialUpdateSignal(OAITenant summary);
    void tenancyTenantsReadSignal(OAITenant summary);
    void tenancyTenantsUpdateSignal(OAITenant summary);


    void tenancyContactAssignmentsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactAssignment summary);
    void tenancyContactAssignmentsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactAssignment summary);
    void tenancyContactAssignmentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIContactAssignment summary);
    void tenancyContactAssignmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactAssignmentsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_contact_assignments_list_200_response summary);
    void tenancyContactAssignmentsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactAssignment summary);
    void tenancyContactAssignmentsReadSignalFull(OAIHttpRequestWorker *worker, OAIContactAssignment summary);
    void tenancyContactAssignmentsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactAssignment summary);
    void tenancyContactGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactGroup summary);
    void tenancyContactGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactGroup summary);
    void tenancyContactGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIContactGroup summary);
    void tenancyContactGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactGroupsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_contact_groups_list_200_response summary);
    void tenancyContactGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactGroup summary);
    void tenancyContactGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIContactGroup summary);
    void tenancyContactGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactGroup summary);
    void tenancyContactRolesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactRolesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactRole summary);
    void tenancyContactRolesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactRole summary);
    void tenancyContactRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIContactRole summary);
    void tenancyContactRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactRolesListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_contact_roles_list_200_response summary);
    void tenancyContactRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactRole summary);
    void tenancyContactRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIContactRole summary);
    void tenancyContactRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContactRole summary);
    void tenancyContactsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void tenancyContactsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void tenancyContactsCreateSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void tenancyContactsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyContactsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_contacts_list_200_response summary);
    void tenancyContactsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void tenancyContactsReadSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void tenancyContactsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContact summary);
    void tenancyTenantGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantGroupsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_tenant_groups_list_200_response summary);
    void tenancyTenantGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenantGroup summary);
    void tenancyTenantsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsCreateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tenancyTenantsListSignalFull(OAIHttpRequestWorker *worker, OAITenancy_tenants_list_200_response summary);
    void tenancyTenantsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsReadSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);
    void tenancyTenantsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITenant summary);

    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsBulkDeleteSignalError() instead")
    void tenancyContactAssignmentsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsBulkPartialUpdateSignalError() instead")
    void tenancyContactAssignmentsBulkPartialUpdateSignalE(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsBulkPartialUpdateSignalError(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsBulkUpdateSignalError() instead")
    void tenancyContactAssignmentsBulkUpdateSignalE(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsBulkUpdateSignalError(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsCreateSignalError() instead")
    void tenancyContactAssignmentsCreateSignalE(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsCreateSignalError(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsDeleteSignalError() instead")
    void tenancyContactAssignmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsListSignalError() instead")
    void tenancyContactAssignmentsListSignalE(OAITenancy_contact_assignments_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsListSignalError(OAITenancy_contact_assignments_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsPartialUpdateSignalError() instead")
    void tenancyContactAssignmentsPartialUpdateSignalE(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsPartialUpdateSignalError(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsReadSignalError() instead")
    void tenancyContactAssignmentsReadSignalE(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsReadSignalError(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsUpdateSignalError() instead")
    void tenancyContactAssignmentsUpdateSignalE(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsUpdateSignalError(OAIContactAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsBulkDeleteSignalError() instead")
    void tenancyContactGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsBulkPartialUpdateSignalError() instead")
    void tenancyContactGroupsBulkPartialUpdateSignalE(OAIContactGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsBulkPartialUpdateSignalError(OAIContactGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsBulkUpdateSignalError() instead")
    void tenancyContactGroupsBulkUpdateSignalE(OAIContactGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsBulkUpdateSignalError(OAIContactGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsCreateSignalError() instead")
    void tenancyContactGroupsCreateSignalE(OAIContactGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsCreateSignalError(OAIContactGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsDeleteSignalError() instead")
    void tenancyContactGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsListSignalError() instead")
    void tenancyContactGroupsListSignalE(OAITenancy_contact_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsListSignalError(OAITenancy_contact_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsPartialUpdateSignalError() instead")
    void tenancyContactGroupsPartialUpdateSignalE(OAIContactGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsPartialUpdateSignalError(OAIContactGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsReadSignalError() instead")
    void tenancyContactGroupsReadSignalE(OAIContactGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsReadSignalError(OAIContactGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsUpdateSignalError() instead")
    void tenancyContactGroupsUpdateSignalE(OAIContactGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsUpdateSignalError(OAIContactGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesBulkDeleteSignalError() instead")
    void tenancyContactRolesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesBulkPartialUpdateSignalError() instead")
    void tenancyContactRolesBulkPartialUpdateSignalE(OAIContactRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesBulkPartialUpdateSignalError(OAIContactRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesBulkUpdateSignalError() instead")
    void tenancyContactRolesBulkUpdateSignalE(OAIContactRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesBulkUpdateSignalError(OAIContactRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesCreateSignalError() instead")
    void tenancyContactRolesCreateSignalE(OAIContactRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesCreateSignalError(OAIContactRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesDeleteSignalError() instead")
    void tenancyContactRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesListSignalError() instead")
    void tenancyContactRolesListSignalE(OAITenancy_contact_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesListSignalError(OAITenancy_contact_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesPartialUpdateSignalError() instead")
    void tenancyContactRolesPartialUpdateSignalE(OAIContactRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesPartialUpdateSignalError(OAIContactRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesReadSignalError() instead")
    void tenancyContactRolesReadSignalE(OAIContactRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesReadSignalError(OAIContactRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesUpdateSignalError() instead")
    void tenancyContactRolesUpdateSignalE(OAIContactRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesUpdateSignalError(OAIContactRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsBulkDeleteSignalError() instead")
    void tenancyContactsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsBulkPartialUpdateSignalError() instead")
    void tenancyContactsBulkPartialUpdateSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsBulkPartialUpdateSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsBulkUpdateSignalError() instead")
    void tenancyContactsBulkUpdateSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsBulkUpdateSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsCreateSignalError() instead")
    void tenancyContactsCreateSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsCreateSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsDeleteSignalError() instead")
    void tenancyContactsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsListSignalError() instead")
    void tenancyContactsListSignalE(OAITenancy_contacts_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsListSignalError(OAITenancy_contacts_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsPartialUpdateSignalError() instead")
    void tenancyContactsPartialUpdateSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsPartialUpdateSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsReadSignalError() instead")
    void tenancyContactsReadSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsReadSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsUpdateSignalError() instead")
    void tenancyContactsUpdateSignalE(OAIContact summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsUpdateSignalError(OAIContact summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsBulkDeleteSignalError() instead")
    void tenancyTenantGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsBulkPartialUpdateSignalError() instead")
    void tenancyTenantGroupsBulkPartialUpdateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsBulkPartialUpdateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsBulkUpdateSignalError() instead")
    void tenancyTenantGroupsBulkUpdateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsBulkUpdateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsCreateSignalError() instead")
    void tenancyTenantGroupsCreateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsCreateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsDeleteSignalError() instead")
    void tenancyTenantGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsListSignalError() instead")
    void tenancyTenantGroupsListSignalE(OAITenancy_tenant_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsListSignalError(OAITenancy_tenant_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsPartialUpdateSignalError() instead")
    void tenancyTenantGroupsPartialUpdateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsPartialUpdateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsReadSignalError() instead")
    void tenancyTenantGroupsReadSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsReadSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsUpdateSignalError() instead")
    void tenancyTenantGroupsUpdateSignalE(OAITenantGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsUpdateSignalError(OAITenantGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsBulkDeleteSignalError() instead")
    void tenancyTenantsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsBulkPartialUpdateSignalError() instead")
    void tenancyTenantsBulkPartialUpdateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsBulkPartialUpdateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsBulkUpdateSignalError() instead")
    void tenancyTenantsBulkUpdateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsBulkUpdateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsCreateSignalError() instead")
    void tenancyTenantsCreateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsCreateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsDeleteSignalError() instead")
    void tenancyTenantsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsListSignalError() instead")
    void tenancyTenantsListSignalE(OAITenancy_tenants_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsListSignalError(OAITenancy_tenants_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsPartialUpdateSignalError() instead")
    void tenancyTenantsPartialUpdateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsPartialUpdateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsReadSignalError() instead")
    void tenancyTenantsReadSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsReadSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsUpdateSignalError() instead")
    void tenancyTenantsUpdateSignalE(OAITenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsUpdateSignalError(OAITenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsBulkDeleteSignalErrorFull() instead")
    void tenancyContactAssignmentsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsBulkPartialUpdateSignalErrorFull() instead")
    void tenancyContactAssignmentsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsBulkUpdateSignalErrorFull() instead")
    void tenancyContactAssignmentsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsCreateSignalErrorFull() instead")
    void tenancyContactAssignmentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsDeleteSignalErrorFull() instead")
    void tenancyContactAssignmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsListSignalErrorFull() instead")
    void tenancyContactAssignmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsPartialUpdateSignalErrorFull() instead")
    void tenancyContactAssignmentsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsReadSignalErrorFull() instead")
    void tenancyContactAssignmentsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactAssignmentsUpdateSignalErrorFull() instead")
    void tenancyContactAssignmentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactAssignmentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsBulkDeleteSignalErrorFull() instead")
    void tenancyContactGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsBulkPartialUpdateSignalErrorFull() instead")
    void tenancyContactGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsBulkUpdateSignalErrorFull() instead")
    void tenancyContactGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsCreateSignalErrorFull() instead")
    void tenancyContactGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsDeleteSignalErrorFull() instead")
    void tenancyContactGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsListSignalErrorFull() instead")
    void tenancyContactGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsPartialUpdateSignalErrorFull() instead")
    void tenancyContactGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsReadSignalErrorFull() instead")
    void tenancyContactGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactGroupsUpdateSignalErrorFull() instead")
    void tenancyContactGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesBulkDeleteSignalErrorFull() instead")
    void tenancyContactRolesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesBulkPartialUpdateSignalErrorFull() instead")
    void tenancyContactRolesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesBulkUpdateSignalErrorFull() instead")
    void tenancyContactRolesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesCreateSignalErrorFull() instead")
    void tenancyContactRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesDeleteSignalErrorFull() instead")
    void tenancyContactRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesListSignalErrorFull() instead")
    void tenancyContactRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesPartialUpdateSignalErrorFull() instead")
    void tenancyContactRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesReadSignalErrorFull() instead")
    void tenancyContactRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactRolesUpdateSignalErrorFull() instead")
    void tenancyContactRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsBulkDeleteSignalErrorFull() instead")
    void tenancyContactsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsBulkPartialUpdateSignalErrorFull() instead")
    void tenancyContactsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsBulkUpdateSignalErrorFull() instead")
    void tenancyContactsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsCreateSignalErrorFull() instead")
    void tenancyContactsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsDeleteSignalErrorFull() instead")
    void tenancyContactsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsListSignalErrorFull() instead")
    void tenancyContactsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsPartialUpdateSignalErrorFull() instead")
    void tenancyContactsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsReadSignalErrorFull() instead")
    void tenancyContactsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyContactsUpdateSignalErrorFull() instead")
    void tenancyContactsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyContactsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsBulkDeleteSignalErrorFull() instead")
    void tenancyTenantGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsBulkPartialUpdateSignalErrorFull() instead")
    void tenancyTenantGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsBulkUpdateSignalErrorFull() instead")
    void tenancyTenantGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsCreateSignalErrorFull() instead")
    void tenancyTenantGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsDeleteSignalErrorFull() instead")
    void tenancyTenantGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsListSignalErrorFull() instead")
    void tenancyTenantGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsPartialUpdateSignalErrorFull() instead")
    void tenancyTenantGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsReadSignalErrorFull() instead")
    void tenancyTenantGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantGroupsUpdateSignalErrorFull() instead")
    void tenancyTenantGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsBulkDeleteSignalErrorFull() instead")
    void tenancyTenantsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsBulkPartialUpdateSignalErrorFull() instead")
    void tenancyTenantsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsBulkUpdateSignalErrorFull() instead")
    void tenancyTenantsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsCreateSignalErrorFull() instead")
    void tenancyTenantsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsDeleteSignalErrorFull() instead")
    void tenancyTenantsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsListSignalErrorFull() instead")
    void tenancyTenantsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsPartialUpdateSignalErrorFull() instead")
    void tenancyTenantsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsReadSignalErrorFull() instead")
    void tenancyTenantsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenancyTenantsUpdateSignalErrorFull() instead")
    void tenancyTenantsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenancyTenantsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
