/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModuleType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModuleType::OAIModuleType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModuleType::OAIModuleType() {
    this->initializeModel();
}

OAIModuleType::~OAIModuleType() {}

void OAIModuleType::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;
}

void OAIModuleType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModuleType::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("part_number")]);
    m_part_number_isSet = !json[QString("part_number")].isNull() && m_part_number_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weight_unit")]);
    m_weight_unit_isSet = !json[QString("weight_unit")].isNull() && m_weight_unit_isValid;
}

QString OAIModuleType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModuleType::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_manufacturer.isSet()) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("part_number"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_weight_unit.isSet()) {
        obj.insert(QString("weight_unit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    return obj;
}

QString OAIModuleType::getComments() const {
    return m_comments;
}
void OAIModuleType::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIModuleType::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIModuleType::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIModuleType::getCreated() const {
    return m_created;
}
void OAIModuleType::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIModuleType::is_created_Set() const{
    return m_created_isSet;
}

bool OAIModuleType::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIModuleType::getCustomFields() const {
    return m_custom_fields;
}
void OAIModuleType::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIModuleType::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIModuleType::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIModuleType::getDescription() const {
    return m_description;
}
void OAIModuleType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModuleType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModuleType::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIModuleType::getDisplay() const {
    return m_display;
}
void OAIModuleType::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIModuleType::is_display_Set() const{
    return m_display_isSet;
}

bool OAIModuleType::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIModuleType::getId() const {
    return m_id;
}
void OAIModuleType::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIModuleType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIModuleType::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIModuleType::getLastUpdated() const {
    return m_last_updated;
}
void OAIModuleType::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIModuleType::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIModuleType::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAINestedManufacturer OAIModuleType::getManufacturer() const {
    return m_manufacturer;
}
void OAIModuleType::setManufacturer(const OAINestedManufacturer &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIModuleType::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIModuleType::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIModuleType::getModel() const {
    return m_model;
}
void OAIModuleType::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIModuleType::is_model_Set() const{
    return m_model_isSet;
}

bool OAIModuleType::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIModuleType::getPartNumber() const {
    return m_part_number;
}
void OAIModuleType::setPartNumber(const QString &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIModuleType::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIModuleType::is_part_number_Valid() const{
    return m_part_number_isValid;
}

QList<OAINestedTag> OAIModuleType::getTags() const {
    return m_tags;
}
void OAIModuleType::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIModuleType::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIModuleType::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIModuleType::getUrl() const {
    return m_url;
}
void OAIModuleType::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIModuleType::is_url_Set() const{
    return m_url_isSet;
}

bool OAIModuleType::is_url_Valid() const{
    return m_url_isValid;
}

double OAIModuleType::getWeight() const {
    return m_weight;
}
void OAIModuleType::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIModuleType::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIModuleType::is_weight_Valid() const{
    return m_weight_isValid;
}

OAIWeight_unit OAIModuleType::getWeightUnit() const {
    return m_weight_unit;
}
void OAIModuleType::setWeightUnit(const OAIWeight_unit &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAIModuleType::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAIModuleType::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

bool OAIModuleType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModuleType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_manufacturer_isValid && m_model_isValid && true;
}

} // namespace OpenAPI
