/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableCreateAvailableVLAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableCreateAvailableVLAN::OAIWritableCreateAvailableVLAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableCreateAvailableVLAN::OAIWritableCreateAvailableVLAN() {
    this->initializeModel();
}

OAIWritableCreateAvailableVLAN::~OAIWritableCreateAvailableVLAN() {}

void OAIWritableCreateAvailableVLAN::initializeModel() {

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;
}

void OAIWritableCreateAvailableVLAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableCreateAvailableVLAN::fromJsonObject(QJsonObject json) {

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;
}

QString OAIWritableCreateAvailableVLAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableCreateAvailableVLAN::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    return obj;
}

OAIObject OAIWritableCreateAvailableVLAN::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableCreateAvailableVLAN::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableCreateAvailableVLAN::getDescription() const {
    return m_description;
}
void OAIWritableCreateAvailableVLAN::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableCreateAvailableVLAN::getName() const {
    return m_name;
}
void OAIWritableCreateAvailableVLAN::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIWritableCreateAvailableVLAN::getRole() const {
    return m_role;
}
void OAIWritableCreateAvailableVLAN::setRole(const qint32 &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_role_Set() const{
    return m_role_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIWritableCreateAvailableVLAN::getSite() const {
    return m_site;
}
void OAIWritableCreateAvailableVLAN::setSite(const qint32 &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_site_Set() const{
    return m_site_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_site_Valid() const{
    return m_site_isValid;
}

QString OAIWritableCreateAvailableVLAN::getStatus() const {
    return m_status;
}
void OAIWritableCreateAvailableVLAN::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWritableCreateAvailableVLAN::getTags() const {
    return m_tags;
}
void OAIWritableCreateAvailableVLAN::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableCreateAvailableVLAN::getTenant() const {
    return m_tenant;
}
void OAIWritableCreateAvailableVLAN::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableCreateAvailableVLAN::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableCreateAvailableVLAN::is_tenant_Valid() const{
    return m_tenant_isValid;
}

bool OAIWritableCreateAvailableVLAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableCreateAvailableVLAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
