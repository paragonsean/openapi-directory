/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDcimApi_H
#define OAI_OAIDcimApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICable.h"
#include "OAICableTermination.h"
#include "OAIConsolePort.h"
#include "OAIConsolePortTemplate.h"
#include "OAIConsoleServerPort.h"
#include "OAIConsoleServerPortTemplate.h"
#include "OAIDcim_cable_terminations_list_200_response.h"
#include "OAIDcim_cables_list_200_response.h"
#include "OAIDcim_console_port_templates_list_200_response.h"
#include "OAIDcim_console_ports_list_200_response.h"
#include "OAIDcim_console_server_port_templates_list_200_response.h"
#include "OAIDcim_console_server_ports_list_200_response.h"
#include "OAIDcim_device_bay_templates_list_200_response.h"
#include "OAIDcim_device_bays_list_200_response.h"
#include "OAIDcim_device_roles_list_200_response.h"
#include "OAIDcim_device_types_list_200_response.h"
#include "OAIDcim_devices_list_200_response.h"
#include "OAIDcim_front_port_templates_list_200_response.h"
#include "OAIDcim_front_ports_list_200_response.h"
#include "OAIDcim_interface_templates_list_200_response.h"
#include "OAIDcim_interfaces_list_200_response.h"
#include "OAIDcim_inventory_item_roles_list_200_response.h"
#include "OAIDcim_inventory_item_templates_list_200_response.h"
#include "OAIDcim_inventory_items_list_200_response.h"
#include "OAIDcim_locations_list_200_response.h"
#include "OAIDcim_manufacturers_list_200_response.h"
#include "OAIDcim_module_bay_templates_list_200_response.h"
#include "OAIDcim_module_bays_list_200_response.h"
#include "OAIDcim_module_types_list_200_response.h"
#include "OAIDcim_modules_list_200_response.h"
#include "OAIDcim_platforms_list_200_response.h"
#include "OAIDcim_power_feeds_list_200_response.h"
#include "OAIDcim_power_outlet_templates_list_200_response.h"
#include "OAIDcim_power_outlets_list_200_response.h"
#include "OAIDcim_power_panels_list_200_response.h"
#include "OAIDcim_power_port_templates_list_200_response.h"
#include "OAIDcim_power_ports_list_200_response.h"
#include "OAIDcim_rack_reservations_list_200_response.h"
#include "OAIDcim_rack_roles_list_200_response.h"
#include "OAIDcim_racks_list_200_response.h"
#include "OAIDcim_rear_port_templates_list_200_response.h"
#include "OAIDcim_rear_ports_list_200_response.h"
#include "OAIDcim_regions_list_200_response.h"
#include "OAIDcim_site_groups_list_200_response.h"
#include "OAIDcim_sites_list_200_response.h"
#include "OAIDcim_virtual_chassis_list_200_response.h"
#include "OAIDcim_virtual_device_contexts_list_200_response.h"
#include "OAIDevice.h"
#include "OAIDeviceBay.h"
#include "OAIDeviceBayTemplate.h"
#include "OAIDeviceNAPALM.h"
#include "OAIDeviceRole.h"
#include "OAIDeviceType.h"
#include "OAIDeviceWithConfigContext.h"
#include "OAIFrontPort.h"
#include "OAIFrontPortTemplate.h"
#include "OAIInterface.h"
#include "OAIInterfaceTemplate.h"
#include "OAIInventoryItem.h"
#include "OAIInventoryItemRole.h"
#include "OAIInventoryItemTemplate.h"
#include "OAILocation.h"
#include "OAIManufacturer.h"
#include "OAIModule.h"
#include "OAIModuleBay.h"
#include "OAIModuleBayTemplate.h"
#include "OAIModuleType.h"
#include "OAIPlatform.h"
#include "OAIPowerFeed.h"
#include "OAIPowerOutlet.h"
#include "OAIPowerOutletTemplate.h"
#include "OAIPowerPanel.h"
#include "OAIPowerPort.h"
#include "OAIPowerPortTemplate.h"
#include "OAIRack.h"
#include "OAIRackReservation.h"
#include "OAIRackRole.h"
#include "OAIRackUnit.h"
#include "OAIRearPort.h"
#include "OAIRearPortTemplate.h"
#include "OAIRegion.h"
#include "OAISite.h"
#include "OAISiteGroup.h"
#include "OAIVirtualChassis.h"
#include "OAIVirtualDeviceContext.h"
#include "OAIWritableCable.h"
#include "OAIWritableConsolePort.h"
#include "OAIWritableConsolePortTemplate.h"
#include "OAIWritableConsoleServerPort.h"
#include "OAIWritableConsoleServerPortTemplate.h"
#include "OAIWritableDeviceBay.h"
#include "OAIWritableDeviceBayTemplate.h"
#include "OAIWritableDeviceType.h"
#include "OAIWritableDeviceWithConfigContext.h"
#include "OAIWritableFrontPort.h"
#include "OAIWritableFrontPortTemplate.h"
#include "OAIWritableInterface.h"
#include "OAIWritableInterfaceTemplate.h"
#include "OAIWritableInventoryItem.h"
#include "OAIWritableInventoryItemTemplate.h"
#include "OAIWritableLocation.h"
#include "OAIWritableModule.h"
#include "OAIWritableModuleBay.h"
#include "OAIWritableModuleBayTemplate.h"
#include "OAIWritableModuleType.h"
#include "OAIWritablePlatform.h"
#include "OAIWritablePowerFeed.h"
#include "OAIWritablePowerOutlet.h"
#include "OAIWritablePowerOutletTemplate.h"
#include "OAIWritablePowerPanel.h"
#include "OAIWritablePowerPort.h"
#include "OAIWritablePowerPortTemplate.h"
#include "OAIWritableRack.h"
#include "OAIWritableRackReservation.h"
#include "OAIWritableRearPort.h"
#include "OAIWritableRearPortTemplate.h"
#include "OAIWritableRegion.h"
#include "OAIWritableSite.h"
#include "OAIWritableSiteGroup.h"
#include "OAIWritableVirtualChassis.h"
#include "OAIWritableVirtualDeviceContext.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDcimApi : public QObject {
    Q_OBJECT

public:
    OAIDcimApi(const int timeOut = 0);
    ~OAIDcimApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void dcimCableTerminationsBulkDelete();

    /**
    * @param[in]  oai_cable_termination OAICableTermination [required]
    */
    virtual void dcimCableTerminationsBulkPartialUpdate(const OAICableTermination &oai_cable_termination);

    /**
    * @param[in]  oai_cable_termination OAICableTermination [required]
    */
    virtual void dcimCableTerminationsBulkUpdate(const OAICableTermination &oai_cable_termination);

    /**
    * @param[in]  oai_cable_termination OAICableTermination [required]
    */
    virtual void dcimCableTerminationsCreate(const OAICableTermination &oai_cable_termination);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimCableTerminationsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  cable QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  termination_type QString [optional]
    * @param[in]  termination_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  cable__n QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  termination_type__n QString [optional]
    * @param[in]  termination_id__n QString [optional]
    * @param[in]  termination_id__lte QString [optional]
    * @param[in]  termination_id__lt QString [optional]
    * @param[in]  termination_id__gte QString [optional]
    * @param[in]  termination_id__gt QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimCableTerminationsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cable_termination OAICableTermination [required]
    */
    virtual void dcimCableTerminationsPartialUpdate(const qint32 &id, const OAICableTermination &oai_cable_termination);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimCableTerminationsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cable_termination OAICableTermination [required]
    */
    virtual void dcimCableTerminationsUpdate(const qint32 &id, const OAICableTermination &oai_cable_termination);


    virtual void dcimCablesBulkDelete();

    /**
    * @param[in]  oai_writable_cable OAIWritableCable [required]
    */
    virtual void dcimCablesBulkPartialUpdate(const OAIWritableCable &oai_writable_cable);

    /**
    * @param[in]  oai_writable_cable OAIWritableCable [required]
    */
    virtual void dcimCablesBulkUpdate(const OAIWritableCable &oai_writable_cable);

    /**
    * @param[in]  oai_writable_cable OAIWritableCable [required]
    */
    virtual void dcimCablesCreate(const OAIWritableCable &oai_writable_cable);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimCablesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  length QString [optional]
    * @param[in]  length_unit QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  termination_a_type QString [optional]
    * @param[in]  termination_a_id QString [optional]
    * @param[in]  termination_b_type QString [optional]
    * @param[in]  termination_b_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  length__n QString [optional]
    * @param[in]  length__lte QString [optional]
    * @param[in]  length__lt QString [optional]
    * @param[in]  length__gte QString [optional]
    * @param[in]  length__gt QString [optional]
    * @param[in]  length_unit__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  termination_a_type__n QString [optional]
    * @param[in]  termination_a_id__n QString [optional]
    * @param[in]  termination_a_id__lte QString [optional]
    * @param[in]  termination_a_id__lt QString [optional]
    * @param[in]  termination_a_id__gte QString [optional]
    * @param[in]  termination_a_id__gt QString [optional]
    * @param[in]  termination_b_type__n QString [optional]
    * @param[in]  termination_b_id__n QString [optional]
    * @param[in]  termination_b_id__lte QString [optional]
    * @param[in]  termination_b_id__lt QString [optional]
    * @param[in]  termination_b_id__gte QString [optional]
    * @param[in]  termination_b_id__gt QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimCablesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &length_unit__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_a_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &termination_b_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_cable OAIWritableCable [required]
    */
    virtual void dcimCablesPartialUpdate(const qint32 &id, const OAIWritableCable &oai_writable_cable);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimCablesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_cable OAIWritableCable [required]
    */
    virtual void dcimCablesUpdate(const qint32 &id, const OAIWritableCable &oai_writable_cable);

    /**
    * @param[in]  peer_device QString [required]
    * @param[in]  peer_interface QString [required]
    */
    virtual void dcimConnectedDeviceList(const QString &peer_device, const QString &peer_interface);


    virtual void dcimConsolePortTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesBulkPartialUpdate(const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesBulkUpdate(const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesCreate(const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsolePortTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesPartialUpdate(const qint32 &id, const OAIWritableConsolePortTemplate &oai_writable_console_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port_template OAIWritableConsolePortTemplate [required]
    */
    virtual void dcimConsolePortTemplatesUpdate(const qint32 &id, const OAIWritableConsolePortTemplate &oai_writable_console_port_template);


    virtual void dcimConsolePortsBulkDelete();

    /**
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsBulkPartialUpdate(const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsBulkUpdate(const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsCreate(const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  connected QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsolePortsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connected = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsPartialUpdate(const qint32 &id, const OAIWritableConsolePort &oai_writable_console_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsolePortsTrace(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_port OAIWritableConsolePort [required]
    */
    virtual void dcimConsolePortsUpdate(const qint32 &id, const OAIWritableConsolePort &oai_writable_console_port);


    virtual void dcimConsoleServerPortTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesBulkPartialUpdate(const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesBulkUpdate(const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesCreate(const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsoleServerPortTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesPartialUpdate(const qint32 &id, const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port_template OAIWritableConsoleServerPortTemplate [required]
    */
    virtual void dcimConsoleServerPortTemplatesUpdate(const qint32 &id, const OAIWritableConsoleServerPortTemplate &oai_writable_console_server_port_template);


    virtual void dcimConsoleServerPortsBulkDelete();

    /**
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsBulkPartialUpdate(const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsBulkUpdate(const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsCreate(const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  connected QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimConsoleServerPortsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connected = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsPartialUpdate(const qint32 &id, const OAIWritableConsoleServerPort &oai_writable_console_server_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimConsoleServerPortsTrace(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_console_server_port OAIWritableConsoleServerPort [required]
    */
    virtual void dcimConsoleServerPortsUpdate(const qint32 &id, const OAIWritableConsoleServerPort &oai_writable_console_server_port);


    virtual void dcimDeviceBayTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesBulkPartialUpdate(const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesBulkUpdate(const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesCreate(const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBayTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceBayTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesPartialUpdate(const qint32 &id, const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBayTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay_template OAIWritableDeviceBayTemplate [required]
    */
    virtual void dcimDeviceBayTemplatesUpdate(const qint32 &id, const OAIWritableDeviceBayTemplate &oai_writable_device_bay_template);


    virtual void dcimDeviceBaysBulkDelete();

    /**
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysBulkPartialUpdate(const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysBulkUpdate(const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysCreate(const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBaysDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceBaysList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysPartialUpdate(const qint32 &id, const OAIWritableDeviceBay &oai_writable_device_bay);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceBaysRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_bay OAIWritableDeviceBay [required]
    */
    virtual void dcimDeviceBaysUpdate(const qint32 &id, const OAIWritableDeviceBay &oai_writable_device_bay);


    virtual void dcimDeviceRolesBulkDelete();

    /**
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesBulkPartialUpdate(const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesBulkUpdate(const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesCreate(const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  vm_role QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vm_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesPartialUpdate(const qint32 &id, const OAIDeviceRole &oai_device_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_device_role OAIDeviceRole [required]
    */
    virtual void dcimDeviceRolesUpdate(const qint32 &id, const OAIDeviceRole &oai_device_role);


    virtual void dcimDeviceTypesBulkDelete();

    /**
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesBulkPartialUpdate(const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesBulkUpdate(const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesCreate(const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceTypesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  part_number QString [optional]
    * @param[in]  u_height QString [optional]
    * @param[in]  is_full_depth QString [optional]
    * @param[in]  subdevice_role QString [optional]
    * @param[in]  airflow QString [optional]
    * @param[in]  weight QString [optional]
    * @param[in]  weight_unit QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  has_front_image QString [optional]
    * @param[in]  has_rear_image QString [optional]
    * @param[in]  console_ports QString [optional]
    * @param[in]  console_server_ports QString [optional]
    * @param[in]  power_ports QString [optional]
    * @param[in]  power_outlets QString [optional]
    * @param[in]  interfaces QString [optional]
    * @param[in]  pass_through_ports QString [optional]
    * @param[in]  module_bays QString [optional]
    * @param[in]  device_bays QString [optional]
    * @param[in]  inventory_items QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  model__n QString [optional]
    * @param[in]  model__ic QString [optional]
    * @param[in]  model__nic QString [optional]
    * @param[in]  model__iew QString [optional]
    * @param[in]  model__niew QString [optional]
    * @param[in]  model__isw QString [optional]
    * @param[in]  model__nisw QString [optional]
    * @param[in]  model__ie QString [optional]
    * @param[in]  model__nie QString [optional]
    * @param[in]  model__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  part_number__n QString [optional]
    * @param[in]  part_number__ic QString [optional]
    * @param[in]  part_number__nic QString [optional]
    * @param[in]  part_number__iew QString [optional]
    * @param[in]  part_number__niew QString [optional]
    * @param[in]  part_number__isw QString [optional]
    * @param[in]  part_number__nisw QString [optional]
    * @param[in]  part_number__ie QString [optional]
    * @param[in]  part_number__nie QString [optional]
    * @param[in]  part_number__empty QString [optional]
    * @param[in]  u_height__n QString [optional]
    * @param[in]  u_height__lte QString [optional]
    * @param[in]  u_height__lt QString [optional]
    * @param[in]  u_height__gte QString [optional]
    * @param[in]  u_height__gt QString [optional]
    * @param[in]  subdevice_role__n QString [optional]
    * @param[in]  airflow__n QString [optional]
    * @param[in]  weight__n QString [optional]
    * @param[in]  weight__lte QString [optional]
    * @param[in]  weight__lt QString [optional]
    * @param[in]  weight__gte QString [optional]
    * @param[in]  weight__gt QString [optional]
    * @param[in]  weight_unit__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDeviceTypesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_full_depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subdevice_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &airflow = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_front_image = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_rear_image = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &console_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &console_server_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_outlets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interfaces = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pass_through_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_bays = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_bays = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inventory_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subdevice_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &airflow__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight_unit__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesPartialUpdate(const qint32 &id, const OAIWritableDeviceType &oai_writable_device_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDeviceTypesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_type OAIWritableDeviceType [required]
    */
    virtual void dcimDeviceTypesUpdate(const qint32 &id, const OAIWritableDeviceType &oai_writable_device_type);


    virtual void dcimDevicesBulkDelete();

    /**
    * @param[in]  oai_writable_device_with_config_context OAIWritableDeviceWithConfigContext [required]
    */
    virtual void dcimDevicesBulkPartialUpdate(const OAIWritableDeviceWithConfigContext &oai_writable_device_with_config_context);

    /**
    * @param[in]  oai_writable_device_with_config_context OAIWritableDeviceWithConfigContext [required]
    */
    virtual void dcimDevicesBulkUpdate(const OAIWritableDeviceWithConfigContext &oai_writable_device_with_config_context);

    /**
    * @param[in]  oai_writable_device_with_config_context OAIWritableDeviceWithConfigContext [required]
    */
    virtual void dcimDevicesCreate(const OAIWritableDeviceWithConfigContext &oai_writable_device_with_config_context);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDevicesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  asset_tag QString [optional]
    * @param[in]  face QString [optional]
    * @param[in]  position QString [optional]
    * @param[in]  airflow QString [optional]
    * @param[in]  vc_position QString [optional]
    * @param[in]  vc_priority QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  local_context_data QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  device_type QString [optional]
    * @param[in]  device_type_id QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  parent_device_id QString [optional]
    * @param[in]  platform_id QString [optional]
    * @param[in]  platform QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  is_full_depth QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  has_primary_ip QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis_member QString [optional]
    * @param[in]  console_ports QString [optional]
    * @param[in]  console_server_ports QString [optional]
    * @param[in]  power_ports QString [optional]
    * @param[in]  power_outlets QString [optional]
    * @param[in]  interfaces QString [optional]
    * @param[in]  pass_through_ports QString [optional]
    * @param[in]  module_bays QString [optional]
    * @param[in]  device_bays QString [optional]
    * @param[in]  primary_ip4_id QString [optional]
    * @param[in]  primary_ip6_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  asset_tag__n QString [optional]
    * @param[in]  asset_tag__ic QString [optional]
    * @param[in]  asset_tag__nic QString [optional]
    * @param[in]  asset_tag__iew QString [optional]
    * @param[in]  asset_tag__niew QString [optional]
    * @param[in]  asset_tag__isw QString [optional]
    * @param[in]  asset_tag__nisw QString [optional]
    * @param[in]  asset_tag__ie QString [optional]
    * @param[in]  asset_tag__nie QString [optional]
    * @param[in]  asset_tag__empty QString [optional]
    * @param[in]  face__n QString [optional]
    * @param[in]  position__n QString [optional]
    * @param[in]  position__lte QString [optional]
    * @param[in]  position__lt QString [optional]
    * @param[in]  position__gte QString [optional]
    * @param[in]  position__gt QString [optional]
    * @param[in]  airflow__n QString [optional]
    * @param[in]  vc_position__n QString [optional]
    * @param[in]  vc_position__lte QString [optional]
    * @param[in]  vc_position__lt QString [optional]
    * @param[in]  vc_position__gte QString [optional]
    * @param[in]  vc_position__gt QString [optional]
    * @param[in]  vc_priority__n QString [optional]
    * @param[in]  vc_priority__lte QString [optional]
    * @param[in]  vc_priority__lt QString [optional]
    * @param[in]  vc_priority__gte QString [optional]
    * @param[in]  vc_priority__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  device_type__n QString [optional]
    * @param[in]  device_type_id__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  parent_device_id__n QString [optional]
    * @param[in]  platform_id__n QString [optional]
    * @param[in]  platform__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  cluster_id__n QString [optional]
    * @param[in]  model__n QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  mac_address__n QString [optional]
    * @param[in]  mac_address__ic QString [optional]
    * @param[in]  mac_address__nic QString [optional]
    * @param[in]  mac_address__iew QString [optional]
    * @param[in]  mac_address__niew QString [optional]
    * @param[in]  mac_address__isw QString [optional]
    * @param[in]  mac_address__nisw QString [optional]
    * @param[in]  mac_address__ie QString [optional]
    * @param[in]  mac_address__nie QString [optional]
    * @param[in]  serial__n QString [optional]
    * @param[in]  serial__ic QString [optional]
    * @param[in]  serial__nic QString [optional]
    * @param[in]  serial__iew QString [optional]
    * @param[in]  serial__niew QString [optional]
    * @param[in]  serial__isw QString [optional]
    * @param[in]  serial__nisw QString [optional]
    * @param[in]  serial__ie QString [optional]
    * @param[in]  serial__nie QString [optional]
    * @param[in]  serial__empty QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  primary_ip4_id__n QString [optional]
    * @param[in]  primary_ip6_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimDevicesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &face = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &airflow = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &local_context_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_full_depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_primary_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_member = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &console_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &console_server_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_outlets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interfaces = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pass_through_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_bays = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_bays = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &primary_ip4_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &primary_ip6_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &face__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &airflow__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_position__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_position__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_position__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_position__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_position__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_priority__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_priority__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_priority__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_priority__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vc_priority__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &primary_ip4_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &primary_ip6_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  method QString [required]
    */
    virtual void dcimDevicesNapalm(const qint32 &id, const QString &method);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_with_config_context OAIWritableDeviceWithConfigContext [required]
    */
    virtual void dcimDevicesPartialUpdate(const qint32 &id, const OAIWritableDeviceWithConfigContext &oai_writable_device_with_config_context);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimDevicesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_device_with_config_context OAIWritableDeviceWithConfigContext [required]
    */
    virtual void dcimDevicesUpdate(const qint32 &id, const OAIWritableDeviceWithConfigContext &oai_writable_device_with_config_context);


    virtual void dcimFrontPortTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_front_port_template OAIWritableFrontPortTemplate [required]
    */
    virtual void dcimFrontPortTemplatesBulkPartialUpdate(const OAIWritableFrontPortTemplate &oai_writable_front_port_template);

    /**
    * @param[in]  oai_writable_front_port_template OAIWritableFrontPortTemplate [required]
    */
    virtual void dcimFrontPortTemplatesBulkUpdate(const OAIWritableFrontPortTemplate &oai_writable_front_port_template);

    /**
    * @param[in]  oai_writable_front_port_template OAIWritableFrontPortTemplate [required]
    */
    virtual void dcimFrontPortTemplatesCreate(const OAIWritableFrontPortTemplate &oai_writable_front_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimFrontPortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimFrontPortTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_front_port_template OAIWritableFrontPortTemplate [required]
    */
    virtual void dcimFrontPortTemplatesPartialUpdate(const qint32 &id, const OAIWritableFrontPortTemplate &oai_writable_front_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimFrontPortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_front_port_template OAIWritableFrontPortTemplate [required]
    */
    virtual void dcimFrontPortTemplatesUpdate(const qint32 &id, const OAIWritableFrontPortTemplate &oai_writable_front_port_template);


    virtual void dcimFrontPortsBulkDelete();

    /**
    * @param[in]  oai_writable_front_port OAIWritableFrontPort [required]
    */
    virtual void dcimFrontPortsBulkPartialUpdate(const OAIWritableFrontPort &oai_writable_front_port);

    /**
    * @param[in]  oai_writable_front_port OAIWritableFrontPort [required]
    */
    virtual void dcimFrontPortsBulkUpdate(const OAIWritableFrontPort &oai_writable_front_port);

    /**
    * @param[in]  oai_writable_front_port OAIWritableFrontPort [required]
    */
    virtual void dcimFrontPortsCreate(const OAIWritableFrontPort &oai_writable_front_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimFrontPortsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimFrontPortsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_front_port OAIWritableFrontPort [required]
    */
    virtual void dcimFrontPortsPartialUpdate(const qint32 &id, const OAIWritableFrontPort &oai_writable_front_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimFrontPortsPaths(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimFrontPortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_front_port OAIWritableFrontPort [required]
    */
    virtual void dcimFrontPortsUpdate(const qint32 &id, const OAIWritableFrontPort &oai_writable_front_port);


    virtual void dcimInterfaceTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesBulkPartialUpdate(const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesBulkUpdate(const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesCreate(const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfaceTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  mgmt_only QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  poe_mode QString [optional]
    * @param[in]  poe_type QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  poe_mode__n QString [optional]
    * @param[in]  poe_type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInterfaceTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mgmt_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_mode__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesPartialUpdate(const qint32 &id, const OAIWritableInterfaceTemplate &oai_writable_interface_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfaceTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface_template OAIWritableInterfaceTemplate [required]
    */
    virtual void dcimInterfaceTemplatesUpdate(const qint32 &id, const OAIWritableInterfaceTemplate &oai_writable_interface_template);


    virtual void dcimInterfacesBulkDelete();

    /**
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesBulkPartialUpdate(const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesBulkUpdate(const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesCreate(const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfacesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  enabled QString [optional]
    * @param[in]  mtu QString [optional]
    * @param[in]  mgmt_only QString [optional]
    * @param[in]  poe_mode QString [optional]
    * @param[in]  poe_type QString [optional]
    * @param[in]  mode QString [optional]
    * @param[in]  rf_role QString [optional]
    * @param[in]  rf_channel QString [optional]
    * @param[in]  rf_channel_frequency QString [optional]
    * @param[in]  rf_channel_width QString [optional]
    * @param[in]  tx_power QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  connected QString [optional]
    * @param[in]  kind QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  bridge_id QString [optional]
    * @param[in]  lag_id QString [optional]
    * @param[in]  speed QString [optional]
    * @param[in]  duplex QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  wwn QString [optional]
    * @param[in]  vlan_id QString [optional]
    * @param[in]  vlan QString [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  vdc_id QString [optional]
    * @param[in]  vdc_identifier QString [optional]
    * @param[in]  vdc QString [optional]
    * @param[in]  l2vpn_id QString [optional]
    * @param[in]  l2vpn QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  mtu__n QString [optional]
    * @param[in]  mtu__lte QString [optional]
    * @param[in]  mtu__lt QString [optional]
    * @param[in]  mtu__gte QString [optional]
    * @param[in]  mtu__gt QString [optional]
    * @param[in]  poe_mode__n QString [optional]
    * @param[in]  poe_type__n QString [optional]
    * @param[in]  mode__n QString [optional]
    * @param[in]  rf_role__n QString [optional]
    * @param[in]  rf_channel__n QString [optional]
    * @param[in]  rf_channel_frequency__n QString [optional]
    * @param[in]  rf_channel_frequency__lte QString [optional]
    * @param[in]  rf_channel_frequency__lt QString [optional]
    * @param[in]  rf_channel_frequency__gte QString [optional]
    * @param[in]  rf_channel_frequency__gt QString [optional]
    * @param[in]  rf_channel_width__n QString [optional]
    * @param[in]  rf_channel_width__lte QString [optional]
    * @param[in]  rf_channel_width__lt QString [optional]
    * @param[in]  rf_channel_width__gte QString [optional]
    * @param[in]  rf_channel_width__gt QString [optional]
    * @param[in]  tx_power__n QString [optional]
    * @param[in]  tx_power__lte QString [optional]
    * @param[in]  tx_power__lt QString [optional]
    * @param[in]  tx_power__gte QString [optional]
    * @param[in]  tx_power__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  bridge_id__n QString [optional]
    * @param[in]  lag_id__n QString [optional]
    * @param[in]  speed__n QString [optional]
    * @param[in]  speed__lte QString [optional]
    * @param[in]  speed__lt QString [optional]
    * @param[in]  speed__gte QString [optional]
    * @param[in]  speed__gt QString [optional]
    * @param[in]  duplex__n QString [optional]
    * @param[in]  mac_address__n QString [optional]
    * @param[in]  mac_address__ic QString [optional]
    * @param[in]  mac_address__nic QString [optional]
    * @param[in]  mac_address__iew QString [optional]
    * @param[in]  mac_address__niew QString [optional]
    * @param[in]  mac_address__isw QString [optional]
    * @param[in]  mac_address__nisw QString [optional]
    * @param[in]  mac_address__ie QString [optional]
    * @param[in]  mac_address__nie QString [optional]
    * @param[in]  wwn__n QString [optional]
    * @param[in]  wwn__ic QString [optional]
    * @param[in]  wwn__nic QString [optional]
    * @param[in]  wwn__iew QString [optional]
    * @param[in]  wwn__niew QString [optional]
    * @param[in]  wwn__isw QString [optional]
    * @param[in]  wwn__nisw QString [optional]
    * @param[in]  wwn__ie QString [optional]
    * @param[in]  wwn__nie QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  vdc_id__n QString [optional]
    * @param[in]  vdc_identifier__n QString [optional]
    * @param[in]  vdc__n QString [optional]
    * @param[in]  l2vpn_id__n QString [optional]
    * @param[in]  l2vpn__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInterfacesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mgmt_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_frequency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_width = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tx_power = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connected = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &kind = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bridge_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lag_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &speed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &duplex = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vdc_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vdc_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vdc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_mode__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &poe_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mode__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_frequency__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_frequency__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_frequency__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_frequency__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_frequency__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_width__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_width__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_width__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_width__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rf_channel_width__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tx_power__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tx_power__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tx_power__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tx_power__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tx_power__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bridge_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lag_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &speed__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &speed__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &speed__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &speed__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &speed__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &duplex__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wwn__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vdc_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vdc_identifier__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vdc__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesPartialUpdate(const qint32 &id, const OAIWritableInterface &oai_writable_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfacesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInterfacesTrace(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_interface OAIWritableInterface [required]
    */
    virtual void dcimInterfacesUpdate(const qint32 &id, const OAIWritableInterface &oai_writable_interface);


    virtual void dcimInventoryItemRolesBulkDelete();

    /**
    * @param[in]  oai_inventory_item_role OAIInventoryItemRole [required]
    */
    virtual void dcimInventoryItemRolesBulkPartialUpdate(const OAIInventoryItemRole &oai_inventory_item_role);

    /**
    * @param[in]  oai_inventory_item_role OAIInventoryItemRole [required]
    */
    virtual void dcimInventoryItemRolesBulkUpdate(const OAIInventoryItemRole &oai_inventory_item_role);

    /**
    * @param[in]  oai_inventory_item_role OAIInventoryItemRole [required]
    */
    virtual void dcimInventoryItemRolesCreate(const OAIInventoryItemRole &oai_inventory_item_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInventoryItemRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_inventory_item_role OAIInventoryItemRole [required]
    */
    virtual void dcimInventoryItemRolesPartialUpdate(const qint32 &id, const OAIInventoryItemRole &oai_inventory_item_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_inventory_item_role OAIInventoryItemRole [required]
    */
    virtual void dcimInventoryItemRolesUpdate(const qint32 &id, const OAIInventoryItemRole &oai_inventory_item_role);


    virtual void dcimInventoryItemTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_inventory_item_template OAIWritableInventoryItemTemplate [required]
    */
    virtual void dcimInventoryItemTemplatesBulkPartialUpdate(const OAIWritableInventoryItemTemplate &oai_writable_inventory_item_template);

    /**
    * @param[in]  oai_writable_inventory_item_template OAIWritableInventoryItemTemplate [required]
    */
    virtual void dcimInventoryItemTemplatesBulkUpdate(const OAIWritableInventoryItemTemplate &oai_writable_inventory_item_template);

    /**
    * @param[in]  oai_writable_inventory_item_template OAIWritableInventoryItemTemplate [required]
    */
    virtual void dcimInventoryItemTemplatesCreate(const OAIWritableInventoryItemTemplate &oai_writable_inventory_item_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  part_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  component_type QString [optional]
    * @param[in]  component_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  part_id__n QString [optional]
    * @param[in]  part_id__ic QString [optional]
    * @param[in]  part_id__nic QString [optional]
    * @param[in]  part_id__iew QString [optional]
    * @param[in]  part_id__niew QString [optional]
    * @param[in]  part_id__isw QString [optional]
    * @param[in]  part_id__nisw QString [optional]
    * @param[in]  part_id__ie QString [optional]
    * @param[in]  part_id__nie QString [optional]
    * @param[in]  part_id__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  component_type__n QString [optional]
    * @param[in]  component_id__n QString [optional]
    * @param[in]  component_id__lte QString [optional]
    * @param[in]  component_id__lt QString [optional]
    * @param[in]  component_id__gte QString [optional]
    * @param[in]  component_id__gt QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInventoryItemTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_inventory_item_template OAIWritableInventoryItemTemplate [required]
    */
    virtual void dcimInventoryItemTemplatesPartialUpdate(const qint32 &id, const OAIWritableInventoryItemTemplate &oai_writable_inventory_item_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_inventory_item_template OAIWritableInventoryItemTemplate [required]
    */
    virtual void dcimInventoryItemTemplatesUpdate(const qint32 &id, const OAIWritableInventoryItemTemplate &oai_writable_inventory_item_template);


    virtual void dcimInventoryItemsBulkDelete();

    /**
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsBulkPartialUpdate(const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsBulkUpdate(const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsCreate(const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  part_id QString [optional]
    * @param[in]  asset_tag QString [optional]
    * @param[in]  discovered QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  component_type QString [optional]
    * @param[in]  component_id QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  part_id__n QString [optional]
    * @param[in]  part_id__ic QString [optional]
    * @param[in]  part_id__nic QString [optional]
    * @param[in]  part_id__iew QString [optional]
    * @param[in]  part_id__niew QString [optional]
    * @param[in]  part_id__isw QString [optional]
    * @param[in]  part_id__nisw QString [optional]
    * @param[in]  part_id__ie QString [optional]
    * @param[in]  part_id__nie QString [optional]
    * @param[in]  part_id__empty QString [optional]
    * @param[in]  asset_tag__n QString [optional]
    * @param[in]  asset_tag__ic QString [optional]
    * @param[in]  asset_tag__nic QString [optional]
    * @param[in]  asset_tag__iew QString [optional]
    * @param[in]  asset_tag__niew QString [optional]
    * @param[in]  asset_tag__isw QString [optional]
    * @param[in]  asset_tag__nisw QString [optional]
    * @param[in]  asset_tag__ie QString [optional]
    * @param[in]  asset_tag__nie QString [optional]
    * @param[in]  asset_tag__empty QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  component_type__n QString [optional]
    * @param[in]  component_id__n QString [optional]
    * @param[in]  component_id__lte QString [optional]
    * @param[in]  component_id__lt QString [optional]
    * @param[in]  component_id__gte QString [optional]
    * @param[in]  component_id__gt QString [optional]
    * @param[in]  serial__n QString [optional]
    * @param[in]  serial__ic QString [optional]
    * @param[in]  serial__nic QString [optional]
    * @param[in]  serial__iew QString [optional]
    * @param[in]  serial__niew QString [optional]
    * @param[in]  serial__isw QString [optional]
    * @param[in]  serial__nisw QString [optional]
    * @param[in]  serial__ie QString [optional]
    * @param[in]  serial__nie QString [optional]
    * @param[in]  serial__empty QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimInventoryItemsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &discovered = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_id__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &component_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsPartialUpdate(const qint32 &id, const OAIWritableInventoryItem &oai_writable_inventory_item);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimInventoryItemsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_inventory_item OAIWritableInventoryItem [required]
    */
    virtual void dcimInventoryItemsUpdate(const qint32 &id, const OAIWritableInventoryItem &oai_writable_inventory_item);


    virtual void dcimLocationsBulkDelete();

    /**
    * @param[in]  oai_writable_location OAIWritableLocation [required]
    */
    virtual void dcimLocationsBulkPartialUpdate(const OAIWritableLocation &oai_writable_location);

    /**
    * @param[in]  oai_writable_location OAIWritableLocation [required]
    */
    virtual void dcimLocationsBulkUpdate(const OAIWritableLocation &oai_writable_location);

    /**
    * @param[in]  oai_writable_location OAIWritableLocation [required]
    */
    virtual void dcimLocationsCreate(const OAIWritableLocation &oai_writable_location);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimLocationsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  parent__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimLocationsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_location OAIWritableLocation [required]
    */
    virtual void dcimLocationsPartialUpdate(const qint32 &id, const OAIWritableLocation &oai_writable_location);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimLocationsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_location OAIWritableLocation [required]
    */
    virtual void dcimLocationsUpdate(const qint32 &id, const OAIWritableLocation &oai_writable_location);


    virtual void dcimManufacturersBulkDelete();

    /**
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersBulkPartialUpdate(const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersBulkUpdate(const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersCreate(const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimManufacturersDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimManufacturersList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersPartialUpdate(const qint32 &id, const OAIManufacturer &oai_manufacturer);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimManufacturersRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_manufacturer OAIManufacturer [required]
    */
    virtual void dcimManufacturersUpdate(const qint32 &id, const OAIManufacturer &oai_manufacturer);


    virtual void dcimModuleBayTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_module_bay_template OAIWritableModuleBayTemplate [required]
    */
    virtual void dcimModuleBayTemplatesBulkPartialUpdate(const OAIWritableModuleBayTemplate &oai_writable_module_bay_template);

    /**
    * @param[in]  oai_writable_module_bay_template OAIWritableModuleBayTemplate [required]
    */
    virtual void dcimModuleBayTemplatesBulkUpdate(const OAIWritableModuleBayTemplate &oai_writable_module_bay_template);

    /**
    * @param[in]  oai_writable_module_bay_template OAIWritableModuleBayTemplate [required]
    */
    virtual void dcimModuleBayTemplatesCreate(const OAIWritableModuleBayTemplate &oai_writable_module_bay_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModuleBayTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimModuleBayTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module_bay_template OAIWritableModuleBayTemplate [required]
    */
    virtual void dcimModuleBayTemplatesPartialUpdate(const qint32 &id, const OAIWritableModuleBayTemplate &oai_writable_module_bay_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModuleBayTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module_bay_template OAIWritableModuleBayTemplate [required]
    */
    virtual void dcimModuleBayTemplatesUpdate(const qint32 &id, const OAIWritableModuleBayTemplate &oai_writable_module_bay_template);


    virtual void dcimModuleBaysBulkDelete();

    /**
    * @param[in]  oai_writable_module_bay OAIWritableModuleBay [required]
    */
    virtual void dcimModuleBaysBulkPartialUpdate(const OAIWritableModuleBay &oai_writable_module_bay);

    /**
    * @param[in]  oai_writable_module_bay OAIWritableModuleBay [required]
    */
    virtual void dcimModuleBaysBulkUpdate(const OAIWritableModuleBay &oai_writable_module_bay);

    /**
    * @param[in]  oai_writable_module_bay OAIWritableModuleBay [required]
    */
    virtual void dcimModuleBaysCreate(const OAIWritableModuleBay &oai_writable_module_bay);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModuleBaysDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimModuleBaysList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module_bay OAIWritableModuleBay [required]
    */
    virtual void dcimModuleBaysPartialUpdate(const qint32 &id, const OAIWritableModuleBay &oai_writable_module_bay);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModuleBaysRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module_bay OAIWritableModuleBay [required]
    */
    virtual void dcimModuleBaysUpdate(const qint32 &id, const OAIWritableModuleBay &oai_writable_module_bay);


    virtual void dcimModuleTypesBulkDelete();

    /**
    * @param[in]  oai_writable_module_type OAIWritableModuleType [required]
    */
    virtual void dcimModuleTypesBulkPartialUpdate(const OAIWritableModuleType &oai_writable_module_type);

    /**
    * @param[in]  oai_writable_module_type OAIWritableModuleType [required]
    */
    virtual void dcimModuleTypesBulkUpdate(const OAIWritableModuleType &oai_writable_module_type);

    /**
    * @param[in]  oai_writable_module_type OAIWritableModuleType [required]
    */
    virtual void dcimModuleTypesCreate(const OAIWritableModuleType &oai_writable_module_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModuleTypesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  model QString [optional]
    * @param[in]  part_number QString [optional]
    * @param[in]  weight QString [optional]
    * @param[in]  weight_unit QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  console_ports QString [optional]
    * @param[in]  console_server_ports QString [optional]
    * @param[in]  power_ports QString [optional]
    * @param[in]  power_outlets QString [optional]
    * @param[in]  interfaces QString [optional]
    * @param[in]  pass_through_ports QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  model__n QString [optional]
    * @param[in]  model__ic QString [optional]
    * @param[in]  model__nic QString [optional]
    * @param[in]  model__iew QString [optional]
    * @param[in]  model__niew QString [optional]
    * @param[in]  model__isw QString [optional]
    * @param[in]  model__nisw QString [optional]
    * @param[in]  model__ie QString [optional]
    * @param[in]  model__nie QString [optional]
    * @param[in]  model__empty QString [optional]
    * @param[in]  part_number__n QString [optional]
    * @param[in]  part_number__ic QString [optional]
    * @param[in]  part_number__nic QString [optional]
    * @param[in]  part_number__iew QString [optional]
    * @param[in]  part_number__niew QString [optional]
    * @param[in]  part_number__isw QString [optional]
    * @param[in]  part_number__nisw QString [optional]
    * @param[in]  part_number__ie QString [optional]
    * @param[in]  part_number__nie QString [optional]
    * @param[in]  part_number__empty QString [optional]
    * @param[in]  weight__n QString [optional]
    * @param[in]  weight__lte QString [optional]
    * @param[in]  weight__lt QString [optional]
    * @param[in]  weight__gte QString [optional]
    * @param[in]  weight__gt QString [optional]
    * @param[in]  weight_unit__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimModuleTypesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &console_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &console_server_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_outlets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interfaces = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pass_through_ports = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &part_number__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight_unit__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module_type OAIWritableModuleType [required]
    */
    virtual void dcimModuleTypesPartialUpdate(const qint32 &id, const OAIWritableModuleType &oai_writable_module_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModuleTypesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module_type OAIWritableModuleType [required]
    */
    virtual void dcimModuleTypesUpdate(const qint32 &id, const OAIWritableModuleType &oai_writable_module_type);


    virtual void dcimModulesBulkDelete();

    /**
    * @param[in]  oai_writable_module OAIWritableModule [required]
    */
    virtual void dcimModulesBulkPartialUpdate(const OAIWritableModule &oai_writable_module);

    /**
    * @param[in]  oai_writable_module OAIWritableModule [required]
    */
    virtual void dcimModulesBulkUpdate(const OAIWritableModule &oai_writable_module);

    /**
    * @param[in]  oai_writable_module OAIWritableModule [required]
    */
    virtual void dcimModulesCreate(const OAIWritableModule &oai_writable_module);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModulesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  asset_tag QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  module_type_id QString [optional]
    * @param[in]  module_type QString [optional]
    * @param[in]  module_bay_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  asset_tag__n QString [optional]
    * @param[in]  asset_tag__ic QString [optional]
    * @param[in]  asset_tag__nic QString [optional]
    * @param[in]  asset_tag__iew QString [optional]
    * @param[in]  asset_tag__niew QString [optional]
    * @param[in]  asset_tag__isw QString [optional]
    * @param[in]  asset_tag__nisw QString [optional]
    * @param[in]  asset_tag__ie QString [optional]
    * @param[in]  asset_tag__nie QString [optional]
    * @param[in]  asset_tag__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  module_type_id__n QString [optional]
    * @param[in]  module_type__n QString [optional]
    * @param[in]  module_bay_id__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  serial__n QString [optional]
    * @param[in]  serial__ic QString [optional]
    * @param[in]  serial__nic QString [optional]
    * @param[in]  serial__iew QString [optional]
    * @param[in]  serial__niew QString [optional]
    * @param[in]  serial__isw QString [optional]
    * @param[in]  serial__nisw QString [optional]
    * @param[in]  serial__ie QString [optional]
    * @param[in]  serial__nie QString [optional]
    * @param[in]  serial__empty QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimModulesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_bay_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_bay_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module OAIWritableModule [required]
    */
    virtual void dcimModulesPartialUpdate(const qint32 &id, const OAIWritableModule &oai_writable_module);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimModulesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_module OAIWritableModule [required]
    */
    virtual void dcimModulesUpdate(const qint32 &id, const OAIWritableModule &oai_writable_module);


    virtual void dcimPlatformsBulkDelete();

    /**
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsBulkPartialUpdate(const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsBulkUpdate(const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsCreate(const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPlatformsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  napalm_driver QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  manufacturer_id QString [optional]
    * @param[in]  manufacturer QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  napalm_driver__n QString [optional]
    * @param[in]  napalm_driver__ic QString [optional]
    * @param[in]  napalm_driver__nic QString [optional]
    * @param[in]  napalm_driver__iew QString [optional]
    * @param[in]  napalm_driver__niew QString [optional]
    * @param[in]  napalm_driver__isw QString [optional]
    * @param[in]  napalm_driver__nisw QString [optional]
    * @param[in]  napalm_driver__ie QString [optional]
    * @param[in]  napalm_driver__nie QString [optional]
    * @param[in]  napalm_driver__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  manufacturer_id__n QString [optional]
    * @param[in]  manufacturer__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPlatformsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &napalm_driver__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manufacturer__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsPartialUpdate(const qint32 &id, const OAIWritablePlatform &oai_writable_platform);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPlatformsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_platform OAIWritablePlatform [required]
    */
    virtual void dcimPlatformsUpdate(const qint32 &id, const OAIWritablePlatform &oai_writable_platform);


    virtual void dcimPowerFeedsBulkDelete();

    /**
    * @param[in]  oai_writable_power_feed OAIWritablePowerFeed [required]
    */
    virtual void dcimPowerFeedsBulkPartialUpdate(const OAIWritablePowerFeed &oai_writable_power_feed);

    /**
    * @param[in]  oai_writable_power_feed OAIWritablePowerFeed [required]
    */
    virtual void dcimPowerFeedsBulkUpdate(const OAIWritablePowerFeed &oai_writable_power_feed);

    /**
    * @param[in]  oai_writable_power_feed OAIWritablePowerFeed [required]
    */
    virtual void dcimPowerFeedsCreate(const OAIWritablePowerFeed &oai_writable_power_feed);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerFeedsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  supply QString [optional]
    * @param[in]  phase QString [optional]
    * @param[in]  voltage QString [optional]
    * @param[in]  amperage QString [optional]
    * @param[in]  max_utilization QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  connected QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  power_panel_id QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  supply__n QString [optional]
    * @param[in]  phase__n QString [optional]
    * @param[in]  voltage__n QString [optional]
    * @param[in]  voltage__lte QString [optional]
    * @param[in]  voltage__lt QString [optional]
    * @param[in]  voltage__gte QString [optional]
    * @param[in]  voltage__gt QString [optional]
    * @param[in]  amperage__n QString [optional]
    * @param[in]  amperage__lte QString [optional]
    * @param[in]  amperage__lt QString [optional]
    * @param[in]  amperage__gte QString [optional]
    * @param[in]  amperage__gt QString [optional]
    * @param[in]  max_utilization__n QString [optional]
    * @param[in]  max_utilization__lte QString [optional]
    * @param[in]  max_utilization__lt QString [optional]
    * @param[in]  max_utilization__gte QString [optional]
    * @param[in]  max_utilization__gt QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  power_panel_id__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerFeedsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &supply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voltage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amperage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_utilization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connected = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_panel_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &supply__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phase__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voltage__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voltage__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voltage__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voltage__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &voltage__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amperage__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amperage__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amperage__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amperage__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amperage__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_utilization__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_utilization__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_utilization__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_utilization__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_utilization__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &power_panel_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_feed OAIWritablePowerFeed [required]
    */
    virtual void dcimPowerFeedsPartialUpdate(const qint32 &id, const OAIWritablePowerFeed &oai_writable_power_feed);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerFeedsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerFeedsTrace(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_feed OAIWritablePowerFeed [required]
    */
    virtual void dcimPowerFeedsUpdate(const qint32 &id, const OAIWritablePowerFeed &oai_writable_power_feed);


    virtual void dcimPowerOutletTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesBulkPartialUpdate(const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesBulkUpdate(const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesCreate(const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  feed_leg QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  feed_leg__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerOutletTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feed_leg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feed_leg__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesPartialUpdate(const qint32 &id, const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet_template OAIWritablePowerOutletTemplate [required]
    */
    virtual void dcimPowerOutletTemplatesUpdate(const qint32 &id, const OAIWritablePowerOutletTemplate &oai_writable_power_outlet_template);


    virtual void dcimPowerOutletsBulkDelete();

    /**
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsBulkPartialUpdate(const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsBulkUpdate(const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsCreate(const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  feed_leg QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  connected QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  feed_leg__n QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerOutletsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feed_leg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connected = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &feed_leg__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsPartialUpdate(const qint32 &id, const OAIWritablePowerOutlet &oai_writable_power_outlet);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerOutletsTrace(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_outlet OAIWritablePowerOutlet [required]
    */
    virtual void dcimPowerOutletsUpdate(const qint32 &id, const OAIWritablePowerOutlet &oai_writable_power_outlet);


    virtual void dcimPowerPanelsBulkDelete();

    /**
    * @param[in]  oai_writable_power_panel OAIWritablePowerPanel [required]
    */
    virtual void dcimPowerPanelsBulkPartialUpdate(const OAIWritablePowerPanel &oai_writable_power_panel);

    /**
    * @param[in]  oai_writable_power_panel OAIWritablePowerPanel [required]
    */
    virtual void dcimPowerPanelsBulkUpdate(const OAIWritablePowerPanel &oai_writable_power_panel);

    /**
    * @param[in]  oai_writable_power_panel OAIWritablePowerPanel [required]
    */
    virtual void dcimPowerPanelsCreate(const OAIWritablePowerPanel &oai_writable_power_panel);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPanelsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerPanelsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_panel OAIWritablePowerPanel [required]
    */
    virtual void dcimPowerPanelsPartialUpdate(const qint32 &id, const OAIWritablePowerPanel &oai_writable_power_panel);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPanelsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_panel OAIWritablePowerPanel [required]
    */
    virtual void dcimPowerPanelsUpdate(const qint32 &id, const OAIWritablePowerPanel &oai_writable_power_panel);


    virtual void dcimPowerPortTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesBulkPartialUpdate(const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesBulkUpdate(const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesCreate(const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  maximum_draw QString [optional]
    * @param[in]  allocated_draw QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  maximum_draw__n QString [optional]
    * @param[in]  maximum_draw__lte QString [optional]
    * @param[in]  maximum_draw__lt QString [optional]
    * @param[in]  maximum_draw__gte QString [optional]
    * @param[in]  maximum_draw__gt QString [optional]
    * @param[in]  allocated_draw__n QString [optional]
    * @param[in]  allocated_draw__lte QString [optional]
    * @param[in]  allocated_draw__lt QString [optional]
    * @param[in]  allocated_draw__gte QString [optional]
    * @param[in]  allocated_draw__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerPortTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesPartialUpdate(const qint32 &id, const OAIWritablePowerPortTemplate &oai_writable_power_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port_template OAIWritablePowerPortTemplate [required]
    */
    virtual void dcimPowerPortTemplatesUpdate(const qint32 &id, const OAIWritablePowerPortTemplate &oai_writable_power_port_template);


    virtual void dcimPowerPortsBulkDelete();

    /**
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsBulkPartialUpdate(const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsBulkUpdate(const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsCreate(const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  maximum_draw QString [optional]
    * @param[in]  allocated_draw QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  connected QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  maximum_draw__n QString [optional]
    * @param[in]  maximum_draw__lte QString [optional]
    * @param[in]  maximum_draw__lt QString [optional]
    * @param[in]  maximum_draw__gte QString [optional]
    * @param[in]  maximum_draw__gt QString [optional]
    * @param[in]  allocated_draw__n QString [optional]
    * @param[in]  allocated_draw__lte QString [optional]
    * @param[in]  allocated_draw__lt QString [optional]
    * @param[in]  allocated_draw__gte QString [optional]
    * @param[in]  allocated_draw__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimPowerPortsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connected = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &maximum_draw__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allocated_draw__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsPartialUpdate(const qint32 &id, const OAIWritablePowerPort &oai_writable_power_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimPowerPortsTrace(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_power_port OAIWritablePowerPort [required]
    */
    virtual void dcimPowerPortsUpdate(const qint32 &id, const OAIWritablePowerPort &oai_writable_power_port);


    virtual void dcimRackReservationsBulkDelete();

    /**
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsBulkPartialUpdate(const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsBulkUpdate(const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsCreate(const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackReservationsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  user_id__n QString [optional]
    * @param[in]  user__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRackReservationsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsPartialUpdate(const qint32 &id, const OAIWritableRackReservation &oai_writable_rack_reservation);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackReservationsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack_reservation OAIWritableRackReservation [required]
    */
    virtual void dcimRackReservationsUpdate(const qint32 &id, const OAIWritableRackReservation &oai_writable_rack_reservation);


    virtual void dcimRackRolesBulkDelete();

    /**
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesBulkPartialUpdate(const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesBulkUpdate(const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesCreate(const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRackRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesPartialUpdate(const qint32 &id, const OAIRackRole &oai_rack_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRackRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_rack_role OAIRackRole [required]
    */
    virtual void dcimRackRolesUpdate(const qint32 &id, const OAIRackRole &oai_rack_role);


    virtual void dcimRacksBulkDelete();

    /**
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksBulkPartialUpdate(const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksBulkUpdate(const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksCreate(const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRacksDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  q QString [optional]
    * @param[in]  face QString [optional]
    * @param[in]  render QString [optional]
    * @param[in]  unit_width qint32 [optional]
    * @param[in]  unit_height qint32 [optional]
    * @param[in]  legend_width qint32 [optional]
    * @param[in]  margin_width qint32 [optional]
    * @param[in]  exclude qint32 [optional]
    * @param[in]  expand_devices bool [optional]
    * @param[in]  include_images bool [optional]
    */
    virtual void dcimRacksElevation(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &face = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &render = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &unit_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &unit_height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &legend_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &margin_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &exclude = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &expand_devices = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_images = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  facility_id QString [optional]
    * @param[in]  asset_tag QString [optional]
    * @param[in]  u_height QString [optional]
    * @param[in]  desc_units QString [optional]
    * @param[in]  outer_width QString [optional]
    * @param[in]  outer_depth QString [optional]
    * @param[in]  outer_unit QString [optional]
    * @param[in]  mounting_depth QString [optional]
    * @param[in]  weight QString [optional]
    * @param[in]  max_weight QString [optional]
    * @param[in]  weight_unit QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  width QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  serial QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  facility_id__n QString [optional]
    * @param[in]  facility_id__ic QString [optional]
    * @param[in]  facility_id__nic QString [optional]
    * @param[in]  facility_id__iew QString [optional]
    * @param[in]  facility_id__niew QString [optional]
    * @param[in]  facility_id__isw QString [optional]
    * @param[in]  facility_id__nisw QString [optional]
    * @param[in]  facility_id__ie QString [optional]
    * @param[in]  facility_id__nie QString [optional]
    * @param[in]  facility_id__empty QString [optional]
    * @param[in]  asset_tag__n QString [optional]
    * @param[in]  asset_tag__ic QString [optional]
    * @param[in]  asset_tag__nic QString [optional]
    * @param[in]  asset_tag__iew QString [optional]
    * @param[in]  asset_tag__niew QString [optional]
    * @param[in]  asset_tag__isw QString [optional]
    * @param[in]  asset_tag__nisw QString [optional]
    * @param[in]  asset_tag__ie QString [optional]
    * @param[in]  asset_tag__nie QString [optional]
    * @param[in]  asset_tag__empty QString [optional]
    * @param[in]  u_height__n QString [optional]
    * @param[in]  u_height__lte QString [optional]
    * @param[in]  u_height__lt QString [optional]
    * @param[in]  u_height__gte QString [optional]
    * @param[in]  u_height__gt QString [optional]
    * @param[in]  outer_width__n QString [optional]
    * @param[in]  outer_width__lte QString [optional]
    * @param[in]  outer_width__lt QString [optional]
    * @param[in]  outer_width__gte QString [optional]
    * @param[in]  outer_width__gt QString [optional]
    * @param[in]  outer_depth__n QString [optional]
    * @param[in]  outer_depth__lte QString [optional]
    * @param[in]  outer_depth__lt QString [optional]
    * @param[in]  outer_depth__gte QString [optional]
    * @param[in]  outer_depth__gt QString [optional]
    * @param[in]  outer_unit__n QString [optional]
    * @param[in]  mounting_depth__n QString [optional]
    * @param[in]  mounting_depth__lte QString [optional]
    * @param[in]  mounting_depth__lt QString [optional]
    * @param[in]  mounting_depth__gte QString [optional]
    * @param[in]  mounting_depth__gt QString [optional]
    * @param[in]  weight__n QString [optional]
    * @param[in]  weight__lte QString [optional]
    * @param[in]  weight__lt QString [optional]
    * @param[in]  weight__gte QString [optional]
    * @param[in]  weight__gt QString [optional]
    * @param[in]  max_weight__n QString [optional]
    * @param[in]  max_weight__lte QString [optional]
    * @param[in]  max_weight__lt QString [optional]
    * @param[in]  max_weight__gte QString [optional]
    * @param[in]  max_weight__gt QString [optional]
    * @param[in]  weight_unit__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  width__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  serial__n QString [optional]
    * @param[in]  serial__ic QString [optional]
    * @param[in]  serial__nic QString [optional]
    * @param[in]  serial__iew QString [optional]
    * @param[in]  serial__niew QString [optional]
    * @param[in]  serial__isw QString [optional]
    * @param[in]  serial__nisw QString [optional]
    * @param[in]  serial__ie QString [optional]
    * @param[in]  serial__nie QString [optional]
    * @param[in]  serial__empty QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRacksList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &desc_units = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_width = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mounting_depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_weight = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight_unit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &width = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility_id__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_tag__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &u_height__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_width__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_width__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_width__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_width__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_width__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_depth__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_depth__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_depth__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_depth__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_depth__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outer_unit__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mounting_depth__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mounting_depth__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mounting_depth__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mounting_depth__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mounting_depth__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_weight__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_weight__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_weight__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_weight__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_weight__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &weight_unit__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &width__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serial__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksPartialUpdate(const qint32 &id, const OAIWritableRack &oai_writable_rack);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRacksRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rack OAIWritableRack [required]
    */
    virtual void dcimRacksUpdate(const qint32 &id, const OAIWritableRack &oai_writable_rack);


    virtual void dcimRearPortTemplatesBulkDelete();

    /**
    * @param[in]  oai_writable_rear_port_template OAIWritableRearPortTemplate [required]
    */
    virtual void dcimRearPortTemplatesBulkPartialUpdate(const OAIWritableRearPortTemplate &oai_writable_rear_port_template);

    /**
    * @param[in]  oai_writable_rear_port_template OAIWritableRearPortTemplate [required]
    */
    virtual void dcimRearPortTemplatesBulkUpdate(const OAIWritableRearPortTemplate &oai_writable_rear_port_template);

    /**
    * @param[in]  oai_writable_rear_port_template OAIWritableRearPortTemplate [required]
    */
    virtual void dcimRearPortTemplatesCreate(const OAIWritableRearPortTemplate &oai_writable_rear_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRearPortTemplatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  positions QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  devicetype_id QString [optional]
    * @param[in]  moduletype_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  positions__n QString [optional]
    * @param[in]  positions__lte QString [optional]
    * @param[in]  positions__lt QString [optional]
    * @param[in]  positions__gte QString [optional]
    * @param[in]  positions__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  devicetype_id__n QString [optional]
    * @param[in]  moduletype_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRearPortTemplatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &devicetype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &moduletype_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rear_port_template OAIWritableRearPortTemplate [required]
    */
    virtual void dcimRearPortTemplatesPartialUpdate(const qint32 &id, const OAIWritableRearPortTemplate &oai_writable_rear_port_template);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRearPortTemplatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rear_port_template OAIWritableRearPortTemplate [required]
    */
    virtual void dcimRearPortTemplatesUpdate(const qint32 &id, const OAIWritableRearPortTemplate &oai_writable_rear_port_template);


    virtual void dcimRearPortsBulkDelete();

    /**
    * @param[in]  oai_writable_rear_port OAIWritableRearPort [required]
    */
    virtual void dcimRearPortsBulkPartialUpdate(const OAIWritableRearPort &oai_writable_rear_port);

    /**
    * @param[in]  oai_writable_rear_port OAIWritableRearPort [required]
    */
    virtual void dcimRearPortsBulkUpdate(const OAIWritableRearPort &oai_writable_rear_port);

    /**
    * @param[in]  oai_writable_rear_port OAIWritableRearPort [required]
    */
    virtual void dcimRearPortsCreate(const OAIWritableRearPort &oai_writable_rear_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRearPortsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  positions QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  cable_end QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  location_id QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  rack_id QString [optional]
    * @param[in]  rack QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_chassis_id QString [optional]
    * @param[in]  virtual_chassis QString [optional]
    * @param[in]  module_id QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cabled QString [optional]
    * @param[in]  occupied QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  label__n QString [optional]
    * @param[in]  label__ic QString [optional]
    * @param[in]  label__nic QString [optional]
    * @param[in]  label__iew QString [optional]
    * @param[in]  label__niew QString [optional]
    * @param[in]  label__isw QString [optional]
    * @param[in]  label__nisw QString [optional]
    * @param[in]  label__ie QString [optional]
    * @param[in]  label__nie QString [optional]
    * @param[in]  label__empty QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  color__n QString [optional]
    * @param[in]  color__ic QString [optional]
    * @param[in]  color__nic QString [optional]
    * @param[in]  color__iew QString [optional]
    * @param[in]  color__niew QString [optional]
    * @param[in]  color__isw QString [optional]
    * @param[in]  color__nisw QString [optional]
    * @param[in]  color__ie QString [optional]
    * @param[in]  color__nie QString [optional]
    * @param[in]  color__empty QString [optional]
    * @param[in]  positions__n QString [optional]
    * @param[in]  positions__lte QString [optional]
    * @param[in]  positions__lt QString [optional]
    * @param[in]  positions__gte QString [optional]
    * @param[in]  positions__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  cable_end__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  location_id__n QString [optional]
    * @param[in]  location__n QString [optional]
    * @param[in]  rack_id__n QString [optional]
    * @param[in]  rack__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_chassis_id__n QString [optional]
    * @param[in]  virtual_chassis__n QString [optional]
    * @param[in]  module_id__n QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRearPortsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &occupied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &positions__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cable_end__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rack__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_chassis__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &module_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rear_port OAIWritableRearPort [required]
    */
    virtual void dcimRearPortsPartialUpdate(const qint32 &id, const OAIWritableRearPort &oai_writable_rear_port);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRearPortsPaths(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRearPortsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_rear_port OAIWritableRearPort [required]
    */
    virtual void dcimRearPortsUpdate(const qint32 &id, const OAIWritableRearPort &oai_writable_rear_port);


    virtual void dcimRegionsBulkDelete();

    /**
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsBulkPartialUpdate(const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsBulkUpdate(const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsCreate(const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRegionsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  parent__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimRegionsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsPartialUpdate(const qint32 &id, const OAIWritableRegion &oai_writable_region);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimRegionsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_region OAIWritableRegion [required]
    */
    virtual void dcimRegionsUpdate(const qint32 &id, const OAIWritableRegion &oai_writable_region);


    virtual void dcimSiteGroupsBulkDelete();

    /**
    * @param[in]  oai_writable_site_group OAIWritableSiteGroup [required]
    */
    virtual void dcimSiteGroupsBulkPartialUpdate(const OAIWritableSiteGroup &oai_writable_site_group);

    /**
    * @param[in]  oai_writable_site_group OAIWritableSiteGroup [required]
    */
    virtual void dcimSiteGroupsBulkUpdate(const OAIWritableSiteGroup &oai_writable_site_group);

    /**
    * @param[in]  oai_writable_site_group OAIWritableSiteGroup [required]
    */
    virtual void dcimSiteGroupsCreate(const OAIWritableSiteGroup &oai_writable_site_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSiteGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  parent__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimSiteGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_site_group OAIWritableSiteGroup [required]
    */
    virtual void dcimSiteGroupsPartialUpdate(const qint32 &id, const OAIWritableSiteGroup &oai_writable_site_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSiteGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_site_group OAIWritableSiteGroup [required]
    */
    virtual void dcimSiteGroupsUpdate(const qint32 &id, const OAIWritableSiteGroup &oai_writable_site_group);


    virtual void dcimSitesBulkDelete();

    /**
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesBulkPartialUpdate(const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesBulkUpdate(const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesCreate(const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSitesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  facility QString [optional]
    * @param[in]  latitude QString [optional]
    * @param[in]  longitude QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  asn QString [optional]
    * @param[in]  asn_id QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  facility__n QString [optional]
    * @param[in]  facility__ic QString [optional]
    * @param[in]  facility__nic QString [optional]
    * @param[in]  facility__iew QString [optional]
    * @param[in]  facility__niew QString [optional]
    * @param[in]  facility__isw QString [optional]
    * @param[in]  facility__nisw QString [optional]
    * @param[in]  facility__ie QString [optional]
    * @param[in]  facility__nie QString [optional]
    * @param[in]  facility__empty QString [optional]
    * @param[in]  latitude__n QString [optional]
    * @param[in]  latitude__lte QString [optional]
    * @param[in]  latitude__lt QString [optional]
    * @param[in]  latitude__gte QString [optional]
    * @param[in]  latitude__gt QString [optional]
    * @param[in]  longitude__n QString [optional]
    * @param[in]  longitude__lte QString [optional]
    * @param[in]  longitude__lt QString [optional]
    * @param[in]  longitude__gte QString [optional]
    * @param[in]  longitude__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  asn__n QString [optional]
    * @param[in]  asn_id__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimSitesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &latitude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &facility__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &latitude__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &latitude__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &latitude__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &latitude__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &latitude__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &longitude__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesPartialUpdate(const qint32 &id, const OAIWritableSite &oai_writable_site);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimSitesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_site OAIWritableSite [required]
    */
    virtual void dcimSitesUpdate(const qint32 &id, const OAIWritableSite &oai_writable_site);


    virtual void dcimVirtualChassisBulkDelete();

    /**
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisBulkPartialUpdate(const OAIWritableVirtualChassis &oai_writable_virtual_chassis);

    /**
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisBulkUpdate(const OAIWritableVirtualChassis &oai_writable_virtual_chassis);

    /**
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisCreate(const OAIWritableVirtualChassis &oai_writable_virtual_chassis);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimVirtualChassisDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  master_id QString [optional]
    * @param[in]  master QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  domain__n QString [optional]
    * @param[in]  domain__ic QString [optional]
    * @param[in]  domain__nic QString [optional]
    * @param[in]  domain__iew QString [optional]
    * @param[in]  domain__niew QString [optional]
    * @param[in]  domain__isw QString [optional]
    * @param[in]  domain__nisw QString [optional]
    * @param[in]  domain__ie QString [optional]
    * @param[in]  domain__nie QString [optional]
    * @param[in]  domain__empty QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  master_id__n QString [optional]
    * @param[in]  master__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimVirtualChassisList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &master_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &master = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &master_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &master__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisPartialUpdate(const qint32 &id, const OAIWritableVirtualChassis &oai_writable_virtual_chassis);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimVirtualChassisRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_chassis OAIWritableVirtualChassis [required]
    */
    virtual void dcimVirtualChassisUpdate(const qint32 &id, const OAIWritableVirtualChassis &oai_writable_virtual_chassis);


    virtual void dcimVirtualDeviceContextsBulkDelete();

    /**
    * @param[in]  oai_writable_virtual_device_context OAIWritableVirtualDeviceContext [required]
    */
    virtual void dcimVirtualDeviceContextsBulkPartialUpdate(const OAIWritableVirtualDeviceContext &oai_writable_virtual_device_context);

    /**
    * @param[in]  oai_writable_virtual_device_context OAIWritableVirtualDeviceContext [required]
    */
    virtual void dcimVirtualDeviceContextsBulkUpdate(const OAIWritableVirtualDeviceContext &oai_writable_virtual_device_context);

    /**
    * @param[in]  oai_writable_virtual_device_context OAIWritableVirtualDeviceContext [required]
    */
    virtual void dcimVirtualDeviceContextsCreate(const OAIWritableVirtualDeviceContext &oai_writable_virtual_device_context);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimVirtualDeviceContextsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  has_primary_ip QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void dcimVirtualDeviceContextsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_primary_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_device_context OAIWritableVirtualDeviceContext [required]
    */
    virtual void dcimVirtualDeviceContextsPartialUpdate(const qint32 &id, const OAIWritableVirtualDeviceContext &oai_writable_virtual_device_context);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void dcimVirtualDeviceContextsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_device_context OAIWritableVirtualDeviceContext [required]
    */
    virtual void dcimVirtualDeviceContextsUpdate(const qint32 &id, const OAIWritableVirtualDeviceContext &oai_writable_virtual_device_context);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dcimCableTerminationsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsListCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsReadCallback(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCablesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimCablesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCablesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCablesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimCablesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimCablesListCallback(OAIHttpRequestWorker *worker);
    void dcimCablesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimCablesReadCallback(OAIHttpRequestWorker *worker);
    void dcimCablesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConnectedDeviceListCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsListCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsTraceCallback(OAIHttpRequestWorker *worker);
    void dcimConsolePortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsListCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsTraceCallback(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesListCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesListCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesNapalmCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesReadCallback(OAIHttpRequestWorker *worker);
    void dcimDevicesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsListCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsPathsCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimFrontPortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesListCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesReadCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesTraceCallback(OAIHttpRequestWorker *worker);
    void dcimInterfacesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesListCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesReadCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsListCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsReadCallback(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsListCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsReadCallback(OAIHttpRequestWorker *worker);
    void dcimLocationsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersCreateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersListCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersReadCallback(OAIHttpRequestWorker *worker);
    void dcimManufacturersUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysCreateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysListCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysReadCallback(OAIHttpRequestWorker *worker);
    void dcimModuleBaysUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesListCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesReadCallback(OAIHttpRequestWorker *worker);
    void dcimModuleTypesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModulesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModulesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModulesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModulesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimModulesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimModulesListCallback(OAIHttpRequestWorker *worker);
    void dcimModulesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimModulesReadCallback(OAIHttpRequestWorker *worker);
    void dcimModulesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsListCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPlatformsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsTraceCallback(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsTraceCallback(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsListCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsTraceCallback(OAIHttpRequestWorker *worker);
    void dcimPowerPortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsListCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsReadCallback(OAIHttpRequestWorker *worker);
    void dcimRackReservationsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesListCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesReadCallback(OAIHttpRequestWorker *worker);
    void dcimRackRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRacksBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRacksElevationCallback(OAIHttpRequestWorker *worker);
    void dcimRacksListCallback(OAIHttpRequestWorker *worker);
    void dcimRacksPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRacksReadCallback(OAIHttpRequestWorker *worker);
    void dcimRacksUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesListCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesReadCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsListCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsPathsCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsReadCallback(OAIHttpRequestWorker *worker);
    void dcimRearPortsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsListCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsReadCallback(OAIHttpRequestWorker *worker);
    void dcimRegionsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsListCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsReadCallback(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimSitesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesCreateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimSitesListCallback(OAIHttpRequestWorker *worker);
    void dcimSitesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimSitesReadCallback(OAIHttpRequestWorker *worker);
    void dcimSitesUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisCreateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisListCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisReadCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsCreateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsDeleteCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsListCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsReadCallback(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dcimCableTerminationsBulkDeleteSignal();
    void dcimCableTerminationsBulkPartialUpdateSignal(OAICableTermination summary);
    void dcimCableTerminationsBulkUpdateSignal(OAICableTermination summary);
    void dcimCableTerminationsCreateSignal(OAICableTermination summary);
    void dcimCableTerminationsDeleteSignal();
    void dcimCableTerminationsListSignal(OAIDcim_cable_terminations_list_200_response summary);
    void dcimCableTerminationsPartialUpdateSignal(OAICableTermination summary);
    void dcimCableTerminationsReadSignal(OAICableTermination summary);
    void dcimCableTerminationsUpdateSignal(OAICableTermination summary);
    void dcimCablesBulkDeleteSignal();
    void dcimCablesBulkPartialUpdateSignal(OAICable summary);
    void dcimCablesBulkUpdateSignal(OAICable summary);
    void dcimCablesCreateSignal(OAICable summary);
    void dcimCablesDeleteSignal();
    void dcimCablesListSignal(OAIDcim_cables_list_200_response summary);
    void dcimCablesPartialUpdateSignal(OAICable summary);
    void dcimCablesReadSignal(OAICable summary);
    void dcimCablesUpdateSignal(OAICable summary);
    void dcimConnectedDeviceListSignal(OAIDevice summary);
    void dcimConsolePortTemplatesBulkDeleteSignal();
    void dcimConsolePortTemplatesBulkPartialUpdateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesBulkUpdateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesCreateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesDeleteSignal();
    void dcimConsolePortTemplatesListSignal(OAIDcim_console_port_templates_list_200_response summary);
    void dcimConsolePortTemplatesPartialUpdateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesReadSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesUpdateSignal(OAIConsolePortTemplate summary);
    void dcimConsolePortsBulkDeleteSignal();
    void dcimConsolePortsBulkPartialUpdateSignal(OAIConsolePort summary);
    void dcimConsolePortsBulkUpdateSignal(OAIConsolePort summary);
    void dcimConsolePortsCreateSignal(OAIConsolePort summary);
    void dcimConsolePortsDeleteSignal();
    void dcimConsolePortsListSignal(OAIDcim_console_ports_list_200_response summary);
    void dcimConsolePortsPartialUpdateSignal(OAIConsolePort summary);
    void dcimConsolePortsReadSignal(OAIConsolePort summary);
    void dcimConsolePortsTraceSignal(OAIConsolePort summary);
    void dcimConsolePortsUpdateSignal(OAIConsolePort summary);
    void dcimConsoleServerPortTemplatesBulkDeleteSignal();
    void dcimConsoleServerPortTemplatesBulkPartialUpdateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesBulkUpdateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesCreateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesDeleteSignal();
    void dcimConsoleServerPortTemplatesListSignal(OAIDcim_console_server_port_templates_list_200_response summary);
    void dcimConsoleServerPortTemplatesPartialUpdateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesReadSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesUpdateSignal(OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortsBulkDeleteSignal();
    void dcimConsoleServerPortsBulkPartialUpdateSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsBulkUpdateSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsCreateSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsDeleteSignal();
    void dcimConsoleServerPortsListSignal(OAIDcim_console_server_ports_list_200_response summary);
    void dcimConsoleServerPortsPartialUpdateSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsReadSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsTraceSignal(OAIConsoleServerPort summary);
    void dcimConsoleServerPortsUpdateSignal(OAIConsoleServerPort summary);
    void dcimDeviceBayTemplatesBulkDeleteSignal();
    void dcimDeviceBayTemplatesBulkPartialUpdateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesBulkUpdateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesCreateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesDeleteSignal();
    void dcimDeviceBayTemplatesListSignal(OAIDcim_device_bay_templates_list_200_response summary);
    void dcimDeviceBayTemplatesPartialUpdateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesReadSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesUpdateSignal(OAIDeviceBayTemplate summary);
    void dcimDeviceBaysBulkDeleteSignal();
    void dcimDeviceBaysBulkPartialUpdateSignal(OAIDeviceBay summary);
    void dcimDeviceBaysBulkUpdateSignal(OAIDeviceBay summary);
    void dcimDeviceBaysCreateSignal(OAIDeviceBay summary);
    void dcimDeviceBaysDeleteSignal();
    void dcimDeviceBaysListSignal(OAIDcim_device_bays_list_200_response summary);
    void dcimDeviceBaysPartialUpdateSignal(OAIDeviceBay summary);
    void dcimDeviceBaysReadSignal(OAIDeviceBay summary);
    void dcimDeviceBaysUpdateSignal(OAIDeviceBay summary);
    void dcimDeviceRolesBulkDeleteSignal();
    void dcimDeviceRolesBulkPartialUpdateSignal(OAIDeviceRole summary);
    void dcimDeviceRolesBulkUpdateSignal(OAIDeviceRole summary);
    void dcimDeviceRolesCreateSignal(OAIDeviceRole summary);
    void dcimDeviceRolesDeleteSignal();
    void dcimDeviceRolesListSignal(OAIDcim_device_roles_list_200_response summary);
    void dcimDeviceRolesPartialUpdateSignal(OAIDeviceRole summary);
    void dcimDeviceRolesReadSignal(OAIDeviceRole summary);
    void dcimDeviceRolesUpdateSignal(OAIDeviceRole summary);
    void dcimDeviceTypesBulkDeleteSignal();
    void dcimDeviceTypesBulkPartialUpdateSignal(OAIDeviceType summary);
    void dcimDeviceTypesBulkUpdateSignal(OAIDeviceType summary);
    void dcimDeviceTypesCreateSignal(OAIDeviceType summary);
    void dcimDeviceTypesDeleteSignal();
    void dcimDeviceTypesListSignal(OAIDcim_device_types_list_200_response summary);
    void dcimDeviceTypesPartialUpdateSignal(OAIDeviceType summary);
    void dcimDeviceTypesReadSignal(OAIDeviceType summary);
    void dcimDeviceTypesUpdateSignal(OAIDeviceType summary);
    void dcimDevicesBulkDeleteSignal();
    void dcimDevicesBulkPartialUpdateSignal(OAIDeviceWithConfigContext summary);
    void dcimDevicesBulkUpdateSignal(OAIDeviceWithConfigContext summary);
    void dcimDevicesCreateSignal(OAIDeviceWithConfigContext summary);
    void dcimDevicesDeleteSignal();
    void dcimDevicesListSignal(OAIDcim_devices_list_200_response summary);
    void dcimDevicesNapalmSignal(OAIDeviceNAPALM summary);
    void dcimDevicesPartialUpdateSignal(OAIDeviceWithConfigContext summary);
    void dcimDevicesReadSignal(OAIDeviceWithConfigContext summary);
    void dcimDevicesUpdateSignal(OAIDeviceWithConfigContext summary);
    void dcimFrontPortTemplatesBulkDeleteSignal();
    void dcimFrontPortTemplatesBulkPartialUpdateSignal(OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesBulkUpdateSignal(OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesCreateSignal(OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesDeleteSignal();
    void dcimFrontPortTemplatesListSignal(OAIDcim_front_port_templates_list_200_response summary);
    void dcimFrontPortTemplatesPartialUpdateSignal(OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesReadSignal(OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesUpdateSignal(OAIFrontPortTemplate summary);
    void dcimFrontPortsBulkDeleteSignal();
    void dcimFrontPortsBulkPartialUpdateSignal(OAIFrontPort summary);
    void dcimFrontPortsBulkUpdateSignal(OAIFrontPort summary);
    void dcimFrontPortsCreateSignal(OAIFrontPort summary);
    void dcimFrontPortsDeleteSignal();
    void dcimFrontPortsListSignal(OAIDcim_front_ports_list_200_response summary);
    void dcimFrontPortsPartialUpdateSignal(OAIFrontPort summary);
    void dcimFrontPortsPathsSignal(OAIFrontPort summary);
    void dcimFrontPortsReadSignal(OAIFrontPort summary);
    void dcimFrontPortsUpdateSignal(OAIFrontPort summary);
    void dcimInterfaceTemplatesBulkDeleteSignal();
    void dcimInterfaceTemplatesBulkPartialUpdateSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesBulkUpdateSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesCreateSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesDeleteSignal();
    void dcimInterfaceTemplatesListSignal(OAIDcim_interface_templates_list_200_response summary);
    void dcimInterfaceTemplatesPartialUpdateSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesReadSignal(OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesUpdateSignal(OAIInterfaceTemplate summary);
    void dcimInterfacesBulkDeleteSignal();
    void dcimInterfacesBulkPartialUpdateSignal(OAIInterface summary);
    void dcimInterfacesBulkUpdateSignal(OAIInterface summary);
    void dcimInterfacesCreateSignal(OAIInterface summary);
    void dcimInterfacesDeleteSignal();
    void dcimInterfacesListSignal(OAIDcim_interfaces_list_200_response summary);
    void dcimInterfacesPartialUpdateSignal(OAIInterface summary);
    void dcimInterfacesReadSignal(OAIInterface summary);
    void dcimInterfacesTraceSignal(OAIInterface summary);
    void dcimInterfacesUpdateSignal(OAIInterface summary);
    void dcimInventoryItemRolesBulkDeleteSignal();
    void dcimInventoryItemRolesBulkPartialUpdateSignal(OAIInventoryItemRole summary);
    void dcimInventoryItemRolesBulkUpdateSignal(OAIInventoryItemRole summary);
    void dcimInventoryItemRolesCreateSignal(OAIInventoryItemRole summary);
    void dcimInventoryItemRolesDeleteSignal();
    void dcimInventoryItemRolesListSignal(OAIDcim_inventory_item_roles_list_200_response summary);
    void dcimInventoryItemRolesPartialUpdateSignal(OAIInventoryItemRole summary);
    void dcimInventoryItemRolesReadSignal(OAIInventoryItemRole summary);
    void dcimInventoryItemRolesUpdateSignal(OAIInventoryItemRole summary);
    void dcimInventoryItemTemplatesBulkDeleteSignal();
    void dcimInventoryItemTemplatesBulkPartialUpdateSignal(OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesBulkUpdateSignal(OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesCreateSignal(OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesDeleteSignal();
    void dcimInventoryItemTemplatesListSignal(OAIDcim_inventory_item_templates_list_200_response summary);
    void dcimInventoryItemTemplatesPartialUpdateSignal(OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesReadSignal(OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesUpdateSignal(OAIInventoryItemTemplate summary);
    void dcimInventoryItemsBulkDeleteSignal();
    void dcimInventoryItemsBulkPartialUpdateSignal(OAIInventoryItem summary);
    void dcimInventoryItemsBulkUpdateSignal(OAIInventoryItem summary);
    void dcimInventoryItemsCreateSignal(OAIInventoryItem summary);
    void dcimInventoryItemsDeleteSignal();
    void dcimInventoryItemsListSignal(OAIDcim_inventory_items_list_200_response summary);
    void dcimInventoryItemsPartialUpdateSignal(OAIInventoryItem summary);
    void dcimInventoryItemsReadSignal(OAIInventoryItem summary);
    void dcimInventoryItemsUpdateSignal(OAIInventoryItem summary);
    void dcimLocationsBulkDeleteSignal();
    void dcimLocationsBulkPartialUpdateSignal(OAILocation summary);
    void dcimLocationsBulkUpdateSignal(OAILocation summary);
    void dcimLocationsCreateSignal(OAILocation summary);
    void dcimLocationsDeleteSignal();
    void dcimLocationsListSignal(OAIDcim_locations_list_200_response summary);
    void dcimLocationsPartialUpdateSignal(OAILocation summary);
    void dcimLocationsReadSignal(OAILocation summary);
    void dcimLocationsUpdateSignal(OAILocation summary);
    void dcimManufacturersBulkDeleteSignal();
    void dcimManufacturersBulkPartialUpdateSignal(OAIManufacturer summary);
    void dcimManufacturersBulkUpdateSignal(OAIManufacturer summary);
    void dcimManufacturersCreateSignal(OAIManufacturer summary);
    void dcimManufacturersDeleteSignal();
    void dcimManufacturersListSignal(OAIDcim_manufacturers_list_200_response summary);
    void dcimManufacturersPartialUpdateSignal(OAIManufacturer summary);
    void dcimManufacturersReadSignal(OAIManufacturer summary);
    void dcimManufacturersUpdateSignal(OAIManufacturer summary);
    void dcimModuleBayTemplatesBulkDeleteSignal();
    void dcimModuleBayTemplatesBulkPartialUpdateSignal(OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesBulkUpdateSignal(OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesCreateSignal(OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesDeleteSignal();
    void dcimModuleBayTemplatesListSignal(OAIDcim_module_bay_templates_list_200_response summary);
    void dcimModuleBayTemplatesPartialUpdateSignal(OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesReadSignal(OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesUpdateSignal(OAIModuleBayTemplate summary);
    void dcimModuleBaysBulkDeleteSignal();
    void dcimModuleBaysBulkPartialUpdateSignal(OAIModuleBay summary);
    void dcimModuleBaysBulkUpdateSignal(OAIModuleBay summary);
    void dcimModuleBaysCreateSignal(OAIModuleBay summary);
    void dcimModuleBaysDeleteSignal();
    void dcimModuleBaysListSignal(OAIDcim_module_bays_list_200_response summary);
    void dcimModuleBaysPartialUpdateSignal(OAIModuleBay summary);
    void dcimModuleBaysReadSignal(OAIModuleBay summary);
    void dcimModuleBaysUpdateSignal(OAIModuleBay summary);
    void dcimModuleTypesBulkDeleteSignal();
    void dcimModuleTypesBulkPartialUpdateSignal(OAIModuleType summary);
    void dcimModuleTypesBulkUpdateSignal(OAIModuleType summary);
    void dcimModuleTypesCreateSignal(OAIModuleType summary);
    void dcimModuleTypesDeleteSignal();
    void dcimModuleTypesListSignal(OAIDcim_module_types_list_200_response summary);
    void dcimModuleTypesPartialUpdateSignal(OAIModuleType summary);
    void dcimModuleTypesReadSignal(OAIModuleType summary);
    void dcimModuleTypesUpdateSignal(OAIModuleType summary);
    void dcimModulesBulkDeleteSignal();
    void dcimModulesBulkPartialUpdateSignal(OAIModule summary);
    void dcimModulesBulkUpdateSignal(OAIModule summary);
    void dcimModulesCreateSignal(OAIModule summary);
    void dcimModulesDeleteSignal();
    void dcimModulesListSignal(OAIDcim_modules_list_200_response summary);
    void dcimModulesPartialUpdateSignal(OAIModule summary);
    void dcimModulesReadSignal(OAIModule summary);
    void dcimModulesUpdateSignal(OAIModule summary);
    void dcimPlatformsBulkDeleteSignal();
    void dcimPlatformsBulkPartialUpdateSignal(OAIPlatform summary);
    void dcimPlatformsBulkUpdateSignal(OAIPlatform summary);
    void dcimPlatformsCreateSignal(OAIPlatform summary);
    void dcimPlatformsDeleteSignal();
    void dcimPlatformsListSignal(OAIDcim_platforms_list_200_response summary);
    void dcimPlatformsPartialUpdateSignal(OAIPlatform summary);
    void dcimPlatformsReadSignal(OAIPlatform summary);
    void dcimPlatformsUpdateSignal(OAIPlatform summary);
    void dcimPowerFeedsBulkDeleteSignal();
    void dcimPowerFeedsBulkPartialUpdateSignal(OAIPowerFeed summary);
    void dcimPowerFeedsBulkUpdateSignal(OAIPowerFeed summary);
    void dcimPowerFeedsCreateSignal(OAIPowerFeed summary);
    void dcimPowerFeedsDeleteSignal();
    void dcimPowerFeedsListSignal(OAIDcim_power_feeds_list_200_response summary);
    void dcimPowerFeedsPartialUpdateSignal(OAIPowerFeed summary);
    void dcimPowerFeedsReadSignal(OAIPowerFeed summary);
    void dcimPowerFeedsTraceSignal(OAIPowerFeed summary);
    void dcimPowerFeedsUpdateSignal(OAIPowerFeed summary);
    void dcimPowerOutletTemplatesBulkDeleteSignal();
    void dcimPowerOutletTemplatesBulkPartialUpdateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesBulkUpdateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesCreateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesDeleteSignal();
    void dcimPowerOutletTemplatesListSignal(OAIDcim_power_outlet_templates_list_200_response summary);
    void dcimPowerOutletTemplatesPartialUpdateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesReadSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesUpdateSignal(OAIPowerOutletTemplate summary);
    void dcimPowerOutletsBulkDeleteSignal();
    void dcimPowerOutletsBulkPartialUpdateSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsBulkUpdateSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsCreateSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsDeleteSignal();
    void dcimPowerOutletsListSignal(OAIDcim_power_outlets_list_200_response summary);
    void dcimPowerOutletsPartialUpdateSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsReadSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsTraceSignal(OAIPowerOutlet summary);
    void dcimPowerOutletsUpdateSignal(OAIPowerOutlet summary);
    void dcimPowerPanelsBulkDeleteSignal();
    void dcimPowerPanelsBulkPartialUpdateSignal(OAIPowerPanel summary);
    void dcimPowerPanelsBulkUpdateSignal(OAIPowerPanel summary);
    void dcimPowerPanelsCreateSignal(OAIPowerPanel summary);
    void dcimPowerPanelsDeleteSignal();
    void dcimPowerPanelsListSignal(OAIDcim_power_panels_list_200_response summary);
    void dcimPowerPanelsPartialUpdateSignal(OAIPowerPanel summary);
    void dcimPowerPanelsReadSignal(OAIPowerPanel summary);
    void dcimPowerPanelsUpdateSignal(OAIPowerPanel summary);
    void dcimPowerPortTemplatesBulkDeleteSignal();
    void dcimPowerPortTemplatesBulkPartialUpdateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesBulkUpdateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesCreateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesDeleteSignal();
    void dcimPowerPortTemplatesListSignal(OAIDcim_power_port_templates_list_200_response summary);
    void dcimPowerPortTemplatesPartialUpdateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesReadSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesUpdateSignal(OAIPowerPortTemplate summary);
    void dcimPowerPortsBulkDeleteSignal();
    void dcimPowerPortsBulkPartialUpdateSignal(OAIPowerPort summary);
    void dcimPowerPortsBulkUpdateSignal(OAIPowerPort summary);
    void dcimPowerPortsCreateSignal(OAIPowerPort summary);
    void dcimPowerPortsDeleteSignal();
    void dcimPowerPortsListSignal(OAIDcim_power_ports_list_200_response summary);
    void dcimPowerPortsPartialUpdateSignal(OAIPowerPort summary);
    void dcimPowerPortsReadSignal(OAIPowerPort summary);
    void dcimPowerPortsTraceSignal(OAIPowerPort summary);
    void dcimPowerPortsUpdateSignal(OAIPowerPort summary);
    void dcimRackReservationsBulkDeleteSignal();
    void dcimRackReservationsBulkPartialUpdateSignal(OAIRackReservation summary);
    void dcimRackReservationsBulkUpdateSignal(OAIRackReservation summary);
    void dcimRackReservationsCreateSignal(OAIRackReservation summary);
    void dcimRackReservationsDeleteSignal();
    void dcimRackReservationsListSignal(OAIDcim_rack_reservations_list_200_response summary);
    void dcimRackReservationsPartialUpdateSignal(OAIRackReservation summary);
    void dcimRackReservationsReadSignal(OAIRackReservation summary);
    void dcimRackReservationsUpdateSignal(OAIRackReservation summary);
    void dcimRackRolesBulkDeleteSignal();
    void dcimRackRolesBulkPartialUpdateSignal(OAIRackRole summary);
    void dcimRackRolesBulkUpdateSignal(OAIRackRole summary);
    void dcimRackRolesCreateSignal(OAIRackRole summary);
    void dcimRackRolesDeleteSignal();
    void dcimRackRolesListSignal(OAIDcim_rack_roles_list_200_response summary);
    void dcimRackRolesPartialUpdateSignal(OAIRackRole summary);
    void dcimRackRolesReadSignal(OAIRackRole summary);
    void dcimRackRolesUpdateSignal(OAIRackRole summary);
    void dcimRacksBulkDeleteSignal();
    void dcimRacksBulkPartialUpdateSignal(OAIRack summary);
    void dcimRacksBulkUpdateSignal(OAIRack summary);
    void dcimRacksCreateSignal(OAIRack summary);
    void dcimRacksDeleteSignal();
    void dcimRacksElevationSignal(QList<OAIRackUnit> summary);
    void dcimRacksListSignal(OAIDcim_racks_list_200_response summary);
    void dcimRacksPartialUpdateSignal(OAIRack summary);
    void dcimRacksReadSignal(OAIRack summary);
    void dcimRacksUpdateSignal(OAIRack summary);
    void dcimRearPortTemplatesBulkDeleteSignal();
    void dcimRearPortTemplatesBulkPartialUpdateSignal(OAIRearPortTemplate summary);
    void dcimRearPortTemplatesBulkUpdateSignal(OAIRearPortTemplate summary);
    void dcimRearPortTemplatesCreateSignal(OAIRearPortTemplate summary);
    void dcimRearPortTemplatesDeleteSignal();
    void dcimRearPortTemplatesListSignal(OAIDcim_rear_port_templates_list_200_response summary);
    void dcimRearPortTemplatesPartialUpdateSignal(OAIRearPortTemplate summary);
    void dcimRearPortTemplatesReadSignal(OAIRearPortTemplate summary);
    void dcimRearPortTemplatesUpdateSignal(OAIRearPortTemplate summary);
    void dcimRearPortsBulkDeleteSignal();
    void dcimRearPortsBulkPartialUpdateSignal(OAIRearPort summary);
    void dcimRearPortsBulkUpdateSignal(OAIRearPort summary);
    void dcimRearPortsCreateSignal(OAIRearPort summary);
    void dcimRearPortsDeleteSignal();
    void dcimRearPortsListSignal(OAIDcim_rear_ports_list_200_response summary);
    void dcimRearPortsPartialUpdateSignal(OAIRearPort summary);
    void dcimRearPortsPathsSignal(OAIRearPort summary);
    void dcimRearPortsReadSignal(OAIRearPort summary);
    void dcimRearPortsUpdateSignal(OAIRearPort summary);
    void dcimRegionsBulkDeleteSignal();
    void dcimRegionsBulkPartialUpdateSignal(OAIRegion summary);
    void dcimRegionsBulkUpdateSignal(OAIRegion summary);
    void dcimRegionsCreateSignal(OAIRegion summary);
    void dcimRegionsDeleteSignal();
    void dcimRegionsListSignal(OAIDcim_regions_list_200_response summary);
    void dcimRegionsPartialUpdateSignal(OAIRegion summary);
    void dcimRegionsReadSignal(OAIRegion summary);
    void dcimRegionsUpdateSignal(OAIRegion summary);
    void dcimSiteGroupsBulkDeleteSignal();
    void dcimSiteGroupsBulkPartialUpdateSignal(OAISiteGroup summary);
    void dcimSiteGroupsBulkUpdateSignal(OAISiteGroup summary);
    void dcimSiteGroupsCreateSignal(OAISiteGroup summary);
    void dcimSiteGroupsDeleteSignal();
    void dcimSiteGroupsListSignal(OAIDcim_site_groups_list_200_response summary);
    void dcimSiteGroupsPartialUpdateSignal(OAISiteGroup summary);
    void dcimSiteGroupsReadSignal(OAISiteGroup summary);
    void dcimSiteGroupsUpdateSignal(OAISiteGroup summary);
    void dcimSitesBulkDeleteSignal();
    void dcimSitesBulkPartialUpdateSignal(OAISite summary);
    void dcimSitesBulkUpdateSignal(OAISite summary);
    void dcimSitesCreateSignal(OAISite summary);
    void dcimSitesDeleteSignal();
    void dcimSitesListSignal(OAIDcim_sites_list_200_response summary);
    void dcimSitesPartialUpdateSignal(OAISite summary);
    void dcimSitesReadSignal(OAISite summary);
    void dcimSitesUpdateSignal(OAISite summary);
    void dcimVirtualChassisBulkDeleteSignal();
    void dcimVirtualChassisBulkPartialUpdateSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisBulkUpdateSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisCreateSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisDeleteSignal();
    void dcimVirtualChassisListSignal(OAIDcim_virtual_chassis_list_200_response summary);
    void dcimVirtualChassisPartialUpdateSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisReadSignal(OAIVirtualChassis summary);
    void dcimVirtualChassisUpdateSignal(OAIVirtualChassis summary);
    void dcimVirtualDeviceContextsBulkDeleteSignal();
    void dcimVirtualDeviceContextsBulkPartialUpdateSignal(OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsBulkUpdateSignal(OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsCreateSignal(OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsDeleteSignal();
    void dcimVirtualDeviceContextsListSignal(OAIDcim_virtual_device_contexts_list_200_response summary);
    void dcimVirtualDeviceContextsPartialUpdateSignal(OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsReadSignal(OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsUpdateSignal(OAIVirtualDeviceContext summary);


    void dcimCableTerminationsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICableTermination summary);
    void dcimCableTerminationsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAICableTermination summary);
    void dcimCableTerminationsCreateSignalFull(OAIHttpRequestWorker *worker, OAICableTermination summary);
    void dcimCableTerminationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimCableTerminationsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_cable_terminations_list_200_response summary);
    void dcimCableTerminationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICableTermination summary);
    void dcimCableTerminationsReadSignalFull(OAIHttpRequestWorker *worker, OAICableTermination summary);
    void dcimCableTerminationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICableTermination summary);
    void dcimCablesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimCablesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICable summary);
    void dcimCablesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAICable summary);
    void dcimCablesCreateSignalFull(OAIHttpRequestWorker *worker, OAICable summary);
    void dcimCablesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimCablesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_cables_list_200_response summary);
    void dcimCablesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICable summary);
    void dcimCablesReadSignalFull(OAIHttpRequestWorker *worker, OAICable summary);
    void dcimCablesUpdateSignalFull(OAIHttpRequestWorker *worker, OAICable summary);
    void dcimConnectedDeviceListSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void dcimConsolePortTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsolePortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_port_templates_list_200_response summary);
    void dcimConsolePortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePortTemplate summary);
    void dcimConsolePortsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsolePortsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsolePortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_ports_list_200_response summary);
    void dcimConsolePortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsReadSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsTraceSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsolePortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsolePort summary);
    void dcimConsoleServerPortTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_server_port_templates_list_200_response summary);
    void dcimConsoleServerPortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPortTemplate summary);
    void dcimConsoleServerPortsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimConsoleServerPortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_console_server_ports_list_200_response summary);
    void dcimConsoleServerPortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsReadSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsTraceSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimConsoleServerPortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConsoleServerPort summary);
    void dcimDeviceBayTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceBayTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_bay_templates_list_200_response summary);
    void dcimDeviceBayTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBayTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBayTemplate summary);
    void dcimDeviceBaysBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceBaysListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_bays_list_200_response summary);
    void dcimDeviceBaysPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceBaysUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceBay summary);
    void dcimDeviceRolesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceRolesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_roles_list_200_response summary);
    void dcimDeviceRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceRole summary);
    void dcimDeviceTypesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDeviceTypesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_device_types_list_200_response summary);
    void dcimDeviceTypesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDeviceTypesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceType summary);
    void dcimDevicesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDevicesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimDevicesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimDevicesCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimDevicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimDevicesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_devices_list_200_response summary);
    void dcimDevicesNapalmSignalFull(OAIHttpRequestWorker *worker, OAIDeviceNAPALM summary);
    void dcimDevicesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimDevicesReadSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimDevicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeviceWithConfigContext summary);
    void dcimFrontPortTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimFrontPortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_front_port_templates_list_200_response summary);
    void dcimFrontPortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIFrontPortTemplate summary);
    void dcimFrontPortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPortTemplate summary);
    void dcimFrontPortsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimFrontPortsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimFrontPortsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimFrontPortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimFrontPortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimFrontPortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_front_ports_list_200_response summary);
    void dcimFrontPortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimFrontPortsPathsSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimFrontPortsReadSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimFrontPortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontPort summary);
    void dcimInterfaceTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfaceTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_interface_templates_list_200_response summary);
    void dcimInterfaceTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfaceTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterfaceTemplate summary);
    void dcimInterfacesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfacesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInterfacesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_interfaces_list_200_response summary);
    void dcimInterfacesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesReadSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesTraceSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInterfacesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInterface summary);
    void dcimInventoryItemRolesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemRole summary);
    void dcimInventoryItemRolesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemRole summary);
    void dcimInventoryItemRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemRole summary);
    void dcimInventoryItemRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemRolesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_inventory_item_roles_list_200_response summary);
    void dcimInventoryItemRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemRole summary);
    void dcimInventoryItemRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemRole summary);
    void dcimInventoryItemRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemRole summary);
    void dcimInventoryItemTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_inventory_item_templates_list_200_response summary);
    void dcimInventoryItemTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemTemplate summary);
    void dcimInventoryItemTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItemTemplate summary);
    void dcimInventoryItemsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsCreateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimInventoryItemsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_inventory_items_list_200_response summary);
    void dcimInventoryItemsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsReadSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimInventoryItemsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInventoryItem summary);
    void dcimLocationsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimLocationsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void dcimLocationsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void dcimLocationsCreateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void dcimLocationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimLocationsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_locations_list_200_response summary);
    void dcimLocationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void dcimLocationsReadSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void dcimLocationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void dcimManufacturersBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimManufacturersBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersCreateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimManufacturersListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_manufacturers_list_200_response summary);
    void dcimManufacturersPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersReadSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimManufacturersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManufacturer summary);
    void dcimModuleBayTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModuleBayTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_module_bay_templates_list_200_response summary);
    void dcimModuleBayTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIModuleBayTemplate summary);
    void dcimModuleBayTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBayTemplate summary);
    void dcimModuleBaysBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModuleBaysBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBay summary);
    void dcimModuleBaysBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBay summary);
    void dcimModuleBaysCreateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBay summary);
    void dcimModuleBaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModuleBaysListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_module_bays_list_200_response summary);
    void dcimModuleBaysPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBay summary);
    void dcimModuleBaysReadSignalFull(OAIHttpRequestWorker *worker, OAIModuleBay summary);
    void dcimModuleBaysUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleBay summary);
    void dcimModuleTypesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModuleTypesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleType summary);
    void dcimModuleTypesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleType summary);
    void dcimModuleTypesCreateSignalFull(OAIHttpRequestWorker *worker, OAIModuleType summary);
    void dcimModuleTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModuleTypesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_module_types_list_200_response summary);
    void dcimModuleTypesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleType summary);
    void dcimModuleTypesReadSignalFull(OAIHttpRequestWorker *worker, OAIModuleType summary);
    void dcimModuleTypesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModuleType summary);
    void dcimModulesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModulesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void dcimModulesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void dcimModulesCreateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void dcimModulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimModulesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_modules_list_200_response summary);
    void dcimModulesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void dcimModulesReadSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void dcimModulesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIModule summary);
    void dcimPlatformsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPlatformsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPlatformsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_platforms_list_200_response summary);
    void dcimPlatformsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsReadSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPlatformsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPlatform summary);
    void dcimPowerFeedsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerFeedsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerFeedsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerFeedsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerFeedsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_feeds_list_200_response summary);
    void dcimPowerFeedsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerFeedsReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerFeedsTraceSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerFeedsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerFeed summary);
    void dcimPowerOutletTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerOutletTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_outlet_templates_list_200_response summary);
    void dcimPowerOutletTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutletTemplate summary);
    void dcimPowerOutletsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerOutletsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_outlets_list_200_response summary);
    void dcimPowerOutletsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsTraceSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerOutletsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerOutlet summary);
    void dcimPowerPanelsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPanel summary);
    void dcimPowerPanelsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPanel summary);
    void dcimPowerPanelsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPanel summary);
    void dcimPowerPanelsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPanelsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_panels_list_200_response summary);
    void dcimPowerPanelsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPanel summary);
    void dcimPowerPanelsReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerPanel summary);
    void dcimPowerPanelsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPanel summary);
    void dcimPowerPortTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_port_templates_list_200_response summary);
    void dcimPowerPortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPortTemplate summary);
    void dcimPowerPortsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPortsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimPowerPortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_power_ports_list_200_response summary);
    void dcimPowerPortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsReadSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsTraceSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimPowerPortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPowerPort summary);
    void dcimRackReservationsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackReservationsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackReservationsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rack_reservations_list_200_response summary);
    void dcimRackReservationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsReadSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackReservationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackReservation summary);
    void dcimRackRolesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackRolesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRackRolesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rack_roles_list_200_response summary);
    void dcimRackRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRackRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRackRole summary);
    void dcimRacksBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRacksBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksCreateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRacksElevationSignalFull(OAIHttpRequestWorker *worker, QList<OAIRackUnit> summary);
    void dcimRacksListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_racks_list_200_response summary);
    void dcimRacksPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksReadSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRacksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRack summary);
    void dcimRearPortTemplatesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPortTemplate summary);
    void dcimRearPortTemplatesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPortTemplate summary);
    void dcimRearPortTemplatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIRearPortTemplate summary);
    void dcimRearPortTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRearPortTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rear_port_templates_list_200_response summary);
    void dcimRearPortTemplatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPortTemplate summary);
    void dcimRearPortTemplatesReadSignalFull(OAIHttpRequestWorker *worker, OAIRearPortTemplate summary);
    void dcimRearPortTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPortTemplate summary);
    void dcimRearPortsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRearPortsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRearPortsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRearPortsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRearPortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRearPortsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_rear_ports_list_200_response summary);
    void dcimRearPortsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRearPortsPathsSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRearPortsReadSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRearPortsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRearPort summary);
    void dcimRegionsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRegionsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimRegionsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_regions_list_200_response summary);
    void dcimRegionsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsReadSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimRegionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegion summary);
    void dcimSiteGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISiteGroup summary);
    void dcimSiteGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAISiteGroup summary);
    void dcimSiteGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAISiteGroup summary);
    void dcimSiteGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimSiteGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_site_groups_list_200_response summary);
    void dcimSiteGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISiteGroup summary);
    void dcimSiteGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAISiteGroup summary);
    void dcimSiteGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISiteGroup summary);
    void dcimSitesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimSitesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesCreateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimSitesListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_sites_list_200_response summary);
    void dcimSitesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesReadSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimSitesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void dcimVirtualChassisBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisCreateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimVirtualChassisListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_virtual_chassis_list_200_response summary);
    void dcimVirtualChassisPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisReadSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualChassisUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualChassis summary);
    void dcimVirtualDeviceContextsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsCreateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dcimVirtualDeviceContextsListSignalFull(OAIHttpRequestWorker *worker, OAIDcim_virtual_device_contexts_list_200_response summary);
    void dcimVirtualDeviceContextsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsReadSignalFull(OAIHttpRequestWorker *worker, OAIVirtualDeviceContext summary);
    void dcimVirtualDeviceContextsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualDeviceContext summary);

    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsBulkDeleteSignalError() instead")
    void dcimCableTerminationsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsBulkPartialUpdateSignalError() instead")
    void dcimCableTerminationsBulkPartialUpdateSignalE(OAICableTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsBulkPartialUpdateSignalError(OAICableTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsBulkUpdateSignalError() instead")
    void dcimCableTerminationsBulkUpdateSignalE(OAICableTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsBulkUpdateSignalError(OAICableTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsCreateSignalError() instead")
    void dcimCableTerminationsCreateSignalE(OAICableTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsCreateSignalError(OAICableTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsDeleteSignalError() instead")
    void dcimCableTerminationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsListSignalError() instead")
    void dcimCableTerminationsListSignalE(OAIDcim_cable_terminations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsListSignalError(OAIDcim_cable_terminations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsPartialUpdateSignalError() instead")
    void dcimCableTerminationsPartialUpdateSignalE(OAICableTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsPartialUpdateSignalError(OAICableTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsReadSignalError() instead")
    void dcimCableTerminationsReadSignalE(OAICableTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsReadSignalError(OAICableTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsUpdateSignalError() instead")
    void dcimCableTerminationsUpdateSignalE(OAICableTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsUpdateSignalError(OAICableTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesBulkDeleteSignalError() instead")
    void dcimCablesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesBulkPartialUpdateSignalError() instead")
    void dcimCablesBulkPartialUpdateSignalE(OAICable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesBulkPartialUpdateSignalError(OAICable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesBulkUpdateSignalError() instead")
    void dcimCablesBulkUpdateSignalE(OAICable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesBulkUpdateSignalError(OAICable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesCreateSignalError() instead")
    void dcimCablesCreateSignalE(OAICable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesCreateSignalError(OAICable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesDeleteSignalError() instead")
    void dcimCablesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesListSignalError() instead")
    void dcimCablesListSignalE(OAIDcim_cables_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesListSignalError(OAIDcim_cables_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesPartialUpdateSignalError() instead")
    void dcimCablesPartialUpdateSignalE(OAICable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesPartialUpdateSignalError(OAICable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesReadSignalError() instead")
    void dcimCablesReadSignalE(OAICable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesReadSignalError(OAICable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesUpdateSignalError() instead")
    void dcimCablesUpdateSignalE(OAICable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesUpdateSignalError(OAICable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConnectedDeviceListSignalError() instead")
    void dcimConnectedDeviceListSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConnectedDeviceListSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesBulkDeleteSignalError() instead")
    void dcimConsolePortTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesBulkPartialUpdateSignalError() instead")
    void dcimConsolePortTemplatesBulkPartialUpdateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesBulkPartialUpdateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesBulkUpdateSignalError() instead")
    void dcimConsolePortTemplatesBulkUpdateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesBulkUpdateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesCreateSignalError() instead")
    void dcimConsolePortTemplatesCreateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesCreateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesDeleteSignalError() instead")
    void dcimConsolePortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesListSignalError() instead")
    void dcimConsolePortTemplatesListSignalE(OAIDcim_console_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesListSignalError(OAIDcim_console_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesPartialUpdateSignalError() instead")
    void dcimConsolePortTemplatesPartialUpdateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesPartialUpdateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesReadSignalError() instead")
    void dcimConsolePortTemplatesReadSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesReadSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesUpdateSignalError() instead")
    void dcimConsolePortTemplatesUpdateSignalE(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesUpdateSignalError(OAIConsolePortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsBulkDeleteSignalError() instead")
    void dcimConsolePortsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsBulkPartialUpdateSignalError() instead")
    void dcimConsolePortsBulkPartialUpdateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsBulkPartialUpdateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsBulkUpdateSignalError() instead")
    void dcimConsolePortsBulkUpdateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsBulkUpdateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsCreateSignalError() instead")
    void dcimConsolePortsCreateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsCreateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsDeleteSignalError() instead")
    void dcimConsolePortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsListSignalError() instead")
    void dcimConsolePortsListSignalE(OAIDcim_console_ports_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsListSignalError(OAIDcim_console_ports_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsPartialUpdateSignalError() instead")
    void dcimConsolePortsPartialUpdateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsPartialUpdateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsReadSignalError() instead")
    void dcimConsolePortsReadSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsReadSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsTraceSignalError() instead")
    void dcimConsolePortsTraceSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsTraceSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsUpdateSignalError() instead")
    void dcimConsolePortsUpdateSignalE(OAIConsolePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsUpdateSignalError(OAIConsolePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesBulkDeleteSignalError() instead")
    void dcimConsoleServerPortTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesBulkPartialUpdateSignalError() instead")
    void dcimConsoleServerPortTemplatesBulkPartialUpdateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesBulkPartialUpdateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesBulkUpdateSignalError() instead")
    void dcimConsoleServerPortTemplatesBulkUpdateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesBulkUpdateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesCreateSignalError() instead")
    void dcimConsoleServerPortTemplatesCreateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesCreateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesDeleteSignalError() instead")
    void dcimConsoleServerPortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesListSignalError() instead")
    void dcimConsoleServerPortTemplatesListSignalE(OAIDcim_console_server_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesListSignalError(OAIDcim_console_server_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesPartialUpdateSignalError() instead")
    void dcimConsoleServerPortTemplatesPartialUpdateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesPartialUpdateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesReadSignalError() instead")
    void dcimConsoleServerPortTemplatesReadSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesReadSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesUpdateSignalError() instead")
    void dcimConsoleServerPortTemplatesUpdateSignalE(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesUpdateSignalError(OAIConsoleServerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsBulkDeleteSignalError() instead")
    void dcimConsoleServerPortsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsBulkPartialUpdateSignalError() instead")
    void dcimConsoleServerPortsBulkPartialUpdateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsBulkPartialUpdateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsBulkUpdateSignalError() instead")
    void dcimConsoleServerPortsBulkUpdateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsBulkUpdateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsCreateSignalError() instead")
    void dcimConsoleServerPortsCreateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsCreateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsDeleteSignalError() instead")
    void dcimConsoleServerPortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsListSignalError() instead")
    void dcimConsoleServerPortsListSignalE(OAIDcim_console_server_ports_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsListSignalError(OAIDcim_console_server_ports_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsPartialUpdateSignalError() instead")
    void dcimConsoleServerPortsPartialUpdateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsPartialUpdateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsReadSignalError() instead")
    void dcimConsoleServerPortsReadSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsReadSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsTraceSignalError() instead")
    void dcimConsoleServerPortsTraceSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsTraceSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsUpdateSignalError() instead")
    void dcimConsoleServerPortsUpdateSignalE(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsUpdateSignalError(OAIConsoleServerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesBulkDeleteSignalError() instead")
    void dcimDeviceBayTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesBulkPartialUpdateSignalError() instead")
    void dcimDeviceBayTemplatesBulkPartialUpdateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesBulkPartialUpdateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesBulkUpdateSignalError() instead")
    void dcimDeviceBayTemplatesBulkUpdateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesBulkUpdateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesCreateSignalError() instead")
    void dcimDeviceBayTemplatesCreateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesCreateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesDeleteSignalError() instead")
    void dcimDeviceBayTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesListSignalError() instead")
    void dcimDeviceBayTemplatesListSignalE(OAIDcim_device_bay_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesListSignalError(OAIDcim_device_bay_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesPartialUpdateSignalError() instead")
    void dcimDeviceBayTemplatesPartialUpdateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesPartialUpdateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesReadSignalError() instead")
    void dcimDeviceBayTemplatesReadSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesReadSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesUpdateSignalError() instead")
    void dcimDeviceBayTemplatesUpdateSignalE(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesUpdateSignalError(OAIDeviceBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysBulkDeleteSignalError() instead")
    void dcimDeviceBaysBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysBulkPartialUpdateSignalError() instead")
    void dcimDeviceBaysBulkPartialUpdateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysBulkPartialUpdateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysBulkUpdateSignalError() instead")
    void dcimDeviceBaysBulkUpdateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysBulkUpdateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysCreateSignalError() instead")
    void dcimDeviceBaysCreateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysCreateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysDeleteSignalError() instead")
    void dcimDeviceBaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysListSignalError() instead")
    void dcimDeviceBaysListSignalE(OAIDcim_device_bays_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysListSignalError(OAIDcim_device_bays_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysPartialUpdateSignalError() instead")
    void dcimDeviceBaysPartialUpdateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysPartialUpdateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysReadSignalError() instead")
    void dcimDeviceBaysReadSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysReadSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysUpdateSignalError() instead")
    void dcimDeviceBaysUpdateSignalE(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysUpdateSignalError(OAIDeviceBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesBulkDeleteSignalError() instead")
    void dcimDeviceRolesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesBulkPartialUpdateSignalError() instead")
    void dcimDeviceRolesBulkPartialUpdateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesBulkPartialUpdateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesBulkUpdateSignalError() instead")
    void dcimDeviceRolesBulkUpdateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesBulkUpdateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesCreateSignalError() instead")
    void dcimDeviceRolesCreateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesCreateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesDeleteSignalError() instead")
    void dcimDeviceRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesListSignalError() instead")
    void dcimDeviceRolesListSignalE(OAIDcim_device_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesListSignalError(OAIDcim_device_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesPartialUpdateSignalError() instead")
    void dcimDeviceRolesPartialUpdateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesPartialUpdateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesReadSignalError() instead")
    void dcimDeviceRolesReadSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesReadSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesUpdateSignalError() instead")
    void dcimDeviceRolesUpdateSignalE(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesUpdateSignalError(OAIDeviceRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesBulkDeleteSignalError() instead")
    void dcimDeviceTypesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesBulkPartialUpdateSignalError() instead")
    void dcimDeviceTypesBulkPartialUpdateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesBulkPartialUpdateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesBulkUpdateSignalError() instead")
    void dcimDeviceTypesBulkUpdateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesBulkUpdateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesCreateSignalError() instead")
    void dcimDeviceTypesCreateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesCreateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesDeleteSignalError() instead")
    void dcimDeviceTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesListSignalError() instead")
    void dcimDeviceTypesListSignalE(OAIDcim_device_types_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesListSignalError(OAIDcim_device_types_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesPartialUpdateSignalError() instead")
    void dcimDeviceTypesPartialUpdateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesPartialUpdateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesReadSignalError() instead")
    void dcimDeviceTypesReadSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesReadSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesUpdateSignalError() instead")
    void dcimDeviceTypesUpdateSignalE(OAIDeviceType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesUpdateSignalError(OAIDeviceType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesBulkDeleteSignalError() instead")
    void dcimDevicesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesBulkPartialUpdateSignalError() instead")
    void dcimDevicesBulkPartialUpdateSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesBulkPartialUpdateSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesBulkUpdateSignalError() instead")
    void dcimDevicesBulkUpdateSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesBulkUpdateSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesCreateSignalError() instead")
    void dcimDevicesCreateSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesCreateSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesDeleteSignalError() instead")
    void dcimDevicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesListSignalError() instead")
    void dcimDevicesListSignalE(OAIDcim_devices_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesListSignalError(OAIDcim_devices_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesNapalmSignalError() instead")
    void dcimDevicesNapalmSignalE(OAIDeviceNAPALM summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesNapalmSignalError(OAIDeviceNAPALM summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesPartialUpdateSignalError() instead")
    void dcimDevicesPartialUpdateSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesPartialUpdateSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesReadSignalError() instead")
    void dcimDevicesReadSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesReadSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesUpdateSignalError() instead")
    void dcimDevicesUpdateSignalE(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesUpdateSignalError(OAIDeviceWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesBulkDeleteSignalError() instead")
    void dcimFrontPortTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesBulkPartialUpdateSignalError() instead")
    void dcimFrontPortTemplatesBulkPartialUpdateSignalE(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesBulkPartialUpdateSignalError(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesBulkUpdateSignalError() instead")
    void dcimFrontPortTemplatesBulkUpdateSignalE(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesBulkUpdateSignalError(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesCreateSignalError() instead")
    void dcimFrontPortTemplatesCreateSignalE(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesCreateSignalError(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesDeleteSignalError() instead")
    void dcimFrontPortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesListSignalError() instead")
    void dcimFrontPortTemplatesListSignalE(OAIDcim_front_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesListSignalError(OAIDcim_front_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesPartialUpdateSignalError() instead")
    void dcimFrontPortTemplatesPartialUpdateSignalE(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesPartialUpdateSignalError(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesReadSignalError() instead")
    void dcimFrontPortTemplatesReadSignalE(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesReadSignalError(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesUpdateSignalError() instead")
    void dcimFrontPortTemplatesUpdateSignalE(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesUpdateSignalError(OAIFrontPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsBulkDeleteSignalError() instead")
    void dcimFrontPortsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsBulkPartialUpdateSignalError() instead")
    void dcimFrontPortsBulkPartialUpdateSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsBulkPartialUpdateSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsBulkUpdateSignalError() instead")
    void dcimFrontPortsBulkUpdateSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsBulkUpdateSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsCreateSignalError() instead")
    void dcimFrontPortsCreateSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsCreateSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsDeleteSignalError() instead")
    void dcimFrontPortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsListSignalError() instead")
    void dcimFrontPortsListSignalE(OAIDcim_front_ports_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsListSignalError(OAIDcim_front_ports_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsPartialUpdateSignalError() instead")
    void dcimFrontPortsPartialUpdateSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsPartialUpdateSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsPathsSignalError() instead")
    void dcimFrontPortsPathsSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsPathsSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsReadSignalError() instead")
    void dcimFrontPortsReadSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsReadSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsUpdateSignalError() instead")
    void dcimFrontPortsUpdateSignalE(OAIFrontPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsUpdateSignalError(OAIFrontPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesBulkDeleteSignalError() instead")
    void dcimInterfaceTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesBulkPartialUpdateSignalError() instead")
    void dcimInterfaceTemplatesBulkPartialUpdateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesBulkPartialUpdateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesBulkUpdateSignalError() instead")
    void dcimInterfaceTemplatesBulkUpdateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesBulkUpdateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesCreateSignalError() instead")
    void dcimInterfaceTemplatesCreateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesCreateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesDeleteSignalError() instead")
    void dcimInterfaceTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesListSignalError() instead")
    void dcimInterfaceTemplatesListSignalE(OAIDcim_interface_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesListSignalError(OAIDcim_interface_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesPartialUpdateSignalError() instead")
    void dcimInterfaceTemplatesPartialUpdateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesPartialUpdateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesReadSignalError() instead")
    void dcimInterfaceTemplatesReadSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesReadSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesUpdateSignalError() instead")
    void dcimInterfaceTemplatesUpdateSignalE(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesUpdateSignalError(OAIInterfaceTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesBulkDeleteSignalError() instead")
    void dcimInterfacesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesBulkPartialUpdateSignalError() instead")
    void dcimInterfacesBulkPartialUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesBulkPartialUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesBulkUpdateSignalError() instead")
    void dcimInterfacesBulkUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesBulkUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesCreateSignalError() instead")
    void dcimInterfacesCreateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesCreateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesDeleteSignalError() instead")
    void dcimInterfacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesListSignalError() instead")
    void dcimInterfacesListSignalE(OAIDcim_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesListSignalError(OAIDcim_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesPartialUpdateSignalError() instead")
    void dcimInterfacesPartialUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesPartialUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesReadSignalError() instead")
    void dcimInterfacesReadSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesReadSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesTraceSignalError() instead")
    void dcimInterfacesTraceSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesTraceSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesUpdateSignalError() instead")
    void dcimInterfacesUpdateSignalE(OAIInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesUpdateSignalError(OAIInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesBulkDeleteSignalError() instead")
    void dcimInventoryItemRolesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesBulkPartialUpdateSignalError() instead")
    void dcimInventoryItemRolesBulkPartialUpdateSignalE(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesBulkPartialUpdateSignalError(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesBulkUpdateSignalError() instead")
    void dcimInventoryItemRolesBulkUpdateSignalE(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesBulkUpdateSignalError(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesCreateSignalError() instead")
    void dcimInventoryItemRolesCreateSignalE(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesCreateSignalError(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesDeleteSignalError() instead")
    void dcimInventoryItemRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesListSignalError() instead")
    void dcimInventoryItemRolesListSignalE(OAIDcim_inventory_item_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesListSignalError(OAIDcim_inventory_item_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesPartialUpdateSignalError() instead")
    void dcimInventoryItemRolesPartialUpdateSignalE(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesPartialUpdateSignalError(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesReadSignalError() instead")
    void dcimInventoryItemRolesReadSignalE(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesReadSignalError(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesUpdateSignalError() instead")
    void dcimInventoryItemRolesUpdateSignalE(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesUpdateSignalError(OAIInventoryItemRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesBulkDeleteSignalError() instead")
    void dcimInventoryItemTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesBulkPartialUpdateSignalError() instead")
    void dcimInventoryItemTemplatesBulkPartialUpdateSignalE(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesBulkPartialUpdateSignalError(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesBulkUpdateSignalError() instead")
    void dcimInventoryItemTemplatesBulkUpdateSignalE(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesBulkUpdateSignalError(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesCreateSignalError() instead")
    void dcimInventoryItemTemplatesCreateSignalE(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesCreateSignalError(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesDeleteSignalError() instead")
    void dcimInventoryItemTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesListSignalError() instead")
    void dcimInventoryItemTemplatesListSignalE(OAIDcim_inventory_item_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesListSignalError(OAIDcim_inventory_item_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesPartialUpdateSignalError() instead")
    void dcimInventoryItemTemplatesPartialUpdateSignalE(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesPartialUpdateSignalError(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesReadSignalError() instead")
    void dcimInventoryItemTemplatesReadSignalE(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesReadSignalError(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesUpdateSignalError() instead")
    void dcimInventoryItemTemplatesUpdateSignalE(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesUpdateSignalError(OAIInventoryItemTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsBulkDeleteSignalError() instead")
    void dcimInventoryItemsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsBulkPartialUpdateSignalError() instead")
    void dcimInventoryItemsBulkPartialUpdateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsBulkPartialUpdateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsBulkUpdateSignalError() instead")
    void dcimInventoryItemsBulkUpdateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsBulkUpdateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsCreateSignalError() instead")
    void dcimInventoryItemsCreateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsCreateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsDeleteSignalError() instead")
    void dcimInventoryItemsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsListSignalError() instead")
    void dcimInventoryItemsListSignalE(OAIDcim_inventory_items_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsListSignalError(OAIDcim_inventory_items_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsPartialUpdateSignalError() instead")
    void dcimInventoryItemsPartialUpdateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsPartialUpdateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsReadSignalError() instead")
    void dcimInventoryItemsReadSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsReadSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsUpdateSignalError() instead")
    void dcimInventoryItemsUpdateSignalE(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsUpdateSignalError(OAIInventoryItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsBulkDeleteSignalError() instead")
    void dcimLocationsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsBulkPartialUpdateSignalError() instead")
    void dcimLocationsBulkPartialUpdateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsBulkPartialUpdateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsBulkUpdateSignalError() instead")
    void dcimLocationsBulkUpdateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsBulkUpdateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsCreateSignalError() instead")
    void dcimLocationsCreateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsCreateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsDeleteSignalError() instead")
    void dcimLocationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsListSignalError() instead")
    void dcimLocationsListSignalE(OAIDcim_locations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsListSignalError(OAIDcim_locations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsPartialUpdateSignalError() instead")
    void dcimLocationsPartialUpdateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsPartialUpdateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsReadSignalError() instead")
    void dcimLocationsReadSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsReadSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsUpdateSignalError() instead")
    void dcimLocationsUpdateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsUpdateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersBulkDeleteSignalError() instead")
    void dcimManufacturersBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersBulkPartialUpdateSignalError() instead")
    void dcimManufacturersBulkPartialUpdateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersBulkPartialUpdateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersBulkUpdateSignalError() instead")
    void dcimManufacturersBulkUpdateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersBulkUpdateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersCreateSignalError() instead")
    void dcimManufacturersCreateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersCreateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersDeleteSignalError() instead")
    void dcimManufacturersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersListSignalError() instead")
    void dcimManufacturersListSignalE(OAIDcim_manufacturers_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersListSignalError(OAIDcim_manufacturers_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersPartialUpdateSignalError() instead")
    void dcimManufacturersPartialUpdateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersPartialUpdateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersReadSignalError() instead")
    void dcimManufacturersReadSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersReadSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersUpdateSignalError() instead")
    void dcimManufacturersUpdateSignalE(OAIManufacturer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersUpdateSignalError(OAIManufacturer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesBulkDeleteSignalError() instead")
    void dcimModuleBayTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesBulkPartialUpdateSignalError() instead")
    void dcimModuleBayTemplatesBulkPartialUpdateSignalE(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesBulkPartialUpdateSignalError(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesBulkUpdateSignalError() instead")
    void dcimModuleBayTemplatesBulkUpdateSignalE(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesBulkUpdateSignalError(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesCreateSignalError() instead")
    void dcimModuleBayTemplatesCreateSignalE(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesCreateSignalError(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesDeleteSignalError() instead")
    void dcimModuleBayTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesListSignalError() instead")
    void dcimModuleBayTemplatesListSignalE(OAIDcim_module_bay_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesListSignalError(OAIDcim_module_bay_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesPartialUpdateSignalError() instead")
    void dcimModuleBayTemplatesPartialUpdateSignalE(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesPartialUpdateSignalError(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesReadSignalError() instead")
    void dcimModuleBayTemplatesReadSignalE(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesReadSignalError(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesUpdateSignalError() instead")
    void dcimModuleBayTemplatesUpdateSignalE(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesUpdateSignalError(OAIModuleBayTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysBulkDeleteSignalError() instead")
    void dcimModuleBaysBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysBulkPartialUpdateSignalError() instead")
    void dcimModuleBaysBulkPartialUpdateSignalE(OAIModuleBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysBulkPartialUpdateSignalError(OAIModuleBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysBulkUpdateSignalError() instead")
    void dcimModuleBaysBulkUpdateSignalE(OAIModuleBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysBulkUpdateSignalError(OAIModuleBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysCreateSignalError() instead")
    void dcimModuleBaysCreateSignalE(OAIModuleBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysCreateSignalError(OAIModuleBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysDeleteSignalError() instead")
    void dcimModuleBaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysListSignalError() instead")
    void dcimModuleBaysListSignalE(OAIDcim_module_bays_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysListSignalError(OAIDcim_module_bays_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysPartialUpdateSignalError() instead")
    void dcimModuleBaysPartialUpdateSignalE(OAIModuleBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysPartialUpdateSignalError(OAIModuleBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysReadSignalError() instead")
    void dcimModuleBaysReadSignalE(OAIModuleBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysReadSignalError(OAIModuleBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysUpdateSignalError() instead")
    void dcimModuleBaysUpdateSignalE(OAIModuleBay summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysUpdateSignalError(OAIModuleBay summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesBulkDeleteSignalError() instead")
    void dcimModuleTypesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesBulkPartialUpdateSignalError() instead")
    void dcimModuleTypesBulkPartialUpdateSignalE(OAIModuleType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesBulkPartialUpdateSignalError(OAIModuleType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesBulkUpdateSignalError() instead")
    void dcimModuleTypesBulkUpdateSignalE(OAIModuleType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesBulkUpdateSignalError(OAIModuleType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesCreateSignalError() instead")
    void dcimModuleTypesCreateSignalE(OAIModuleType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesCreateSignalError(OAIModuleType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesDeleteSignalError() instead")
    void dcimModuleTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesListSignalError() instead")
    void dcimModuleTypesListSignalE(OAIDcim_module_types_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesListSignalError(OAIDcim_module_types_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesPartialUpdateSignalError() instead")
    void dcimModuleTypesPartialUpdateSignalE(OAIModuleType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesPartialUpdateSignalError(OAIModuleType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesReadSignalError() instead")
    void dcimModuleTypesReadSignalE(OAIModuleType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesReadSignalError(OAIModuleType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesUpdateSignalError() instead")
    void dcimModuleTypesUpdateSignalE(OAIModuleType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesUpdateSignalError(OAIModuleType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesBulkDeleteSignalError() instead")
    void dcimModulesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesBulkPartialUpdateSignalError() instead")
    void dcimModulesBulkPartialUpdateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesBulkPartialUpdateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesBulkUpdateSignalError() instead")
    void dcimModulesBulkUpdateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesBulkUpdateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesCreateSignalError() instead")
    void dcimModulesCreateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesCreateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesDeleteSignalError() instead")
    void dcimModulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesListSignalError() instead")
    void dcimModulesListSignalE(OAIDcim_modules_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesListSignalError(OAIDcim_modules_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesPartialUpdateSignalError() instead")
    void dcimModulesPartialUpdateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesPartialUpdateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesReadSignalError() instead")
    void dcimModulesReadSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesReadSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesUpdateSignalError() instead")
    void dcimModulesUpdateSignalE(OAIModule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesUpdateSignalError(OAIModule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsBulkDeleteSignalError() instead")
    void dcimPlatformsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsBulkPartialUpdateSignalError() instead")
    void dcimPlatformsBulkPartialUpdateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsBulkPartialUpdateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsBulkUpdateSignalError() instead")
    void dcimPlatformsBulkUpdateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsBulkUpdateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsCreateSignalError() instead")
    void dcimPlatformsCreateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsCreateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsDeleteSignalError() instead")
    void dcimPlatformsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsListSignalError() instead")
    void dcimPlatformsListSignalE(OAIDcim_platforms_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsListSignalError(OAIDcim_platforms_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsPartialUpdateSignalError() instead")
    void dcimPlatformsPartialUpdateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsPartialUpdateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsReadSignalError() instead")
    void dcimPlatformsReadSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsReadSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsUpdateSignalError() instead")
    void dcimPlatformsUpdateSignalE(OAIPlatform summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsUpdateSignalError(OAIPlatform summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsBulkDeleteSignalError() instead")
    void dcimPowerFeedsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsBulkPartialUpdateSignalError() instead")
    void dcimPowerFeedsBulkPartialUpdateSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsBulkPartialUpdateSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsBulkUpdateSignalError() instead")
    void dcimPowerFeedsBulkUpdateSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsBulkUpdateSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsCreateSignalError() instead")
    void dcimPowerFeedsCreateSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsCreateSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsDeleteSignalError() instead")
    void dcimPowerFeedsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsListSignalError() instead")
    void dcimPowerFeedsListSignalE(OAIDcim_power_feeds_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsListSignalError(OAIDcim_power_feeds_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsPartialUpdateSignalError() instead")
    void dcimPowerFeedsPartialUpdateSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsPartialUpdateSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsReadSignalError() instead")
    void dcimPowerFeedsReadSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsReadSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsTraceSignalError() instead")
    void dcimPowerFeedsTraceSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsTraceSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsUpdateSignalError() instead")
    void dcimPowerFeedsUpdateSignalE(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsUpdateSignalError(OAIPowerFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesBulkDeleteSignalError() instead")
    void dcimPowerOutletTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesBulkPartialUpdateSignalError() instead")
    void dcimPowerOutletTemplatesBulkPartialUpdateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesBulkPartialUpdateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesBulkUpdateSignalError() instead")
    void dcimPowerOutletTemplatesBulkUpdateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesBulkUpdateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesCreateSignalError() instead")
    void dcimPowerOutletTemplatesCreateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesCreateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesDeleteSignalError() instead")
    void dcimPowerOutletTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesListSignalError() instead")
    void dcimPowerOutletTemplatesListSignalE(OAIDcim_power_outlet_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesListSignalError(OAIDcim_power_outlet_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesPartialUpdateSignalError() instead")
    void dcimPowerOutletTemplatesPartialUpdateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesPartialUpdateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesReadSignalError() instead")
    void dcimPowerOutletTemplatesReadSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesReadSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesUpdateSignalError() instead")
    void dcimPowerOutletTemplatesUpdateSignalE(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesUpdateSignalError(OAIPowerOutletTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsBulkDeleteSignalError() instead")
    void dcimPowerOutletsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsBulkPartialUpdateSignalError() instead")
    void dcimPowerOutletsBulkPartialUpdateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsBulkPartialUpdateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsBulkUpdateSignalError() instead")
    void dcimPowerOutletsBulkUpdateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsBulkUpdateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsCreateSignalError() instead")
    void dcimPowerOutletsCreateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsCreateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsDeleteSignalError() instead")
    void dcimPowerOutletsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsListSignalError() instead")
    void dcimPowerOutletsListSignalE(OAIDcim_power_outlets_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsListSignalError(OAIDcim_power_outlets_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsPartialUpdateSignalError() instead")
    void dcimPowerOutletsPartialUpdateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsPartialUpdateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsReadSignalError() instead")
    void dcimPowerOutletsReadSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsReadSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsTraceSignalError() instead")
    void dcimPowerOutletsTraceSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsTraceSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsUpdateSignalError() instead")
    void dcimPowerOutletsUpdateSignalE(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsUpdateSignalError(OAIPowerOutlet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsBulkDeleteSignalError() instead")
    void dcimPowerPanelsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsBulkPartialUpdateSignalError() instead")
    void dcimPowerPanelsBulkPartialUpdateSignalE(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsBulkPartialUpdateSignalError(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsBulkUpdateSignalError() instead")
    void dcimPowerPanelsBulkUpdateSignalE(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsBulkUpdateSignalError(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsCreateSignalError() instead")
    void dcimPowerPanelsCreateSignalE(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsCreateSignalError(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsDeleteSignalError() instead")
    void dcimPowerPanelsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsListSignalError() instead")
    void dcimPowerPanelsListSignalE(OAIDcim_power_panels_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsListSignalError(OAIDcim_power_panels_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsPartialUpdateSignalError() instead")
    void dcimPowerPanelsPartialUpdateSignalE(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsPartialUpdateSignalError(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsReadSignalError() instead")
    void dcimPowerPanelsReadSignalE(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsReadSignalError(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsUpdateSignalError() instead")
    void dcimPowerPanelsUpdateSignalE(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsUpdateSignalError(OAIPowerPanel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesBulkDeleteSignalError() instead")
    void dcimPowerPortTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesBulkPartialUpdateSignalError() instead")
    void dcimPowerPortTemplatesBulkPartialUpdateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesBulkPartialUpdateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesBulkUpdateSignalError() instead")
    void dcimPowerPortTemplatesBulkUpdateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesBulkUpdateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesCreateSignalError() instead")
    void dcimPowerPortTemplatesCreateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesCreateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesDeleteSignalError() instead")
    void dcimPowerPortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesListSignalError() instead")
    void dcimPowerPortTemplatesListSignalE(OAIDcim_power_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesListSignalError(OAIDcim_power_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesPartialUpdateSignalError() instead")
    void dcimPowerPortTemplatesPartialUpdateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesPartialUpdateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesReadSignalError() instead")
    void dcimPowerPortTemplatesReadSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesReadSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesUpdateSignalError() instead")
    void dcimPowerPortTemplatesUpdateSignalE(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesUpdateSignalError(OAIPowerPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsBulkDeleteSignalError() instead")
    void dcimPowerPortsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsBulkPartialUpdateSignalError() instead")
    void dcimPowerPortsBulkPartialUpdateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsBulkPartialUpdateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsBulkUpdateSignalError() instead")
    void dcimPowerPortsBulkUpdateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsBulkUpdateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsCreateSignalError() instead")
    void dcimPowerPortsCreateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsCreateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsDeleteSignalError() instead")
    void dcimPowerPortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsListSignalError() instead")
    void dcimPowerPortsListSignalE(OAIDcim_power_ports_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsListSignalError(OAIDcim_power_ports_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsPartialUpdateSignalError() instead")
    void dcimPowerPortsPartialUpdateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsPartialUpdateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsReadSignalError() instead")
    void dcimPowerPortsReadSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsReadSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsTraceSignalError() instead")
    void dcimPowerPortsTraceSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsTraceSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsUpdateSignalError() instead")
    void dcimPowerPortsUpdateSignalE(OAIPowerPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsUpdateSignalError(OAIPowerPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsBulkDeleteSignalError() instead")
    void dcimRackReservationsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsBulkPartialUpdateSignalError() instead")
    void dcimRackReservationsBulkPartialUpdateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsBulkPartialUpdateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsBulkUpdateSignalError() instead")
    void dcimRackReservationsBulkUpdateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsBulkUpdateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsCreateSignalError() instead")
    void dcimRackReservationsCreateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsCreateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsDeleteSignalError() instead")
    void dcimRackReservationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsListSignalError() instead")
    void dcimRackReservationsListSignalE(OAIDcim_rack_reservations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsListSignalError(OAIDcim_rack_reservations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsPartialUpdateSignalError() instead")
    void dcimRackReservationsPartialUpdateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsPartialUpdateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsReadSignalError() instead")
    void dcimRackReservationsReadSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsReadSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsUpdateSignalError() instead")
    void dcimRackReservationsUpdateSignalE(OAIRackReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsUpdateSignalError(OAIRackReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesBulkDeleteSignalError() instead")
    void dcimRackRolesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesBulkPartialUpdateSignalError() instead")
    void dcimRackRolesBulkPartialUpdateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesBulkPartialUpdateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesBulkUpdateSignalError() instead")
    void dcimRackRolesBulkUpdateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesBulkUpdateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesCreateSignalError() instead")
    void dcimRackRolesCreateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesCreateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesDeleteSignalError() instead")
    void dcimRackRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesListSignalError() instead")
    void dcimRackRolesListSignalE(OAIDcim_rack_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesListSignalError(OAIDcim_rack_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesPartialUpdateSignalError() instead")
    void dcimRackRolesPartialUpdateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesPartialUpdateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesReadSignalError() instead")
    void dcimRackRolesReadSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesReadSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesUpdateSignalError() instead")
    void dcimRackRolesUpdateSignalE(OAIRackRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesUpdateSignalError(OAIRackRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksBulkDeleteSignalError() instead")
    void dcimRacksBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksBulkPartialUpdateSignalError() instead")
    void dcimRacksBulkPartialUpdateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksBulkPartialUpdateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksBulkUpdateSignalError() instead")
    void dcimRacksBulkUpdateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksBulkUpdateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksCreateSignalError() instead")
    void dcimRacksCreateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksCreateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksDeleteSignalError() instead")
    void dcimRacksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksElevationSignalError() instead")
    void dcimRacksElevationSignalE(QList<OAIRackUnit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksElevationSignalError(QList<OAIRackUnit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksListSignalError() instead")
    void dcimRacksListSignalE(OAIDcim_racks_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksListSignalError(OAIDcim_racks_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksPartialUpdateSignalError() instead")
    void dcimRacksPartialUpdateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksPartialUpdateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksReadSignalError() instead")
    void dcimRacksReadSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksReadSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksUpdateSignalError() instead")
    void dcimRacksUpdateSignalE(OAIRack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksUpdateSignalError(OAIRack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesBulkDeleteSignalError() instead")
    void dcimRearPortTemplatesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesBulkPartialUpdateSignalError() instead")
    void dcimRearPortTemplatesBulkPartialUpdateSignalE(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesBulkPartialUpdateSignalError(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesBulkUpdateSignalError() instead")
    void dcimRearPortTemplatesBulkUpdateSignalE(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesBulkUpdateSignalError(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesCreateSignalError() instead")
    void dcimRearPortTemplatesCreateSignalE(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesCreateSignalError(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesDeleteSignalError() instead")
    void dcimRearPortTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesListSignalError() instead")
    void dcimRearPortTemplatesListSignalE(OAIDcim_rear_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesListSignalError(OAIDcim_rear_port_templates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesPartialUpdateSignalError() instead")
    void dcimRearPortTemplatesPartialUpdateSignalE(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesPartialUpdateSignalError(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesReadSignalError() instead")
    void dcimRearPortTemplatesReadSignalE(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesReadSignalError(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesUpdateSignalError() instead")
    void dcimRearPortTemplatesUpdateSignalE(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesUpdateSignalError(OAIRearPortTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsBulkDeleteSignalError() instead")
    void dcimRearPortsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsBulkPartialUpdateSignalError() instead")
    void dcimRearPortsBulkPartialUpdateSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsBulkPartialUpdateSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsBulkUpdateSignalError() instead")
    void dcimRearPortsBulkUpdateSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsBulkUpdateSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsCreateSignalError() instead")
    void dcimRearPortsCreateSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsCreateSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsDeleteSignalError() instead")
    void dcimRearPortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsListSignalError() instead")
    void dcimRearPortsListSignalE(OAIDcim_rear_ports_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsListSignalError(OAIDcim_rear_ports_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsPartialUpdateSignalError() instead")
    void dcimRearPortsPartialUpdateSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsPartialUpdateSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsPathsSignalError() instead")
    void dcimRearPortsPathsSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsPathsSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsReadSignalError() instead")
    void dcimRearPortsReadSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsReadSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsUpdateSignalError() instead")
    void dcimRearPortsUpdateSignalE(OAIRearPort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsUpdateSignalError(OAIRearPort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsBulkDeleteSignalError() instead")
    void dcimRegionsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsBulkPartialUpdateSignalError() instead")
    void dcimRegionsBulkPartialUpdateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsBulkPartialUpdateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsBulkUpdateSignalError() instead")
    void dcimRegionsBulkUpdateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsBulkUpdateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsCreateSignalError() instead")
    void dcimRegionsCreateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsCreateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsDeleteSignalError() instead")
    void dcimRegionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsListSignalError() instead")
    void dcimRegionsListSignalE(OAIDcim_regions_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsListSignalError(OAIDcim_regions_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsPartialUpdateSignalError() instead")
    void dcimRegionsPartialUpdateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsPartialUpdateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsReadSignalError() instead")
    void dcimRegionsReadSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsReadSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsUpdateSignalError() instead")
    void dcimRegionsUpdateSignalE(OAIRegion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsUpdateSignalError(OAIRegion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsBulkDeleteSignalError() instead")
    void dcimSiteGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsBulkPartialUpdateSignalError() instead")
    void dcimSiteGroupsBulkPartialUpdateSignalE(OAISiteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsBulkPartialUpdateSignalError(OAISiteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsBulkUpdateSignalError() instead")
    void dcimSiteGroupsBulkUpdateSignalE(OAISiteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsBulkUpdateSignalError(OAISiteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsCreateSignalError() instead")
    void dcimSiteGroupsCreateSignalE(OAISiteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsCreateSignalError(OAISiteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsDeleteSignalError() instead")
    void dcimSiteGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsListSignalError() instead")
    void dcimSiteGroupsListSignalE(OAIDcim_site_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsListSignalError(OAIDcim_site_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsPartialUpdateSignalError() instead")
    void dcimSiteGroupsPartialUpdateSignalE(OAISiteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsPartialUpdateSignalError(OAISiteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsReadSignalError() instead")
    void dcimSiteGroupsReadSignalE(OAISiteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsReadSignalError(OAISiteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsUpdateSignalError() instead")
    void dcimSiteGroupsUpdateSignalE(OAISiteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsUpdateSignalError(OAISiteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesBulkDeleteSignalError() instead")
    void dcimSitesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesBulkPartialUpdateSignalError() instead")
    void dcimSitesBulkPartialUpdateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesBulkPartialUpdateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesBulkUpdateSignalError() instead")
    void dcimSitesBulkUpdateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesBulkUpdateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesCreateSignalError() instead")
    void dcimSitesCreateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesCreateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesDeleteSignalError() instead")
    void dcimSitesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesListSignalError() instead")
    void dcimSitesListSignalE(OAIDcim_sites_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesListSignalError(OAIDcim_sites_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesPartialUpdateSignalError() instead")
    void dcimSitesPartialUpdateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesPartialUpdateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesReadSignalError() instead")
    void dcimSitesReadSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesReadSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesUpdateSignalError() instead")
    void dcimSitesUpdateSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesUpdateSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisBulkDeleteSignalError() instead")
    void dcimVirtualChassisBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisBulkPartialUpdateSignalError() instead")
    void dcimVirtualChassisBulkPartialUpdateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisBulkPartialUpdateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisBulkUpdateSignalError() instead")
    void dcimVirtualChassisBulkUpdateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisBulkUpdateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisCreateSignalError() instead")
    void dcimVirtualChassisCreateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisCreateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisDeleteSignalError() instead")
    void dcimVirtualChassisDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisListSignalError() instead")
    void dcimVirtualChassisListSignalE(OAIDcim_virtual_chassis_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisListSignalError(OAIDcim_virtual_chassis_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisPartialUpdateSignalError() instead")
    void dcimVirtualChassisPartialUpdateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisPartialUpdateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisReadSignalError() instead")
    void dcimVirtualChassisReadSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisReadSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisUpdateSignalError() instead")
    void dcimVirtualChassisUpdateSignalE(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisUpdateSignalError(OAIVirtualChassis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsBulkDeleteSignalError() instead")
    void dcimVirtualDeviceContextsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsBulkPartialUpdateSignalError() instead")
    void dcimVirtualDeviceContextsBulkPartialUpdateSignalE(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsBulkPartialUpdateSignalError(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsBulkUpdateSignalError() instead")
    void dcimVirtualDeviceContextsBulkUpdateSignalE(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsBulkUpdateSignalError(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsCreateSignalError() instead")
    void dcimVirtualDeviceContextsCreateSignalE(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsCreateSignalError(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsDeleteSignalError() instead")
    void dcimVirtualDeviceContextsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsListSignalError() instead")
    void dcimVirtualDeviceContextsListSignalE(OAIDcim_virtual_device_contexts_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsListSignalError(OAIDcim_virtual_device_contexts_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsPartialUpdateSignalError() instead")
    void dcimVirtualDeviceContextsPartialUpdateSignalE(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsPartialUpdateSignalError(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsReadSignalError() instead")
    void dcimVirtualDeviceContextsReadSignalE(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsReadSignalError(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsUpdateSignalError() instead")
    void dcimVirtualDeviceContextsUpdateSignalE(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsUpdateSignalError(OAIVirtualDeviceContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsBulkDeleteSignalErrorFull() instead")
    void dcimCableTerminationsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsBulkPartialUpdateSignalErrorFull() instead")
    void dcimCableTerminationsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsBulkUpdateSignalErrorFull() instead")
    void dcimCableTerminationsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsCreateSignalErrorFull() instead")
    void dcimCableTerminationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsDeleteSignalErrorFull() instead")
    void dcimCableTerminationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsListSignalErrorFull() instead")
    void dcimCableTerminationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsPartialUpdateSignalErrorFull() instead")
    void dcimCableTerminationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsReadSignalErrorFull() instead")
    void dcimCableTerminationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCableTerminationsUpdateSignalErrorFull() instead")
    void dcimCableTerminationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCableTerminationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesBulkDeleteSignalErrorFull() instead")
    void dcimCablesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesBulkPartialUpdateSignalErrorFull() instead")
    void dcimCablesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesBulkUpdateSignalErrorFull() instead")
    void dcimCablesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesCreateSignalErrorFull() instead")
    void dcimCablesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesDeleteSignalErrorFull() instead")
    void dcimCablesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesListSignalErrorFull() instead")
    void dcimCablesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesPartialUpdateSignalErrorFull() instead")
    void dcimCablesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesReadSignalErrorFull() instead")
    void dcimCablesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimCablesUpdateSignalErrorFull() instead")
    void dcimCablesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimCablesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConnectedDeviceListSignalErrorFull() instead")
    void dcimConnectedDeviceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConnectedDeviceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimConsolePortTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimConsolePortTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimConsolePortTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesCreateSignalErrorFull() instead")
    void dcimConsolePortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesDeleteSignalErrorFull() instead")
    void dcimConsolePortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesListSignalErrorFull() instead")
    void dcimConsolePortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimConsolePortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesReadSignalErrorFull() instead")
    void dcimConsolePortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortTemplatesUpdateSignalErrorFull() instead")
    void dcimConsolePortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsBulkDeleteSignalErrorFull() instead")
    void dcimConsolePortsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsBulkPartialUpdateSignalErrorFull() instead")
    void dcimConsolePortsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsBulkUpdateSignalErrorFull() instead")
    void dcimConsolePortsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsCreateSignalErrorFull() instead")
    void dcimConsolePortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsDeleteSignalErrorFull() instead")
    void dcimConsolePortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsListSignalErrorFull() instead")
    void dcimConsolePortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsPartialUpdateSignalErrorFull() instead")
    void dcimConsolePortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsReadSignalErrorFull() instead")
    void dcimConsolePortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsTraceSignalErrorFull() instead")
    void dcimConsolePortsTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsolePortsUpdateSignalErrorFull() instead")
    void dcimConsolePortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsolePortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesCreateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesDeleteSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesListSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesReadSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortTemplatesUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsBulkDeleteSignalErrorFull() instead")
    void dcimConsoleServerPortsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsBulkPartialUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsBulkUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsCreateSignalErrorFull() instead")
    void dcimConsoleServerPortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsDeleteSignalErrorFull() instead")
    void dcimConsoleServerPortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsListSignalErrorFull() instead")
    void dcimConsoleServerPortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsPartialUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsReadSignalErrorFull() instead")
    void dcimConsoleServerPortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsTraceSignalErrorFull() instead")
    void dcimConsoleServerPortsTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimConsoleServerPortsUpdateSignalErrorFull() instead")
    void dcimConsoleServerPortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimConsoleServerPortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimDeviceBayTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesCreateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesDeleteSignalErrorFull() instead")
    void dcimDeviceBayTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesListSignalErrorFull() instead")
    void dcimDeviceBayTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesReadSignalErrorFull() instead")
    void dcimDeviceBayTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBayTemplatesUpdateSignalErrorFull() instead")
    void dcimDeviceBayTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBayTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysBulkDeleteSignalErrorFull() instead")
    void dcimDeviceBaysBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysBulkPartialUpdateSignalErrorFull() instead")
    void dcimDeviceBaysBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysBulkUpdateSignalErrorFull() instead")
    void dcimDeviceBaysBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysCreateSignalErrorFull() instead")
    void dcimDeviceBaysCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysDeleteSignalErrorFull() instead")
    void dcimDeviceBaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysListSignalErrorFull() instead")
    void dcimDeviceBaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysPartialUpdateSignalErrorFull() instead")
    void dcimDeviceBaysPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysReadSignalErrorFull() instead")
    void dcimDeviceBaysReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceBaysUpdateSignalErrorFull() instead")
    void dcimDeviceBaysUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceBaysUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesBulkDeleteSignalErrorFull() instead")
    void dcimDeviceRolesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesBulkPartialUpdateSignalErrorFull() instead")
    void dcimDeviceRolesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesBulkUpdateSignalErrorFull() instead")
    void dcimDeviceRolesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesCreateSignalErrorFull() instead")
    void dcimDeviceRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesDeleteSignalErrorFull() instead")
    void dcimDeviceRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesListSignalErrorFull() instead")
    void dcimDeviceRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesPartialUpdateSignalErrorFull() instead")
    void dcimDeviceRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesReadSignalErrorFull() instead")
    void dcimDeviceRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceRolesUpdateSignalErrorFull() instead")
    void dcimDeviceRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesBulkDeleteSignalErrorFull() instead")
    void dcimDeviceTypesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesBulkPartialUpdateSignalErrorFull() instead")
    void dcimDeviceTypesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesBulkUpdateSignalErrorFull() instead")
    void dcimDeviceTypesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesCreateSignalErrorFull() instead")
    void dcimDeviceTypesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesDeleteSignalErrorFull() instead")
    void dcimDeviceTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesListSignalErrorFull() instead")
    void dcimDeviceTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesPartialUpdateSignalErrorFull() instead")
    void dcimDeviceTypesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesReadSignalErrorFull() instead")
    void dcimDeviceTypesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDeviceTypesUpdateSignalErrorFull() instead")
    void dcimDeviceTypesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDeviceTypesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesBulkDeleteSignalErrorFull() instead")
    void dcimDevicesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesBulkPartialUpdateSignalErrorFull() instead")
    void dcimDevicesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesBulkUpdateSignalErrorFull() instead")
    void dcimDevicesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesCreateSignalErrorFull() instead")
    void dcimDevicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesDeleteSignalErrorFull() instead")
    void dcimDevicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesListSignalErrorFull() instead")
    void dcimDevicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesNapalmSignalErrorFull() instead")
    void dcimDevicesNapalmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesNapalmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesPartialUpdateSignalErrorFull() instead")
    void dcimDevicesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesReadSignalErrorFull() instead")
    void dcimDevicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimDevicesUpdateSignalErrorFull() instead")
    void dcimDevicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimDevicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimFrontPortTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimFrontPortTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimFrontPortTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesCreateSignalErrorFull() instead")
    void dcimFrontPortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesDeleteSignalErrorFull() instead")
    void dcimFrontPortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesListSignalErrorFull() instead")
    void dcimFrontPortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimFrontPortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesReadSignalErrorFull() instead")
    void dcimFrontPortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortTemplatesUpdateSignalErrorFull() instead")
    void dcimFrontPortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsBulkDeleteSignalErrorFull() instead")
    void dcimFrontPortsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsBulkPartialUpdateSignalErrorFull() instead")
    void dcimFrontPortsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsBulkUpdateSignalErrorFull() instead")
    void dcimFrontPortsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsCreateSignalErrorFull() instead")
    void dcimFrontPortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsDeleteSignalErrorFull() instead")
    void dcimFrontPortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsListSignalErrorFull() instead")
    void dcimFrontPortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsPartialUpdateSignalErrorFull() instead")
    void dcimFrontPortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsPathsSignalErrorFull() instead")
    void dcimFrontPortsPathsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsPathsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsReadSignalErrorFull() instead")
    void dcimFrontPortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimFrontPortsUpdateSignalErrorFull() instead")
    void dcimFrontPortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimFrontPortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimInterfaceTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimInterfaceTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimInterfaceTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesCreateSignalErrorFull() instead")
    void dcimInterfaceTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesDeleteSignalErrorFull() instead")
    void dcimInterfaceTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesListSignalErrorFull() instead")
    void dcimInterfaceTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimInterfaceTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesReadSignalErrorFull() instead")
    void dcimInterfaceTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfaceTemplatesUpdateSignalErrorFull() instead")
    void dcimInterfaceTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfaceTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesBulkDeleteSignalErrorFull() instead")
    void dcimInterfacesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesBulkPartialUpdateSignalErrorFull() instead")
    void dcimInterfacesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesBulkUpdateSignalErrorFull() instead")
    void dcimInterfacesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesCreateSignalErrorFull() instead")
    void dcimInterfacesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesDeleteSignalErrorFull() instead")
    void dcimInterfacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesListSignalErrorFull() instead")
    void dcimInterfacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesPartialUpdateSignalErrorFull() instead")
    void dcimInterfacesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesReadSignalErrorFull() instead")
    void dcimInterfacesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesTraceSignalErrorFull() instead")
    void dcimInterfacesTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInterfacesUpdateSignalErrorFull() instead")
    void dcimInterfacesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInterfacesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesBulkDeleteSignalErrorFull() instead")
    void dcimInventoryItemRolesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesBulkPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemRolesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesBulkUpdateSignalErrorFull() instead")
    void dcimInventoryItemRolesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesCreateSignalErrorFull() instead")
    void dcimInventoryItemRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesDeleteSignalErrorFull() instead")
    void dcimInventoryItemRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesListSignalErrorFull() instead")
    void dcimInventoryItemRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesReadSignalErrorFull() instead")
    void dcimInventoryItemRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemRolesUpdateSignalErrorFull() instead")
    void dcimInventoryItemRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimInventoryItemTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimInventoryItemTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesCreateSignalErrorFull() instead")
    void dcimInventoryItemTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesDeleteSignalErrorFull() instead")
    void dcimInventoryItemTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesListSignalErrorFull() instead")
    void dcimInventoryItemTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesReadSignalErrorFull() instead")
    void dcimInventoryItemTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemTemplatesUpdateSignalErrorFull() instead")
    void dcimInventoryItemTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsBulkDeleteSignalErrorFull() instead")
    void dcimInventoryItemsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsBulkPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsBulkUpdateSignalErrorFull() instead")
    void dcimInventoryItemsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsCreateSignalErrorFull() instead")
    void dcimInventoryItemsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsDeleteSignalErrorFull() instead")
    void dcimInventoryItemsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsListSignalErrorFull() instead")
    void dcimInventoryItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsPartialUpdateSignalErrorFull() instead")
    void dcimInventoryItemsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsReadSignalErrorFull() instead")
    void dcimInventoryItemsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimInventoryItemsUpdateSignalErrorFull() instead")
    void dcimInventoryItemsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimInventoryItemsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsBulkDeleteSignalErrorFull() instead")
    void dcimLocationsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsBulkPartialUpdateSignalErrorFull() instead")
    void dcimLocationsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsBulkUpdateSignalErrorFull() instead")
    void dcimLocationsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsCreateSignalErrorFull() instead")
    void dcimLocationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsDeleteSignalErrorFull() instead")
    void dcimLocationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsListSignalErrorFull() instead")
    void dcimLocationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsPartialUpdateSignalErrorFull() instead")
    void dcimLocationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsReadSignalErrorFull() instead")
    void dcimLocationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimLocationsUpdateSignalErrorFull() instead")
    void dcimLocationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimLocationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersBulkDeleteSignalErrorFull() instead")
    void dcimManufacturersBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersBulkPartialUpdateSignalErrorFull() instead")
    void dcimManufacturersBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersBulkUpdateSignalErrorFull() instead")
    void dcimManufacturersBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersCreateSignalErrorFull() instead")
    void dcimManufacturersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersDeleteSignalErrorFull() instead")
    void dcimManufacturersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersListSignalErrorFull() instead")
    void dcimManufacturersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersPartialUpdateSignalErrorFull() instead")
    void dcimManufacturersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersReadSignalErrorFull() instead")
    void dcimManufacturersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimManufacturersUpdateSignalErrorFull() instead")
    void dcimManufacturersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimManufacturersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimModuleBayTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimModuleBayTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimModuleBayTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesCreateSignalErrorFull() instead")
    void dcimModuleBayTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesDeleteSignalErrorFull() instead")
    void dcimModuleBayTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesListSignalErrorFull() instead")
    void dcimModuleBayTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimModuleBayTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesReadSignalErrorFull() instead")
    void dcimModuleBayTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBayTemplatesUpdateSignalErrorFull() instead")
    void dcimModuleBayTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBayTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysBulkDeleteSignalErrorFull() instead")
    void dcimModuleBaysBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysBulkPartialUpdateSignalErrorFull() instead")
    void dcimModuleBaysBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysBulkUpdateSignalErrorFull() instead")
    void dcimModuleBaysBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysCreateSignalErrorFull() instead")
    void dcimModuleBaysCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysDeleteSignalErrorFull() instead")
    void dcimModuleBaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysListSignalErrorFull() instead")
    void dcimModuleBaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysPartialUpdateSignalErrorFull() instead")
    void dcimModuleBaysPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysReadSignalErrorFull() instead")
    void dcimModuleBaysReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleBaysUpdateSignalErrorFull() instead")
    void dcimModuleBaysUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleBaysUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesBulkDeleteSignalErrorFull() instead")
    void dcimModuleTypesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesBulkPartialUpdateSignalErrorFull() instead")
    void dcimModuleTypesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesBulkUpdateSignalErrorFull() instead")
    void dcimModuleTypesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesCreateSignalErrorFull() instead")
    void dcimModuleTypesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesDeleteSignalErrorFull() instead")
    void dcimModuleTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesListSignalErrorFull() instead")
    void dcimModuleTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesPartialUpdateSignalErrorFull() instead")
    void dcimModuleTypesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesReadSignalErrorFull() instead")
    void dcimModuleTypesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModuleTypesUpdateSignalErrorFull() instead")
    void dcimModuleTypesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModuleTypesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesBulkDeleteSignalErrorFull() instead")
    void dcimModulesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesBulkPartialUpdateSignalErrorFull() instead")
    void dcimModulesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesBulkUpdateSignalErrorFull() instead")
    void dcimModulesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesCreateSignalErrorFull() instead")
    void dcimModulesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesDeleteSignalErrorFull() instead")
    void dcimModulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesListSignalErrorFull() instead")
    void dcimModulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesPartialUpdateSignalErrorFull() instead")
    void dcimModulesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesReadSignalErrorFull() instead")
    void dcimModulesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimModulesUpdateSignalErrorFull() instead")
    void dcimModulesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimModulesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsBulkDeleteSignalErrorFull() instead")
    void dcimPlatformsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsBulkPartialUpdateSignalErrorFull() instead")
    void dcimPlatformsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsBulkUpdateSignalErrorFull() instead")
    void dcimPlatformsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsCreateSignalErrorFull() instead")
    void dcimPlatformsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsDeleteSignalErrorFull() instead")
    void dcimPlatformsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsListSignalErrorFull() instead")
    void dcimPlatformsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsPartialUpdateSignalErrorFull() instead")
    void dcimPlatformsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsReadSignalErrorFull() instead")
    void dcimPlatformsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPlatformsUpdateSignalErrorFull() instead")
    void dcimPlatformsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPlatformsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsBulkDeleteSignalErrorFull() instead")
    void dcimPowerFeedsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsBulkPartialUpdateSignalErrorFull() instead")
    void dcimPowerFeedsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsBulkUpdateSignalErrorFull() instead")
    void dcimPowerFeedsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsCreateSignalErrorFull() instead")
    void dcimPowerFeedsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsDeleteSignalErrorFull() instead")
    void dcimPowerFeedsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsListSignalErrorFull() instead")
    void dcimPowerFeedsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsPartialUpdateSignalErrorFull() instead")
    void dcimPowerFeedsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsReadSignalErrorFull() instead")
    void dcimPowerFeedsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsTraceSignalErrorFull() instead")
    void dcimPowerFeedsTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerFeedsUpdateSignalErrorFull() instead")
    void dcimPowerFeedsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerFeedsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimPowerOutletTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesCreateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesDeleteSignalErrorFull() instead")
    void dcimPowerOutletTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesListSignalErrorFull() instead")
    void dcimPowerOutletTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesReadSignalErrorFull() instead")
    void dcimPowerOutletTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletTemplatesUpdateSignalErrorFull() instead")
    void dcimPowerOutletTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsBulkDeleteSignalErrorFull() instead")
    void dcimPowerOutletsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsBulkPartialUpdateSignalErrorFull() instead")
    void dcimPowerOutletsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsBulkUpdateSignalErrorFull() instead")
    void dcimPowerOutletsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsCreateSignalErrorFull() instead")
    void dcimPowerOutletsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsDeleteSignalErrorFull() instead")
    void dcimPowerOutletsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsListSignalErrorFull() instead")
    void dcimPowerOutletsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsPartialUpdateSignalErrorFull() instead")
    void dcimPowerOutletsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsReadSignalErrorFull() instead")
    void dcimPowerOutletsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsTraceSignalErrorFull() instead")
    void dcimPowerOutletsTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerOutletsUpdateSignalErrorFull() instead")
    void dcimPowerOutletsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerOutletsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsBulkDeleteSignalErrorFull() instead")
    void dcimPowerPanelsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsBulkPartialUpdateSignalErrorFull() instead")
    void dcimPowerPanelsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsBulkUpdateSignalErrorFull() instead")
    void dcimPowerPanelsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsCreateSignalErrorFull() instead")
    void dcimPowerPanelsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsDeleteSignalErrorFull() instead")
    void dcimPowerPanelsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsListSignalErrorFull() instead")
    void dcimPowerPanelsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsPartialUpdateSignalErrorFull() instead")
    void dcimPowerPanelsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsReadSignalErrorFull() instead")
    void dcimPowerPanelsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPanelsUpdateSignalErrorFull() instead")
    void dcimPowerPanelsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPanelsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimPowerPortTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimPowerPortTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimPowerPortTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesCreateSignalErrorFull() instead")
    void dcimPowerPortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesDeleteSignalErrorFull() instead")
    void dcimPowerPortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesListSignalErrorFull() instead")
    void dcimPowerPortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimPowerPortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesReadSignalErrorFull() instead")
    void dcimPowerPortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortTemplatesUpdateSignalErrorFull() instead")
    void dcimPowerPortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsBulkDeleteSignalErrorFull() instead")
    void dcimPowerPortsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsBulkPartialUpdateSignalErrorFull() instead")
    void dcimPowerPortsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsBulkUpdateSignalErrorFull() instead")
    void dcimPowerPortsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsCreateSignalErrorFull() instead")
    void dcimPowerPortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsDeleteSignalErrorFull() instead")
    void dcimPowerPortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsListSignalErrorFull() instead")
    void dcimPowerPortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsPartialUpdateSignalErrorFull() instead")
    void dcimPowerPortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsReadSignalErrorFull() instead")
    void dcimPowerPortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsTraceSignalErrorFull() instead")
    void dcimPowerPortsTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimPowerPortsUpdateSignalErrorFull() instead")
    void dcimPowerPortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimPowerPortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsBulkDeleteSignalErrorFull() instead")
    void dcimRackReservationsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsBulkPartialUpdateSignalErrorFull() instead")
    void dcimRackReservationsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsBulkUpdateSignalErrorFull() instead")
    void dcimRackReservationsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsCreateSignalErrorFull() instead")
    void dcimRackReservationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsDeleteSignalErrorFull() instead")
    void dcimRackReservationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsListSignalErrorFull() instead")
    void dcimRackReservationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsPartialUpdateSignalErrorFull() instead")
    void dcimRackReservationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsReadSignalErrorFull() instead")
    void dcimRackReservationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackReservationsUpdateSignalErrorFull() instead")
    void dcimRackReservationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackReservationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesBulkDeleteSignalErrorFull() instead")
    void dcimRackRolesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesBulkPartialUpdateSignalErrorFull() instead")
    void dcimRackRolesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesBulkUpdateSignalErrorFull() instead")
    void dcimRackRolesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesCreateSignalErrorFull() instead")
    void dcimRackRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesDeleteSignalErrorFull() instead")
    void dcimRackRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesListSignalErrorFull() instead")
    void dcimRackRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesPartialUpdateSignalErrorFull() instead")
    void dcimRackRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesReadSignalErrorFull() instead")
    void dcimRackRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRackRolesUpdateSignalErrorFull() instead")
    void dcimRackRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRackRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksBulkDeleteSignalErrorFull() instead")
    void dcimRacksBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksBulkPartialUpdateSignalErrorFull() instead")
    void dcimRacksBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksBulkUpdateSignalErrorFull() instead")
    void dcimRacksBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksCreateSignalErrorFull() instead")
    void dcimRacksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksDeleteSignalErrorFull() instead")
    void dcimRacksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksElevationSignalErrorFull() instead")
    void dcimRacksElevationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksElevationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksListSignalErrorFull() instead")
    void dcimRacksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksPartialUpdateSignalErrorFull() instead")
    void dcimRacksPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksReadSignalErrorFull() instead")
    void dcimRacksReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRacksUpdateSignalErrorFull() instead")
    void dcimRacksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRacksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesBulkDeleteSignalErrorFull() instead")
    void dcimRearPortTemplatesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesBulkPartialUpdateSignalErrorFull() instead")
    void dcimRearPortTemplatesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesBulkUpdateSignalErrorFull() instead")
    void dcimRearPortTemplatesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesCreateSignalErrorFull() instead")
    void dcimRearPortTemplatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesDeleteSignalErrorFull() instead")
    void dcimRearPortTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesListSignalErrorFull() instead")
    void dcimRearPortTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesPartialUpdateSignalErrorFull() instead")
    void dcimRearPortTemplatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesReadSignalErrorFull() instead")
    void dcimRearPortTemplatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortTemplatesUpdateSignalErrorFull() instead")
    void dcimRearPortTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsBulkDeleteSignalErrorFull() instead")
    void dcimRearPortsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsBulkPartialUpdateSignalErrorFull() instead")
    void dcimRearPortsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsBulkUpdateSignalErrorFull() instead")
    void dcimRearPortsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsCreateSignalErrorFull() instead")
    void dcimRearPortsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsDeleteSignalErrorFull() instead")
    void dcimRearPortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsListSignalErrorFull() instead")
    void dcimRearPortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsPartialUpdateSignalErrorFull() instead")
    void dcimRearPortsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsPathsSignalErrorFull() instead")
    void dcimRearPortsPathsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsPathsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsReadSignalErrorFull() instead")
    void dcimRearPortsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRearPortsUpdateSignalErrorFull() instead")
    void dcimRearPortsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRearPortsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsBulkDeleteSignalErrorFull() instead")
    void dcimRegionsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsBulkPartialUpdateSignalErrorFull() instead")
    void dcimRegionsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsBulkUpdateSignalErrorFull() instead")
    void dcimRegionsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsCreateSignalErrorFull() instead")
    void dcimRegionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsDeleteSignalErrorFull() instead")
    void dcimRegionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsListSignalErrorFull() instead")
    void dcimRegionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsPartialUpdateSignalErrorFull() instead")
    void dcimRegionsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsReadSignalErrorFull() instead")
    void dcimRegionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimRegionsUpdateSignalErrorFull() instead")
    void dcimRegionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimRegionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsBulkDeleteSignalErrorFull() instead")
    void dcimSiteGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsBulkPartialUpdateSignalErrorFull() instead")
    void dcimSiteGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsBulkUpdateSignalErrorFull() instead")
    void dcimSiteGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsCreateSignalErrorFull() instead")
    void dcimSiteGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsDeleteSignalErrorFull() instead")
    void dcimSiteGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsListSignalErrorFull() instead")
    void dcimSiteGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsPartialUpdateSignalErrorFull() instead")
    void dcimSiteGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsReadSignalErrorFull() instead")
    void dcimSiteGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSiteGroupsUpdateSignalErrorFull() instead")
    void dcimSiteGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSiteGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesBulkDeleteSignalErrorFull() instead")
    void dcimSitesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesBulkPartialUpdateSignalErrorFull() instead")
    void dcimSitesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesBulkUpdateSignalErrorFull() instead")
    void dcimSitesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesCreateSignalErrorFull() instead")
    void dcimSitesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesDeleteSignalErrorFull() instead")
    void dcimSitesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesListSignalErrorFull() instead")
    void dcimSitesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesPartialUpdateSignalErrorFull() instead")
    void dcimSitesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesReadSignalErrorFull() instead")
    void dcimSitesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimSitesUpdateSignalErrorFull() instead")
    void dcimSitesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimSitesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisBulkDeleteSignalErrorFull() instead")
    void dcimVirtualChassisBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisBulkPartialUpdateSignalErrorFull() instead")
    void dcimVirtualChassisBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisBulkUpdateSignalErrorFull() instead")
    void dcimVirtualChassisBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisCreateSignalErrorFull() instead")
    void dcimVirtualChassisCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisDeleteSignalErrorFull() instead")
    void dcimVirtualChassisDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisListSignalErrorFull() instead")
    void dcimVirtualChassisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisPartialUpdateSignalErrorFull() instead")
    void dcimVirtualChassisPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisReadSignalErrorFull() instead")
    void dcimVirtualChassisReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualChassisUpdateSignalErrorFull() instead")
    void dcimVirtualChassisUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualChassisUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsBulkDeleteSignalErrorFull() instead")
    void dcimVirtualDeviceContextsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsBulkPartialUpdateSignalErrorFull() instead")
    void dcimVirtualDeviceContextsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsBulkUpdateSignalErrorFull() instead")
    void dcimVirtualDeviceContextsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsCreateSignalErrorFull() instead")
    void dcimVirtualDeviceContextsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsDeleteSignalErrorFull() instead")
    void dcimVirtualDeviceContextsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsListSignalErrorFull() instead")
    void dcimVirtualDeviceContextsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsPartialUpdateSignalErrorFull() instead")
    void dcimVirtualDeviceContextsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsReadSignalErrorFull() instead")
    void dcimVirtualDeviceContextsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dcimVirtualDeviceContextsUpdateSignalErrorFull() instead")
    void dcimVirtualDeviceContextsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dcimVirtualDeviceContextsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
