/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableFHRPGroupAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableFHRPGroupAssignment::OAIWritableFHRPGroupAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableFHRPGroupAssignment::OAIWritableFHRPGroupAssignment() {
    this->initializeModel();
}

OAIWritableFHRPGroupAssignment::~OAIWritableFHRPGroupAssignment() {}

void OAIWritableFHRPGroupAssignment::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_interface_id_isSet = false;
    m_interface_id_isValid = false;

    m_interface_type_isSet = false;
    m_interface_type_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWritableFHRPGroupAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableFHRPGroupAssignment::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_interface_id_isValid = ::OpenAPI::fromJsonValue(m_interface_id, json[QString("interface_id")]);
    m_interface_id_isSet = !json[QString("interface_id")].isNull() && m_interface_id_isValid;

    m_interface_type_isValid = ::OpenAPI::fromJsonValue(m_interface_type, json[QString("interface_type")]);
    m_interface_type_isSet = !json[QString("interface_type")].isNull() && m_interface_type_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWritableFHRPGroupAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableFHRPGroupAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_interface_id_isSet) {
        obj.insert(QString("interface_id"), ::OpenAPI::toJsonValue(m_interface_id));
    }
    if (m_interface_type_isSet) {
        obj.insert(QString("interface_type"), ::OpenAPI::toJsonValue(m_interface_type));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIWritableFHRPGroupAssignment::getCreated() const {
    return m_created;
}
void OAIWritableFHRPGroupAssignment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWritableFHRPGroupAssignment::getDisplay() const {
    return m_display;
}
void OAIWritableFHRPGroupAssignment::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWritableFHRPGroupAssignment::getGroup() const {
    return m_group;
}
void OAIWritableFHRPGroupAssignment::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_group_Set() const{
    return m_group_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIWritableFHRPGroupAssignment::getId() const {
    return m_id;
}
void OAIWritableFHRPGroupAssignment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIWritableFHRPGroupAssignment::getInterface() const {
    return m_interface;
}
void OAIWritableFHRPGroupAssignment::setInterface(const OAIObject &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_interface_Valid() const{
    return m_interface_isValid;
}

qint32 OAIWritableFHRPGroupAssignment::getInterfaceId() const {
    return m_interface_id;
}
void OAIWritableFHRPGroupAssignment::setInterfaceId(const qint32 &interface_id) {
    m_interface_id = interface_id;
    m_interface_id_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_interface_id_Set() const{
    return m_interface_id_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_interface_id_Valid() const{
    return m_interface_id_isValid;
}

QString OAIWritableFHRPGroupAssignment::getInterfaceType() const {
    return m_interface_type;
}
void OAIWritableFHRPGroupAssignment::setInterfaceType(const QString &interface_type) {
    m_interface_type = interface_type;
    m_interface_type_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_interface_type_Set() const{
    return m_interface_type_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_interface_type_Valid() const{
    return m_interface_type_isValid;
}

QDateTime OAIWritableFHRPGroupAssignment::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableFHRPGroupAssignment::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIWritableFHRPGroupAssignment::getPriority() const {
    return m_priority;
}
void OAIWritableFHRPGroupAssignment::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIWritableFHRPGroupAssignment::getUrl() const {
    return m_url;
}
void OAIWritableFHRPGroupAssignment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableFHRPGroupAssignment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableFHRPGroupAssignment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWritableFHRPGroupAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableFHRPGroupAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_isValid && m_interface_id_isValid && m_interface_type_isValid && m_priority_isValid && true;
}

} // namespace OpenAPI
