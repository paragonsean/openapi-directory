/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomLink::OAICustomLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomLink::OAICustomLink() {
    this->initializeModel();
}

OAICustomLink::~OAICustomLink() {}

void OAICustomLink::initializeModel() {

    m_button_class_isSet = false;
    m_button_class_isValid = false;

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_link_url_isSet = false;
    m_link_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_new_window_isSet = false;
    m_new_window_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAICustomLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomLink::fromJsonObject(QJsonObject json) {

    m_button_class_isValid = ::OpenAPI::fromJsonValue(m_button_class, json[QString("button_class")]);
    m_button_class_isSet = !json[QString("button_class")].isNull() && m_button_class_isValid;

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("content_types")]);
    m_content_types_isSet = !json[QString("content_types")].isNull() && m_content_types_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("group_name")]);
    m_group_name_isSet = !json[QString("group_name")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("link_text")]);
    m_link_text_isSet = !json[QString("link_text")].isNull() && m_link_text_isValid;

    m_link_url_isValid = ::OpenAPI::fromJsonValue(m_link_url, json[QString("link_url")]);
    m_link_url_isSet = !json[QString("link_url")].isNull() && m_link_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_new_window_isValid = ::OpenAPI::fromJsonValue(m_new_window, json[QString("new_window")]);
    m_new_window_isSet = !json[QString("new_window")].isNull() && m_new_window_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAICustomLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomLink::asJsonObject() const {
    QJsonObject obj;
    if (m_button_class_isSet) {
        obj.insert(QString("button_class"), ::OpenAPI::toJsonValue(m_button_class));
    }
    if (m_content_types.size() > 0) {
        obj.insert(QString("content_types"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("group_name"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("link_text"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_link_url_isSet) {
        obj.insert(QString("link_url"), ::OpenAPI::toJsonValue(m_link_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_new_window_isSet) {
        obj.insert(QString("new_window"), ::OpenAPI::toJsonValue(m_new_window));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAICustomLink::getButtonClass() const {
    return m_button_class;
}
void OAICustomLink::setButtonClass(const QString &button_class) {
    m_button_class = button_class;
    m_button_class_isSet = true;
}

bool OAICustomLink::is_button_class_Set() const{
    return m_button_class_isSet;
}

bool OAICustomLink::is_button_class_Valid() const{
    return m_button_class_isValid;
}

QSet<QString> OAICustomLink::getContentTypes() const {
    return m_content_types;
}
void OAICustomLink::setContentTypes(const QSet<QString> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAICustomLink::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAICustomLink::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QDateTime OAICustomLink::getCreated() const {
    return m_created;
}
void OAICustomLink::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICustomLink::is_created_Set() const{
    return m_created_isSet;
}

bool OAICustomLink::is_created_Valid() const{
    return m_created_isValid;
}

QString OAICustomLink::getDisplay() const {
    return m_display;
}
void OAICustomLink::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAICustomLink::is_display_Set() const{
    return m_display_isSet;
}

bool OAICustomLink::is_display_Valid() const{
    return m_display_isValid;
}

bool OAICustomLink::isEnabled() const {
    return m_enabled;
}
void OAICustomLink::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICustomLink::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICustomLink::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICustomLink::getGroupName() const {
    return m_group_name;
}
void OAICustomLink::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAICustomLink::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAICustomLink::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAICustomLink::getId() const {
    return m_id;
}
void OAICustomLink::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomLink::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICustomLink::getLastUpdated() const {
    return m_last_updated;
}
void OAICustomLink::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAICustomLink::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAICustomLink::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAICustomLink::getLinkText() const {
    return m_link_text;
}
void OAICustomLink::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAICustomLink::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAICustomLink::is_link_text_Valid() const{
    return m_link_text_isValid;
}

QString OAICustomLink::getLinkUrl() const {
    return m_link_url;
}
void OAICustomLink::setLinkUrl(const QString &link_url) {
    m_link_url = link_url;
    m_link_url_isSet = true;
}

bool OAICustomLink::is_link_url_Set() const{
    return m_link_url_isSet;
}

bool OAICustomLink::is_link_url_Valid() const{
    return m_link_url_isValid;
}

QString OAICustomLink::getName() const {
    return m_name;
}
void OAICustomLink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomLink::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomLink::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICustomLink::isNewWindow() const {
    return m_new_window;
}
void OAICustomLink::setNewWindow(const bool &new_window) {
    m_new_window = new_window;
    m_new_window_isSet = true;
}

bool OAICustomLink::is_new_window_Set() const{
    return m_new_window_isSet;
}

bool OAICustomLink::is_new_window_Valid() const{
    return m_new_window_isValid;
}

QString OAICustomLink::getUrl() const {
    return m_url;
}
void OAICustomLink::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICustomLink::is_url_Set() const{
    return m_url_isSet;
}

bool OAICustomLink::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAICustomLink::getWeight() const {
    return m_weight;
}
void OAICustomLink::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICustomLink::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICustomLink::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAICustomLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_button_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_types_isValid && m_link_text_isValid && m_link_url_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
