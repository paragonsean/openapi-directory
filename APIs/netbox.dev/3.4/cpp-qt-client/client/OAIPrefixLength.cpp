/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrefixLength.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrefixLength::OAIPrefixLength(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrefixLength::OAIPrefixLength() {
    this->initializeModel();
}

OAIPrefixLength::~OAIPrefixLength() {}

void OAIPrefixLength::initializeModel() {

    m_prefix_length_isSet = false;
    m_prefix_length_isValid = false;
}

void OAIPrefixLength::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrefixLength::fromJsonObject(QJsonObject json) {

    m_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_prefix_length, json[QString("prefix_length")]);
    m_prefix_length_isSet = !json[QString("prefix_length")].isNull() && m_prefix_length_isValid;
}

QString OAIPrefixLength::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrefixLength::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_length_isSet) {
        obj.insert(QString("prefix_length"), ::OpenAPI::toJsonValue(m_prefix_length));
    }
    return obj;
}

qint32 OAIPrefixLength::getPrefixLength() const {
    return m_prefix_length;
}
void OAIPrefixLength::setPrefixLength(const qint32 &prefix_length) {
    m_prefix_length = prefix_length;
    m_prefix_length_isSet = true;
}

bool OAIPrefixLength::is_prefix_length_Set() const{
    return m_prefix_length_isSet;
}

bool OAIPrefixLength::is_prefix_length_Valid() const{
    return m_prefix_length_isValid;
}

bool OAIPrefixLength::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrefixLength::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prefix_length_isValid && true;
}

} // namespace OpenAPI
