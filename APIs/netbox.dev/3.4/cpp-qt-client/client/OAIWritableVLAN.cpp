/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableVLAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableVLAN::OAIWritableVLAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableVLAN::OAIWritableVLAN() {
    this->initializeModel();
}

OAIWritableVLAN::~OAIWritableVLAN() {}

void OAIWritableVLAN::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_l2vpn_termination_isSet = false;
    m_l2vpn_termination_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefix_count_isSet = false;
    m_prefix_count_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vid_isSet = false;
    m_vid_isValid = false;
}

void OAIWritableVLAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableVLAN::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_l2vpn_termination_isValid = ::OpenAPI::fromJsonValue(m_l2vpn_termination, json[QString("l2vpn_termination")]);
    m_l2vpn_termination_isSet = !json[QString("l2vpn_termination")].isNull() && m_l2vpn_termination_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefix_count_isValid = ::OpenAPI::fromJsonValue(m_prefix_count, json[QString("prefix_count")]);
    m_prefix_count_isSet = !json[QString("prefix_count")].isNull() && m_prefix_count_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vid_isValid = ::OpenAPI::fromJsonValue(m_vid, json[QString("vid")]);
    m_vid_isSet = !json[QString("vid")].isNull() && m_vid_isValid;
}

QString OAIWritableVLAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableVLAN::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_l2vpn_termination_isSet) {
        obj.insert(QString("l2vpn_termination"), ::OpenAPI::toJsonValue(m_l2vpn_termination));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefix_count_isSet) {
        obj.insert(QString("prefix_count"), ::OpenAPI::toJsonValue(m_prefix_count));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vid_isSet) {
        obj.insert(QString("vid"), ::OpenAPI::toJsonValue(m_vid));
    }
    return obj;
}

QString OAIWritableVLAN::getComments() const {
    return m_comments;
}
void OAIWritableVLAN::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableVLAN::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableVLAN::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableVLAN::getCreated() const {
    return m_created;
}
void OAIWritableVLAN::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableVLAN::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableVLAN::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableVLAN::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableVLAN::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableVLAN::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableVLAN::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableVLAN::getDescription() const {
    return m_description;
}
void OAIWritableVLAN::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableVLAN::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableVLAN::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableVLAN::getDisplay() const {
    return m_display;
}
void OAIWritableVLAN::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableVLAN::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableVLAN::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWritableVLAN::getGroup() const {
    return m_group;
}
void OAIWritableVLAN::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIWritableVLAN::is_group_Set() const{
    return m_group_isSet;
}

bool OAIWritableVLAN::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIWritableVLAN::getId() const {
    return m_id;
}
void OAIWritableVLAN::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableVLAN::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableVLAN::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableVLAN::getL2vpnTermination() const {
    return m_l2vpn_termination;
}
void OAIWritableVLAN::setL2vpnTermination(const QString &l2vpn_termination) {
    m_l2vpn_termination = l2vpn_termination;
    m_l2vpn_termination_isSet = true;
}

bool OAIWritableVLAN::is_l2vpn_termination_Set() const{
    return m_l2vpn_termination_isSet;
}

bool OAIWritableVLAN::is_l2vpn_termination_Valid() const{
    return m_l2vpn_termination_isValid;
}

QDateTime OAIWritableVLAN::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableVLAN::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableVLAN::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableVLAN::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableVLAN::getName() const {
    return m_name;
}
void OAIWritableVLAN::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableVLAN::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableVLAN::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIWritableVLAN::getPrefixCount() const {
    return m_prefix_count;
}
void OAIWritableVLAN::setPrefixCount(const qint32 &prefix_count) {
    m_prefix_count = prefix_count;
    m_prefix_count_isSet = true;
}

bool OAIWritableVLAN::is_prefix_count_Set() const{
    return m_prefix_count_isSet;
}

bool OAIWritableVLAN::is_prefix_count_Valid() const{
    return m_prefix_count_isValid;
}

qint32 OAIWritableVLAN::getRole() const {
    return m_role;
}
void OAIWritableVLAN::setRole(const qint32 &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIWritableVLAN::is_role_Set() const{
    return m_role_isSet;
}

bool OAIWritableVLAN::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIWritableVLAN::getSite() const {
    return m_site;
}
void OAIWritableVLAN::setSite(const qint32 &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIWritableVLAN::is_site_Set() const{
    return m_site_isSet;
}

bool OAIWritableVLAN::is_site_Valid() const{
    return m_site_isValid;
}

QString OAIWritableVLAN::getStatus() const {
    return m_status;
}
void OAIWritableVLAN::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritableVLAN::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritableVLAN::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWritableVLAN::getTags() const {
    return m_tags;
}
void OAIWritableVLAN::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableVLAN::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableVLAN::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableVLAN::getTenant() const {
    return m_tenant;
}
void OAIWritableVLAN::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableVLAN::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableVLAN::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableVLAN::getUrl() const {
    return m_url;
}
void OAIWritableVLAN::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableVLAN::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableVLAN::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIWritableVLAN::getVid() const {
    return m_vid;
}
void OAIWritableVLAN::setVid(const qint32 &vid) {
    m_vid = vid;
    m_vid_isSet = true;
}

bool OAIWritableVLAN::is_vid_Set() const{
    return m_vid_isSet;
}

bool OAIWritableVLAN::is_vid_Valid() const{
    return m_vid_isValid;
}

bool OAIWritableVLAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l2vpn_termination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableVLAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_vid_isValid && true;
}

} // namespace OpenAPI
