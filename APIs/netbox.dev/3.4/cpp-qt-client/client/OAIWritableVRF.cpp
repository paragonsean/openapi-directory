/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableVRF.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableVRF::OAIWritableVRF(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableVRF::OAIWritableVRF() {
    this->initializeModel();
}

OAIWritableVRF::~OAIWritableVRF() {}

void OAIWritableVRF::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_enforce_unique_isSet = false;
    m_enforce_unique_isValid = false;

    m_export_targets_isSet = false;
    m_export_targets_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_targets_isSet = false;
    m_import_targets_isValid = false;

    m_ipaddress_count_isSet = false;
    m_ipaddress_count_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefix_count_isSet = false;
    m_prefix_count_isValid = false;

    m_rd_isSet = false;
    m_rd_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWritableVRF::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableVRF::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_enforce_unique_isValid = ::OpenAPI::fromJsonValue(m_enforce_unique, json[QString("enforce_unique")]);
    m_enforce_unique_isSet = !json[QString("enforce_unique")].isNull() && m_enforce_unique_isValid;

    m_export_targets_isValid = ::OpenAPI::fromJsonValue(m_export_targets, json[QString("export_targets")]);
    m_export_targets_isSet = !json[QString("export_targets")].isNull() && m_export_targets_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_import_targets_isValid = ::OpenAPI::fromJsonValue(m_import_targets, json[QString("import_targets")]);
    m_import_targets_isSet = !json[QString("import_targets")].isNull() && m_import_targets_isValid;

    m_ipaddress_count_isValid = ::OpenAPI::fromJsonValue(m_ipaddress_count, json[QString("ipaddress_count")]);
    m_ipaddress_count_isSet = !json[QString("ipaddress_count")].isNull() && m_ipaddress_count_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefix_count_isValid = ::OpenAPI::fromJsonValue(m_prefix_count, json[QString("prefix_count")]);
    m_prefix_count_isSet = !json[QString("prefix_count")].isNull() && m_prefix_count_isValid;

    m_rd_isValid = ::OpenAPI::fromJsonValue(m_rd, json[QString("rd")]);
    m_rd_isSet = !json[QString("rd")].isNull() && m_rd_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWritableVRF::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableVRF::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_enforce_unique_isSet) {
        obj.insert(QString("enforce_unique"), ::OpenAPI::toJsonValue(m_enforce_unique));
    }
    if (m_export_targets.size() > 0) {
        obj.insert(QString("export_targets"), ::OpenAPI::toJsonValue(m_export_targets));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_targets.size() > 0) {
        obj.insert(QString("import_targets"), ::OpenAPI::toJsonValue(m_import_targets));
    }
    if (m_ipaddress_count_isSet) {
        obj.insert(QString("ipaddress_count"), ::OpenAPI::toJsonValue(m_ipaddress_count));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefix_count_isSet) {
        obj.insert(QString("prefix_count"), ::OpenAPI::toJsonValue(m_prefix_count));
    }
    if (m_rd_isSet) {
        obj.insert(QString("rd"), ::OpenAPI::toJsonValue(m_rd));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWritableVRF::getComments() const {
    return m_comments;
}
void OAIWritableVRF::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableVRF::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableVRF::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableVRF::getCreated() const {
    return m_created;
}
void OAIWritableVRF::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableVRF::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableVRF::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableVRF::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableVRF::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableVRF::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableVRF::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableVRF::getDescription() const {
    return m_description;
}
void OAIWritableVRF::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableVRF::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableVRF::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableVRF::getDisplay() const {
    return m_display;
}
void OAIWritableVRF::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableVRF::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableVRF::is_display_Valid() const{
    return m_display_isValid;
}

bool OAIWritableVRF::isEnforceUnique() const {
    return m_enforce_unique;
}
void OAIWritableVRF::setEnforceUnique(const bool &enforce_unique) {
    m_enforce_unique = enforce_unique;
    m_enforce_unique_isSet = true;
}

bool OAIWritableVRF::is_enforce_unique_Set() const{
    return m_enforce_unique_isSet;
}

bool OAIWritableVRF::is_enforce_unique_Valid() const{
    return m_enforce_unique_isValid;
}

QSet<qint32> OAIWritableVRF::getExportTargets() const {
    return m_export_targets;
}
void OAIWritableVRF::setExportTargets(const QSet<qint32> &export_targets) {
    m_export_targets = export_targets;
    m_export_targets_isSet = true;
}

bool OAIWritableVRF::is_export_targets_Set() const{
    return m_export_targets_isSet;
}

bool OAIWritableVRF::is_export_targets_Valid() const{
    return m_export_targets_isValid;
}

qint32 OAIWritableVRF::getId() const {
    return m_id;
}
void OAIWritableVRF::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableVRF::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableVRF::is_id_Valid() const{
    return m_id_isValid;
}

QSet<qint32> OAIWritableVRF::getImportTargets() const {
    return m_import_targets;
}
void OAIWritableVRF::setImportTargets(const QSet<qint32> &import_targets) {
    m_import_targets = import_targets;
    m_import_targets_isSet = true;
}

bool OAIWritableVRF::is_import_targets_Set() const{
    return m_import_targets_isSet;
}

bool OAIWritableVRF::is_import_targets_Valid() const{
    return m_import_targets_isValid;
}

qint32 OAIWritableVRF::getIpaddressCount() const {
    return m_ipaddress_count;
}
void OAIWritableVRF::setIpaddressCount(const qint32 &ipaddress_count) {
    m_ipaddress_count = ipaddress_count;
    m_ipaddress_count_isSet = true;
}

bool OAIWritableVRF::is_ipaddress_count_Set() const{
    return m_ipaddress_count_isSet;
}

bool OAIWritableVRF::is_ipaddress_count_Valid() const{
    return m_ipaddress_count_isValid;
}

QDateTime OAIWritableVRF::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableVRF::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableVRF::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableVRF::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableVRF::getName() const {
    return m_name;
}
void OAIWritableVRF::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableVRF::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableVRF::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIWritableVRF::getPrefixCount() const {
    return m_prefix_count;
}
void OAIWritableVRF::setPrefixCount(const qint32 &prefix_count) {
    m_prefix_count = prefix_count;
    m_prefix_count_isSet = true;
}

bool OAIWritableVRF::is_prefix_count_Set() const{
    return m_prefix_count_isSet;
}

bool OAIWritableVRF::is_prefix_count_Valid() const{
    return m_prefix_count_isValid;
}

QString OAIWritableVRF::getRd() const {
    return m_rd;
}
void OAIWritableVRF::setRd(const QString &rd) {
    m_rd = rd;
    m_rd_isSet = true;
}

bool OAIWritableVRF::is_rd_Set() const{
    return m_rd_isSet;
}

bool OAIWritableVRF::is_rd_Valid() const{
    return m_rd_isValid;
}

QList<OAINestedTag> OAIWritableVRF::getTags() const {
    return m_tags;
}
void OAIWritableVRF::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableVRF::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableVRF::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableVRF::getTenant() const {
    return m_tenant;
}
void OAIWritableVRF::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableVRF::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableVRF::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableVRF::getUrl() const {
    return m_url;
}
void OAIWritableVRF::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableVRF::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableVRF::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWritableVRF::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipaddress_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableVRF::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
