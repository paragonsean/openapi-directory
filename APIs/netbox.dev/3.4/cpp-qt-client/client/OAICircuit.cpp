/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICircuit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICircuit::OAICircuit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICircuit::OAICircuit() {
    this->initializeModel();
}

OAICircuit::~OAICircuit() {}

void OAICircuit::initializeModel() {

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_commit_rate_isSet = false;
    m_commit_rate_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_install_date_isSet = false;
    m_install_date_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_termination_a_isSet = false;
    m_termination_a_isValid = false;

    m_termination_date_isSet = false;
    m_termination_date_isValid = false;

    m_termination_z_isSet = false;
    m_termination_z_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICircuit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICircuit::fromJsonObject(QJsonObject json) {

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_commit_rate_isValid = ::OpenAPI::fromJsonValue(m_commit_rate, json[QString("commit_rate")]);
    m_commit_rate_isSet = !json[QString("commit_rate")].isNull() && m_commit_rate_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_install_date_isValid = ::OpenAPI::fromJsonValue(m_install_date, json[QString("install_date")]);
    m_install_date_isSet = !json[QString("install_date")].isNull() && m_install_date_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_termination_a_isValid = ::OpenAPI::fromJsonValue(m_termination_a, json[QString("termination_a")]);
    m_termination_a_isSet = !json[QString("termination_a")].isNull() && m_termination_a_isValid;

    m_termination_date_isValid = ::OpenAPI::fromJsonValue(m_termination_date, json[QString("termination_date")]);
    m_termination_date_isSet = !json[QString("termination_date")].isNull() && m_termination_date_isValid;

    m_termination_z_isValid = ::OpenAPI::fromJsonValue(m_termination_z, json[QString("termination_z")]);
    m_termination_z_isSet = !json[QString("termination_z")].isNull() && m_termination_z_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICircuit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICircuit::asJsonObject() const {
    QJsonObject obj;
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_commit_rate_isSet) {
        obj.insert(QString("commit_rate"), ::OpenAPI::toJsonValue(m_commit_rate));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_install_date_isSet) {
        obj.insert(QString("install_date"), ::OpenAPI::toJsonValue(m_install_date));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant.isSet()) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_termination_a.isSet()) {
        obj.insert(QString("termination_a"), ::OpenAPI::toJsonValue(m_termination_a));
    }
    if (m_termination_date_isSet) {
        obj.insert(QString("termination_date"), ::OpenAPI::toJsonValue(m_termination_date));
    }
    if (m_termination_z.isSet()) {
        obj.insert(QString("termination_z"), ::OpenAPI::toJsonValue(m_termination_z));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICircuit::getCid() const {
    return m_cid;
}
void OAICircuit::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAICircuit::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAICircuit::is_cid_Valid() const{
    return m_cid_isValid;
}

QString OAICircuit::getComments() const {
    return m_comments;
}
void OAICircuit::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAICircuit::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAICircuit::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAICircuit::getCommitRate() const {
    return m_commit_rate;
}
void OAICircuit::setCommitRate(const qint32 &commit_rate) {
    m_commit_rate = commit_rate;
    m_commit_rate_isSet = true;
}

bool OAICircuit::is_commit_rate_Set() const{
    return m_commit_rate_isSet;
}

bool OAICircuit::is_commit_rate_Valid() const{
    return m_commit_rate_isValid;
}

QDateTime OAICircuit::getCreated() const {
    return m_created;
}
void OAICircuit::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICircuit::is_created_Set() const{
    return m_created_isSet;
}

bool OAICircuit::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAICircuit::getCustomFields() const {
    return m_custom_fields;
}
void OAICircuit::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICircuit::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICircuit::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICircuit::getDescription() const {
    return m_description;
}
void OAICircuit::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICircuit::is_description_Set() const{
    return m_description_isSet;
}

bool OAICircuit::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICircuit::getDisplay() const {
    return m_display;
}
void OAICircuit::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAICircuit::is_display_Set() const{
    return m_display_isSet;
}

bool OAICircuit::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAICircuit::getId() const {
    return m_id;
}
void OAICircuit::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICircuit::is_id_Set() const{
    return m_id_isSet;
}

bool OAICircuit::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAICircuit::getInstallDate() const {
    return m_install_date;
}
void OAICircuit::setInstallDate(const QDate &install_date) {
    m_install_date = install_date;
    m_install_date_isSet = true;
}

bool OAICircuit::is_install_date_Set() const{
    return m_install_date_isSet;
}

bool OAICircuit::is_install_date_Valid() const{
    return m_install_date_isValid;
}

QDateTime OAICircuit::getLastUpdated() const {
    return m_last_updated;
}
void OAICircuit::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAICircuit::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAICircuit::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAINestedProvider OAICircuit::getProvider() const {
    return m_provider;
}
void OAICircuit::setProvider(const OAINestedProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICircuit::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICircuit::is_provider_Valid() const{
    return m_provider_isValid;
}

OAIStatus_1 OAICircuit::getStatus() const {
    return m_status;
}
void OAICircuit::setStatus(const OAIStatus_1 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICircuit::is_status_Set() const{
    return m_status_isSet;
}

bool OAICircuit::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAICircuit::getTags() const {
    return m_tags;
}
void OAICircuit::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICircuit::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICircuit::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedTenant OAICircuit::getTenant() const {
    return m_tenant;
}
void OAICircuit::setTenant(const OAINestedTenant &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAICircuit::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAICircuit::is_tenant_Valid() const{
    return m_tenant_isValid;
}

OAICircuitCircuitTermination OAICircuit::getTerminationA() const {
    return m_termination_a;
}
void OAICircuit::setTerminationA(const OAICircuitCircuitTermination &termination_a) {
    m_termination_a = termination_a;
    m_termination_a_isSet = true;
}

bool OAICircuit::is_termination_a_Set() const{
    return m_termination_a_isSet;
}

bool OAICircuit::is_termination_a_Valid() const{
    return m_termination_a_isValid;
}

QDate OAICircuit::getTerminationDate() const {
    return m_termination_date;
}
void OAICircuit::setTerminationDate(const QDate &termination_date) {
    m_termination_date = termination_date;
    m_termination_date_isSet = true;
}

bool OAICircuit::is_termination_date_Set() const{
    return m_termination_date_isSet;
}

bool OAICircuit::is_termination_date_Valid() const{
    return m_termination_date_isValid;
}

OAICircuitCircuitTermination OAICircuit::getTerminationZ() const {
    return m_termination_z;
}
void OAICircuit::setTerminationZ(const OAICircuitCircuitTermination &termination_z) {
    m_termination_z = termination_z;
    m_termination_z_isSet = true;
}

bool OAICircuit::is_termination_z_Set() const{
    return m_termination_z_isSet;
}

bool OAICircuit::is_termination_z_Valid() const{
    return m_termination_z_isValid;
}

OAINestedCircuitType OAICircuit::getType() const {
    return m_type;
}
void OAICircuit::setType(const OAINestedCircuitType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICircuit::is_type_Set() const{
    return m_type_isSet;
}

bool OAICircuit::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICircuit::getUrl() const {
    return m_url;
}
void OAICircuit::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICircuit::is_url_Set() const{
    return m_url_isSet;
}

bool OAICircuit::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICircuit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_z.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICircuit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cid_isValid && m_provider_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
