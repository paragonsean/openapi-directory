/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactAssignment::OAIContactAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactAssignment::OAIContactAssignment() {
    this->initializeModel();
}

OAIContactAssignment::~OAIContactAssignment() {}

void OAIContactAssignment::initializeModel() {

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIContactAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactAssignment::fromJsonObject(QJsonObject json) {

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("object_id")]);
    m_object_id_isSet = !json[QString("object_id")].isNull() && m_object_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIContactAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("object_id"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAINestedContact OAIContactAssignment::getContact() const {
    return m_contact;
}
void OAIContactAssignment::setContact(const OAINestedContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIContactAssignment::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIContactAssignment::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIContactAssignment::getContentType() const {
    return m_content_type;
}
void OAIContactAssignment::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIContactAssignment::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIContactAssignment::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIContactAssignment::getCreated() const {
    return m_created;
}
void OAIContactAssignment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIContactAssignment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIContactAssignment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIContactAssignment::getDisplay() const {
    return m_display;
}
void OAIContactAssignment::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIContactAssignment::is_display_Set() const{
    return m_display_isSet;
}

bool OAIContactAssignment::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIContactAssignment::getId() const {
    return m_id;
}
void OAIContactAssignment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContactAssignment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContactAssignment::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIContactAssignment::getLastUpdated() const {
    return m_last_updated;
}
void OAIContactAssignment::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIContactAssignment::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIContactAssignment::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIObject OAIContactAssignment::getObject() const {
    return m_object;
}
void OAIContactAssignment::setObject(const OAIObject &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIContactAssignment::is_object_Set() const{
    return m_object_isSet;
}

bool OAIContactAssignment::is_object_Valid() const{
    return m_object_isValid;
}

qint32 OAIContactAssignment::getObjectId() const {
    return m_object_id;
}
void OAIContactAssignment::setObjectId(const qint32 &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIContactAssignment::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIContactAssignment::is_object_id_Valid() const{
    return m_object_id_isValid;
}

OAIPriority OAIContactAssignment::getPriority() const {
    return m_priority;
}
void OAIContactAssignment::setPriority(const OAIPriority &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIContactAssignment::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIContactAssignment::is_priority_Valid() const{
    return m_priority_isValid;
}

OAINestedContactRole OAIContactAssignment::getRole() const {
    return m_role;
}
void OAIContactAssignment::setRole(const OAINestedContactRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIContactAssignment::is_role_Set() const{
    return m_role_isSet;
}

bool OAIContactAssignment::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIContactAssignment::getUrl() const {
    return m_url;
}
void OAIContactAssignment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIContactAssignment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIContactAssignment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIContactAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_isValid && m_content_type_isValid && m_object_id_isValid && true;
}

} // namespace OpenAPI
