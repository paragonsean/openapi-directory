/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableAggregate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableAggregate::OAIWritableAggregate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableAggregate::OAIWritableAggregate() {
    this->initializeModel();
}

OAIWritableAggregate::~OAIWritableAggregate() {}

void OAIWritableAggregate::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_date_added_isSet = false;
    m_date_added_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_rir_isSet = false;
    m_rir_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWritableAggregate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableAggregate::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_date_added_isValid = ::OpenAPI::fromJsonValue(m_date_added, json[QString("date_added")]);
    m_date_added_isSet = !json[QString("date_added")].isNull() && m_date_added_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_rir_isValid = ::OpenAPI::fromJsonValue(m_rir, json[QString("rir")]);
    m_rir_isSet = !json[QString("rir")].isNull() && m_rir_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWritableAggregate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableAggregate::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_date_added_isSet) {
        obj.insert(QString("date_added"), ::OpenAPI::toJsonValue(m_date_added));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_rir_isSet) {
        obj.insert(QString("rir"), ::OpenAPI::toJsonValue(m_rir));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWritableAggregate::getComments() const {
    return m_comments;
}
void OAIWritableAggregate::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableAggregate::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableAggregate::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableAggregate::getCreated() const {
    return m_created;
}
void OAIWritableAggregate::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableAggregate::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableAggregate::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableAggregate::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableAggregate::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableAggregate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableAggregate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QDate OAIWritableAggregate::getDateAdded() const {
    return m_date_added;
}
void OAIWritableAggregate::setDateAdded(const QDate &date_added) {
    m_date_added = date_added;
    m_date_added_isSet = true;
}

bool OAIWritableAggregate::is_date_added_Set() const{
    return m_date_added_isSet;
}

bool OAIWritableAggregate::is_date_added_Valid() const{
    return m_date_added_isValid;
}

QString OAIWritableAggregate::getDescription() const {
    return m_description;
}
void OAIWritableAggregate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableAggregate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableAggregate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableAggregate::getDisplay() const {
    return m_display;
}
void OAIWritableAggregate::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableAggregate::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableAggregate::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIWritableAggregate::getFamily() const {
    return m_family;
}
void OAIWritableAggregate::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIWritableAggregate::is_family_Set() const{
    return m_family_isSet;
}

bool OAIWritableAggregate::is_family_Valid() const{
    return m_family_isValid;
}

qint32 OAIWritableAggregate::getId() const {
    return m_id;
}
void OAIWritableAggregate::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableAggregate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableAggregate::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableAggregate::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableAggregate::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableAggregate::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableAggregate::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableAggregate::getPrefix() const {
    return m_prefix;
}
void OAIWritableAggregate::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIWritableAggregate::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIWritableAggregate::is_prefix_Valid() const{
    return m_prefix_isValid;
}

qint32 OAIWritableAggregate::getRir() const {
    return m_rir;
}
void OAIWritableAggregate::setRir(const qint32 &rir) {
    m_rir = rir;
    m_rir_isSet = true;
}

bool OAIWritableAggregate::is_rir_Set() const{
    return m_rir_isSet;
}

bool OAIWritableAggregate::is_rir_Valid() const{
    return m_rir_isValid;
}

QList<OAINestedTag> OAIWritableAggregate::getTags() const {
    return m_tags;
}
void OAIWritableAggregate::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableAggregate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableAggregate::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableAggregate::getTenant() const {
    return m_tenant;
}
void OAIWritableAggregate::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableAggregate::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableAggregate::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableAggregate::getUrl() const {
    return m_url;
}
void OAIWritableAggregate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableAggregate::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableAggregate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWritableAggregate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableAggregate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prefix_isValid && m_rir_isValid && true;
}

} // namespace OpenAPI
