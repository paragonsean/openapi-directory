/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualizationApi_H
#define OAI_OAIVirtualizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICluster.h"
#include "OAIClusterGroup.h"
#include "OAIClusterType.h"
#include "OAIVMInterface.h"
#include "OAIVirtualMachineWithConfigContext.h"
#include "OAIVirtualization_cluster_groups_list_200_response.h"
#include "OAIVirtualization_cluster_types_list_200_response.h"
#include "OAIVirtualization_clusters_list_200_response.h"
#include "OAIVirtualization_interfaces_list_200_response.h"
#include "OAIVirtualization_virtual_machines_list_200_response.h"
#include "OAIWritableCluster.h"
#include "OAIWritableVMInterface.h"
#include "OAIWritableVirtualMachineWithConfigContext.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualizationApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualizationApi(const int timeOut = 0);
    ~OAIVirtualizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void virtualizationClusterGroupsBulkDelete();

    /**
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsBulkPartialUpdate(const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsBulkUpdate(const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsCreate(const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationClusterGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsPartialUpdate(const qint32 &id, const OAIClusterGroup &oai_cluster_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_group OAIClusterGroup [required]
    */
    virtual void virtualizationClusterGroupsUpdate(const qint32 &id, const OAIClusterGroup &oai_cluster_group);


    virtual void virtualizationClusterTypesBulkDelete();

    /**
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesBulkPartialUpdate(const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesBulkUpdate(const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesCreate(const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterTypesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationClusterTypesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesPartialUpdate(const qint32 &id, const OAIClusterType &oai_cluster_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClusterTypesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_cluster_type OAIClusterType [required]
    */
    virtual void virtualizationClusterTypesUpdate(const qint32 &id, const OAIClusterType &oai_cluster_type);


    virtual void virtualizationClustersBulkDelete();

    /**
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersBulkPartialUpdate(const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersBulkUpdate(const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersCreate(const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClustersDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  type_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  type_id__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationClustersList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersPartialUpdate(const qint32 &id, const OAIWritableCluster &oai_writable_cluster);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationClustersRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_cluster OAIWritableCluster [required]
    */
    virtual void virtualizationClustersUpdate(const qint32 &id, const OAIWritableCluster &oai_writable_cluster);


    virtual void virtualizationInterfacesBulkDelete();

    /**
    * @param[in]  oai_writable_vm_interface OAIWritableVMInterface [required]
    */
    virtual void virtualizationInterfacesBulkPartialUpdate(const OAIWritableVMInterface &oai_writable_vm_interface);

    /**
    * @param[in]  oai_writable_vm_interface OAIWritableVMInterface [required]
    */
    virtual void virtualizationInterfacesBulkUpdate(const OAIWritableVMInterface &oai_writable_vm_interface);

    /**
    * @param[in]  oai_writable_vm_interface OAIWritableVMInterface [required]
    */
    virtual void virtualizationInterfacesCreate(const OAIWritableVMInterface &oai_writable_vm_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationInterfacesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  enabled QString [optional]
    * @param[in]  mtu QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  bridge_id QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  l2vpn_id QString [optional]
    * @param[in]  l2vpn QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  mtu__n QString [optional]
    * @param[in]  mtu__lte QString [optional]
    * @param[in]  mtu__lt QString [optional]
    * @param[in]  mtu__gte QString [optional]
    * @param[in]  mtu__gt QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  cluster_id__n QString [optional]
    * @param[in]  cluster__n QString [optional]
    * @param[in]  virtual_machine_id__n QString [optional]
    * @param[in]  virtual_machine__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  bridge_id__n QString [optional]
    * @param[in]  mac_address__n QString [optional]
    * @param[in]  mac_address__ic QString [optional]
    * @param[in]  mac_address__nic QString [optional]
    * @param[in]  mac_address__iew QString [optional]
    * @param[in]  mac_address__niew QString [optional]
    * @param[in]  mac_address__isw QString [optional]
    * @param[in]  mac_address__nisw QString [optional]
    * @param[in]  mac_address__ie QString [optional]
    * @param[in]  mac_address__nie QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  l2vpn_id__n QString [optional]
    * @param[in]  l2vpn__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationInterfacesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bridge_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mtu__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bridge_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &l2vpn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vm_interface OAIWritableVMInterface [required]
    */
    virtual void virtualizationInterfacesPartialUpdate(const qint32 &id, const OAIWritableVMInterface &oai_writable_vm_interface);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationInterfacesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vm_interface OAIWritableVMInterface [required]
    */
    virtual void virtualizationInterfacesUpdate(const qint32 &id, const OAIWritableVMInterface &oai_writable_vm_interface);


    virtual void virtualizationVirtualMachinesBulkDelete();

    /**
    * @param[in]  oai_writable_virtual_machine_with_config_context OAIWritableVirtualMachineWithConfigContext [required]
    */
    virtual void virtualizationVirtualMachinesBulkPartialUpdate(const OAIWritableVirtualMachineWithConfigContext &oai_writable_virtual_machine_with_config_context);

    /**
    * @param[in]  oai_writable_virtual_machine_with_config_context OAIWritableVirtualMachineWithConfigContext [required]
    */
    virtual void virtualizationVirtualMachinesBulkUpdate(const OAIWritableVirtualMachineWithConfigContext &oai_writable_virtual_machine_with_config_context);

    /**
    * @param[in]  oai_writable_virtual_machine_with_config_context OAIWritableVirtualMachineWithConfigContext [required]
    */
    virtual void virtualizationVirtualMachinesCreate(const OAIWritableVirtualMachineWithConfigContext &oai_writable_virtual_machine_with_config_context);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationVirtualMachinesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  cluster QString [optional]
    * @param[in]  vcpus QString [optional]
    * @param[in]  memory QString [optional]
    * @param[in]  disk QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  contact_role QString [optional]
    * @param[in]  contact_group QString [optional]
    * @param[in]  local_context_data QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  cluster_group_id QString [optional]
    * @param[in]  cluster_group QString [optional]
    * @param[in]  cluster_type_id QString [optional]
    * @param[in]  cluster_type QString [optional]
    * @param[in]  cluster_id QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_group_id QString [optional]
    * @param[in]  site_group QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  platform_id QString [optional]
    * @param[in]  platform QString [optional]
    * @param[in]  mac_address QString [optional]
    * @param[in]  has_primary_ip QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  cluster__n QString [optional]
    * @param[in]  vcpus__n QString [optional]
    * @param[in]  vcpus__lte QString [optional]
    * @param[in]  vcpus__lt QString [optional]
    * @param[in]  vcpus__gte QString [optional]
    * @param[in]  vcpus__gt QString [optional]
    * @param[in]  memory__n QString [optional]
    * @param[in]  memory__lte QString [optional]
    * @param[in]  memory__lt QString [optional]
    * @param[in]  memory__gte QString [optional]
    * @param[in]  memory__gt QString [optional]
    * @param[in]  disk__n QString [optional]
    * @param[in]  disk__lte QString [optional]
    * @param[in]  disk__lt QString [optional]
    * @param[in]  disk__gte QString [optional]
    * @param[in]  disk__gt QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  contact__n QString [optional]
    * @param[in]  contact_role__n QString [optional]
    * @param[in]  contact_group__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  cluster_group_id__n QString [optional]
    * @param[in]  cluster_group__n QString [optional]
    * @param[in]  cluster_type_id__n QString [optional]
    * @param[in]  cluster_type__n QString [optional]
    * @param[in]  cluster_id__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_group_id__n QString [optional]
    * @param[in]  site_group__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  platform_id__n QString [optional]
    * @param[in]  platform__n QString [optional]
    * @param[in]  mac_address__n QString [optional]
    * @param[in]  mac_address__ic QString [optional]
    * @param[in]  mac_address__nic QString [optional]
    * @param[in]  mac_address__iew QString [optional]
    * @param[in]  mac_address__niew QString [optional]
    * @param[in]  mac_address__isw QString [optional]
    * @param[in]  mac_address__nisw QString [optional]
    * @param[in]  mac_address__ie QString [optional]
    * @param[in]  mac_address__nie QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void virtualizationVirtualMachinesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vcpus = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memory = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disk = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &local_context_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &has_primary_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vcpus__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vcpus__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vcpus__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vcpus__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vcpus__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memory__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memory__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memory__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memory__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memory__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disk__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disk__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disk__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disk__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disk__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cluster_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platform__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mac_address__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_machine_with_config_context OAIWritableVirtualMachineWithConfigContext [required]
    */
    virtual void virtualizationVirtualMachinesPartialUpdate(const qint32 &id, const OAIWritableVirtualMachineWithConfigContext &oai_writable_virtual_machine_with_config_context);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void virtualizationVirtualMachinesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_virtual_machine_with_config_context OAIWritableVirtualMachineWithConfigContext [required]
    */
    virtual void virtualizationVirtualMachinesUpdate(const qint32 &id, const OAIWritableVirtualMachineWithConfigContext &oai_writable_virtual_machine_with_config_context);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualizationClusterGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsListCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersListCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationClustersUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesCreateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesListCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesReadCallback(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualizationClusterGroupsBulkDeleteSignal();
    void virtualizationClusterGroupsBulkPartialUpdateSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsBulkUpdateSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsCreateSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsDeleteSignal();
    void virtualizationClusterGroupsListSignal(OAIVirtualization_cluster_groups_list_200_response summary);
    void virtualizationClusterGroupsPartialUpdateSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsReadSignal(OAIClusterGroup summary);
    void virtualizationClusterGroupsUpdateSignal(OAIClusterGroup summary);
    void virtualizationClusterTypesBulkDeleteSignal();
    void virtualizationClusterTypesBulkPartialUpdateSignal(OAIClusterType summary);
    void virtualizationClusterTypesBulkUpdateSignal(OAIClusterType summary);
    void virtualizationClusterTypesCreateSignal(OAIClusterType summary);
    void virtualizationClusterTypesDeleteSignal();
    void virtualizationClusterTypesListSignal(OAIVirtualization_cluster_types_list_200_response summary);
    void virtualizationClusterTypesPartialUpdateSignal(OAIClusterType summary);
    void virtualizationClusterTypesReadSignal(OAIClusterType summary);
    void virtualizationClusterTypesUpdateSignal(OAIClusterType summary);
    void virtualizationClustersBulkDeleteSignal();
    void virtualizationClustersBulkPartialUpdateSignal(OAICluster summary);
    void virtualizationClustersBulkUpdateSignal(OAICluster summary);
    void virtualizationClustersCreateSignal(OAICluster summary);
    void virtualizationClustersDeleteSignal();
    void virtualizationClustersListSignal(OAIVirtualization_clusters_list_200_response summary);
    void virtualizationClustersPartialUpdateSignal(OAICluster summary);
    void virtualizationClustersReadSignal(OAICluster summary);
    void virtualizationClustersUpdateSignal(OAICluster summary);
    void virtualizationInterfacesBulkDeleteSignal();
    void virtualizationInterfacesBulkPartialUpdateSignal(OAIVMInterface summary);
    void virtualizationInterfacesBulkUpdateSignal(OAIVMInterface summary);
    void virtualizationInterfacesCreateSignal(OAIVMInterface summary);
    void virtualizationInterfacesDeleteSignal();
    void virtualizationInterfacesListSignal(OAIVirtualization_interfaces_list_200_response summary);
    void virtualizationInterfacesPartialUpdateSignal(OAIVMInterface summary);
    void virtualizationInterfacesReadSignal(OAIVMInterface summary);
    void virtualizationInterfacesUpdateSignal(OAIVMInterface summary);
    void virtualizationVirtualMachinesBulkDeleteSignal();
    void virtualizationVirtualMachinesBulkPartialUpdateSignal(OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesBulkUpdateSignal(OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesCreateSignal(OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesDeleteSignal();
    void virtualizationVirtualMachinesListSignal(OAIVirtualization_virtual_machines_list_200_response summary);
    void virtualizationVirtualMachinesPartialUpdateSignal(OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesReadSignal(OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesUpdateSignal(OAIVirtualMachineWithConfigContext summary);


    void virtualizationClusterGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_cluster_groups_list_200_response summary);
    void virtualizationClusterGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterGroup summary);
    void virtualizationClusterTypesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesCreateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClusterTypesListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_cluster_types_list_200_response summary);
    void virtualizationClusterTypesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesReadSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClusterTypesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIClusterType summary);
    void virtualizationClustersBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClustersBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersCreateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationClustersListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_clusters_list_200_response summary);
    void virtualizationClustersPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersReadSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationClustersUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void virtualizationInterfacesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVMInterface summary);
    void virtualizationInterfacesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVMInterface summary);
    void virtualizationInterfacesCreateSignalFull(OAIHttpRequestWorker *worker, OAIVMInterface summary);
    void virtualizationInterfacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationInterfacesListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_interfaces_list_200_response summary);
    void virtualizationInterfacesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVMInterface summary);
    void virtualizationInterfacesReadSignalFull(OAIHttpRequestWorker *worker, OAIVMInterface summary);
    void virtualizationInterfacesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVMInterface summary);
    void virtualizationVirtualMachinesBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesCreateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualizationVirtualMachinesListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualization_virtual_machines_list_200_response summary);
    void virtualizationVirtualMachinesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesReadSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);
    void virtualizationVirtualMachinesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualMachineWithConfigContext summary);

    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsBulkDeleteSignalError() instead")
    void virtualizationClusterGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsBulkPartialUpdateSignalError() instead")
    void virtualizationClusterGroupsBulkPartialUpdateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsBulkPartialUpdateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsBulkUpdateSignalError() instead")
    void virtualizationClusterGroupsBulkUpdateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsBulkUpdateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsCreateSignalError() instead")
    void virtualizationClusterGroupsCreateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsCreateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsDeleteSignalError() instead")
    void virtualizationClusterGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsListSignalError() instead")
    void virtualizationClusterGroupsListSignalE(OAIVirtualization_cluster_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsListSignalError(OAIVirtualization_cluster_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsPartialUpdateSignalError() instead")
    void virtualizationClusterGroupsPartialUpdateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsPartialUpdateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsReadSignalError() instead")
    void virtualizationClusterGroupsReadSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsReadSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsUpdateSignalError() instead")
    void virtualizationClusterGroupsUpdateSignalE(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsUpdateSignalError(OAIClusterGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesBulkDeleteSignalError() instead")
    void virtualizationClusterTypesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesBulkPartialUpdateSignalError() instead")
    void virtualizationClusterTypesBulkPartialUpdateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesBulkPartialUpdateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesBulkUpdateSignalError() instead")
    void virtualizationClusterTypesBulkUpdateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesBulkUpdateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesCreateSignalError() instead")
    void virtualizationClusterTypesCreateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesCreateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesDeleteSignalError() instead")
    void virtualizationClusterTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesListSignalError() instead")
    void virtualizationClusterTypesListSignalE(OAIVirtualization_cluster_types_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesListSignalError(OAIVirtualization_cluster_types_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesPartialUpdateSignalError() instead")
    void virtualizationClusterTypesPartialUpdateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesPartialUpdateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesReadSignalError() instead")
    void virtualizationClusterTypesReadSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesReadSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesUpdateSignalError() instead")
    void virtualizationClusterTypesUpdateSignalE(OAIClusterType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesUpdateSignalError(OAIClusterType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersBulkDeleteSignalError() instead")
    void virtualizationClustersBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersBulkPartialUpdateSignalError() instead")
    void virtualizationClustersBulkPartialUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersBulkPartialUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersBulkUpdateSignalError() instead")
    void virtualizationClustersBulkUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersBulkUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersCreateSignalError() instead")
    void virtualizationClustersCreateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersCreateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersDeleteSignalError() instead")
    void virtualizationClustersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersListSignalError() instead")
    void virtualizationClustersListSignalE(OAIVirtualization_clusters_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersListSignalError(OAIVirtualization_clusters_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersPartialUpdateSignalError() instead")
    void virtualizationClustersPartialUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersPartialUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersReadSignalError() instead")
    void virtualizationClustersReadSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersReadSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersUpdateSignalError() instead")
    void virtualizationClustersUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesBulkDeleteSignalError() instead")
    void virtualizationInterfacesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesBulkPartialUpdateSignalError() instead")
    void virtualizationInterfacesBulkPartialUpdateSignalE(OAIVMInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesBulkPartialUpdateSignalError(OAIVMInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesBulkUpdateSignalError() instead")
    void virtualizationInterfacesBulkUpdateSignalE(OAIVMInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesBulkUpdateSignalError(OAIVMInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesCreateSignalError() instead")
    void virtualizationInterfacesCreateSignalE(OAIVMInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesCreateSignalError(OAIVMInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesDeleteSignalError() instead")
    void virtualizationInterfacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesListSignalError() instead")
    void virtualizationInterfacesListSignalE(OAIVirtualization_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesListSignalError(OAIVirtualization_interfaces_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesPartialUpdateSignalError() instead")
    void virtualizationInterfacesPartialUpdateSignalE(OAIVMInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesPartialUpdateSignalError(OAIVMInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesReadSignalError() instead")
    void virtualizationInterfacesReadSignalE(OAIVMInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesReadSignalError(OAIVMInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesUpdateSignalError() instead")
    void virtualizationInterfacesUpdateSignalE(OAIVMInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesUpdateSignalError(OAIVMInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesBulkDeleteSignalError() instead")
    void virtualizationVirtualMachinesBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesBulkPartialUpdateSignalError() instead")
    void virtualizationVirtualMachinesBulkPartialUpdateSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesBulkPartialUpdateSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesBulkUpdateSignalError() instead")
    void virtualizationVirtualMachinesBulkUpdateSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesBulkUpdateSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesCreateSignalError() instead")
    void virtualizationVirtualMachinesCreateSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesCreateSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesDeleteSignalError() instead")
    void virtualizationVirtualMachinesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesListSignalError() instead")
    void virtualizationVirtualMachinesListSignalE(OAIVirtualization_virtual_machines_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesListSignalError(OAIVirtualization_virtual_machines_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesPartialUpdateSignalError() instead")
    void virtualizationVirtualMachinesPartialUpdateSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesPartialUpdateSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesReadSignalError() instead")
    void virtualizationVirtualMachinesReadSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesReadSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesUpdateSignalError() instead")
    void virtualizationVirtualMachinesUpdateSignalE(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesUpdateSignalError(OAIVirtualMachineWithConfigContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsBulkDeleteSignalErrorFull() instead")
    void virtualizationClusterGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsBulkPartialUpdateSignalErrorFull() instead")
    void virtualizationClusterGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsBulkUpdateSignalErrorFull() instead")
    void virtualizationClusterGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsCreateSignalErrorFull() instead")
    void virtualizationClusterGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsDeleteSignalErrorFull() instead")
    void virtualizationClusterGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsListSignalErrorFull() instead")
    void virtualizationClusterGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsPartialUpdateSignalErrorFull() instead")
    void virtualizationClusterGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsReadSignalErrorFull() instead")
    void virtualizationClusterGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterGroupsUpdateSignalErrorFull() instead")
    void virtualizationClusterGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesBulkDeleteSignalErrorFull() instead")
    void virtualizationClusterTypesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesBulkPartialUpdateSignalErrorFull() instead")
    void virtualizationClusterTypesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesBulkUpdateSignalErrorFull() instead")
    void virtualizationClusterTypesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesCreateSignalErrorFull() instead")
    void virtualizationClusterTypesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesDeleteSignalErrorFull() instead")
    void virtualizationClusterTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesListSignalErrorFull() instead")
    void virtualizationClusterTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesPartialUpdateSignalErrorFull() instead")
    void virtualizationClusterTypesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesReadSignalErrorFull() instead")
    void virtualizationClusterTypesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClusterTypesUpdateSignalErrorFull() instead")
    void virtualizationClusterTypesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClusterTypesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersBulkDeleteSignalErrorFull() instead")
    void virtualizationClustersBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersBulkPartialUpdateSignalErrorFull() instead")
    void virtualizationClustersBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersBulkUpdateSignalErrorFull() instead")
    void virtualizationClustersBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersCreateSignalErrorFull() instead")
    void virtualizationClustersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersDeleteSignalErrorFull() instead")
    void virtualizationClustersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersListSignalErrorFull() instead")
    void virtualizationClustersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersPartialUpdateSignalErrorFull() instead")
    void virtualizationClustersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersReadSignalErrorFull() instead")
    void virtualizationClustersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationClustersUpdateSignalErrorFull() instead")
    void virtualizationClustersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationClustersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesBulkDeleteSignalErrorFull() instead")
    void virtualizationInterfacesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesBulkPartialUpdateSignalErrorFull() instead")
    void virtualizationInterfacesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesBulkUpdateSignalErrorFull() instead")
    void virtualizationInterfacesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesCreateSignalErrorFull() instead")
    void virtualizationInterfacesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesDeleteSignalErrorFull() instead")
    void virtualizationInterfacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesListSignalErrorFull() instead")
    void virtualizationInterfacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesPartialUpdateSignalErrorFull() instead")
    void virtualizationInterfacesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesReadSignalErrorFull() instead")
    void virtualizationInterfacesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationInterfacesUpdateSignalErrorFull() instead")
    void virtualizationInterfacesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationInterfacesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesBulkDeleteSignalErrorFull() instead")
    void virtualizationVirtualMachinesBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesBulkPartialUpdateSignalErrorFull() instead")
    void virtualizationVirtualMachinesBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesBulkUpdateSignalErrorFull() instead")
    void virtualizationVirtualMachinesBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesCreateSignalErrorFull() instead")
    void virtualizationVirtualMachinesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesDeleteSignalErrorFull() instead")
    void virtualizationVirtualMachinesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesListSignalErrorFull() instead")
    void virtualizationVirtualMachinesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesPartialUpdateSignalErrorFull() instead")
    void virtualizationVirtualMachinesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesReadSignalErrorFull() instead")
    void virtualizationVirtualMachinesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualizationVirtualMachinesUpdateSignalErrorFull() instead")
    void virtualizationVirtualMachinesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualizationVirtualMachinesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
