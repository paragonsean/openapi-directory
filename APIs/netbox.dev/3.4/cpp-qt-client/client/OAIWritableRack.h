/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWritableRack.h
 *
 * 
 */

#ifndef OAIWritableRack_H
#define OAIWritableRack_H

#include <QJsonObject>

#include "OAINestedTag.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINestedTag;

class OAIWritableRack : public OAIObject {
public:
    OAIWritableRack();
    OAIWritableRack(QString json);
    ~OAIWritableRack() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssetTag() const;
    void setAssetTag(const QString &asset_tag);
    bool is_asset_tag_Set() const;
    bool is_asset_tag_Valid() const;

    QString getComments() const;
    void setComments(const QString &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIObject getCustomFields() const;
    void setCustomFields(const OAIObject &custom_fields);
    bool is_custom_fields_Set() const;
    bool is_custom_fields_Valid() const;

    bool isDescUnits() const;
    void setDescUnits(const bool &desc_units);
    bool is_desc_units_Set() const;
    bool is_desc_units_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getDeviceCount() const;
    void setDeviceCount(const qint32 &device_count);
    bool is_device_count_Set() const;
    bool is_device_count_Valid() const;

    QString getDisplay() const;
    void setDisplay(const QString &display);
    bool is_display_Set() const;
    bool is_display_Valid() const;

    QString getFacilityId() const;
    void setFacilityId(const QString &facility_id);
    bool is_facility_id_Set() const;
    bool is_facility_id_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    qint32 getLocation() const;
    void setLocation(const qint32 &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    qint32 getMaxWeight() const;
    void setMaxWeight(const qint32 &max_weight);
    bool is_max_weight_Set() const;
    bool is_max_weight_Valid() const;

    qint32 getMountingDepth() const;
    void setMountingDepth(const qint32 &mounting_depth);
    bool is_mounting_depth_Set() const;
    bool is_mounting_depth_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOuterDepth() const;
    void setOuterDepth(const qint32 &outer_depth);
    bool is_outer_depth_Set() const;
    bool is_outer_depth_Valid() const;

    QString getOuterUnit() const;
    void setOuterUnit(const QString &outer_unit);
    bool is_outer_unit_Set() const;
    bool is_outer_unit_Valid() const;

    qint32 getOuterWidth() const;
    void setOuterWidth(const qint32 &outer_width);
    bool is_outer_width_Set() const;
    bool is_outer_width_Valid() const;

    qint32 getPowerfeedCount() const;
    void setPowerfeedCount(const qint32 &powerfeed_count);
    bool is_powerfeed_count_Set() const;
    bool is_powerfeed_count_Valid() const;

    qint32 getRole() const;
    void setRole(const qint32 &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QString getSerial() const;
    void setSerial(const QString &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    qint32 getSite() const;
    void setSite(const qint32 &site);
    bool is_site_Set() const;
    bool is_site_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAINestedTag> getTags() const;
    void setTags(const QList<OAINestedTag> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getTenant() const;
    void setTenant(const qint32 &tenant);
    bool is_tenant_Set() const;
    bool is_tenant_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getUHeight() const;
    void setUHeight(const qint32 &u_height);
    bool is_u_height_Set() const;
    bool is_u_height_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    double getWeight() const;
    void setWeight(const double &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    QString getWeightUnit() const;
    void setWeightUnit(const QString &weight_unit);
    bool is_weight_unit_Set() const;
    bool is_weight_unit_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_asset_tag;
    bool m_asset_tag_isSet;
    bool m_asset_tag_isValid;

    QString m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIObject m_custom_fields;
    bool m_custom_fields_isSet;
    bool m_custom_fields_isValid;

    bool m_desc_units;
    bool m_desc_units_isSet;
    bool m_desc_units_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_device_count;
    bool m_device_count_isSet;
    bool m_device_count_isValid;

    QString m_display;
    bool m_display_isSet;
    bool m_display_isValid;

    QString m_facility_id;
    bool m_facility_id_isSet;
    bool m_facility_id_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    qint32 m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    qint32 m_max_weight;
    bool m_max_weight_isSet;
    bool m_max_weight_isValid;

    qint32 m_mounting_depth;
    bool m_mounting_depth_isSet;
    bool m_mounting_depth_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_outer_depth;
    bool m_outer_depth_isSet;
    bool m_outer_depth_isValid;

    QString m_outer_unit;
    bool m_outer_unit_isSet;
    bool m_outer_unit_isValid;

    qint32 m_outer_width;
    bool m_outer_width_isSet;
    bool m_outer_width_isValid;

    qint32 m_powerfeed_count;
    bool m_powerfeed_count_isSet;
    bool m_powerfeed_count_isValid;

    qint32 m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QString m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;

    qint32 m_site;
    bool m_site_isSet;
    bool m_site_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAINestedTag> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_tenant;
    bool m_tenant_isSet;
    bool m_tenant_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_u_height;
    bool m_u_height_isSet;
    bool m_u_height_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    double m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;

    QString m_weight_unit;
    bool m_weight_unit_isSet;
    bool m_weight_unit_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWritableRack)

#endif // OAIWritableRack_H
