/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritablePowerPortTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritablePowerPortTemplate::OAIWritablePowerPortTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritablePowerPortTemplate::OAIWritablePowerPortTemplate() {
    this->initializeModel();
}

OAIWritablePowerPortTemplate::~OAIWritablePowerPortTemplate() {}

void OAIWritablePowerPortTemplate::initializeModel() {

    m_allocated_draw_isSet = false;
    m_allocated_draw_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_maximum_draw_isSet = false;
    m_maximum_draw_isValid = false;

    m_module_type_isSet = false;
    m_module_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWritablePowerPortTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritablePowerPortTemplate::fromJsonObject(QJsonObject json) {

    m_allocated_draw_isValid = ::OpenAPI::fromJsonValue(m_allocated_draw, json[QString("allocated_draw")]);
    m_allocated_draw_isSet = !json[QString("allocated_draw")].isNull() && m_allocated_draw_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("device_type")]);
    m_device_type_isSet = !json[QString("device_type")].isNull() && m_device_type_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_maximum_draw_isValid = ::OpenAPI::fromJsonValue(m_maximum_draw, json[QString("maximum_draw")]);
    m_maximum_draw_isSet = !json[QString("maximum_draw")].isNull() && m_maximum_draw_isValid;

    m_module_type_isValid = ::OpenAPI::fromJsonValue(m_module_type, json[QString("module_type")]);
    m_module_type_isSet = !json[QString("module_type")].isNull() && m_module_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWritablePowerPortTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritablePowerPortTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_draw_isSet) {
        obj.insert(QString("allocated_draw"), ::OpenAPI::toJsonValue(m_allocated_draw));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("device_type"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_maximum_draw_isSet) {
        obj.insert(QString("maximum_draw"), ::OpenAPI::toJsonValue(m_maximum_draw));
    }
    if (m_module_type_isSet) {
        obj.insert(QString("module_type"), ::OpenAPI::toJsonValue(m_module_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIWritablePowerPortTemplate::getAllocatedDraw() const {
    return m_allocated_draw;
}
void OAIWritablePowerPortTemplate::setAllocatedDraw(const qint32 &allocated_draw) {
    m_allocated_draw = allocated_draw;
    m_allocated_draw_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_allocated_draw_Set() const{
    return m_allocated_draw_isSet;
}

bool OAIWritablePowerPortTemplate::is_allocated_draw_Valid() const{
    return m_allocated_draw_isValid;
}

QDateTime OAIWritablePowerPortTemplate::getCreated() const {
    return m_created;
}
void OAIWritablePowerPortTemplate::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritablePowerPortTemplate::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWritablePowerPortTemplate::getDescription() const {
    return m_description;
}
void OAIWritablePowerPortTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritablePowerPortTemplate::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWritablePowerPortTemplate::getDeviceType() const {
    return m_device_type;
}
void OAIWritablePowerPortTemplate::setDeviceType(const qint32 &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIWritablePowerPortTemplate::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIWritablePowerPortTemplate::getDisplay() const {
    return m_display;
}
void OAIWritablePowerPortTemplate::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritablePowerPortTemplate::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWritablePowerPortTemplate::getId() const {
    return m_id;
}
void OAIWritablePowerPortTemplate::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritablePowerPortTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritablePowerPortTemplate::getLabel() const {
    return m_label;
}
void OAIWritablePowerPortTemplate::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_label_Set() const{
    return m_label_isSet;
}

bool OAIWritablePowerPortTemplate::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIWritablePowerPortTemplate::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritablePowerPortTemplate::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritablePowerPortTemplate::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIWritablePowerPortTemplate::getMaximumDraw() const {
    return m_maximum_draw;
}
void OAIWritablePowerPortTemplate::setMaximumDraw(const qint32 &maximum_draw) {
    m_maximum_draw = maximum_draw;
    m_maximum_draw_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_maximum_draw_Set() const{
    return m_maximum_draw_isSet;
}

bool OAIWritablePowerPortTemplate::is_maximum_draw_Valid() const{
    return m_maximum_draw_isValid;
}

qint32 OAIWritablePowerPortTemplate::getModuleType() const {
    return m_module_type;
}
void OAIWritablePowerPortTemplate::setModuleType(const qint32 &module_type) {
    m_module_type = module_type;
    m_module_type_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_module_type_Set() const{
    return m_module_type_isSet;
}

bool OAIWritablePowerPortTemplate::is_module_type_Valid() const{
    return m_module_type_isValid;
}

QString OAIWritablePowerPortTemplate::getName() const {
    return m_name;
}
void OAIWritablePowerPortTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritablePowerPortTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritablePowerPortTemplate::getType() const {
    return m_type;
}
void OAIWritablePowerPortTemplate::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritablePowerPortTemplate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWritablePowerPortTemplate::getUrl() const {
    return m_url;
}
void OAIWritablePowerPortTemplate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritablePowerPortTemplate::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritablePowerPortTemplate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWritablePowerPortTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_draw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_draw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritablePowerPortTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
