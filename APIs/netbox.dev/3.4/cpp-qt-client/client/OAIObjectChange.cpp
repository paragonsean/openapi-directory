/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectChange::OAIObjectChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectChange::OAIObjectChange() {
    this->initializeModel();
}

OAIObjectChange::~OAIObjectChange() {}

void OAIObjectChange::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_changed_object_isSet = false;
    m_changed_object_isValid = false;

    m_changed_object_id_isSet = false;
    m_changed_object_id_isValid = false;

    m_changed_object_type_isSet = false;
    m_changed_object_type_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_postchange_data_isSet = false;
    m_postchange_data_isValid = false;

    m_prechange_data_isSet = false;
    m_prechange_data_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIObjectChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectChange::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_changed_object_isValid = ::OpenAPI::fromJsonValue(m_changed_object, json[QString("changed_object")]);
    m_changed_object_isSet = !json[QString("changed_object")].isNull() && m_changed_object_isValid;

    m_changed_object_id_isValid = ::OpenAPI::fromJsonValue(m_changed_object_id, json[QString("changed_object_id")]);
    m_changed_object_id_isSet = !json[QString("changed_object_id")].isNull() && m_changed_object_id_isValid;

    m_changed_object_type_isValid = ::OpenAPI::fromJsonValue(m_changed_object_type, json[QString("changed_object_type")]);
    m_changed_object_type_isSet = !json[QString("changed_object_type")].isNull() && m_changed_object_type_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_postchange_data_isValid = ::OpenAPI::fromJsonValue(m_postchange_data, json[QString("postchange_data")]);
    m_postchange_data_isSet = !json[QString("postchange_data")].isNull() && m_postchange_data_isValid;

    m_prechange_data_isValid = ::OpenAPI::fromJsonValue(m_prechange_data, json[QString("prechange_data")]);
    m_prechange_data_isSet = !json[QString("prechange_data")].isNull() && m_prechange_data_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAIObjectChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectChange::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_changed_object_isSet) {
        obj.insert(QString("changed_object"), ::OpenAPI::toJsonValue(m_changed_object));
    }
    if (m_changed_object_id_isSet) {
        obj.insert(QString("changed_object_id"), ::OpenAPI::toJsonValue(m_changed_object_id));
    }
    if (m_changed_object_type_isSet) {
        obj.insert(QString("changed_object_type"), ::OpenAPI::toJsonValue(m_changed_object_type));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_postchange_data_isSet) {
        obj.insert(QString("postchange_data"), ::OpenAPI::toJsonValue(m_postchange_data));
    }
    if (m_prechange_data_isSet) {
        obj.insert(QString("prechange_data"), ::OpenAPI::toJsonValue(m_prechange_data));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

OAIAction OAIObjectChange::getAction() const {
    return m_action;
}
void OAIObjectChange::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIObjectChange::is_action_Set() const{
    return m_action_isSet;
}

bool OAIObjectChange::is_action_Valid() const{
    return m_action_isValid;
}

OAIObject OAIObjectChange::getChangedObject() const {
    return m_changed_object;
}
void OAIObjectChange::setChangedObject(const OAIObject &changed_object) {
    m_changed_object = changed_object;
    m_changed_object_isSet = true;
}

bool OAIObjectChange::is_changed_object_Set() const{
    return m_changed_object_isSet;
}

bool OAIObjectChange::is_changed_object_Valid() const{
    return m_changed_object_isValid;
}

qint32 OAIObjectChange::getChangedObjectId() const {
    return m_changed_object_id;
}
void OAIObjectChange::setChangedObjectId(const qint32 &changed_object_id) {
    m_changed_object_id = changed_object_id;
    m_changed_object_id_isSet = true;
}

bool OAIObjectChange::is_changed_object_id_Set() const{
    return m_changed_object_id_isSet;
}

bool OAIObjectChange::is_changed_object_id_Valid() const{
    return m_changed_object_id_isValid;
}

QString OAIObjectChange::getChangedObjectType() const {
    return m_changed_object_type;
}
void OAIObjectChange::setChangedObjectType(const QString &changed_object_type) {
    m_changed_object_type = changed_object_type;
    m_changed_object_type_isSet = true;
}

bool OAIObjectChange::is_changed_object_type_Set() const{
    return m_changed_object_type_isSet;
}

bool OAIObjectChange::is_changed_object_type_Valid() const{
    return m_changed_object_type_isValid;
}

QString OAIObjectChange::getDisplay() const {
    return m_display;
}
void OAIObjectChange::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIObjectChange::is_display_Set() const{
    return m_display_isSet;
}

bool OAIObjectChange::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIObjectChange::getId() const {
    return m_id;
}
void OAIObjectChange::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjectChange::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjectChange::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIObjectChange::getPostchangeData() const {
    return m_postchange_data;
}
void OAIObjectChange::setPostchangeData(const OAIObject &postchange_data) {
    m_postchange_data = postchange_data;
    m_postchange_data_isSet = true;
}

bool OAIObjectChange::is_postchange_data_Set() const{
    return m_postchange_data_isSet;
}

bool OAIObjectChange::is_postchange_data_Valid() const{
    return m_postchange_data_isValid;
}

OAIObject OAIObjectChange::getPrechangeData() const {
    return m_prechange_data;
}
void OAIObjectChange::setPrechangeData(const OAIObject &prechange_data) {
    m_prechange_data = prechange_data;
    m_prechange_data_isSet = true;
}

bool OAIObjectChange::is_prechange_data_Set() const{
    return m_prechange_data_isSet;
}

bool OAIObjectChange::is_prechange_data_Valid() const{
    return m_prechange_data_isValid;
}

QString OAIObjectChange::getRequestId() const {
    return m_request_id;
}
void OAIObjectChange::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIObjectChange::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIObjectChange::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QDateTime OAIObjectChange::getTime() const {
    return m_time;
}
void OAIObjectChange::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIObjectChange::is_time_Set() const{
    return m_time_isSet;
}

bool OAIObjectChange::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIObjectChange::getUrl() const {
    return m_url;
}
void OAIObjectChange::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIObjectChange::is_url_Set() const{
    return m_url_isSet;
}

bool OAIObjectChange::is_url_Valid() const{
    return m_url_isValid;
}

OAINestedUser OAIObjectChange::getUser() const {
    return m_user;
}
void OAIObjectChange::setUser(const OAINestedUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjectChange::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjectChange::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIObjectChange::getUserName() const {
    return m_user_name;
}
void OAIObjectChange::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIObjectChange::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIObjectChange::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIObjectChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postchange_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prechange_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_changed_object_id_isValid && true;
}

} // namespace OpenAPI
