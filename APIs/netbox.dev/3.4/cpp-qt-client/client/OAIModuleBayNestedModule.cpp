/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModuleBayNestedModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModuleBayNestedModule::OAIModuleBayNestedModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModuleBayNestedModule::OAIModuleBayNestedModule() {
    this->initializeModel();
}

OAIModuleBayNestedModule::~OAIModuleBayNestedModule() {}

void OAIModuleBayNestedModule::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIModuleBayNestedModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModuleBayNestedModule::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIModuleBayNestedModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModuleBayNestedModule::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIModuleBayNestedModule::getDisplay() const {
    return m_display;
}
void OAIModuleBayNestedModule::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIModuleBayNestedModule::is_display_Set() const{
    return m_display_isSet;
}

bool OAIModuleBayNestedModule::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIModuleBayNestedModule::getId() const {
    return m_id;
}
void OAIModuleBayNestedModule::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIModuleBayNestedModule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIModuleBayNestedModule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIModuleBayNestedModule::getSerial() const {
    return m_serial;
}
void OAIModuleBayNestedModule::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIModuleBayNestedModule::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIModuleBayNestedModule::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIModuleBayNestedModule::getUrl() const {
    return m_url;
}
void OAIModuleBayNestedModule::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIModuleBayNestedModule::is_url_Set() const{
    return m_url_isSet;
}

bool OAIModuleBayNestedModule::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIModuleBayNestedModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModuleBayNestedModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
