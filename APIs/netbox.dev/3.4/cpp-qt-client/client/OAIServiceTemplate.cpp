/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceTemplate::OAIServiceTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceTemplate::OAIServiceTemplate() {
    this->initializeModel();
}

OAIServiceTemplate::~OAIServiceTemplate() {}

void OAIServiceTemplate::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIServiceTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceTemplate::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIServiceTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIServiceTemplate::getComments() const {
    return m_comments;
}
void OAIServiceTemplate::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIServiceTemplate::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIServiceTemplate::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIServiceTemplate::getCreated() const {
    return m_created;
}
void OAIServiceTemplate::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIServiceTemplate::is_created_Set() const{
    return m_created_isSet;
}

bool OAIServiceTemplate::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIServiceTemplate::getCustomFields() const {
    return m_custom_fields;
}
void OAIServiceTemplate::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIServiceTemplate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIServiceTemplate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIServiceTemplate::getDescription() const {
    return m_description;
}
void OAIServiceTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServiceTemplate::getDisplay() const {
    return m_display;
}
void OAIServiceTemplate::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIServiceTemplate::is_display_Set() const{
    return m_display_isSet;
}

bool OAIServiceTemplate::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIServiceTemplate::getId() const {
    return m_id;
}
void OAIServiceTemplate::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIServiceTemplate::getLastUpdated() const {
    return m_last_updated;
}
void OAIServiceTemplate::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIServiceTemplate::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIServiceTemplate::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIServiceTemplate::getName() const {
    return m_name;
}
void OAIServiceTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QList<qint32> OAIServiceTemplate::getPorts() const {
    return m_ports;
}
void OAIServiceTemplate::setPorts(const QList<qint32> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIServiceTemplate::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIServiceTemplate::is_ports_Valid() const{
    return m_ports_isValid;
}

OAIProtocol OAIServiceTemplate::getProtocol() const {
    return m_protocol;
}
void OAIServiceTemplate::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIServiceTemplate::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIServiceTemplate::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QList<OAINestedTag> OAIServiceTemplate::getTags() const {
    return m_tags;
}
void OAIServiceTemplate::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServiceTemplate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServiceTemplate::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIServiceTemplate::getUrl() const {
    return m_url;
}
void OAIServiceTemplate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIServiceTemplate::is_url_Set() const{
    return m_url_isSet;
}

bool OAIServiceTemplate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIServiceTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_ports_isValid && true;
}

} // namespace OpenAPI
