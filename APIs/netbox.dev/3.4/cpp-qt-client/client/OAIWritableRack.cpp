/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableRack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableRack::OAIWritableRack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableRack::OAIWritableRack() {
    this->initializeModel();
}

OAIWritableRack::~OAIWritableRack() {}

void OAIWritableRack::initializeModel() {

    m_asset_tag_isSet = false;
    m_asset_tag_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_desc_units_isSet = false;
    m_desc_units_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_count_isSet = false;
    m_device_count_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_facility_id_isSet = false;
    m_facility_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_max_weight_isSet = false;
    m_max_weight_isValid = false;

    m_mounting_depth_isSet = false;
    m_mounting_depth_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outer_depth_isSet = false;
    m_outer_depth_isValid = false;

    m_outer_unit_isSet = false;
    m_outer_unit_isValid = false;

    m_outer_width_isSet = false;
    m_outer_width_isValid = false;

    m_powerfeed_count_isSet = false;
    m_powerfeed_count_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_u_height_isSet = false;
    m_u_height_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIWritableRack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableRack::fromJsonObject(QJsonObject json) {

    m_asset_tag_isValid = ::OpenAPI::fromJsonValue(m_asset_tag, json[QString("asset_tag")]);
    m_asset_tag_isSet = !json[QString("asset_tag")].isNull() && m_asset_tag_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_desc_units_isValid = ::OpenAPI::fromJsonValue(m_desc_units, json[QString("desc_units")]);
    m_desc_units_isSet = !json[QString("desc_units")].isNull() && m_desc_units_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_count_isValid = ::OpenAPI::fromJsonValue(m_device_count, json[QString("device_count")]);
    m_device_count_isSet = !json[QString("device_count")].isNull() && m_device_count_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_facility_id_isValid = ::OpenAPI::fromJsonValue(m_facility_id, json[QString("facility_id")]);
    m_facility_id_isSet = !json[QString("facility_id")].isNull() && m_facility_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_max_weight_isValid = ::OpenAPI::fromJsonValue(m_max_weight, json[QString("max_weight")]);
    m_max_weight_isSet = !json[QString("max_weight")].isNull() && m_max_weight_isValid;

    m_mounting_depth_isValid = ::OpenAPI::fromJsonValue(m_mounting_depth, json[QString("mounting_depth")]);
    m_mounting_depth_isSet = !json[QString("mounting_depth")].isNull() && m_mounting_depth_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outer_depth_isValid = ::OpenAPI::fromJsonValue(m_outer_depth, json[QString("outer_depth")]);
    m_outer_depth_isSet = !json[QString("outer_depth")].isNull() && m_outer_depth_isValid;

    m_outer_unit_isValid = ::OpenAPI::fromJsonValue(m_outer_unit, json[QString("outer_unit")]);
    m_outer_unit_isSet = !json[QString("outer_unit")].isNull() && m_outer_unit_isValid;

    m_outer_width_isValid = ::OpenAPI::fromJsonValue(m_outer_width, json[QString("outer_width")]);
    m_outer_width_isSet = !json[QString("outer_width")].isNull() && m_outer_width_isValid;

    m_powerfeed_count_isValid = ::OpenAPI::fromJsonValue(m_powerfeed_count, json[QString("powerfeed_count")]);
    m_powerfeed_count_isSet = !json[QString("powerfeed_count")].isNull() && m_powerfeed_count_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_u_height_isValid = ::OpenAPI::fromJsonValue(m_u_height, json[QString("u_height")]);
    m_u_height_isSet = !json[QString("u_height")].isNull() && m_u_height_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weight_unit")]);
    m_weight_unit_isSet = !json[QString("weight_unit")].isNull() && m_weight_unit_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIWritableRack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableRack::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_tag_isSet) {
        obj.insert(QString("asset_tag"), ::OpenAPI::toJsonValue(m_asset_tag));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_desc_units_isSet) {
        obj.insert(QString("desc_units"), ::OpenAPI::toJsonValue(m_desc_units));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_count_isSet) {
        obj.insert(QString("device_count"), ::OpenAPI::toJsonValue(m_device_count));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_facility_id_isSet) {
        obj.insert(QString("facility_id"), ::OpenAPI::toJsonValue(m_facility_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_max_weight_isSet) {
        obj.insert(QString("max_weight"), ::OpenAPI::toJsonValue(m_max_weight));
    }
    if (m_mounting_depth_isSet) {
        obj.insert(QString("mounting_depth"), ::OpenAPI::toJsonValue(m_mounting_depth));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outer_depth_isSet) {
        obj.insert(QString("outer_depth"), ::OpenAPI::toJsonValue(m_outer_depth));
    }
    if (m_outer_unit_isSet) {
        obj.insert(QString("outer_unit"), ::OpenAPI::toJsonValue(m_outer_unit));
    }
    if (m_outer_width_isSet) {
        obj.insert(QString("outer_width"), ::OpenAPI::toJsonValue(m_outer_width));
    }
    if (m_powerfeed_count_isSet) {
        obj.insert(QString("powerfeed_count"), ::OpenAPI::toJsonValue(m_powerfeed_count));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_u_height_isSet) {
        obj.insert(QString("u_height"), ::OpenAPI::toJsonValue(m_u_height));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_weight_unit_isSet) {
        obj.insert(QString("weight_unit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIWritableRack::getAssetTag() const {
    return m_asset_tag;
}
void OAIWritableRack::setAssetTag(const QString &asset_tag) {
    m_asset_tag = asset_tag;
    m_asset_tag_isSet = true;
}

bool OAIWritableRack::is_asset_tag_Set() const{
    return m_asset_tag_isSet;
}

bool OAIWritableRack::is_asset_tag_Valid() const{
    return m_asset_tag_isValid;
}

QString OAIWritableRack::getComments() const {
    return m_comments;
}
void OAIWritableRack::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableRack::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableRack::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableRack::getCreated() const {
    return m_created;
}
void OAIWritableRack::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableRack::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableRack::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableRack::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableRack::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableRack::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableRack::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIWritableRack::isDescUnits() const {
    return m_desc_units;
}
void OAIWritableRack::setDescUnits(const bool &desc_units) {
    m_desc_units = desc_units;
    m_desc_units_isSet = true;
}

bool OAIWritableRack::is_desc_units_Set() const{
    return m_desc_units_isSet;
}

bool OAIWritableRack::is_desc_units_Valid() const{
    return m_desc_units_isValid;
}

QString OAIWritableRack::getDescription() const {
    return m_description;
}
void OAIWritableRack::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableRack::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableRack::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWritableRack::getDeviceCount() const {
    return m_device_count;
}
void OAIWritableRack::setDeviceCount(const qint32 &device_count) {
    m_device_count = device_count;
    m_device_count_isSet = true;
}

bool OAIWritableRack::is_device_count_Set() const{
    return m_device_count_isSet;
}

bool OAIWritableRack::is_device_count_Valid() const{
    return m_device_count_isValid;
}

QString OAIWritableRack::getDisplay() const {
    return m_display;
}
void OAIWritableRack::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableRack::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableRack::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIWritableRack::getFacilityId() const {
    return m_facility_id;
}
void OAIWritableRack::setFacilityId(const QString &facility_id) {
    m_facility_id = facility_id;
    m_facility_id_isSet = true;
}

bool OAIWritableRack::is_facility_id_Set() const{
    return m_facility_id_isSet;
}

bool OAIWritableRack::is_facility_id_Valid() const{
    return m_facility_id_isValid;
}

qint32 OAIWritableRack::getId() const {
    return m_id;
}
void OAIWritableRack::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableRack::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableRack::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableRack::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableRack::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableRack::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableRack::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIWritableRack::getLocation() const {
    return m_location;
}
void OAIWritableRack::setLocation(const qint32 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIWritableRack::is_location_Set() const{
    return m_location_isSet;
}

bool OAIWritableRack::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIWritableRack::getMaxWeight() const {
    return m_max_weight;
}
void OAIWritableRack::setMaxWeight(const qint32 &max_weight) {
    m_max_weight = max_weight;
    m_max_weight_isSet = true;
}

bool OAIWritableRack::is_max_weight_Set() const{
    return m_max_weight_isSet;
}

bool OAIWritableRack::is_max_weight_Valid() const{
    return m_max_weight_isValid;
}

qint32 OAIWritableRack::getMountingDepth() const {
    return m_mounting_depth;
}
void OAIWritableRack::setMountingDepth(const qint32 &mounting_depth) {
    m_mounting_depth = mounting_depth;
    m_mounting_depth_isSet = true;
}

bool OAIWritableRack::is_mounting_depth_Set() const{
    return m_mounting_depth_isSet;
}

bool OAIWritableRack::is_mounting_depth_Valid() const{
    return m_mounting_depth_isValid;
}

QString OAIWritableRack::getName() const {
    return m_name;
}
void OAIWritableRack::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableRack::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableRack::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIWritableRack::getOuterDepth() const {
    return m_outer_depth;
}
void OAIWritableRack::setOuterDepth(const qint32 &outer_depth) {
    m_outer_depth = outer_depth;
    m_outer_depth_isSet = true;
}

bool OAIWritableRack::is_outer_depth_Set() const{
    return m_outer_depth_isSet;
}

bool OAIWritableRack::is_outer_depth_Valid() const{
    return m_outer_depth_isValid;
}

QString OAIWritableRack::getOuterUnit() const {
    return m_outer_unit;
}
void OAIWritableRack::setOuterUnit(const QString &outer_unit) {
    m_outer_unit = outer_unit;
    m_outer_unit_isSet = true;
}

bool OAIWritableRack::is_outer_unit_Set() const{
    return m_outer_unit_isSet;
}

bool OAIWritableRack::is_outer_unit_Valid() const{
    return m_outer_unit_isValid;
}

qint32 OAIWritableRack::getOuterWidth() const {
    return m_outer_width;
}
void OAIWritableRack::setOuterWidth(const qint32 &outer_width) {
    m_outer_width = outer_width;
    m_outer_width_isSet = true;
}

bool OAIWritableRack::is_outer_width_Set() const{
    return m_outer_width_isSet;
}

bool OAIWritableRack::is_outer_width_Valid() const{
    return m_outer_width_isValid;
}

qint32 OAIWritableRack::getPowerfeedCount() const {
    return m_powerfeed_count;
}
void OAIWritableRack::setPowerfeedCount(const qint32 &powerfeed_count) {
    m_powerfeed_count = powerfeed_count;
    m_powerfeed_count_isSet = true;
}

bool OAIWritableRack::is_powerfeed_count_Set() const{
    return m_powerfeed_count_isSet;
}

bool OAIWritableRack::is_powerfeed_count_Valid() const{
    return m_powerfeed_count_isValid;
}

qint32 OAIWritableRack::getRole() const {
    return m_role;
}
void OAIWritableRack::setRole(const qint32 &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIWritableRack::is_role_Set() const{
    return m_role_isSet;
}

bool OAIWritableRack::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIWritableRack::getSerial() const {
    return m_serial;
}
void OAIWritableRack::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIWritableRack::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIWritableRack::is_serial_Valid() const{
    return m_serial_isValid;
}

qint32 OAIWritableRack::getSite() const {
    return m_site;
}
void OAIWritableRack::setSite(const qint32 &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIWritableRack::is_site_Set() const{
    return m_site_isSet;
}

bool OAIWritableRack::is_site_Valid() const{
    return m_site_isValid;
}

QString OAIWritableRack::getStatus() const {
    return m_status;
}
void OAIWritableRack::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritableRack::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritableRack::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWritableRack::getTags() const {
    return m_tags;
}
void OAIWritableRack::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableRack::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableRack::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableRack::getTenant() const {
    return m_tenant;
}
void OAIWritableRack::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableRack::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableRack::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableRack::getType() const {
    return m_type;
}
void OAIWritableRack::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritableRack::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritableRack::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIWritableRack::getUHeight() const {
    return m_u_height;
}
void OAIWritableRack::setUHeight(const qint32 &u_height) {
    m_u_height = u_height;
    m_u_height_isSet = true;
}

bool OAIWritableRack::is_u_height_Set() const{
    return m_u_height_isSet;
}

bool OAIWritableRack::is_u_height_Valid() const{
    return m_u_height_isValid;
}

QString OAIWritableRack::getUrl() const {
    return m_url;
}
void OAIWritableRack::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableRack::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableRack::is_url_Valid() const{
    return m_url_isValid;
}

double OAIWritableRack::getWeight() const {
    return m_weight;
}
void OAIWritableRack::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIWritableRack::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIWritableRack::is_weight_Valid() const{
    return m_weight_isValid;
}

QString OAIWritableRack::getWeightUnit() const {
    return m_weight_unit;
}
void OAIWritableRack::setWeightUnit(const QString &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAIWritableRack::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAIWritableRack::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

qint32 OAIWritableRack::getWidth() const {
    return m_width;
}
void OAIWritableRack::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIWritableRack::is_width_Set() const{
    return m_width_isSet;
}

bool OAIWritableRack::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIWritableRack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mounting_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_powerfeed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableRack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_site_isValid && true;
}

} // namespace OpenAPI
