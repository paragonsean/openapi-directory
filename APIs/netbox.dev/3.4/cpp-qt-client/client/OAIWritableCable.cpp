/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableCable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableCable::OAIWritableCable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableCable::OAIWritableCable() {
    this->initializeModel();
}

OAIWritableCable::~OAIWritableCable() {}

void OAIWritableCable::initializeModel() {

    m_a_terminations_isSet = false;
    m_a_terminations_isValid = false;

    m_b_terminations_isSet = false;
    m_b_terminations_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_length_unit_isSet = false;
    m_length_unit_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWritableCable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableCable::fromJsonObject(QJsonObject json) {

    m_a_terminations_isValid = ::OpenAPI::fromJsonValue(m_a_terminations, json[QString("a_terminations")]);
    m_a_terminations_isSet = !json[QString("a_terminations")].isNull() && m_a_terminations_isValid;

    m_b_terminations_isValid = ::OpenAPI::fromJsonValue(m_b_terminations, json[QString("b_terminations")]);
    m_b_terminations_isSet = !json[QString("b_terminations")].isNull() && m_b_terminations_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_length_unit_isValid = ::OpenAPI::fromJsonValue(m_length_unit, json[QString("length_unit")]);
    m_length_unit_isSet = !json[QString("length_unit")].isNull() && m_length_unit_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWritableCable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableCable::asJsonObject() const {
    QJsonObject obj;
    if (m_a_terminations.size() > 0) {
        obj.insert(QString("a_terminations"), ::OpenAPI::toJsonValue(m_a_terminations));
    }
    if (m_b_terminations.size() > 0) {
        obj.insert(QString("b_terminations"), ::OpenAPI::toJsonValue(m_b_terminations));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_length_unit_isSet) {
        obj.insert(QString("length_unit"), ::OpenAPI::toJsonValue(m_length_unit));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIGenericObject> OAIWritableCable::getATerminations() const {
    return m_a_terminations;
}
void OAIWritableCable::setATerminations(const QList<OAIGenericObject> &a_terminations) {
    m_a_terminations = a_terminations;
    m_a_terminations_isSet = true;
}

bool OAIWritableCable::is_a_terminations_Set() const{
    return m_a_terminations_isSet;
}

bool OAIWritableCable::is_a_terminations_Valid() const{
    return m_a_terminations_isValid;
}

QList<OAIGenericObject> OAIWritableCable::getBTerminations() const {
    return m_b_terminations;
}
void OAIWritableCable::setBTerminations(const QList<OAIGenericObject> &b_terminations) {
    m_b_terminations = b_terminations;
    m_b_terminations_isSet = true;
}

bool OAIWritableCable::is_b_terminations_Set() const{
    return m_b_terminations_isSet;
}

bool OAIWritableCable::is_b_terminations_Valid() const{
    return m_b_terminations_isValid;
}

QString OAIWritableCable::getColor() const {
    return m_color;
}
void OAIWritableCable::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIWritableCable::is_color_Set() const{
    return m_color_isSet;
}

bool OAIWritableCable::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIWritableCable::getComments() const {
    return m_comments;
}
void OAIWritableCable::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableCable::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableCable::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableCable::getCreated() const {
    return m_created;
}
void OAIWritableCable::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableCable::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableCable::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableCable::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableCable::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableCable::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableCable::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableCable::getDescription() const {
    return m_description;
}
void OAIWritableCable::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableCable::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableCable::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableCable::getDisplay() const {
    return m_display;
}
void OAIWritableCable::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableCable::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableCable::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWritableCable::getId() const {
    return m_id;
}
void OAIWritableCable::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableCable::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableCable::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableCable::getLabel() const {
    return m_label;
}
void OAIWritableCable::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIWritableCable::is_label_Set() const{
    return m_label_isSet;
}

bool OAIWritableCable::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIWritableCable::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableCable::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableCable::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableCable::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

double OAIWritableCable::getLength() const {
    return m_length;
}
void OAIWritableCable::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIWritableCable::is_length_Set() const{
    return m_length_isSet;
}

bool OAIWritableCable::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIWritableCable::getLengthUnit() const {
    return m_length_unit;
}
void OAIWritableCable::setLengthUnit(const QString &length_unit) {
    m_length_unit = length_unit;
    m_length_unit_isSet = true;
}

bool OAIWritableCable::is_length_unit_Set() const{
    return m_length_unit_isSet;
}

bool OAIWritableCable::is_length_unit_Valid() const{
    return m_length_unit_isValid;
}

QString OAIWritableCable::getStatus() const {
    return m_status;
}
void OAIWritableCable::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritableCable::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritableCable::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWritableCable::getTags() const {
    return m_tags;
}
void OAIWritableCable::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableCable::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableCable::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableCable::getTenant() const {
    return m_tenant;
}
void OAIWritableCable::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableCable::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableCable::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableCable::getType() const {
    return m_type;
}
void OAIWritableCable::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritableCable::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritableCable::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWritableCable::getUrl() const {
    return m_url;
}
void OAIWritableCable::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableCable::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableCable::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWritableCable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_a_terminations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_b_terminations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableCable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
