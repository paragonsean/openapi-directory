/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableVirtualDeviceContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableVirtualDeviceContext::OAIWritableVirtualDeviceContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableVirtualDeviceContext::OAIWritableVirtualDeviceContext() {
    this->initializeModel();
}

OAIWritableVirtualDeviceContext::~OAIWritableVirtualDeviceContext() {}

void OAIWritableVirtualDeviceContext::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_interface_count_isSet = false;
    m_interface_count_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_ip_isSet = false;
    m_primary_ip_isValid = false;

    m_primary_ip4_isSet = false;
    m_primary_ip4_isValid = false;

    m_primary_ip6_isSet = false;
    m_primary_ip6_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWritableVirtualDeviceContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableVirtualDeviceContext::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_interface_count_isValid = ::OpenAPI::fromJsonValue(m_interface_count, json[QString("interface_count")]);
    m_interface_count_isSet = !json[QString("interface_count")].isNull() && m_interface_count_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_ip_isValid = ::OpenAPI::fromJsonValue(m_primary_ip, json[QString("primary_ip")]);
    m_primary_ip_isSet = !json[QString("primary_ip")].isNull() && m_primary_ip_isValid;

    m_primary_ip4_isValid = ::OpenAPI::fromJsonValue(m_primary_ip4, json[QString("primary_ip4")]);
    m_primary_ip4_isSet = !json[QString("primary_ip4")].isNull() && m_primary_ip4_isValid;

    m_primary_ip6_isValid = ::OpenAPI::fromJsonValue(m_primary_ip6, json[QString("primary_ip6")]);
    m_primary_ip6_isSet = !json[QString("primary_ip6")].isNull() && m_primary_ip6_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWritableVirtualDeviceContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableVirtualDeviceContext::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_interface_count_isSet) {
        obj.insert(QString("interface_count"), ::OpenAPI::toJsonValue(m_interface_count));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_ip_isSet) {
        obj.insert(QString("primary_ip"), ::OpenAPI::toJsonValue(m_primary_ip));
    }
    if (m_primary_ip4_isSet) {
        obj.insert(QString("primary_ip4"), ::OpenAPI::toJsonValue(m_primary_ip4));
    }
    if (m_primary_ip6_isSet) {
        obj.insert(QString("primary_ip6"), ::OpenAPI::toJsonValue(m_primary_ip6));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWritableVirtualDeviceContext::getComments() const {
    return m_comments;
}
void OAIWritableVirtualDeviceContext::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableVirtualDeviceContext::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableVirtualDeviceContext::getCreated() const {
    return m_created;
}
void OAIWritableVirtualDeviceContext::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableVirtualDeviceContext::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableVirtualDeviceContext::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableVirtualDeviceContext::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableVirtualDeviceContext::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableVirtualDeviceContext::getDescription() const {
    return m_description;
}
void OAIWritableVirtualDeviceContext::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableVirtualDeviceContext::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getDevice() const {
    return m_device;
}
void OAIWritableVirtualDeviceContext::setDevice(const qint32 &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_device_Set() const{
    return m_device_isSet;
}

bool OAIWritableVirtualDeviceContext::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIWritableVirtualDeviceContext::getDisplay() const {
    return m_display;
}
void OAIWritableVirtualDeviceContext::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableVirtualDeviceContext::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getId() const {
    return m_id;
}
void OAIWritableVirtualDeviceContext::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableVirtualDeviceContext::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getIdentifier() const {
    return m_identifier;
}
void OAIWritableVirtualDeviceContext::setIdentifier(const qint32 &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIWritableVirtualDeviceContext::is_identifier_Valid() const{
    return m_identifier_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getInterfaceCount() const {
    return m_interface_count;
}
void OAIWritableVirtualDeviceContext::setInterfaceCount(const qint32 &interface_count) {
    m_interface_count = interface_count;
    m_interface_count_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_interface_count_Set() const{
    return m_interface_count_isSet;
}

bool OAIWritableVirtualDeviceContext::is_interface_count_Valid() const{
    return m_interface_count_isValid;
}

QDateTime OAIWritableVirtualDeviceContext::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableVirtualDeviceContext::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableVirtualDeviceContext::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableVirtualDeviceContext::getName() const {
    return m_name;
}
void OAIWritableVirtualDeviceContext::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableVirtualDeviceContext::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritableVirtualDeviceContext::getPrimaryIp() const {
    return m_primary_ip;
}
void OAIWritableVirtualDeviceContext::setPrimaryIp(const QString &primary_ip) {
    m_primary_ip = primary_ip;
    m_primary_ip_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_primary_ip_Set() const{
    return m_primary_ip_isSet;
}

bool OAIWritableVirtualDeviceContext::is_primary_ip_Valid() const{
    return m_primary_ip_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getPrimaryIp4() const {
    return m_primary_ip4;
}
void OAIWritableVirtualDeviceContext::setPrimaryIp4(const qint32 &primary_ip4) {
    m_primary_ip4 = primary_ip4;
    m_primary_ip4_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_primary_ip4_Set() const{
    return m_primary_ip4_isSet;
}

bool OAIWritableVirtualDeviceContext::is_primary_ip4_Valid() const{
    return m_primary_ip4_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getPrimaryIp6() const {
    return m_primary_ip6;
}
void OAIWritableVirtualDeviceContext::setPrimaryIp6(const qint32 &primary_ip6) {
    m_primary_ip6 = primary_ip6;
    m_primary_ip6_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_primary_ip6_Set() const{
    return m_primary_ip6_isSet;
}

bool OAIWritableVirtualDeviceContext::is_primary_ip6_Valid() const{
    return m_primary_ip6_isValid;
}

QString OAIWritableVirtualDeviceContext::getStatus() const {
    return m_status;
}
void OAIWritableVirtualDeviceContext::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritableVirtualDeviceContext::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWritableVirtualDeviceContext::getTags() const {
    return m_tags;
}
void OAIWritableVirtualDeviceContext::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableVirtualDeviceContext::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableVirtualDeviceContext::getTenant() const {
    return m_tenant;
}
void OAIWritableVirtualDeviceContext::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableVirtualDeviceContext::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableVirtualDeviceContext::getUrl() const {
    return m_url;
}
void OAIWritableVirtualDeviceContext::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableVirtualDeviceContext::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableVirtualDeviceContext::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWritableVirtualDeviceContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableVirtualDeviceContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
