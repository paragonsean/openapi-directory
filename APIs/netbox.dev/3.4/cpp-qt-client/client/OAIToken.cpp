/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToken::OAIToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToken::OAIToken() {
    this->initializeModel();
}

OAIToken::~OAIToken() {}

void OAIToken::initializeModel() {

    m_allowed_ips_isSet = false;
    m_allowed_ips_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_used_isSet = false;
    m_last_used_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_write_enabled_isSet = false;
    m_write_enabled_isValid = false;
}

void OAIToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToken::fromJsonObject(QJsonObject json) {

    m_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_allowed_ips, json[QString("allowed_ips")]);
    m_allowed_ips_isSet = !json[QString("allowed_ips")].isNull() && m_allowed_ips_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_used_isValid = ::OpenAPI::fromJsonValue(m_last_used, json[QString("last_used")]);
    m_last_used_isSet = !json[QString("last_used")].isNull() && m_last_used_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_write_enabled_isValid = ::OpenAPI::fromJsonValue(m_write_enabled, json[QString("write_enabled")]);
    m_write_enabled_isSet = !json[QString("write_enabled")].isNull() && m_write_enabled_isValid;
}

QString OAIToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToken::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_ips.size() > 0) {
        obj.insert(QString("allowed_ips"), ::OpenAPI::toJsonValue(m_allowed_ips));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_used_isSet) {
        obj.insert(QString("last_used"), ::OpenAPI::toJsonValue(m_last_used));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_write_enabled_isSet) {
        obj.insert(QString("write_enabled"), ::OpenAPI::toJsonValue(m_write_enabled));
    }
    return obj;
}

QList<OAIObject> OAIToken::getAllowedIps() const {
    return m_allowed_ips;
}
void OAIToken::setAllowedIps(const QList<OAIObject> &allowed_ips) {
    m_allowed_ips = allowed_ips;
    m_allowed_ips_isSet = true;
}

bool OAIToken::is_allowed_ips_Set() const{
    return m_allowed_ips_isSet;
}

bool OAIToken::is_allowed_ips_Valid() const{
    return m_allowed_ips_isValid;
}

QDateTime OAIToken::getCreated() const {
    return m_created;
}
void OAIToken::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIToken::is_created_Set() const{
    return m_created_isSet;
}

bool OAIToken::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIToken::getDescription() const {
    return m_description;
}
void OAIToken::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIToken::is_description_Set() const{
    return m_description_isSet;
}

bool OAIToken::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIToken::getDisplay() const {
    return m_display;
}
void OAIToken::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIToken::is_display_Set() const{
    return m_display_isSet;
}

bool OAIToken::is_display_Valid() const{
    return m_display_isValid;
}

QDateTime OAIToken::getExpires() const {
    return m_expires;
}
void OAIToken::setExpires(const QDateTime &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIToken::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIToken::is_expires_Valid() const{
    return m_expires_isValid;
}

qint32 OAIToken::getId() const {
    return m_id;
}
void OAIToken::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIToken::is_id_Set() const{
    return m_id_isSet;
}

bool OAIToken::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIToken::getKey() const {
    return m_key;
}
void OAIToken::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIToken::is_key_Set() const{
    return m_key_isSet;
}

bool OAIToken::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIToken::getLastUsed() const {
    return m_last_used;
}
void OAIToken::setLastUsed(const QDateTime &last_used) {
    m_last_used = last_used;
    m_last_used_isSet = true;
}

bool OAIToken::is_last_used_Set() const{
    return m_last_used_isSet;
}

bool OAIToken::is_last_used_Valid() const{
    return m_last_used_isValid;
}

QString OAIToken::getUrl() const {
    return m_url;
}
void OAIToken::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIToken::is_url_Set() const{
    return m_url_isSet;
}

bool OAIToken::is_url_Valid() const{
    return m_url_isValid;
}

OAINestedUser OAIToken::getUser() const {
    return m_user;
}
void OAIToken::setUser(const OAINestedUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIToken::is_user_Set() const{
    return m_user_isSet;
}

bool OAIToken::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIToken::isWriteEnabled() const {
    return m_write_enabled;
}
void OAIToken::setWriteEnabled(const bool &write_enabled) {
    m_write_enabled = write_enabled;
    m_write_enabled_isSet = true;
}

bool OAIToken::is_write_enabled_Set() const{
    return m_write_enabled_isSet;
}

bool OAIToken::is_write_enabled_Valid() const{
    return m_write_enabled_isValid;
}

bool OAIToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_isValid && true;
}

} // namespace OpenAPI
