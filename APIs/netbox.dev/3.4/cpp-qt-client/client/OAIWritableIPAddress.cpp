/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableIPAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableIPAddress::OAIWritableIPAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableIPAddress::OAIWritableIPAddress() {
    this->initializeModel();
}

OAIWritableIPAddress::~OAIWritableIPAddress() {}

void OAIWritableIPAddress::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_assigned_object_isSet = false;
    m_assigned_object_isValid = false;

    m_assigned_object_id_isSet = false;
    m_assigned_object_id_isValid = false;

    m_assigned_object_type_isSet = false;
    m_assigned_object_type_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_nat_inside_isSet = false;
    m_nat_inside_isValid = false;

    m_nat_outside_isSet = false;
    m_nat_outside_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vrf_isSet = false;
    m_vrf_isValid = false;
}

void OAIWritableIPAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableIPAddress::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_assigned_object_isValid = ::OpenAPI::fromJsonValue(m_assigned_object, json[QString("assigned_object")]);
    m_assigned_object_isSet = !json[QString("assigned_object")].isNull() && m_assigned_object_isValid;

    m_assigned_object_id_isValid = ::OpenAPI::fromJsonValue(m_assigned_object_id, json[QString("assigned_object_id")]);
    m_assigned_object_id_isSet = !json[QString("assigned_object_id")].isNull() && m_assigned_object_id_isValid;

    m_assigned_object_type_isValid = ::OpenAPI::fromJsonValue(m_assigned_object_type, json[QString("assigned_object_type")]);
    m_assigned_object_type_isSet = !json[QString("assigned_object_type")].isNull() && m_assigned_object_type_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dns_name")]);
    m_dns_name_isSet = !json[QString("dns_name")].isNull() && m_dns_name_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_nat_inside_isValid = ::OpenAPI::fromJsonValue(m_nat_inside, json[QString("nat_inside")]);
    m_nat_inside_isSet = !json[QString("nat_inside")].isNull() && m_nat_inside_isValid;

    m_nat_outside_isValid = ::OpenAPI::fromJsonValue(m_nat_outside, json[QString("nat_outside")]);
    m_nat_outside_isSet = !json[QString("nat_outside")].isNull() && m_nat_outside_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vrf_isValid = ::OpenAPI::fromJsonValue(m_vrf, json[QString("vrf")]);
    m_vrf_isSet = !json[QString("vrf")].isNull() && m_vrf_isValid;
}

QString OAIWritableIPAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableIPAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_assigned_object_isSet) {
        obj.insert(QString("assigned_object"), ::OpenAPI::toJsonValue(m_assigned_object));
    }
    if (m_assigned_object_id_isSet) {
        obj.insert(QString("assigned_object_id"), ::OpenAPI::toJsonValue(m_assigned_object_id));
    }
    if (m_assigned_object_type_isSet) {
        obj.insert(QString("assigned_object_type"), ::OpenAPI::toJsonValue(m_assigned_object_type));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("dns_name"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_nat_inside_isSet) {
        obj.insert(QString("nat_inside"), ::OpenAPI::toJsonValue(m_nat_inside));
    }
    if (m_nat_outside.size() > 0) {
        obj.insert(QString("nat_outside"), ::OpenAPI::toJsonValue(m_nat_outside));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vrf_isSet) {
        obj.insert(QString("vrf"), ::OpenAPI::toJsonValue(m_vrf));
    }
    return obj;
}

QString OAIWritableIPAddress::getAddress() const {
    return m_address;
}
void OAIWritableIPAddress::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIWritableIPAddress::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWritableIPAddress::is_address_Valid() const{
    return m_address_isValid;
}

OAIObject OAIWritableIPAddress::getAssignedObject() const {
    return m_assigned_object;
}
void OAIWritableIPAddress::setAssignedObject(const OAIObject &assigned_object) {
    m_assigned_object = assigned_object;
    m_assigned_object_isSet = true;
}

bool OAIWritableIPAddress::is_assigned_object_Set() const{
    return m_assigned_object_isSet;
}

bool OAIWritableIPAddress::is_assigned_object_Valid() const{
    return m_assigned_object_isValid;
}

qint32 OAIWritableIPAddress::getAssignedObjectId() const {
    return m_assigned_object_id;
}
void OAIWritableIPAddress::setAssignedObjectId(const qint32 &assigned_object_id) {
    m_assigned_object_id = assigned_object_id;
    m_assigned_object_id_isSet = true;
}

bool OAIWritableIPAddress::is_assigned_object_id_Set() const{
    return m_assigned_object_id_isSet;
}

bool OAIWritableIPAddress::is_assigned_object_id_Valid() const{
    return m_assigned_object_id_isValid;
}

QString OAIWritableIPAddress::getAssignedObjectType() const {
    return m_assigned_object_type;
}
void OAIWritableIPAddress::setAssignedObjectType(const QString &assigned_object_type) {
    m_assigned_object_type = assigned_object_type;
    m_assigned_object_type_isSet = true;
}

bool OAIWritableIPAddress::is_assigned_object_type_Set() const{
    return m_assigned_object_type_isSet;
}

bool OAIWritableIPAddress::is_assigned_object_type_Valid() const{
    return m_assigned_object_type_isValid;
}

QString OAIWritableIPAddress::getComments() const {
    return m_comments;
}
void OAIWritableIPAddress::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableIPAddress::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableIPAddress::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIWritableIPAddress::getCreated() const {
    return m_created;
}
void OAIWritableIPAddress::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableIPAddress::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableIPAddress::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableIPAddress::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableIPAddress::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableIPAddress::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableIPAddress::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableIPAddress::getDescription() const {
    return m_description;
}
void OAIWritableIPAddress::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableIPAddress::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableIPAddress::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableIPAddress::getDisplay() const {
    return m_display;
}
void OAIWritableIPAddress::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableIPAddress::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableIPAddress::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIWritableIPAddress::getDnsName() const {
    return m_dns_name;
}
void OAIWritableIPAddress::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIWritableIPAddress::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIWritableIPAddress::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QString OAIWritableIPAddress::getFamily() const {
    return m_family;
}
void OAIWritableIPAddress::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIWritableIPAddress::is_family_Set() const{
    return m_family_isSet;
}

bool OAIWritableIPAddress::is_family_Valid() const{
    return m_family_isValid;
}

qint32 OAIWritableIPAddress::getId() const {
    return m_id;
}
void OAIWritableIPAddress::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableIPAddress::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableIPAddress::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableIPAddress::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableIPAddress::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableIPAddress::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableIPAddress::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIWritableIPAddress::getNatInside() const {
    return m_nat_inside;
}
void OAIWritableIPAddress::setNatInside(const qint32 &nat_inside) {
    m_nat_inside = nat_inside;
    m_nat_inside_isSet = true;
}

bool OAIWritableIPAddress::is_nat_inside_Set() const{
    return m_nat_inside_isSet;
}

bool OAIWritableIPAddress::is_nat_inside_Valid() const{
    return m_nat_inside_isValid;
}

QList<OAINestedIPAddress> OAIWritableIPAddress::getNatOutside() const {
    return m_nat_outside;
}
void OAIWritableIPAddress::setNatOutside(const QList<OAINestedIPAddress> &nat_outside) {
    m_nat_outside = nat_outside;
    m_nat_outside_isSet = true;
}

bool OAIWritableIPAddress::is_nat_outside_Set() const{
    return m_nat_outside_isSet;
}

bool OAIWritableIPAddress::is_nat_outside_Valid() const{
    return m_nat_outside_isValid;
}

QString OAIWritableIPAddress::getRole() const {
    return m_role;
}
void OAIWritableIPAddress::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIWritableIPAddress::is_role_Set() const{
    return m_role_isSet;
}

bool OAIWritableIPAddress::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIWritableIPAddress::getStatus() const {
    return m_status;
}
void OAIWritableIPAddress::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritableIPAddress::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritableIPAddress::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIWritableIPAddress::getTags() const {
    return m_tags;
}
void OAIWritableIPAddress::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableIPAddress::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableIPAddress::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableIPAddress::getTenant() const {
    return m_tenant;
}
void OAIWritableIPAddress::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableIPAddress::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableIPAddress::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIWritableIPAddress::getUrl() const {
    return m_url;
}
void OAIWritableIPAddress::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableIPAddress::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableIPAddress::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIWritableIPAddress::getVrf() const {
    return m_vrf;
}
void OAIWritableIPAddress::setVrf(const qint32 &vrf) {
    m_vrf = vrf;
    m_vrf_isSet = true;
}

bool OAIWritableIPAddress::is_vrf_Set() const{
    return m_vrf_isSet;
}

bool OAIWritableIPAddress::is_vrf_Valid() const{
    return m_vrf_isValid;
}

bool OAIWritableIPAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nat_inside_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nat_outside.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableIPAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && true;
}

} // namespace OpenAPI
