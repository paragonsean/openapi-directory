/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableObjectPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableObjectPermission::OAIWritableObjectPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableObjectPermission::OAIWritableObjectPermission() {
    this->initializeModel();
}

OAIWritableObjectPermission::~OAIWritableObjectPermission() {}

void OAIWritableObjectPermission::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_types_isSet = false;
    m_object_types_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIWritableObjectPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableObjectPermission::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_types_isValid = ::OpenAPI::fromJsonValue(m_object_types, json[QString("object_types")]);
    m_object_types_isSet = !json[QString("object_types")].isNull() && m_object_types_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIWritableObjectPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableObjectPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_constraints_isSet) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_types.size() > 0) {
        obj.insert(QString("object_types"), ::OpenAPI::toJsonValue(m_object_types));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QList<QString> OAIWritableObjectPermission::getActions() const {
    return m_actions;
}
void OAIWritableObjectPermission::setActions(const QList<QString> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIWritableObjectPermission::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIWritableObjectPermission::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIObject OAIWritableObjectPermission::getConstraints() const {
    return m_constraints;
}
void OAIWritableObjectPermission::setConstraints(const OAIObject &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIWritableObjectPermission::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIWritableObjectPermission::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QString OAIWritableObjectPermission::getDescription() const {
    return m_description;
}
void OAIWritableObjectPermission::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableObjectPermission::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableObjectPermission::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableObjectPermission::getDisplay() const {
    return m_display;
}
void OAIWritableObjectPermission::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableObjectPermission::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableObjectPermission::is_display_Valid() const{
    return m_display_isValid;
}

bool OAIWritableObjectPermission::isEnabled() const {
    return m_enabled;
}
void OAIWritableObjectPermission::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWritableObjectPermission::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWritableObjectPermission::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QSet<qint32> OAIWritableObjectPermission::getGroups() const {
    return m_groups;
}
void OAIWritableObjectPermission::setGroups(const QSet<qint32> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIWritableObjectPermission::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIWritableObjectPermission::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIWritableObjectPermission::getId() const {
    return m_id;
}
void OAIWritableObjectPermission::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableObjectPermission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableObjectPermission::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableObjectPermission::getName() const {
    return m_name;
}
void OAIWritableObjectPermission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableObjectPermission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableObjectPermission::is_name_Valid() const{
    return m_name_isValid;
}

QSet<QString> OAIWritableObjectPermission::getObjectTypes() const {
    return m_object_types;
}
void OAIWritableObjectPermission::setObjectTypes(const QSet<QString> &object_types) {
    m_object_types = object_types;
    m_object_types_isSet = true;
}

bool OAIWritableObjectPermission::is_object_types_Set() const{
    return m_object_types_isSet;
}

bool OAIWritableObjectPermission::is_object_types_Valid() const{
    return m_object_types_isValid;
}

QString OAIWritableObjectPermission::getUrl() const {
    return m_url;
}
void OAIWritableObjectPermission::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableObjectPermission::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableObjectPermission::is_url_Valid() const{
    return m_url_isValid;
}

QSet<qint32> OAIWritableObjectPermission::getUsers() const {
    return m_users;
}
void OAIWritableObjectPermission::setUsers(const QSet<qint32> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIWritableObjectPermission::is_users_Set() const{
    return m_users_isSet;
}

bool OAIWritableObjectPermission::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIWritableObjectPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableObjectPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_isValid && m_name_isValid && m_object_types_isValid && true;
}

} // namespace OpenAPI
