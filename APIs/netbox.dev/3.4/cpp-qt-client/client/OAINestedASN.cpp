/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINestedASN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINestedASN::OAINestedASN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINestedASN::OAINestedASN() {
    this->initializeModel();
}

OAINestedASN::~OAINestedASN() {}

void OAINestedASN::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINestedASN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINestedASN::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINestedASN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINestedASN::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAINestedASN::getAsn() const {
    return m_asn;
}
void OAINestedASN::setAsn(const qint32 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAINestedASN::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAINestedASN::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAINestedASN::getDisplay() const {
    return m_display;
}
void OAINestedASN::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAINestedASN::is_display_Set() const{
    return m_display_isSet;
}

bool OAINestedASN::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAINestedASN::getId() const {
    return m_id;
}
void OAINestedASN::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINestedASN::is_id_Set() const{
    return m_id_isSet;
}

bool OAINestedASN::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINestedASN::getUrl() const {
    return m_url;
}
void OAINestedASN::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINestedASN::is_url_Set() const{
    return m_url_isSet;
}

bool OAINestedASN::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINestedASN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINestedASN::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asn_isValid && true;
}

} // namespace OpenAPI
