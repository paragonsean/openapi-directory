/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobResult::OAIJobResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobResult::OAIJobResult() {
    this->initializeModel();
}

OAIJobResult::~OAIJobResult() {}

void OAIJobResult::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_obj_type_isSet = false;
    m_obj_type_isValid = false;

    m_scheduled_isSet = false;
    m_scheduled_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIJobResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobResult::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("job_id")]);
    m_job_id_isSet = !json[QString("job_id")].isNull() && m_job_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_obj_type_isValid = ::OpenAPI::fromJsonValue(m_obj_type, json[QString("obj_type")]);
    m_obj_type_isSet = !json[QString("obj_type")].isNull() && m_obj_type_isValid;

    m_scheduled_isValid = ::OpenAPI::fromJsonValue(m_scheduled, json[QString("scheduled")]);
    m_scheduled_isSet = !json[QString("scheduled")].isNull() && m_scheduled_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIJobResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobResult::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("job_id"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_obj_type_isSet) {
        obj.insert(QString("obj_type"), ::OpenAPI::toJsonValue(m_obj_type));
    }
    if (m_scheduled_isSet) {
        obj.insert(QString("scheduled"), ::OpenAPI::toJsonValue(m_scheduled));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIJobResult::getCompleted() const {
    return m_completed;
}
void OAIJobResult::setCompleted(const QDateTime &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIJobResult::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIJobResult::is_completed_Valid() const{
    return m_completed_isValid;
}

QDateTime OAIJobResult::getCreated() const {
    return m_created;
}
void OAIJobResult::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIJobResult::is_created_Set() const{
    return m_created_isSet;
}

bool OAIJobResult::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIJobResult::getData() const {
    return m_data;
}
void OAIJobResult::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIJobResult::is_data_Set() const{
    return m_data_isSet;
}

bool OAIJobResult::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIJobResult::getDisplay() const {
    return m_display;
}
void OAIJobResult::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIJobResult::is_display_Set() const{
    return m_display_isSet;
}

bool OAIJobResult::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIJobResult::getId() const {
    return m_id;
}
void OAIJobResult::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobResult::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIJobResult::getInterval() const {
    return m_interval;
}
void OAIJobResult::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIJobResult::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIJobResult::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIJobResult::getJobId() const {
    return m_job_id;
}
void OAIJobResult::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobResult::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobResult::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobResult::getName() const {
    return m_name;
}
void OAIJobResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJobResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJobResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJobResult::getObjType() const {
    return m_obj_type;
}
void OAIJobResult::setObjType(const QString &obj_type) {
    m_obj_type = obj_type;
    m_obj_type_isSet = true;
}

bool OAIJobResult::is_obj_type_Set() const{
    return m_obj_type_isSet;
}

bool OAIJobResult::is_obj_type_Valid() const{
    return m_obj_type_isValid;
}

QDateTime OAIJobResult::getScheduled() const {
    return m_scheduled;
}
void OAIJobResult::setScheduled(const QDateTime &scheduled) {
    m_scheduled = scheduled;
    m_scheduled_isSet = true;
}

bool OAIJobResult::is_scheduled_Set() const{
    return m_scheduled_isSet;
}

bool OAIJobResult::is_scheduled_Valid() const{
    return m_scheduled_isValid;
}

QDateTime OAIJobResult::getStarted() const {
    return m_started;
}
void OAIJobResult::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIJobResult::is_started_Set() const{
    return m_started_isSet;
}

bool OAIJobResult::is_started_Valid() const{
    return m_started_isValid;
}

OAIStatus_6 OAIJobResult::getStatus() const {
    return m_status;
}
void OAIJobResult::setStatus(const OAIStatus_6 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobResult::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJobResult::getUrl() const {
    return m_url;
}
void OAIJobResult::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIJobResult::is_url_Set() const{
    return m_url_isSet;
}

bool OAIJobResult::is_url_Valid() const{
    return m_url_isValid;
}

OAINestedUser OAIJobResult::getUser() const {
    return m_user;
}
void OAIJobResult::setUser(const OAINestedUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIJobResult::is_user_Set() const{
    return m_user_isSet;
}

bool OAIJobResult::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIJobResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obj_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
