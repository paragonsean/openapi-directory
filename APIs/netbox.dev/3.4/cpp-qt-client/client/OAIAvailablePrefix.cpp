/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailablePrefix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailablePrefix::OAIAvailablePrefix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailablePrefix::OAIAvailablePrefix() {
    this->initializeModel();
}

OAIAvailablePrefix::~OAIAvailablePrefix() {}

void OAIAvailablePrefix::initializeModel() {

    m_family_isSet = false;
    m_family_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_vrf_isSet = false;
    m_vrf_isValid = false;
}

void OAIAvailablePrefix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailablePrefix::fromJsonObject(QJsonObject json) {

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_vrf_isValid = ::OpenAPI::fromJsonValue(m_vrf, json[QString("vrf")]);
    m_vrf_isSet = !json[QString("vrf")].isNull() && m_vrf_isValid;
}

QString OAIAvailablePrefix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailablePrefix::asJsonObject() const {
    QJsonObject obj;
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_vrf.isSet()) {
        obj.insert(QString("vrf"), ::OpenAPI::toJsonValue(m_vrf));
    }
    return obj;
}

qint32 OAIAvailablePrefix::getFamily() const {
    return m_family;
}
void OAIAvailablePrefix::setFamily(const qint32 &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIAvailablePrefix::is_family_Set() const{
    return m_family_isSet;
}

bool OAIAvailablePrefix::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIAvailablePrefix::getPrefix() const {
    return m_prefix;
}
void OAIAvailablePrefix::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIAvailablePrefix::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIAvailablePrefix::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAINestedVRF OAIAvailablePrefix::getVrf() const {
    return m_vrf;
}
void OAIAvailablePrefix::setVrf(const OAINestedVRF &vrf) {
    m_vrf = vrf;
    m_vrf_isSet = true;
}

bool OAIAvailablePrefix::is_vrf_Set() const{
    return m_vrf_isSet;
}

bool OAIAvailablePrefix::is_vrf_Valid() const{
    return m_vrf_isValid;
}

bool OAIAvailablePrefix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailablePrefix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
