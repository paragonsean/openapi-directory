/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRearPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRearPort::OAIRearPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRearPort::OAIRearPort() {
    this->initializeModel();
}

OAIRearPort::~OAIRearPort() {}

void OAIRearPort::initializeModel() {

    m__occupied_isSet = false;
    m__occupied_isValid = false;

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_cable_end_isSet = false;
    m_cable_end_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_link_peers_isSet = false;
    m_link_peers_isValid = false;

    m_link_peers_type_isSet = false;
    m_link_peers_type_isValid = false;

    m_mark_connected_isSet = false;
    m_mark_connected_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_positions_isSet = false;
    m_positions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRearPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRearPort::fromJsonObject(QJsonObject json) {

    m__occupied_isValid = ::OpenAPI::fromJsonValue(m__occupied, json[QString("_occupied")]);
    m__occupied_isSet = !json[QString("_occupied")].isNull() && m__occupied_isValid;

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_cable_end_isValid = ::OpenAPI::fromJsonValue(m_cable_end, json[QString("cable_end")]);
    m_cable_end_isSet = !json[QString("cable_end")].isNull() && m_cable_end_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_link_peers_isValid = ::OpenAPI::fromJsonValue(m_link_peers, json[QString("link_peers")]);
    m_link_peers_isSet = !json[QString("link_peers")].isNull() && m_link_peers_isValid;

    m_link_peers_type_isValid = ::OpenAPI::fromJsonValue(m_link_peers_type, json[QString("link_peers_type")]);
    m_link_peers_type_isSet = !json[QString("link_peers_type")].isNull() && m_link_peers_type_isValid;

    m_mark_connected_isValid = ::OpenAPI::fromJsonValue(m_mark_connected, json[QString("mark_connected")]);
    m_mark_connected_isSet = !json[QString("mark_connected")].isNull() && m_mark_connected_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_positions_isValid = ::OpenAPI::fromJsonValue(m_positions, json[QString("positions")]);
    m_positions_isSet = !json[QString("positions")].isNull() && m_positions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRearPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRearPort::asJsonObject() const {
    QJsonObject obj;
    if (m__occupied_isSet) {
        obj.insert(QString("_occupied"), ::OpenAPI::toJsonValue(m__occupied));
    }
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_cable_end_isSet) {
        obj.insert(QString("cable_end"), ::OpenAPI::toJsonValue(m_cable_end));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_link_peers.size() > 0) {
        obj.insert(QString("link_peers"), ::OpenAPI::toJsonValue(m_link_peers));
    }
    if (m_link_peers_type_isSet) {
        obj.insert(QString("link_peers_type"), ::OpenAPI::toJsonValue(m_link_peers_type));
    }
    if (m_mark_connected_isSet) {
        obj.insert(QString("mark_connected"), ::OpenAPI::toJsonValue(m_mark_connected));
    }
    if (m_module.isSet()) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_positions_isSet) {
        obj.insert(QString("positions"), ::OpenAPI::toJsonValue(m_positions));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIRearPort::isOccupied() const {
    return m__occupied;
}
void OAIRearPort::setOccupied(const bool &_occupied) {
    m__occupied = _occupied;
    m__occupied_isSet = true;
}

bool OAIRearPort::is__occupied_Set() const{
    return m__occupied_isSet;
}

bool OAIRearPort::is__occupied_Valid() const{
    return m__occupied_isValid;
}

OAINestedCable OAIRearPort::getCable() const {
    return m_cable;
}
void OAIRearPort::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAIRearPort::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAIRearPort::is_cable_Valid() const{
    return m_cable_isValid;
}

QString OAIRearPort::getCableEnd() const {
    return m_cable_end;
}
void OAIRearPort::setCableEnd(const QString &cable_end) {
    m_cable_end = cable_end;
    m_cable_end_isSet = true;
}

bool OAIRearPort::is_cable_end_Set() const{
    return m_cable_end_isSet;
}

bool OAIRearPort::is_cable_end_Valid() const{
    return m_cable_end_isValid;
}

QString OAIRearPort::getColor() const {
    return m_color;
}
void OAIRearPort::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIRearPort::is_color_Set() const{
    return m_color_isSet;
}

bool OAIRearPort::is_color_Valid() const{
    return m_color_isValid;
}

QDateTime OAIRearPort::getCreated() const {
    return m_created;
}
void OAIRearPort::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRearPort::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRearPort::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIRearPort::getCustomFields() const {
    return m_custom_fields;
}
void OAIRearPort::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIRearPort::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIRearPort::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIRearPort::getDescription() const {
    return m_description;
}
void OAIRearPort::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRearPort::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRearPort::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIRearPort::getDevice() const {
    return m_device;
}
void OAIRearPort::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIRearPort::is_device_Set() const{
    return m_device_isSet;
}

bool OAIRearPort::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIRearPort::getDisplay() const {
    return m_display;
}
void OAIRearPort::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIRearPort::is_display_Set() const{
    return m_display_isSet;
}

bool OAIRearPort::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIRearPort::getId() const {
    return m_id;
}
void OAIRearPort::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRearPort::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRearPort::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRearPort::getLabel() const {
    return m_label;
}
void OAIRearPort::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIRearPort::is_label_Set() const{
    return m_label_isSet;
}

bool OAIRearPort::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIRearPort::getLastUpdated() const {
    return m_last_updated;
}
void OAIRearPort::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIRearPort::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIRearPort::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<QString> OAIRearPort::getLinkPeers() const {
    return m_link_peers;
}
void OAIRearPort::setLinkPeers(const QList<QString> &link_peers) {
    m_link_peers = link_peers;
    m_link_peers_isSet = true;
}

bool OAIRearPort::is_link_peers_Set() const{
    return m_link_peers_isSet;
}

bool OAIRearPort::is_link_peers_Valid() const{
    return m_link_peers_isValid;
}

QString OAIRearPort::getLinkPeersType() const {
    return m_link_peers_type;
}
void OAIRearPort::setLinkPeersType(const QString &link_peers_type) {
    m_link_peers_type = link_peers_type;
    m_link_peers_type_isSet = true;
}

bool OAIRearPort::is_link_peers_type_Set() const{
    return m_link_peers_type_isSet;
}

bool OAIRearPort::is_link_peers_type_Valid() const{
    return m_link_peers_type_isValid;
}

bool OAIRearPort::isMarkConnected() const {
    return m_mark_connected;
}
void OAIRearPort::setMarkConnected(const bool &mark_connected) {
    m_mark_connected = mark_connected;
    m_mark_connected_isSet = true;
}

bool OAIRearPort::is_mark_connected_Set() const{
    return m_mark_connected_isSet;
}

bool OAIRearPort::is_mark_connected_Valid() const{
    return m_mark_connected_isValid;
}

OAIComponentNestedModule OAIRearPort::getModule() const {
    return m_module;
}
void OAIRearPort::setModule(const OAIComponentNestedModule &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIRearPort::is_module_Set() const{
    return m_module_isSet;
}

bool OAIRearPort::is_module_Valid() const{
    return m_module_isValid;
}

QString OAIRearPort::getName() const {
    return m_name;
}
void OAIRearPort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRearPort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRearPort::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRearPort::getPositions() const {
    return m_positions;
}
void OAIRearPort::setPositions(const qint32 &positions) {
    m_positions = positions;
    m_positions_isSet = true;
}

bool OAIRearPort::is_positions_Set() const{
    return m_positions_isSet;
}

bool OAIRearPort::is_positions_Valid() const{
    return m_positions_isValid;
}

QList<OAINestedTag> OAIRearPort::getTags() const {
    return m_tags;
}
void OAIRearPort::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRearPort::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRearPort::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIType_2 OAIRearPort::getType() const {
    return m_type;
}
void OAIRearPort::setType(const OAIType_2 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRearPort::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRearPort::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRearPort::getUrl() const {
    return m_url;
}
void OAIRearPort::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRearPort::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRearPort::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRearPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__occupied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRearPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
