/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigContext::OAIConfigContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigContext::OAIConfigContext() {
    this->initializeModel();
}

OAIConfigContext::~OAIConfigContext() {}

void OAIConfigContext::initializeModel() {

    m_cluster_groups_isSet = false;
    m_cluster_groups_isValid = false;

    m_cluster_types_isSet = false;
    m_cluster_types_isValid = false;

    m_clusters_isSet = false;
    m_clusters_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_types_isSet = false;
    m_device_types_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_site_groups_isSet = false;
    m_site_groups_isValid = false;

    m_sites_isSet = false;
    m_sites_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_groups_isSet = false;
    m_tenant_groups_isValid = false;

    m_tenants_isSet = false;
    m_tenants_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIConfigContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigContext::fromJsonObject(QJsonObject json) {

    m_cluster_groups_isValid = ::OpenAPI::fromJsonValue(m_cluster_groups, json[QString("cluster_groups")]);
    m_cluster_groups_isSet = !json[QString("cluster_groups")].isNull() && m_cluster_groups_isValid;

    m_cluster_types_isValid = ::OpenAPI::fromJsonValue(m_cluster_types, json[QString("cluster_types")]);
    m_cluster_types_isSet = !json[QString("cluster_types")].isNull() && m_cluster_types_isValid;

    m_clusters_isValid = ::OpenAPI::fromJsonValue(m_clusters, json[QString("clusters")]);
    m_clusters_isSet = !json[QString("clusters")].isNull() && m_clusters_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_types_isValid = ::OpenAPI::fromJsonValue(m_device_types, json[QString("device_types")]);
    m_device_types_isSet = !json[QString("device_types")].isNull() && m_device_types_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_site_groups_isValid = ::OpenAPI::fromJsonValue(m_site_groups, json[QString("site_groups")]);
    m_site_groups_isSet = !json[QString("site_groups")].isNull() && m_site_groups_isValid;

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_groups_isValid = ::OpenAPI::fromJsonValue(m_tenant_groups, json[QString("tenant_groups")]);
    m_tenant_groups_isSet = !json[QString("tenant_groups")].isNull() && m_tenant_groups_isValid;

    m_tenants_isValid = ::OpenAPI::fromJsonValue(m_tenants, json[QString("tenants")]);
    m_tenants_isSet = !json[QString("tenants")].isNull() && m_tenants_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIConfigContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigContext::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_groups.size() > 0) {
        obj.insert(QString("cluster_groups"), ::OpenAPI::toJsonValue(m_cluster_groups));
    }
    if (m_cluster_types.size() > 0) {
        obj.insert(QString("cluster_types"), ::OpenAPI::toJsonValue(m_cluster_types));
    }
    if (m_clusters.size() > 0) {
        obj.insert(QString("clusters"), ::OpenAPI::toJsonValue(m_clusters));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_types.size() > 0) {
        obj.insert(QString("device_types"), ::OpenAPI::toJsonValue(m_device_types));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_site_groups.size() > 0) {
        obj.insert(QString("site_groups"), ::OpenAPI::toJsonValue(m_site_groups));
    }
    if (m_sites.size() > 0) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_groups.size() > 0) {
        obj.insert(QString("tenant_groups"), ::OpenAPI::toJsonValue(m_tenant_groups));
    }
    if (m_tenants.size() > 0) {
        obj.insert(QString("tenants"), ::OpenAPI::toJsonValue(m_tenants));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QSet<OAINestedClusterGroup> OAIConfigContext::getClusterGroups() const {
    return m_cluster_groups;
}
void OAIConfigContext::setClusterGroups(const QSet<OAINestedClusterGroup> &cluster_groups) {
    m_cluster_groups = cluster_groups;
    m_cluster_groups_isSet = true;
}

bool OAIConfigContext::is_cluster_groups_Set() const{
    return m_cluster_groups_isSet;
}

bool OAIConfigContext::is_cluster_groups_Valid() const{
    return m_cluster_groups_isValid;
}

QSet<OAINestedClusterType> OAIConfigContext::getClusterTypes() const {
    return m_cluster_types;
}
void OAIConfigContext::setClusterTypes(const QSet<OAINestedClusterType> &cluster_types) {
    m_cluster_types = cluster_types;
    m_cluster_types_isSet = true;
}

bool OAIConfigContext::is_cluster_types_Set() const{
    return m_cluster_types_isSet;
}

bool OAIConfigContext::is_cluster_types_Valid() const{
    return m_cluster_types_isValid;
}

QSet<OAINestedCluster> OAIConfigContext::getClusters() const {
    return m_clusters;
}
void OAIConfigContext::setClusters(const QSet<OAINestedCluster> &clusters) {
    m_clusters = clusters;
    m_clusters_isSet = true;
}

bool OAIConfigContext::is_clusters_Set() const{
    return m_clusters_isSet;
}

bool OAIConfigContext::is_clusters_Valid() const{
    return m_clusters_isValid;
}

QDateTime OAIConfigContext::getCreated() const {
    return m_created;
}
void OAIConfigContext::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIConfigContext::is_created_Set() const{
    return m_created_isSet;
}

bool OAIConfigContext::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIConfigContext::getData() const {
    return m_data;
}
void OAIConfigContext::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIConfigContext::is_data_Set() const{
    return m_data_isSet;
}

bool OAIConfigContext::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIConfigContext::getDescription() const {
    return m_description;
}
void OAIConfigContext::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConfigContext::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConfigContext::is_description_Valid() const{
    return m_description_isValid;
}

QSet<OAINestedDeviceType> OAIConfigContext::getDeviceTypes() const {
    return m_device_types;
}
void OAIConfigContext::setDeviceTypes(const QSet<OAINestedDeviceType> &device_types) {
    m_device_types = device_types;
    m_device_types_isSet = true;
}

bool OAIConfigContext::is_device_types_Set() const{
    return m_device_types_isSet;
}

bool OAIConfigContext::is_device_types_Valid() const{
    return m_device_types_isValid;
}

QString OAIConfigContext::getDisplay() const {
    return m_display;
}
void OAIConfigContext::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIConfigContext::is_display_Set() const{
    return m_display_isSet;
}

bool OAIConfigContext::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIConfigContext::getId() const {
    return m_id;
}
void OAIConfigContext::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConfigContext::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConfigContext::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIConfigContext::isIsActive() const {
    return m_is_active;
}
void OAIConfigContext::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIConfigContext::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIConfigContext::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QDateTime OAIConfigContext::getLastUpdated() const {
    return m_last_updated;
}
void OAIConfigContext::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIConfigContext::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIConfigContext::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QSet<OAINestedLocation> OAIConfigContext::getLocations() const {
    return m_locations;
}
void OAIConfigContext::setLocations(const QSet<OAINestedLocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIConfigContext::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIConfigContext::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIConfigContext::getName() const {
    return m_name;
}
void OAIConfigContext::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfigContext::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfigContext::is_name_Valid() const{
    return m_name_isValid;
}

QSet<OAINestedPlatform> OAIConfigContext::getPlatforms() const {
    return m_platforms;
}
void OAIConfigContext::setPlatforms(const QSet<OAINestedPlatform> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIConfigContext::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIConfigContext::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QSet<OAINestedRegion> OAIConfigContext::getRegions() const {
    return m_regions;
}
void OAIConfigContext::setRegions(const QSet<OAINestedRegion> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIConfigContext::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIConfigContext::is_regions_Valid() const{
    return m_regions_isValid;
}

QSet<OAINestedDeviceRole> OAIConfigContext::getRoles() const {
    return m_roles;
}
void OAIConfigContext::setRoles(const QSet<OAINestedDeviceRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIConfigContext::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIConfigContext::is_roles_Valid() const{
    return m_roles_isValid;
}

QSet<OAINestedSiteGroup> OAIConfigContext::getSiteGroups() const {
    return m_site_groups;
}
void OAIConfigContext::setSiteGroups(const QSet<OAINestedSiteGroup> &site_groups) {
    m_site_groups = site_groups;
    m_site_groups_isSet = true;
}

bool OAIConfigContext::is_site_groups_Set() const{
    return m_site_groups_isSet;
}

bool OAIConfigContext::is_site_groups_Valid() const{
    return m_site_groups_isValid;
}

QSet<OAINestedSite> OAIConfigContext::getSites() const {
    return m_sites;
}
void OAIConfigContext::setSites(const QSet<OAINestedSite> &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIConfigContext::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIConfigContext::is_sites_Valid() const{
    return m_sites_isValid;
}

QSet<QString> OAIConfigContext::getTags() const {
    return m_tags;
}
void OAIConfigContext::setTags(const QSet<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConfigContext::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConfigContext::is_tags_Valid() const{
    return m_tags_isValid;
}

QSet<OAINestedTenantGroup> OAIConfigContext::getTenantGroups() const {
    return m_tenant_groups;
}
void OAIConfigContext::setTenantGroups(const QSet<OAINestedTenantGroup> &tenant_groups) {
    m_tenant_groups = tenant_groups;
    m_tenant_groups_isSet = true;
}

bool OAIConfigContext::is_tenant_groups_Set() const{
    return m_tenant_groups_isSet;
}

bool OAIConfigContext::is_tenant_groups_Valid() const{
    return m_tenant_groups_isValid;
}

QSet<OAINestedTenant> OAIConfigContext::getTenants() const {
    return m_tenants;
}
void OAIConfigContext::setTenants(const QSet<OAINestedTenant> &tenants) {
    m_tenants = tenants;
    m_tenants_isSet = true;
}

bool OAIConfigContext::is_tenants_Set() const{
    return m_tenants_isSet;
}

bool OAIConfigContext::is_tenants_Valid() const{
    return m_tenants_isValid;
}

QString OAIConfigContext::getUrl() const {
    return m_url;
}
void OAIConfigContext::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConfigContext::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConfigContext::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIConfigContext::getWeight() const {
    return m_weight;
}
void OAIConfigContext::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIConfigContext::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIConfigContext::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIConfigContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
