/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigContext.h
 *
 * 
 */

#ifndef OAIConfigContext_H
#define OAIConfigContext_H

#include <QJsonObject>

#include "OAINestedCluster.h"
#include "OAINestedClusterGroup.h"
#include "OAINestedClusterType.h"
#include "OAINestedDeviceRole.h"
#include "OAINestedDeviceType.h"
#include "OAINestedLocation.h"
#include "OAINestedPlatform.h"
#include "OAINestedRegion.h"
#include "OAINestedSite.h"
#include "OAINestedSiteGroup.h"
#include "OAINestedTenant.h"
#include "OAINestedTenantGroup.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINestedClusterGroup;
class OAINestedClusterType;
class OAINestedCluster;
class OAINestedDeviceType;
class OAINestedLocation;
class OAINestedPlatform;
class OAINestedRegion;
class OAINestedDeviceRole;
class OAINestedSiteGroup;
class OAINestedSite;
class OAINestedTenantGroup;
class OAINestedTenant;

class OAIConfigContext : public OAIObject {
public:
    OAIConfigContext();
    OAIConfigContext(QString json);
    ~OAIConfigContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QSet<OAINestedClusterGroup> getClusterGroups() const;
    void setClusterGroups(const QSet<OAINestedClusterGroup> &cluster_groups);
    bool is_cluster_groups_Set() const;
    bool is_cluster_groups_Valid() const;

    QSet<OAINestedClusterType> getClusterTypes() const;
    void setClusterTypes(const QSet<OAINestedClusterType> &cluster_types);
    bool is_cluster_types_Set() const;
    bool is_cluster_types_Valid() const;

    QSet<OAINestedCluster> getClusters() const;
    void setClusters(const QSet<OAINestedCluster> &clusters);
    bool is_clusters_Set() const;
    bool is_clusters_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    OAIObject getData() const;
    void setData(const OAIObject &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QSet<OAINestedDeviceType> getDeviceTypes() const;
    void setDeviceTypes(const QSet<OAINestedDeviceType> &device_types);
    bool is_device_types_Set() const;
    bool is_device_types_Valid() const;

    QString getDisplay() const;
    void setDisplay(const QString &display);
    bool is_display_Set() const;
    bool is_display_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QSet<OAINestedLocation> getLocations() const;
    void setLocations(const QSet<OAINestedLocation> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QSet<OAINestedPlatform> getPlatforms() const;
    void setPlatforms(const QSet<OAINestedPlatform> &platforms);
    bool is_platforms_Set() const;
    bool is_platforms_Valid() const;

    QSet<OAINestedRegion> getRegions() const;
    void setRegions(const QSet<OAINestedRegion> &regions);
    bool is_regions_Set() const;
    bool is_regions_Valid() const;

    QSet<OAINestedDeviceRole> getRoles() const;
    void setRoles(const QSet<OAINestedDeviceRole> &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    QSet<OAINestedSiteGroup> getSiteGroups() const;
    void setSiteGroups(const QSet<OAINestedSiteGroup> &site_groups);
    bool is_site_groups_Set() const;
    bool is_site_groups_Valid() const;

    QSet<OAINestedSite> getSites() const;
    void setSites(const QSet<OAINestedSite> &sites);
    bool is_sites_Set() const;
    bool is_sites_Valid() const;

    QSet<QString> getTags() const;
    void setTags(const QSet<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QSet<OAINestedTenantGroup> getTenantGroups() const;
    void setTenantGroups(const QSet<OAINestedTenantGroup> &tenant_groups);
    bool is_tenant_groups_Set() const;
    bool is_tenant_groups_Valid() const;

    QSet<OAINestedTenant> getTenants() const;
    void setTenants(const QSet<OAINestedTenant> &tenants);
    bool is_tenants_Set() const;
    bool is_tenants_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QSet<OAINestedClusterGroup> m_cluster_groups;
    bool m_cluster_groups_isSet;
    bool m_cluster_groups_isValid;

    QSet<OAINestedClusterType> m_cluster_types;
    bool m_cluster_types_isSet;
    bool m_cluster_types_isValid;

    QSet<OAINestedCluster> m_clusters;
    bool m_clusters_isSet;
    bool m_clusters_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    OAIObject m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QSet<OAINestedDeviceType> m_device_types;
    bool m_device_types_isSet;
    bool m_device_types_isValid;

    QString m_display;
    bool m_display_isSet;
    bool m_display_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QSet<OAINestedLocation> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QSet<OAINestedPlatform> m_platforms;
    bool m_platforms_isSet;
    bool m_platforms_isValid;

    QSet<OAINestedRegion> m_regions;
    bool m_regions_isSet;
    bool m_regions_isValid;

    QSet<OAINestedDeviceRole> m_roles;
    bool m_roles_isSet;
    bool m_roles_isValid;

    QSet<OAINestedSiteGroup> m_site_groups;
    bool m_site_groups_isSet;
    bool m_site_groups_isValid;

    QSet<OAINestedSite> m_sites;
    bool m_sites_isSet;
    bool m_sites_isValid;

    QSet<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QSet<OAINestedTenantGroup> m_tenant_groups;
    bool m_tenant_groups_isSet;
    bool m_tenant_groups_isValid;

    QSet<OAINestedTenant> m_tenants;
    bool m_tenants_isSet;
    bool m_tenants_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigContext)

#endif // OAIConfigContext_H
