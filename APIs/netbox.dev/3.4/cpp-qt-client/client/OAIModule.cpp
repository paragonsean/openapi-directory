/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModule::OAIModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModule::OAIModule() {
    this->initializeModel();
}

OAIModule::~OAIModule() {}

void OAIModule::initializeModel() {

    m_asset_tag_isSet = false;
    m_asset_tag_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_module_bay_isSet = false;
    m_module_bay_isValid = false;

    m_module_type_isSet = false;
    m_module_type_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModule::fromJsonObject(QJsonObject json) {

    m_asset_tag_isValid = ::OpenAPI::fromJsonValue(m_asset_tag, json[QString("asset_tag")]);
    m_asset_tag_isSet = !json[QString("asset_tag")].isNull() && m_asset_tag_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_module_bay_isValid = ::OpenAPI::fromJsonValue(m_module_bay, json[QString("module_bay")]);
    m_module_bay_isSet = !json[QString("module_bay")].isNull() && m_module_bay_isValid;

    m_module_type_isValid = ::OpenAPI::fromJsonValue(m_module_type, json[QString("module_type")]);
    m_module_type_isSet = !json[QString("module_type")].isNull() && m_module_type_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModule::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_tag_isSet) {
        obj.insert(QString("asset_tag"), ::OpenAPI::toJsonValue(m_asset_tag));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_module_bay.isSet()) {
        obj.insert(QString("module_bay"), ::OpenAPI::toJsonValue(m_module_bay));
    }
    if (m_module_type.isSet()) {
        obj.insert(QString("module_type"), ::OpenAPI::toJsonValue(m_module_type));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIModule::getAssetTag() const {
    return m_asset_tag;
}
void OAIModule::setAssetTag(const QString &asset_tag) {
    m_asset_tag = asset_tag;
    m_asset_tag_isSet = true;
}

bool OAIModule::is_asset_tag_Set() const{
    return m_asset_tag_isSet;
}

bool OAIModule::is_asset_tag_Valid() const{
    return m_asset_tag_isValid;
}

QString OAIModule::getComments() const {
    return m_comments;
}
void OAIModule::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIModule::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIModule::is_comments_Valid() const{
    return m_comments_isValid;
}

QDateTime OAIModule::getCreated() const {
    return m_created;
}
void OAIModule::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIModule::is_created_Set() const{
    return m_created_isSet;
}

bool OAIModule::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIModule::getCustomFields() const {
    return m_custom_fields;
}
void OAIModule::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIModule::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIModule::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIModule::getDescription() const {
    return m_description;
}
void OAIModule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModule::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIModule::getDevice() const {
    return m_device;
}
void OAIModule::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIModule::is_device_Set() const{
    return m_device_isSet;
}

bool OAIModule::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIModule::getDisplay() const {
    return m_display;
}
void OAIModule::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIModule::is_display_Set() const{
    return m_display_isSet;
}

bool OAIModule::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIModule::getId() const {
    return m_id;
}
void OAIModule::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIModule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIModule::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIModule::getLastUpdated() const {
    return m_last_updated;
}
void OAIModule::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIModule::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIModule::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAINestedModuleBay OAIModule::getModuleBay() const {
    return m_module_bay;
}
void OAIModule::setModuleBay(const OAINestedModuleBay &module_bay) {
    m_module_bay = module_bay;
    m_module_bay_isSet = true;
}

bool OAIModule::is_module_bay_Set() const{
    return m_module_bay_isSet;
}

bool OAIModule::is_module_bay_Valid() const{
    return m_module_bay_isValid;
}

OAINestedModuleType OAIModule::getModuleType() const {
    return m_module_type;
}
void OAIModule::setModuleType(const OAINestedModuleType &module_type) {
    m_module_type = module_type;
    m_module_type_isSet = true;
}

bool OAIModule::is_module_type_Set() const{
    return m_module_type_isSet;
}

bool OAIModule::is_module_type_Valid() const{
    return m_module_type_isValid;
}

QString OAIModule::getSerial() const {
    return m_serial;
}
void OAIModule::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIModule::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIModule::is_serial_Valid() const{
    return m_serial_isValid;
}

OAIStatus_8 OAIModule::getStatus() const {
    return m_status;
}
void OAIModule::setStatus(const OAIStatus_8 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIModule::is_status_Set() const{
    return m_status_isSet;
}

bool OAIModule::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAINestedTag> OAIModule::getTags() const {
    return m_tags;
}
void OAIModule::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIModule::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIModule::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIModule::getUrl() const {
    return m_url;
}
void OAIModule::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIModule::is_url_Set() const{
    return m_url_isSet;
}

bool OAIModule::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_bay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_module_bay_isValid && m_module_type_isValid && true;
}

} // namespace OpenAPI
