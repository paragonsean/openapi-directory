/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableCircuitTermination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableCircuitTermination::OAIWritableCircuitTermination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableCircuitTermination::OAIWritableCircuitTermination() {
    this->initializeModel();
}

OAIWritableCircuitTermination::~OAIWritableCircuitTermination() {}

void OAIWritableCircuitTermination::initializeModel() {

    m__occupied_isSet = false;
    m__occupied_isValid = false;

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_cable_end_isSet = false;
    m_cable_end_isValid = false;

    m_circuit_isSet = false;
    m_circuit_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_link_peers_isSet = false;
    m_link_peers_isValid = false;

    m_link_peers_type_isSet = false;
    m_link_peers_type_isValid = false;

    m_mark_connected_isSet = false;
    m_mark_connected_isValid = false;

    m_port_speed_isSet = false;
    m_port_speed_isValid = false;

    m_pp_info_isSet = false;
    m_pp_info_isValid = false;

    m_provider_network_isSet = false;
    m_provider_network_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_term_side_isSet = false;
    m_term_side_isValid = false;

    m_upstream_speed_isSet = false;
    m_upstream_speed_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_xconnect_id_isSet = false;
    m_xconnect_id_isValid = false;
}

void OAIWritableCircuitTermination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableCircuitTermination::fromJsonObject(QJsonObject json) {

    m__occupied_isValid = ::OpenAPI::fromJsonValue(m__occupied, json[QString("_occupied")]);
    m__occupied_isSet = !json[QString("_occupied")].isNull() && m__occupied_isValid;

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_cable_end_isValid = ::OpenAPI::fromJsonValue(m_cable_end, json[QString("cable_end")]);
    m_cable_end_isSet = !json[QString("cable_end")].isNull() && m_cable_end_isValid;

    m_circuit_isValid = ::OpenAPI::fromJsonValue(m_circuit, json[QString("circuit")]);
    m_circuit_isSet = !json[QString("circuit")].isNull() && m_circuit_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_link_peers_isValid = ::OpenAPI::fromJsonValue(m_link_peers, json[QString("link_peers")]);
    m_link_peers_isSet = !json[QString("link_peers")].isNull() && m_link_peers_isValid;

    m_link_peers_type_isValid = ::OpenAPI::fromJsonValue(m_link_peers_type, json[QString("link_peers_type")]);
    m_link_peers_type_isSet = !json[QString("link_peers_type")].isNull() && m_link_peers_type_isValid;

    m_mark_connected_isValid = ::OpenAPI::fromJsonValue(m_mark_connected, json[QString("mark_connected")]);
    m_mark_connected_isSet = !json[QString("mark_connected")].isNull() && m_mark_connected_isValid;

    m_port_speed_isValid = ::OpenAPI::fromJsonValue(m_port_speed, json[QString("port_speed")]);
    m_port_speed_isSet = !json[QString("port_speed")].isNull() && m_port_speed_isValid;

    m_pp_info_isValid = ::OpenAPI::fromJsonValue(m_pp_info, json[QString("pp_info")]);
    m_pp_info_isSet = !json[QString("pp_info")].isNull() && m_pp_info_isValid;

    m_provider_network_isValid = ::OpenAPI::fromJsonValue(m_provider_network, json[QString("provider_network")]);
    m_provider_network_isSet = !json[QString("provider_network")].isNull() && m_provider_network_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_term_side_isValid = ::OpenAPI::fromJsonValue(m_term_side, json[QString("term_side")]);
    m_term_side_isSet = !json[QString("term_side")].isNull() && m_term_side_isValid;

    m_upstream_speed_isValid = ::OpenAPI::fromJsonValue(m_upstream_speed, json[QString("upstream_speed")]);
    m_upstream_speed_isSet = !json[QString("upstream_speed")].isNull() && m_upstream_speed_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_xconnect_id_isValid = ::OpenAPI::fromJsonValue(m_xconnect_id, json[QString("xconnect_id")]);
    m_xconnect_id_isSet = !json[QString("xconnect_id")].isNull() && m_xconnect_id_isValid;
}

QString OAIWritableCircuitTermination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableCircuitTermination::asJsonObject() const {
    QJsonObject obj;
    if (m__occupied_isSet) {
        obj.insert(QString("_occupied"), ::OpenAPI::toJsonValue(m__occupied));
    }
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_cable_end_isSet) {
        obj.insert(QString("cable_end"), ::OpenAPI::toJsonValue(m_cable_end));
    }
    if (m_circuit_isSet) {
        obj.insert(QString("circuit"), ::OpenAPI::toJsonValue(m_circuit));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_link_peers.size() > 0) {
        obj.insert(QString("link_peers"), ::OpenAPI::toJsonValue(m_link_peers));
    }
    if (m_link_peers_type_isSet) {
        obj.insert(QString("link_peers_type"), ::OpenAPI::toJsonValue(m_link_peers_type));
    }
    if (m_mark_connected_isSet) {
        obj.insert(QString("mark_connected"), ::OpenAPI::toJsonValue(m_mark_connected));
    }
    if (m_port_speed_isSet) {
        obj.insert(QString("port_speed"), ::OpenAPI::toJsonValue(m_port_speed));
    }
    if (m_pp_info_isSet) {
        obj.insert(QString("pp_info"), ::OpenAPI::toJsonValue(m_pp_info));
    }
    if (m_provider_network_isSet) {
        obj.insert(QString("provider_network"), ::OpenAPI::toJsonValue(m_provider_network));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_term_side_isSet) {
        obj.insert(QString("term_side"), ::OpenAPI::toJsonValue(m_term_side));
    }
    if (m_upstream_speed_isSet) {
        obj.insert(QString("upstream_speed"), ::OpenAPI::toJsonValue(m_upstream_speed));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_xconnect_id_isSet) {
        obj.insert(QString("xconnect_id"), ::OpenAPI::toJsonValue(m_xconnect_id));
    }
    return obj;
}

bool OAIWritableCircuitTermination::isOccupied() const {
    return m__occupied;
}
void OAIWritableCircuitTermination::setOccupied(const bool &_occupied) {
    m__occupied = _occupied;
    m__occupied_isSet = true;
}

bool OAIWritableCircuitTermination::is__occupied_Set() const{
    return m__occupied_isSet;
}

bool OAIWritableCircuitTermination::is__occupied_Valid() const{
    return m__occupied_isValid;
}

OAINestedCable OAIWritableCircuitTermination::getCable() const {
    return m_cable;
}
void OAIWritableCircuitTermination::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAIWritableCircuitTermination::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAIWritableCircuitTermination::is_cable_Valid() const{
    return m_cable_isValid;
}

QString OAIWritableCircuitTermination::getCableEnd() const {
    return m_cable_end;
}
void OAIWritableCircuitTermination::setCableEnd(const QString &cable_end) {
    m_cable_end = cable_end;
    m_cable_end_isSet = true;
}

bool OAIWritableCircuitTermination::is_cable_end_Set() const{
    return m_cable_end_isSet;
}

bool OAIWritableCircuitTermination::is_cable_end_Valid() const{
    return m_cable_end_isValid;
}

qint32 OAIWritableCircuitTermination::getCircuit() const {
    return m_circuit;
}
void OAIWritableCircuitTermination::setCircuit(const qint32 &circuit) {
    m_circuit = circuit;
    m_circuit_isSet = true;
}

bool OAIWritableCircuitTermination::is_circuit_Set() const{
    return m_circuit_isSet;
}

bool OAIWritableCircuitTermination::is_circuit_Valid() const{
    return m_circuit_isValid;
}

QDateTime OAIWritableCircuitTermination::getCreated() const {
    return m_created;
}
void OAIWritableCircuitTermination::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableCircuitTermination::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableCircuitTermination::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableCircuitTermination::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableCircuitTermination::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableCircuitTermination::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableCircuitTermination::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIWritableCircuitTermination::getDescription() const {
    return m_description;
}
void OAIWritableCircuitTermination::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableCircuitTermination::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableCircuitTermination::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableCircuitTermination::getDisplay() const {
    return m_display;
}
void OAIWritableCircuitTermination::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableCircuitTermination::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableCircuitTermination::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIWritableCircuitTermination::getId() const {
    return m_id;
}
void OAIWritableCircuitTermination::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableCircuitTermination::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableCircuitTermination::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableCircuitTermination::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableCircuitTermination::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableCircuitTermination::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableCircuitTermination::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<QString> OAIWritableCircuitTermination::getLinkPeers() const {
    return m_link_peers;
}
void OAIWritableCircuitTermination::setLinkPeers(const QList<QString> &link_peers) {
    m_link_peers = link_peers;
    m_link_peers_isSet = true;
}

bool OAIWritableCircuitTermination::is_link_peers_Set() const{
    return m_link_peers_isSet;
}

bool OAIWritableCircuitTermination::is_link_peers_Valid() const{
    return m_link_peers_isValid;
}

QString OAIWritableCircuitTermination::getLinkPeersType() const {
    return m_link_peers_type;
}
void OAIWritableCircuitTermination::setLinkPeersType(const QString &link_peers_type) {
    m_link_peers_type = link_peers_type;
    m_link_peers_type_isSet = true;
}

bool OAIWritableCircuitTermination::is_link_peers_type_Set() const{
    return m_link_peers_type_isSet;
}

bool OAIWritableCircuitTermination::is_link_peers_type_Valid() const{
    return m_link_peers_type_isValid;
}

bool OAIWritableCircuitTermination::isMarkConnected() const {
    return m_mark_connected;
}
void OAIWritableCircuitTermination::setMarkConnected(const bool &mark_connected) {
    m_mark_connected = mark_connected;
    m_mark_connected_isSet = true;
}

bool OAIWritableCircuitTermination::is_mark_connected_Set() const{
    return m_mark_connected_isSet;
}

bool OAIWritableCircuitTermination::is_mark_connected_Valid() const{
    return m_mark_connected_isValid;
}

qint32 OAIWritableCircuitTermination::getPortSpeed() const {
    return m_port_speed;
}
void OAIWritableCircuitTermination::setPortSpeed(const qint32 &port_speed) {
    m_port_speed = port_speed;
    m_port_speed_isSet = true;
}

bool OAIWritableCircuitTermination::is_port_speed_Set() const{
    return m_port_speed_isSet;
}

bool OAIWritableCircuitTermination::is_port_speed_Valid() const{
    return m_port_speed_isValid;
}

QString OAIWritableCircuitTermination::getPpInfo() const {
    return m_pp_info;
}
void OAIWritableCircuitTermination::setPpInfo(const QString &pp_info) {
    m_pp_info = pp_info;
    m_pp_info_isSet = true;
}

bool OAIWritableCircuitTermination::is_pp_info_Set() const{
    return m_pp_info_isSet;
}

bool OAIWritableCircuitTermination::is_pp_info_Valid() const{
    return m_pp_info_isValid;
}

qint32 OAIWritableCircuitTermination::getProviderNetwork() const {
    return m_provider_network;
}
void OAIWritableCircuitTermination::setProviderNetwork(const qint32 &provider_network) {
    m_provider_network = provider_network;
    m_provider_network_isSet = true;
}

bool OAIWritableCircuitTermination::is_provider_network_Set() const{
    return m_provider_network_isSet;
}

bool OAIWritableCircuitTermination::is_provider_network_Valid() const{
    return m_provider_network_isValid;
}

qint32 OAIWritableCircuitTermination::getSite() const {
    return m_site;
}
void OAIWritableCircuitTermination::setSite(const qint32 &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIWritableCircuitTermination::is_site_Set() const{
    return m_site_isSet;
}

bool OAIWritableCircuitTermination::is_site_Valid() const{
    return m_site_isValid;
}

QList<OAINestedTag> OAIWritableCircuitTermination::getTags() const {
    return m_tags;
}
void OAIWritableCircuitTermination::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableCircuitTermination::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableCircuitTermination::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIWritableCircuitTermination::getTermSide() const {
    return m_term_side;
}
void OAIWritableCircuitTermination::setTermSide(const QString &term_side) {
    m_term_side = term_side;
    m_term_side_isSet = true;
}

bool OAIWritableCircuitTermination::is_term_side_Set() const{
    return m_term_side_isSet;
}

bool OAIWritableCircuitTermination::is_term_side_Valid() const{
    return m_term_side_isValid;
}

qint32 OAIWritableCircuitTermination::getUpstreamSpeed() const {
    return m_upstream_speed;
}
void OAIWritableCircuitTermination::setUpstreamSpeed(const qint32 &upstream_speed) {
    m_upstream_speed = upstream_speed;
    m_upstream_speed_isSet = true;
}

bool OAIWritableCircuitTermination::is_upstream_speed_Set() const{
    return m_upstream_speed_isSet;
}

bool OAIWritableCircuitTermination::is_upstream_speed_Valid() const{
    return m_upstream_speed_isValid;
}

QString OAIWritableCircuitTermination::getUrl() const {
    return m_url;
}
void OAIWritableCircuitTermination::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableCircuitTermination::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableCircuitTermination::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWritableCircuitTermination::getXconnectId() const {
    return m_xconnect_id;
}
void OAIWritableCircuitTermination::setXconnectId(const QString &xconnect_id) {
    m_xconnect_id = xconnect_id;
    m_xconnect_id_isSet = true;
}

bool OAIWritableCircuitTermination::is_xconnect_id_Set() const{
    return m_xconnect_id_isSet;
}

bool OAIWritableCircuitTermination::is_xconnect_id_Valid() const{
    return m_xconnect_id_isValid;
}

bool OAIWritableCircuitTermination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__occupied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pp_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xconnect_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableCircuitTermination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_circuit_isValid && m_term_side_isValid && true;
}

} // namespace OpenAPI
