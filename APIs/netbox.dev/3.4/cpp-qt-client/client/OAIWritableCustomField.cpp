/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableCustomField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableCustomField::OAIWritableCustomField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableCustomField::OAIWritableCustomField() {
    this->initializeModel();
}

OAIWritableCustomField::~OAIWritableCustomField() {}

void OAIWritableCustomField::initializeModel() {

    m_choices_isSet = false;
    m_choices_isValid = false;

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_filter_logic_isSet = false;
    m_filter_logic_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_search_weight_isSet = false;
    m_search_weight_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ui_visibility_isSet = false;
    m_ui_visibility_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_validation_maximum_isSet = false;
    m_validation_maximum_isValid = false;

    m_validation_minimum_isSet = false;
    m_validation_minimum_isValid = false;

    m_validation_regex_isSet = false;
    m_validation_regex_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIWritableCustomField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableCustomField::fromJsonObject(QJsonObject json) {

    m_choices_isValid = ::OpenAPI::fromJsonValue(m_choices, json[QString("choices")]);
    m_choices_isSet = !json[QString("choices")].isNull() && m_choices_isValid;

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("content_types")]);
    m_content_types_isSet = !json[QString("content_types")].isNull() && m_content_types_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_filter_logic_isValid = ::OpenAPI::fromJsonValue(m_filter_logic, json[QString("filter_logic")]);
    m_filter_logic_isSet = !json[QString("filter_logic")].isNull() && m_filter_logic_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("group_name")]);
    m_group_name_isSet = !json[QString("group_name")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_search_weight_isValid = ::OpenAPI::fromJsonValue(m_search_weight, json[QString("search_weight")]);
    m_search_weight_isSet = !json[QString("search_weight")].isNull() && m_search_weight_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_ui_visibility_isValid = ::OpenAPI::fromJsonValue(m_ui_visibility, json[QString("ui_visibility")]);
    m_ui_visibility_isSet = !json[QString("ui_visibility")].isNull() && m_ui_visibility_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_validation_maximum_isValid = ::OpenAPI::fromJsonValue(m_validation_maximum, json[QString("validation_maximum")]);
    m_validation_maximum_isSet = !json[QString("validation_maximum")].isNull() && m_validation_maximum_isValid;

    m_validation_minimum_isValid = ::OpenAPI::fromJsonValue(m_validation_minimum, json[QString("validation_minimum")]);
    m_validation_minimum_isSet = !json[QString("validation_minimum")].isNull() && m_validation_minimum_isValid;

    m_validation_regex_isValid = ::OpenAPI::fromJsonValue(m_validation_regex, json[QString("validation_regex")]);
    m_validation_regex_isSet = !json[QString("validation_regex")].isNull() && m_validation_regex_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIWritableCustomField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableCustomField::asJsonObject() const {
    QJsonObject obj;
    if (m_choices.size() > 0) {
        obj.insert(QString("choices"), ::OpenAPI::toJsonValue(m_choices));
    }
    if (m_content_types.size() > 0) {
        obj.insert(QString("content_types"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_filter_logic_isSet) {
        obj.insert(QString("filter_logic"), ::OpenAPI::toJsonValue(m_filter_logic));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("group_name"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_search_weight_isSet) {
        obj.insert(QString("search_weight"), ::OpenAPI::toJsonValue(m_search_weight));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ui_visibility_isSet) {
        obj.insert(QString("ui_visibility"), ::OpenAPI::toJsonValue(m_ui_visibility));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_validation_maximum_isSet) {
        obj.insert(QString("validation_maximum"), ::OpenAPI::toJsonValue(m_validation_maximum));
    }
    if (m_validation_minimum_isSet) {
        obj.insert(QString("validation_minimum"), ::OpenAPI::toJsonValue(m_validation_minimum));
    }
    if (m_validation_regex_isSet) {
        obj.insert(QString("validation_regex"), ::OpenAPI::toJsonValue(m_validation_regex));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QList<QString> OAIWritableCustomField::getChoices() const {
    return m_choices;
}
void OAIWritableCustomField::setChoices(const QList<QString> &choices) {
    m_choices = choices;
    m_choices_isSet = true;
}

bool OAIWritableCustomField::is_choices_Set() const{
    return m_choices_isSet;
}

bool OAIWritableCustomField::is_choices_Valid() const{
    return m_choices_isValid;
}

QSet<QString> OAIWritableCustomField::getContentTypes() const {
    return m_content_types;
}
void OAIWritableCustomField::setContentTypes(const QSet<QString> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAIWritableCustomField::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAIWritableCustomField::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QDateTime OAIWritableCustomField::getCreated() const {
    return m_created;
}
void OAIWritableCustomField::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableCustomField::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableCustomField::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWritableCustomField::getDataType() const {
    return m_data_type;
}
void OAIWritableCustomField::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIWritableCustomField::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIWritableCustomField::is_data_type_Valid() const{
    return m_data_type_isValid;
}

OAIObject OAIWritableCustomField::getRDefault() const {
    return m_r_default;
}
void OAIWritableCustomField::setRDefault(const OAIObject &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIWritableCustomField::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIWritableCustomField::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIWritableCustomField::getDescription() const {
    return m_description;
}
void OAIWritableCustomField::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableCustomField::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableCustomField::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableCustomField::getDisplay() const {
    return m_display;
}
void OAIWritableCustomField::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableCustomField::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableCustomField::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIWritableCustomField::getFilterLogic() const {
    return m_filter_logic;
}
void OAIWritableCustomField::setFilterLogic(const QString &filter_logic) {
    m_filter_logic = filter_logic;
    m_filter_logic_isSet = true;
}

bool OAIWritableCustomField::is_filter_logic_Set() const{
    return m_filter_logic_isSet;
}

bool OAIWritableCustomField::is_filter_logic_Valid() const{
    return m_filter_logic_isValid;
}

QString OAIWritableCustomField::getGroupName() const {
    return m_group_name;
}
void OAIWritableCustomField::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIWritableCustomField::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIWritableCustomField::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAIWritableCustomField::getId() const {
    return m_id;
}
void OAIWritableCustomField::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableCustomField::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableCustomField::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableCustomField::getLabel() const {
    return m_label;
}
void OAIWritableCustomField::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIWritableCustomField::is_label_Set() const{
    return m_label_isSet;
}

bool OAIWritableCustomField::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIWritableCustomField::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableCustomField::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableCustomField::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableCustomField::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableCustomField::getName() const {
    return m_name;
}
void OAIWritableCustomField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableCustomField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableCustomField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritableCustomField::getObjectType() const {
    return m_object_type;
}
void OAIWritableCustomField::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIWritableCustomField::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIWritableCustomField::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIWritableCustomField::isRequired() const {
    return m_required;
}
void OAIWritableCustomField::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIWritableCustomField::is_required_Set() const{
    return m_required_isSet;
}

bool OAIWritableCustomField::is_required_Valid() const{
    return m_required_isValid;
}

qint32 OAIWritableCustomField::getSearchWeight() const {
    return m_search_weight;
}
void OAIWritableCustomField::setSearchWeight(const qint32 &search_weight) {
    m_search_weight = search_weight;
    m_search_weight_isSet = true;
}

bool OAIWritableCustomField::is_search_weight_Set() const{
    return m_search_weight_isSet;
}

bool OAIWritableCustomField::is_search_weight_Valid() const{
    return m_search_weight_isValid;
}

QString OAIWritableCustomField::getType() const {
    return m_type;
}
void OAIWritableCustomField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritableCustomField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritableCustomField::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWritableCustomField::getUiVisibility() const {
    return m_ui_visibility;
}
void OAIWritableCustomField::setUiVisibility(const QString &ui_visibility) {
    m_ui_visibility = ui_visibility;
    m_ui_visibility_isSet = true;
}

bool OAIWritableCustomField::is_ui_visibility_Set() const{
    return m_ui_visibility_isSet;
}

bool OAIWritableCustomField::is_ui_visibility_Valid() const{
    return m_ui_visibility_isValid;
}

QString OAIWritableCustomField::getUrl() const {
    return m_url;
}
void OAIWritableCustomField::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableCustomField::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableCustomField::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIWritableCustomField::getValidationMaximum() const {
    return m_validation_maximum;
}
void OAIWritableCustomField::setValidationMaximum(const qint32 &validation_maximum) {
    m_validation_maximum = validation_maximum;
    m_validation_maximum_isSet = true;
}

bool OAIWritableCustomField::is_validation_maximum_Set() const{
    return m_validation_maximum_isSet;
}

bool OAIWritableCustomField::is_validation_maximum_Valid() const{
    return m_validation_maximum_isValid;
}

qint32 OAIWritableCustomField::getValidationMinimum() const {
    return m_validation_minimum;
}
void OAIWritableCustomField::setValidationMinimum(const qint32 &validation_minimum) {
    m_validation_minimum = validation_minimum;
    m_validation_minimum_isSet = true;
}

bool OAIWritableCustomField::is_validation_minimum_Set() const{
    return m_validation_minimum_isSet;
}

bool OAIWritableCustomField::is_validation_minimum_Valid() const{
    return m_validation_minimum_isValid;
}

QString OAIWritableCustomField::getValidationRegex() const {
    return m_validation_regex;
}
void OAIWritableCustomField::setValidationRegex(const QString &validation_regex) {
    m_validation_regex = validation_regex;
    m_validation_regex_isSet = true;
}

bool OAIWritableCustomField::is_validation_regex_Set() const{
    return m_validation_regex_isSet;
}

bool OAIWritableCustomField::is_validation_regex_Valid() const{
    return m_validation_regex_isValid;
}

qint32 OAIWritableCustomField::getWeight() const {
    return m_weight;
}
void OAIWritableCustomField::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIWritableCustomField::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIWritableCustomField::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIWritableCustomField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_logic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableCustomField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_types_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
