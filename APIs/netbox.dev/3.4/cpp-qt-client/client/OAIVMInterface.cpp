/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMInterface::OAIVMInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMInterface::OAIVMInterface() {
    this->initializeModel();
}

OAIVMInterface::~OAIVMInterface() {}

void OAIVMInterface::initializeModel() {

    m_bridge_isSet = false;
    m_bridge_isValid = false;

    m_count_fhrp_groups_isSet = false;
    m_count_fhrp_groups_isValid = false;

    m_count_ipaddresses_isSet = false;
    m_count_ipaddresses_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_l2vpn_termination_isSet = false;
    m_l2vpn_termination_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mtu_isSet = false;
    m_mtu_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_tagged_vlans_isSet = false;
    m_tagged_vlans_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_untagged_vlan_isSet = false;
    m_untagged_vlan_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_virtual_machine_isSet = false;
    m_virtual_machine_isValid = false;

    m_vrf_isSet = false;
    m_vrf_isValid = false;
}

void OAIVMInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMInterface::fromJsonObject(QJsonObject json) {

    m_bridge_isValid = ::OpenAPI::fromJsonValue(m_bridge, json[QString("bridge")]);
    m_bridge_isSet = !json[QString("bridge")].isNull() && m_bridge_isValid;

    m_count_fhrp_groups_isValid = ::OpenAPI::fromJsonValue(m_count_fhrp_groups, json[QString("count_fhrp_groups")]);
    m_count_fhrp_groups_isSet = !json[QString("count_fhrp_groups")].isNull() && m_count_fhrp_groups_isValid;

    m_count_ipaddresses_isValid = ::OpenAPI::fromJsonValue(m_count_ipaddresses, json[QString("count_ipaddresses")]);
    m_count_ipaddresses_isSet = !json[QString("count_ipaddresses")].isNull() && m_count_ipaddresses_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_l2vpn_termination_isValid = ::OpenAPI::fromJsonValue(m_l2vpn_termination, json[QString("l2vpn_termination")]);
    m_l2vpn_termination_isSet = !json[QString("l2vpn_termination")].isNull() && m_l2vpn_termination_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("mac_address")]);
    m_mac_address_isSet = !json[QString("mac_address")].isNull() && m_mac_address_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mtu_isValid = ::OpenAPI::fromJsonValue(m_mtu, json[QString("mtu")]);
    m_mtu_isSet = !json[QString("mtu")].isNull() && m_mtu_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_tagged_vlans_isValid = ::OpenAPI::fromJsonValue(m_tagged_vlans, json[QString("tagged_vlans")]);
    m_tagged_vlans_isSet = !json[QString("tagged_vlans")].isNull() && m_tagged_vlans_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_untagged_vlan_isValid = ::OpenAPI::fromJsonValue(m_untagged_vlan, json[QString("untagged_vlan")]);
    m_untagged_vlan_isSet = !json[QString("untagged_vlan")].isNull() && m_untagged_vlan_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine, json[QString("virtual_machine")]);
    m_virtual_machine_isSet = !json[QString("virtual_machine")].isNull() && m_virtual_machine_isValid;

    m_vrf_isValid = ::OpenAPI::fromJsonValue(m_vrf, json[QString("vrf")]);
    m_vrf_isSet = !json[QString("vrf")].isNull() && m_vrf_isValid;
}

QString OAIVMInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_bridge.isSet()) {
        obj.insert(QString("bridge"), ::OpenAPI::toJsonValue(m_bridge));
    }
    if (m_count_fhrp_groups_isSet) {
        obj.insert(QString("count_fhrp_groups"), ::OpenAPI::toJsonValue(m_count_fhrp_groups));
    }
    if (m_count_ipaddresses_isSet) {
        obj.insert(QString("count_ipaddresses"), ::OpenAPI::toJsonValue(m_count_ipaddresses));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_l2vpn_termination.isSet()) {
        obj.insert(QString("l2vpn_termination"), ::OpenAPI::toJsonValue(m_l2vpn_termination));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("mac_address"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mtu_isSet) {
        obj.insert(QString("mtu"), ::OpenAPI::toJsonValue(m_mtu));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_tagged_vlans.size() > 0) {
        obj.insert(QString("tagged_vlans"), ::OpenAPI::toJsonValue(m_tagged_vlans));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_untagged_vlan.isSet()) {
        obj.insert(QString("untagged_vlan"), ::OpenAPI::toJsonValue(m_untagged_vlan));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_virtual_machine.isSet()) {
        obj.insert(QString("virtual_machine"), ::OpenAPI::toJsonValue(m_virtual_machine));
    }
    if (m_vrf.isSet()) {
        obj.insert(QString("vrf"), ::OpenAPI::toJsonValue(m_vrf));
    }
    return obj;
}

OAINestedVMInterface OAIVMInterface::getBridge() const {
    return m_bridge;
}
void OAIVMInterface::setBridge(const OAINestedVMInterface &bridge) {
    m_bridge = bridge;
    m_bridge_isSet = true;
}

bool OAIVMInterface::is_bridge_Set() const{
    return m_bridge_isSet;
}

bool OAIVMInterface::is_bridge_Valid() const{
    return m_bridge_isValid;
}

qint32 OAIVMInterface::getCountFhrpGroups() const {
    return m_count_fhrp_groups;
}
void OAIVMInterface::setCountFhrpGroups(const qint32 &count_fhrp_groups) {
    m_count_fhrp_groups = count_fhrp_groups;
    m_count_fhrp_groups_isSet = true;
}

bool OAIVMInterface::is_count_fhrp_groups_Set() const{
    return m_count_fhrp_groups_isSet;
}

bool OAIVMInterface::is_count_fhrp_groups_Valid() const{
    return m_count_fhrp_groups_isValid;
}

qint32 OAIVMInterface::getCountIpaddresses() const {
    return m_count_ipaddresses;
}
void OAIVMInterface::setCountIpaddresses(const qint32 &count_ipaddresses) {
    m_count_ipaddresses = count_ipaddresses;
    m_count_ipaddresses_isSet = true;
}

bool OAIVMInterface::is_count_ipaddresses_Set() const{
    return m_count_ipaddresses_isSet;
}

bool OAIVMInterface::is_count_ipaddresses_Valid() const{
    return m_count_ipaddresses_isValid;
}

QDateTime OAIVMInterface::getCreated() const {
    return m_created;
}
void OAIVMInterface::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIVMInterface::is_created_Set() const{
    return m_created_isSet;
}

bool OAIVMInterface::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIVMInterface::getCustomFields() const {
    return m_custom_fields;
}
void OAIVMInterface::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIVMInterface::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIVMInterface::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIVMInterface::getDescription() const {
    return m_description;
}
void OAIVMInterface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVMInterface::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVMInterface::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVMInterface::getDisplay() const {
    return m_display;
}
void OAIVMInterface::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIVMInterface::is_display_Set() const{
    return m_display_isSet;
}

bool OAIVMInterface::is_display_Valid() const{
    return m_display_isValid;
}

bool OAIVMInterface::isEnabled() const {
    return m_enabled;
}
void OAIVMInterface::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIVMInterface::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIVMInterface::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIVMInterface::getId() const {
    return m_id;
}
void OAIVMInterface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVMInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVMInterface::is_id_Valid() const{
    return m_id_isValid;
}

OAINestedL2VPNTermination OAIVMInterface::getL2vpnTermination() const {
    return m_l2vpn_termination;
}
void OAIVMInterface::setL2vpnTermination(const OAINestedL2VPNTermination &l2vpn_termination) {
    m_l2vpn_termination = l2vpn_termination;
    m_l2vpn_termination_isSet = true;
}

bool OAIVMInterface::is_l2vpn_termination_Set() const{
    return m_l2vpn_termination_isSet;
}

bool OAIVMInterface::is_l2vpn_termination_Valid() const{
    return m_l2vpn_termination_isValid;
}

QDateTime OAIVMInterface::getLastUpdated() const {
    return m_last_updated;
}
void OAIVMInterface::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIVMInterface::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIVMInterface::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIVMInterface::getMacAddress() const {
    return m_mac_address;
}
void OAIVMInterface::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIVMInterface::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIVMInterface::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

OAIMode OAIVMInterface::getMode() const {
    return m_mode;
}
void OAIVMInterface::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIVMInterface::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIVMInterface::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIVMInterface::getMtu() const {
    return m_mtu;
}
void OAIVMInterface::setMtu(const qint32 &mtu) {
    m_mtu = mtu;
    m_mtu_isSet = true;
}

bool OAIVMInterface::is_mtu_Set() const{
    return m_mtu_isSet;
}

bool OAIVMInterface::is_mtu_Valid() const{
    return m_mtu_isValid;
}

QString OAIVMInterface::getName() const {
    return m_name;
}
void OAIVMInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVMInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVMInterface::is_name_Valid() const{
    return m_name_isValid;
}

OAINestedVMInterface OAIVMInterface::getParent() const {
    return m_parent;
}
void OAIVMInterface::setParent(const OAINestedVMInterface &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIVMInterface::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIVMInterface::is_parent_Valid() const{
    return m_parent_isValid;
}

QSet<OAINestedVLAN> OAIVMInterface::getTaggedVlans() const {
    return m_tagged_vlans;
}
void OAIVMInterface::setTaggedVlans(const QSet<OAINestedVLAN> &tagged_vlans) {
    m_tagged_vlans = tagged_vlans;
    m_tagged_vlans_isSet = true;
}

bool OAIVMInterface::is_tagged_vlans_Set() const{
    return m_tagged_vlans_isSet;
}

bool OAIVMInterface::is_tagged_vlans_Valid() const{
    return m_tagged_vlans_isValid;
}

QList<OAINestedTag> OAIVMInterface::getTags() const {
    return m_tags;
}
void OAIVMInterface::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVMInterface::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVMInterface::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedVLAN OAIVMInterface::getUntaggedVlan() const {
    return m_untagged_vlan;
}
void OAIVMInterface::setUntaggedVlan(const OAINestedVLAN &untagged_vlan) {
    m_untagged_vlan = untagged_vlan;
    m_untagged_vlan_isSet = true;
}

bool OAIVMInterface::is_untagged_vlan_Set() const{
    return m_untagged_vlan_isSet;
}

bool OAIVMInterface::is_untagged_vlan_Valid() const{
    return m_untagged_vlan_isValid;
}

QString OAIVMInterface::getUrl() const {
    return m_url;
}
void OAIVMInterface::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVMInterface::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVMInterface::is_url_Valid() const{
    return m_url_isValid;
}

OAINestedVirtualMachine OAIVMInterface::getVirtualMachine() const {
    return m_virtual_machine;
}
void OAIVMInterface::setVirtualMachine(const OAINestedVirtualMachine &virtual_machine) {
    m_virtual_machine = virtual_machine;
    m_virtual_machine_isSet = true;
}

bool OAIVMInterface::is_virtual_machine_Set() const{
    return m_virtual_machine_isSet;
}

bool OAIVMInterface::is_virtual_machine_Valid() const{
    return m_virtual_machine_isValid;
}

OAINestedVRF OAIVMInterface::getVrf() const {
    return m_vrf;
}
void OAIVMInterface::setVrf(const OAINestedVRF &vrf) {
    m_vrf = vrf;
    m_vrf_isSet = true;
}

bool OAIVMInterface::is_vrf_Set() const{
    return m_vrf_isSet;
}

bool OAIVMInterface::is_vrf_Valid() const{
    return m_vrf_isValid;
}

bool OAIVMInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bridge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_fhrp_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_ipaddresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l2vpn_termination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_vlans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_untagged_vlan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_virtual_machine_isValid && true;
}

} // namespace OpenAPI
