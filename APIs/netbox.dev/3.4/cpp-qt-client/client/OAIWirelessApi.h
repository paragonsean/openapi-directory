/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWirelessApi_H
#define OAI_OAIWirelessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWirelessLAN.h"
#include "OAIWirelessLANGroup.h"
#include "OAIWirelessLink.h"
#include "OAIWireless_wireless_lan_groups_list_200_response.h"
#include "OAIWireless_wireless_lans_list_200_response.h"
#include "OAIWireless_wireless_links_list_200_response.h"
#include "OAIWritableWirelessLAN.h"
#include "OAIWritableWirelessLANGroup.h"
#include "OAIWritableWirelessLink.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWirelessApi : public QObject {
    Q_OBJECT

public:
    OAIWirelessApi(const int timeOut = 0);
    ~OAIWirelessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void wirelessWirelessLanGroupsBulkDelete();

    /**
    * @param[in]  oai_writable_wireless_lan_group OAIWritableWirelessLANGroup [required]
    */
    virtual void wirelessWirelessLanGroupsBulkPartialUpdate(const OAIWritableWirelessLANGroup &oai_writable_wireless_lan_group);

    /**
    * @param[in]  oai_writable_wireless_lan_group OAIWritableWirelessLANGroup [required]
    */
    virtual void wirelessWirelessLanGroupsBulkUpdate(const OAIWritableWirelessLANGroup &oai_writable_wireless_lan_group);

    /**
    * @param[in]  oai_writable_wireless_lan_group OAIWritableWirelessLANGroup [required]
    */
    virtual void wirelessWirelessLanGroupsCreate(const OAIWritableWirelessLANGroup &oai_writable_wireless_lan_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void wirelessWirelessLanGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  slug__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  parent_id__n QString [optional]
    * @param[in]  parent__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void wirelessWirelessLanGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_wireless_lan_group OAIWritableWirelessLANGroup [required]
    */
    virtual void wirelessWirelessLanGroupsPartialUpdate(const qint32 &id, const OAIWritableWirelessLANGroup &oai_writable_wireless_lan_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void wirelessWirelessLanGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_wireless_lan_group OAIWritableWirelessLANGroup [required]
    */
    virtual void wirelessWirelessLanGroupsUpdate(const qint32 &id, const OAIWritableWirelessLANGroup &oai_writable_wireless_lan_group);


    virtual void wirelessWirelessLansBulkDelete();

    /**
    * @param[in]  oai_writable_wireless_lan OAIWritableWirelessLAN [required]
    */
    virtual void wirelessWirelessLansBulkPartialUpdate(const OAIWritableWirelessLAN &oai_writable_wireless_lan);

    /**
    * @param[in]  oai_writable_wireless_lan OAIWritableWirelessLAN [required]
    */
    virtual void wirelessWirelessLansBulkUpdate(const OAIWritableWirelessLAN &oai_writable_wireless_lan);

    /**
    * @param[in]  oai_writable_wireless_lan OAIWritableWirelessLAN [required]
    */
    virtual void wirelessWirelessLansCreate(const OAIWritableWirelessLAN &oai_writable_wireless_lan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void wirelessWirelessLansDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  ssid QString [optional]
    * @param[in]  auth_psk QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  vlan_id QString [optional]
    * @param[in]  auth_type QString [optional]
    * @param[in]  auth_cipher QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  ssid__n QString [optional]
    * @param[in]  ssid__ic QString [optional]
    * @param[in]  ssid__nic QString [optional]
    * @param[in]  ssid__iew QString [optional]
    * @param[in]  ssid__niew QString [optional]
    * @param[in]  ssid__isw QString [optional]
    * @param[in]  ssid__nisw QString [optional]
    * @param[in]  ssid__ie QString [optional]
    * @param[in]  ssid__nie QString [optional]
    * @param[in]  ssid__empty QString [optional]
    * @param[in]  auth_psk__n QString [optional]
    * @param[in]  auth_psk__ic QString [optional]
    * @param[in]  auth_psk__nic QString [optional]
    * @param[in]  auth_psk__iew QString [optional]
    * @param[in]  auth_psk__niew QString [optional]
    * @param[in]  auth_psk__isw QString [optional]
    * @param[in]  auth_psk__nisw QString [optional]
    * @param[in]  auth_psk__ie QString [optional]
    * @param[in]  auth_psk__nie QString [optional]
    * @param[in]  auth_psk__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  vlan_id__n QString [optional]
    * @param[in]  auth_type__n QString [optional]
    * @param[in]  auth_cipher__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void wirelessWirelessLansList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_cipher = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_cipher__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_wireless_lan OAIWritableWirelessLAN [required]
    */
    virtual void wirelessWirelessLansPartialUpdate(const qint32 &id, const OAIWritableWirelessLAN &oai_writable_wireless_lan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void wirelessWirelessLansRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_wireless_lan OAIWritableWirelessLAN [required]
    */
    virtual void wirelessWirelessLansUpdate(const qint32 &id, const OAIWritableWirelessLAN &oai_writable_wireless_lan);


    virtual void wirelessWirelessLinksBulkDelete();

    /**
    * @param[in]  oai_writable_wireless_link OAIWritableWirelessLink [required]
    */
    virtual void wirelessWirelessLinksBulkPartialUpdate(const OAIWritableWirelessLink &oai_writable_wireless_link);

    /**
    * @param[in]  oai_writable_wireless_link OAIWritableWirelessLink [required]
    */
    virtual void wirelessWirelessLinksBulkUpdate(const OAIWritableWirelessLink &oai_writable_wireless_link);

    /**
    * @param[in]  oai_writable_wireless_link OAIWritableWirelessLink [required]
    */
    virtual void wirelessWirelessLinksCreate(const OAIWritableWirelessLink &oai_writable_wireless_link);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void wirelessWirelessLinksDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  ssid QString [optional]
    * @param[in]  auth_psk QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  interface_a_id QString [optional]
    * @param[in]  interface_b_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  auth_type QString [optional]
    * @param[in]  auth_cipher QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  ssid__n QString [optional]
    * @param[in]  ssid__ic QString [optional]
    * @param[in]  ssid__nic QString [optional]
    * @param[in]  ssid__iew QString [optional]
    * @param[in]  ssid__niew QString [optional]
    * @param[in]  ssid__isw QString [optional]
    * @param[in]  ssid__nisw QString [optional]
    * @param[in]  ssid__ie QString [optional]
    * @param[in]  ssid__nie QString [optional]
    * @param[in]  ssid__empty QString [optional]
    * @param[in]  auth_psk__n QString [optional]
    * @param[in]  auth_psk__ic QString [optional]
    * @param[in]  auth_psk__nic QString [optional]
    * @param[in]  auth_psk__iew QString [optional]
    * @param[in]  auth_psk__niew QString [optional]
    * @param[in]  auth_psk__isw QString [optional]
    * @param[in]  auth_psk__nisw QString [optional]
    * @param[in]  auth_psk__ie QString [optional]
    * @param[in]  auth_psk__nie QString [optional]
    * @param[in]  auth_psk__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  created__n QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  created__lt QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__gt QString [optional]
    * @param[in]  last_updated__n QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  last_updated__lt QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__gt QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  interface_a_id__n QString [optional]
    * @param[in]  interface_a_id__lte QString [optional]
    * @param[in]  interface_a_id__lt QString [optional]
    * @param[in]  interface_a_id__gte QString [optional]
    * @param[in]  interface_a_id__gt QString [optional]
    * @param[in]  interface_b_id__n QString [optional]
    * @param[in]  interface_b_id__lte QString [optional]
    * @param[in]  interface_b_id__lt QString [optional]
    * @param[in]  interface_b_id__gte QString [optional]
    * @param[in]  interface_b_id__gt QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  auth_type__n QString [optional]
    * @param[in]  auth_cipher__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void wirelessWirelessLinksList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_a_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_b_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_cipher = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssid__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_psk__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_a_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_a_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_a_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_a_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_a_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_b_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_b_id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_b_id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_b_id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_b_id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auth_cipher__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_wireless_link OAIWritableWirelessLink [required]
    */
    virtual void wirelessWirelessLinksPartialUpdate(const qint32 &id, const OAIWritableWirelessLink &oai_writable_wireless_link);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void wirelessWirelessLinksRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_wireless_link OAIWritableWirelessLink [required]
    */
    virtual void wirelessWirelessLinksUpdate(const qint32 &id, const OAIWritableWirelessLink &oai_writable_wireless_link);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void wirelessWirelessLanGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsListCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsReadCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansCreateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansDeleteCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansListCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansReadCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksCreateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksDeleteCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksListCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksReadCallback(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void wirelessWirelessLanGroupsBulkDeleteSignal();
    void wirelessWirelessLanGroupsBulkPartialUpdateSignal(OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsBulkUpdateSignal(OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsCreateSignal(OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsDeleteSignal();
    void wirelessWirelessLanGroupsListSignal(OAIWireless_wireless_lan_groups_list_200_response summary);
    void wirelessWirelessLanGroupsPartialUpdateSignal(OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsReadSignal(OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsUpdateSignal(OAIWirelessLANGroup summary);
    void wirelessWirelessLansBulkDeleteSignal();
    void wirelessWirelessLansBulkPartialUpdateSignal(OAIWirelessLAN summary);
    void wirelessWirelessLansBulkUpdateSignal(OAIWirelessLAN summary);
    void wirelessWirelessLansCreateSignal(OAIWirelessLAN summary);
    void wirelessWirelessLansDeleteSignal();
    void wirelessWirelessLansListSignal(OAIWireless_wireless_lans_list_200_response summary);
    void wirelessWirelessLansPartialUpdateSignal(OAIWirelessLAN summary);
    void wirelessWirelessLansReadSignal(OAIWirelessLAN summary);
    void wirelessWirelessLansUpdateSignal(OAIWirelessLAN summary);
    void wirelessWirelessLinksBulkDeleteSignal();
    void wirelessWirelessLinksBulkPartialUpdateSignal(OAIWirelessLink summary);
    void wirelessWirelessLinksBulkUpdateSignal(OAIWirelessLink summary);
    void wirelessWirelessLinksCreateSignal(OAIWirelessLink summary);
    void wirelessWirelessLinksDeleteSignal();
    void wirelessWirelessLinksListSignal(OAIWireless_wireless_links_list_200_response summary);
    void wirelessWirelessLinksPartialUpdateSignal(OAIWirelessLink summary);
    void wirelessWirelessLinksReadSignal(OAIWirelessLink summary);
    void wirelessWirelessLinksUpdateSignal(OAIWirelessLink summary);


    void wirelessWirelessLanGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void wirelessWirelessLanGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIWireless_wireless_lan_groups_list_200_response summary);
    void wirelessWirelessLanGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLANGroup summary);
    void wirelessWirelessLanGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLANGroup summary);
    void wirelessWirelessLansBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLAN summary);
    void wirelessWirelessLansBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLAN summary);
    void wirelessWirelessLansCreateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLAN summary);
    void wirelessWirelessLansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void wirelessWirelessLansListSignalFull(OAIHttpRequestWorker *worker, OAIWireless_wireless_lans_list_200_response summary);
    void wirelessWirelessLansPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLAN summary);
    void wirelessWirelessLansReadSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLAN summary);
    void wirelessWirelessLansUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLAN summary);
    void wirelessWirelessLinksBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLink summary);
    void wirelessWirelessLinksBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLink summary);
    void wirelessWirelessLinksCreateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLink summary);
    void wirelessWirelessLinksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void wirelessWirelessLinksListSignalFull(OAIHttpRequestWorker *worker, OAIWireless_wireless_links_list_200_response summary);
    void wirelessWirelessLinksPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLink summary);
    void wirelessWirelessLinksReadSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLink summary);
    void wirelessWirelessLinksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWirelessLink summary);

    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsBulkDeleteSignalError() instead")
    void wirelessWirelessLanGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsBulkPartialUpdateSignalError() instead")
    void wirelessWirelessLanGroupsBulkPartialUpdateSignalE(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsBulkPartialUpdateSignalError(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsBulkUpdateSignalError() instead")
    void wirelessWirelessLanGroupsBulkUpdateSignalE(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsBulkUpdateSignalError(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsCreateSignalError() instead")
    void wirelessWirelessLanGroupsCreateSignalE(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsCreateSignalError(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsDeleteSignalError() instead")
    void wirelessWirelessLanGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsListSignalError() instead")
    void wirelessWirelessLanGroupsListSignalE(OAIWireless_wireless_lan_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsListSignalError(OAIWireless_wireless_lan_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsPartialUpdateSignalError() instead")
    void wirelessWirelessLanGroupsPartialUpdateSignalE(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsPartialUpdateSignalError(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsReadSignalError() instead")
    void wirelessWirelessLanGroupsReadSignalE(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsReadSignalError(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsUpdateSignalError() instead")
    void wirelessWirelessLanGroupsUpdateSignalE(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsUpdateSignalError(OAIWirelessLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansBulkDeleteSignalError() instead")
    void wirelessWirelessLansBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansBulkPartialUpdateSignalError() instead")
    void wirelessWirelessLansBulkPartialUpdateSignalE(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansBulkPartialUpdateSignalError(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansBulkUpdateSignalError() instead")
    void wirelessWirelessLansBulkUpdateSignalE(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansBulkUpdateSignalError(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansCreateSignalError() instead")
    void wirelessWirelessLansCreateSignalE(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansCreateSignalError(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansDeleteSignalError() instead")
    void wirelessWirelessLansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansListSignalError() instead")
    void wirelessWirelessLansListSignalE(OAIWireless_wireless_lans_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansListSignalError(OAIWireless_wireless_lans_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansPartialUpdateSignalError() instead")
    void wirelessWirelessLansPartialUpdateSignalE(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansPartialUpdateSignalError(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansReadSignalError() instead")
    void wirelessWirelessLansReadSignalE(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansReadSignalError(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansUpdateSignalError() instead")
    void wirelessWirelessLansUpdateSignalE(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansUpdateSignalError(OAIWirelessLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksBulkDeleteSignalError() instead")
    void wirelessWirelessLinksBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksBulkPartialUpdateSignalError() instead")
    void wirelessWirelessLinksBulkPartialUpdateSignalE(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksBulkPartialUpdateSignalError(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksBulkUpdateSignalError() instead")
    void wirelessWirelessLinksBulkUpdateSignalE(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksBulkUpdateSignalError(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksCreateSignalError() instead")
    void wirelessWirelessLinksCreateSignalE(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksCreateSignalError(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksDeleteSignalError() instead")
    void wirelessWirelessLinksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksListSignalError() instead")
    void wirelessWirelessLinksListSignalE(OAIWireless_wireless_links_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksListSignalError(OAIWireless_wireless_links_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksPartialUpdateSignalError() instead")
    void wirelessWirelessLinksPartialUpdateSignalE(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksPartialUpdateSignalError(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksReadSignalError() instead")
    void wirelessWirelessLinksReadSignalE(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksReadSignalError(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksUpdateSignalError() instead")
    void wirelessWirelessLinksUpdateSignalE(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksUpdateSignalError(OAIWirelessLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsBulkDeleteSignalErrorFull() instead")
    void wirelessWirelessLanGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsBulkPartialUpdateSignalErrorFull() instead")
    void wirelessWirelessLanGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsBulkUpdateSignalErrorFull() instead")
    void wirelessWirelessLanGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsCreateSignalErrorFull() instead")
    void wirelessWirelessLanGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsDeleteSignalErrorFull() instead")
    void wirelessWirelessLanGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsListSignalErrorFull() instead")
    void wirelessWirelessLanGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsPartialUpdateSignalErrorFull() instead")
    void wirelessWirelessLanGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsReadSignalErrorFull() instead")
    void wirelessWirelessLanGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLanGroupsUpdateSignalErrorFull() instead")
    void wirelessWirelessLanGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLanGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansBulkDeleteSignalErrorFull() instead")
    void wirelessWirelessLansBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansBulkPartialUpdateSignalErrorFull() instead")
    void wirelessWirelessLansBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansBulkUpdateSignalErrorFull() instead")
    void wirelessWirelessLansBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansCreateSignalErrorFull() instead")
    void wirelessWirelessLansCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansDeleteSignalErrorFull() instead")
    void wirelessWirelessLansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansListSignalErrorFull() instead")
    void wirelessWirelessLansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansPartialUpdateSignalErrorFull() instead")
    void wirelessWirelessLansPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansReadSignalErrorFull() instead")
    void wirelessWirelessLansReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLansUpdateSignalErrorFull() instead")
    void wirelessWirelessLansUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLansUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksBulkDeleteSignalErrorFull() instead")
    void wirelessWirelessLinksBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksBulkPartialUpdateSignalErrorFull() instead")
    void wirelessWirelessLinksBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksBulkUpdateSignalErrorFull() instead")
    void wirelessWirelessLinksBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksCreateSignalErrorFull() instead")
    void wirelessWirelessLinksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksDeleteSignalErrorFull() instead")
    void wirelessWirelessLinksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksListSignalErrorFull() instead")
    void wirelessWirelessLinksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksPartialUpdateSignalErrorFull() instead")
    void wirelessWirelessLinksPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksReadSignalErrorFull() instead")
    void wirelessWirelessLinksReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wirelessWirelessLinksUpdateSignalErrorFull() instead")
    void wirelessWirelessLinksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wirelessWirelessLinksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
