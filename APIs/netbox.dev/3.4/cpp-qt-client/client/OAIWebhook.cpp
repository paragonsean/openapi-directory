/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_additional_headers_isSet = false;
    m_additional_headers_isValid = false;

    m_body_template_isSet = false;
    m_body_template_isValid = false;

    m_ca_file_path_isSet = false;
    m_ca_file_path_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_http_content_type_isSet = false;
    m_http_content_type_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payload_url_isSet = false;
    m_payload_url_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_ssl_verification_isSet = false;
    m_ssl_verification_isValid = false;

    m_type_create_isSet = false;
    m_type_create_isValid = false;

    m_type_delete_isSet = false;
    m_type_delete_isValid = false;

    m_type_update_isSet = false;
    m_type_update_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_additional_headers_isValid = ::OpenAPI::fromJsonValue(m_additional_headers, json[QString("additional_headers")]);
    m_additional_headers_isSet = !json[QString("additional_headers")].isNull() && m_additional_headers_isValid;

    m_body_template_isValid = ::OpenAPI::fromJsonValue(m_body_template, json[QString("body_template")]);
    m_body_template_isSet = !json[QString("body_template")].isNull() && m_body_template_isValid;

    m_ca_file_path_isValid = ::OpenAPI::fromJsonValue(m_ca_file_path, json[QString("ca_file_path")]);
    m_ca_file_path_isSet = !json[QString("ca_file_path")].isNull() && m_ca_file_path_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("content_types")]);
    m_content_types_isSet = !json[QString("content_types")].isNull() && m_content_types_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_http_content_type_isValid = ::OpenAPI::fromJsonValue(m_http_content_type, json[QString("http_content_type")]);
    m_http_content_type_isSet = !json[QString("http_content_type")].isNull() && m_http_content_type_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("http_method")]);
    m_http_method_isSet = !json[QString("http_method")].isNull() && m_http_method_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payload_url_isValid = ::OpenAPI::fromJsonValue(m_payload_url, json[QString("payload_url")]);
    m_payload_url_isSet = !json[QString("payload_url")].isNull() && m_payload_url_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_ssl_verification_isValid = ::OpenAPI::fromJsonValue(m_ssl_verification, json[QString("ssl_verification")]);
    m_ssl_verification_isSet = !json[QString("ssl_verification")].isNull() && m_ssl_verification_isValid;

    m_type_create_isValid = ::OpenAPI::fromJsonValue(m_type_create, json[QString("type_create")]);
    m_type_create_isSet = !json[QString("type_create")].isNull() && m_type_create_isValid;

    m_type_delete_isValid = ::OpenAPI::fromJsonValue(m_type_delete, json[QString("type_delete")]);
    m_type_delete_isSet = !json[QString("type_delete")].isNull() && m_type_delete_isValid;

    m_type_update_isValid = ::OpenAPI::fromJsonValue(m_type_update, json[QString("type_update")]);
    m_type_update_isSet = !json[QString("type_update")].isNull() && m_type_update_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_headers_isSet) {
        obj.insert(QString("additional_headers"), ::OpenAPI::toJsonValue(m_additional_headers));
    }
    if (m_body_template_isSet) {
        obj.insert(QString("body_template"), ::OpenAPI::toJsonValue(m_body_template));
    }
    if (m_ca_file_path_isSet) {
        obj.insert(QString("ca_file_path"), ::OpenAPI::toJsonValue(m_ca_file_path));
    }
    if (m_conditions_isSet) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_content_types.size() > 0) {
        obj.insert(QString("content_types"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_http_content_type_isSet) {
        obj.insert(QString("http_content_type"), ::OpenAPI::toJsonValue(m_http_content_type));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("http_method"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payload_url_isSet) {
        obj.insert(QString("payload_url"), ::OpenAPI::toJsonValue(m_payload_url));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_ssl_verification_isSet) {
        obj.insert(QString("ssl_verification"), ::OpenAPI::toJsonValue(m_ssl_verification));
    }
    if (m_type_create_isSet) {
        obj.insert(QString("type_create"), ::OpenAPI::toJsonValue(m_type_create));
    }
    if (m_type_delete_isSet) {
        obj.insert(QString("type_delete"), ::OpenAPI::toJsonValue(m_type_delete));
    }
    if (m_type_update_isSet) {
        obj.insert(QString("type_update"), ::OpenAPI::toJsonValue(m_type_update));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIWebhook::getAdditionalHeaders() const {
    return m_additional_headers;
}
void OAIWebhook::setAdditionalHeaders(const QString &additional_headers) {
    m_additional_headers = additional_headers;
    m_additional_headers_isSet = true;
}

bool OAIWebhook::is_additional_headers_Set() const{
    return m_additional_headers_isSet;
}

bool OAIWebhook::is_additional_headers_Valid() const{
    return m_additional_headers_isValid;
}

QString OAIWebhook::getBodyTemplate() const {
    return m_body_template;
}
void OAIWebhook::setBodyTemplate(const QString &body_template) {
    m_body_template = body_template;
    m_body_template_isSet = true;
}

bool OAIWebhook::is_body_template_Set() const{
    return m_body_template_isSet;
}

bool OAIWebhook::is_body_template_Valid() const{
    return m_body_template_isValid;
}

QString OAIWebhook::getCaFilePath() const {
    return m_ca_file_path;
}
void OAIWebhook::setCaFilePath(const QString &ca_file_path) {
    m_ca_file_path = ca_file_path;
    m_ca_file_path_isSet = true;
}

bool OAIWebhook::is_ca_file_path_Set() const{
    return m_ca_file_path_isSet;
}

bool OAIWebhook::is_ca_file_path_Valid() const{
    return m_ca_file_path_isValid;
}

OAIObject OAIWebhook::getConditions() const {
    return m_conditions;
}
void OAIWebhook::setConditions(const OAIObject &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIWebhook::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIWebhook::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QSet<QString> OAIWebhook::getContentTypes() const {
    return m_content_types;
}
void OAIWebhook::setContentTypes(const QSet<QString> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAIWebhook::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAIWebhook::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QDateTime OAIWebhook::getCreated() const {
    return m_created;
}
void OAIWebhook::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWebhook::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWebhook::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWebhook::getDisplay() const {
    return m_display;
}
void OAIWebhook::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWebhook::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWebhook::is_display_Valid() const{
    return m_display_isValid;
}

bool OAIWebhook::isEnabled() const {
    return m_enabled;
}
void OAIWebhook::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebhook::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebhook::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIWebhook::getHttpContentType() const {
    return m_http_content_type;
}
void OAIWebhook::setHttpContentType(const QString &http_content_type) {
    m_http_content_type = http_content_type;
    m_http_content_type_isSet = true;
}

bool OAIWebhook::is_http_content_type_Set() const{
    return m_http_content_type_isSet;
}

bool OAIWebhook::is_http_content_type_Valid() const{
    return m_http_content_type_isValid;
}

QString OAIWebhook::getHttpMethod() const {
    return m_http_method;
}
void OAIWebhook::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIWebhook::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIWebhook::is_http_method_Valid() const{
    return m_http_method_isValid;
}

qint32 OAIWebhook::getId() const {
    return m_id;
}
void OAIWebhook::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWebhook::getLastUpdated() const {
    return m_last_updated;
}
void OAIWebhook::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWebhook::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWebhook::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWebhook::getName() const {
    return m_name;
}
void OAIWebhook::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhook::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhook::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebhook::getPayloadUrl() const {
    return m_payload_url;
}
void OAIWebhook::setPayloadUrl(const QString &payload_url) {
    m_payload_url = payload_url;
    m_payload_url_isSet = true;
}

bool OAIWebhook::is_payload_url_Set() const{
    return m_payload_url_isSet;
}

bool OAIWebhook::is_payload_url_Valid() const{
    return m_payload_url_isValid;
}

QString OAIWebhook::getSecret() const {
    return m_secret;
}
void OAIWebhook::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIWebhook::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIWebhook::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIWebhook::isSslVerification() const {
    return m_ssl_verification;
}
void OAIWebhook::setSslVerification(const bool &ssl_verification) {
    m_ssl_verification = ssl_verification;
    m_ssl_verification_isSet = true;
}

bool OAIWebhook::is_ssl_verification_Set() const{
    return m_ssl_verification_isSet;
}

bool OAIWebhook::is_ssl_verification_Valid() const{
    return m_ssl_verification_isValid;
}

bool OAIWebhook::isTypeCreate() const {
    return m_type_create;
}
void OAIWebhook::setTypeCreate(const bool &type_create) {
    m_type_create = type_create;
    m_type_create_isSet = true;
}

bool OAIWebhook::is_type_create_Set() const{
    return m_type_create_isSet;
}

bool OAIWebhook::is_type_create_Valid() const{
    return m_type_create_isValid;
}

bool OAIWebhook::isTypeDelete() const {
    return m_type_delete;
}
void OAIWebhook::setTypeDelete(const bool &type_delete) {
    m_type_delete = type_delete;
    m_type_delete_isSet = true;
}

bool OAIWebhook::is_type_delete_Set() const{
    return m_type_delete_isSet;
}

bool OAIWebhook::is_type_delete_Valid() const{
    return m_type_delete_isValid;
}

bool OAIWebhook::isTypeUpdate() const {
    return m_type_update;
}
void OAIWebhook::setTypeUpdate(const bool &type_update) {
    m_type_update = type_update;
    m_type_update_isSet = true;
}

bool OAIWebhook::is_type_update_Set() const{
    return m_type_update_isSet;
}

bool OAIWebhook::is_type_update_Valid() const{
    return m_type_update_isValid;
}

QString OAIWebhook::getUrl() const {
    return m_url;
}
void OAIWebhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_types_isValid && m_name_isValid && m_payload_url_isValid && true;
}

} // namespace OpenAPI
