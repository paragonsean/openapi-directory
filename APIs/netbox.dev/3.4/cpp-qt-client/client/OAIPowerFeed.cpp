/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPowerFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPowerFeed::OAIPowerFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPowerFeed::OAIPowerFeed() {
    this->initializeModel();
}

OAIPowerFeed::~OAIPowerFeed() {}

void OAIPowerFeed::initializeModel() {

    m__occupied_isSet = false;
    m__occupied_isValid = false;

    m_amperage_isSet = false;
    m_amperage_isValid = false;

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_cable_end_isSet = false;
    m_cable_end_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_connected_endpoints_isSet = false;
    m_connected_endpoints_isValid = false;

    m_connected_endpoints_reachable_isSet = false;
    m_connected_endpoints_reachable_isValid = false;

    m_connected_endpoints_type_isSet = false;
    m_connected_endpoints_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_link_peers_isSet = false;
    m_link_peers_isValid = false;

    m_link_peers_type_isSet = false;
    m_link_peers_type_isValid = false;

    m_mark_connected_isSet = false;
    m_mark_connected_isValid = false;

    m_max_utilization_isSet = false;
    m_max_utilization_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_power_panel_isSet = false;
    m_power_panel_isValid = false;

    m_rack_isSet = false;
    m_rack_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supply_isSet = false;
    m_supply_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_voltage_isSet = false;
    m_voltage_isValid = false;
}

void OAIPowerFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPowerFeed::fromJsonObject(QJsonObject json) {

    m__occupied_isValid = ::OpenAPI::fromJsonValue(m__occupied, json[QString("_occupied")]);
    m__occupied_isSet = !json[QString("_occupied")].isNull() && m__occupied_isValid;

    m_amperage_isValid = ::OpenAPI::fromJsonValue(m_amperage, json[QString("amperage")]);
    m_amperage_isSet = !json[QString("amperage")].isNull() && m_amperage_isValid;

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_cable_end_isValid = ::OpenAPI::fromJsonValue(m_cable_end, json[QString("cable_end")]);
    m_cable_end_isSet = !json[QString("cable_end")].isNull() && m_cable_end_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_connected_endpoints_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoints, json[QString("connected_endpoints")]);
    m_connected_endpoints_isSet = !json[QString("connected_endpoints")].isNull() && m_connected_endpoints_isValid;

    m_connected_endpoints_reachable_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoints_reachable, json[QString("connected_endpoints_reachable")]);
    m_connected_endpoints_reachable_isSet = !json[QString("connected_endpoints_reachable")].isNull() && m_connected_endpoints_reachable_isValid;

    m_connected_endpoints_type_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoints_type, json[QString("connected_endpoints_type")]);
    m_connected_endpoints_type_isSet = !json[QString("connected_endpoints_type")].isNull() && m_connected_endpoints_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_link_peers_isValid = ::OpenAPI::fromJsonValue(m_link_peers, json[QString("link_peers")]);
    m_link_peers_isSet = !json[QString("link_peers")].isNull() && m_link_peers_isValid;

    m_link_peers_type_isValid = ::OpenAPI::fromJsonValue(m_link_peers_type, json[QString("link_peers_type")]);
    m_link_peers_type_isSet = !json[QString("link_peers_type")].isNull() && m_link_peers_type_isValid;

    m_mark_connected_isValid = ::OpenAPI::fromJsonValue(m_mark_connected, json[QString("mark_connected")]);
    m_mark_connected_isSet = !json[QString("mark_connected")].isNull() && m_mark_connected_isValid;

    m_max_utilization_isValid = ::OpenAPI::fromJsonValue(m_max_utilization, json[QString("max_utilization")]);
    m_max_utilization_isSet = !json[QString("max_utilization")].isNull() && m_max_utilization_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_power_panel_isValid = ::OpenAPI::fromJsonValue(m_power_panel, json[QString("power_panel")]);
    m_power_panel_isSet = !json[QString("power_panel")].isNull() && m_power_panel_isValid;

    m_rack_isValid = ::OpenAPI::fromJsonValue(m_rack, json[QString("rack")]);
    m_rack_isSet = !json[QString("rack")].isNull() && m_rack_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supply_isValid = ::OpenAPI::fromJsonValue(m_supply, json[QString("supply")]);
    m_supply_isSet = !json[QString("supply")].isNull() && m_supply_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_voltage_isValid = ::OpenAPI::fromJsonValue(m_voltage, json[QString("voltage")]);
    m_voltage_isSet = !json[QString("voltage")].isNull() && m_voltage_isValid;
}

QString OAIPowerFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPowerFeed::asJsonObject() const {
    QJsonObject obj;
    if (m__occupied_isSet) {
        obj.insert(QString("_occupied"), ::OpenAPI::toJsonValue(m__occupied));
    }
    if (m_amperage_isSet) {
        obj.insert(QString("amperage"), ::OpenAPI::toJsonValue(m_amperage));
    }
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_cable_end_isSet) {
        obj.insert(QString("cable_end"), ::OpenAPI::toJsonValue(m_cable_end));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_connected_endpoints.size() > 0) {
        obj.insert(QString("connected_endpoints"), ::OpenAPI::toJsonValue(m_connected_endpoints));
    }
    if (m_connected_endpoints_reachable_isSet) {
        obj.insert(QString("connected_endpoints_reachable"), ::OpenAPI::toJsonValue(m_connected_endpoints_reachable));
    }
    if (m_connected_endpoints_type_isSet) {
        obj.insert(QString("connected_endpoints_type"), ::OpenAPI::toJsonValue(m_connected_endpoints_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_link_peers.size() > 0) {
        obj.insert(QString("link_peers"), ::OpenAPI::toJsonValue(m_link_peers));
    }
    if (m_link_peers_type_isSet) {
        obj.insert(QString("link_peers_type"), ::OpenAPI::toJsonValue(m_link_peers_type));
    }
    if (m_mark_connected_isSet) {
        obj.insert(QString("mark_connected"), ::OpenAPI::toJsonValue(m_mark_connected));
    }
    if (m_max_utilization_isSet) {
        obj.insert(QString("max_utilization"), ::OpenAPI::toJsonValue(m_max_utilization));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phase.isSet()) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_power_panel.isSet()) {
        obj.insert(QString("power_panel"), ::OpenAPI::toJsonValue(m_power_panel));
    }
    if (m_rack.isSet()) {
        obj.insert(QString("rack"), ::OpenAPI::toJsonValue(m_rack));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supply.isSet()) {
        obj.insert(QString("supply"), ::OpenAPI::toJsonValue(m_supply));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_voltage_isSet) {
        obj.insert(QString("voltage"), ::OpenAPI::toJsonValue(m_voltage));
    }
    return obj;
}

bool OAIPowerFeed::isOccupied() const {
    return m__occupied;
}
void OAIPowerFeed::setOccupied(const bool &_occupied) {
    m__occupied = _occupied;
    m__occupied_isSet = true;
}

bool OAIPowerFeed::is__occupied_Set() const{
    return m__occupied_isSet;
}

bool OAIPowerFeed::is__occupied_Valid() const{
    return m__occupied_isValid;
}

qint32 OAIPowerFeed::getAmperage() const {
    return m_amperage;
}
void OAIPowerFeed::setAmperage(const qint32 &amperage) {
    m_amperage = amperage;
    m_amperage_isSet = true;
}

bool OAIPowerFeed::is_amperage_Set() const{
    return m_amperage_isSet;
}

bool OAIPowerFeed::is_amperage_Valid() const{
    return m_amperage_isValid;
}

OAINestedCable OAIPowerFeed::getCable() const {
    return m_cable;
}
void OAIPowerFeed::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAIPowerFeed::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAIPowerFeed::is_cable_Valid() const{
    return m_cable_isValid;
}

QString OAIPowerFeed::getCableEnd() const {
    return m_cable_end;
}
void OAIPowerFeed::setCableEnd(const QString &cable_end) {
    m_cable_end = cable_end;
    m_cable_end_isSet = true;
}

bool OAIPowerFeed::is_cable_end_Set() const{
    return m_cable_end_isSet;
}

bool OAIPowerFeed::is_cable_end_Valid() const{
    return m_cable_end_isValid;
}

QString OAIPowerFeed::getComments() const {
    return m_comments;
}
void OAIPowerFeed::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIPowerFeed::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIPowerFeed::is_comments_Valid() const{
    return m_comments_isValid;
}

QList<QString> OAIPowerFeed::getConnectedEndpoints() const {
    return m_connected_endpoints;
}
void OAIPowerFeed::setConnectedEndpoints(const QList<QString> &connected_endpoints) {
    m_connected_endpoints = connected_endpoints;
    m_connected_endpoints_isSet = true;
}

bool OAIPowerFeed::is_connected_endpoints_Set() const{
    return m_connected_endpoints_isSet;
}

bool OAIPowerFeed::is_connected_endpoints_Valid() const{
    return m_connected_endpoints_isValid;
}

bool OAIPowerFeed::isConnectedEndpointsReachable() const {
    return m_connected_endpoints_reachable;
}
void OAIPowerFeed::setConnectedEndpointsReachable(const bool &connected_endpoints_reachable) {
    m_connected_endpoints_reachable = connected_endpoints_reachable;
    m_connected_endpoints_reachable_isSet = true;
}

bool OAIPowerFeed::is_connected_endpoints_reachable_Set() const{
    return m_connected_endpoints_reachable_isSet;
}

bool OAIPowerFeed::is_connected_endpoints_reachable_Valid() const{
    return m_connected_endpoints_reachable_isValid;
}

QString OAIPowerFeed::getConnectedEndpointsType() const {
    return m_connected_endpoints_type;
}
void OAIPowerFeed::setConnectedEndpointsType(const QString &connected_endpoints_type) {
    m_connected_endpoints_type = connected_endpoints_type;
    m_connected_endpoints_type_isSet = true;
}

bool OAIPowerFeed::is_connected_endpoints_type_Set() const{
    return m_connected_endpoints_type_isSet;
}

bool OAIPowerFeed::is_connected_endpoints_type_Valid() const{
    return m_connected_endpoints_type_isValid;
}

QDateTime OAIPowerFeed::getCreated() const {
    return m_created;
}
void OAIPowerFeed::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIPowerFeed::is_created_Set() const{
    return m_created_isSet;
}

bool OAIPowerFeed::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIPowerFeed::getCustomFields() const {
    return m_custom_fields;
}
void OAIPowerFeed::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPowerFeed::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPowerFeed::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIPowerFeed::getDescription() const {
    return m_description;
}
void OAIPowerFeed::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPowerFeed::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPowerFeed::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPowerFeed::getDisplay() const {
    return m_display;
}
void OAIPowerFeed::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIPowerFeed::is_display_Set() const{
    return m_display_isSet;
}

bool OAIPowerFeed::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIPowerFeed::getId() const {
    return m_id;
}
void OAIPowerFeed::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPowerFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPowerFeed::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIPowerFeed::getLastUpdated() const {
    return m_last_updated;
}
void OAIPowerFeed::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIPowerFeed::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIPowerFeed::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<QString> OAIPowerFeed::getLinkPeers() const {
    return m_link_peers;
}
void OAIPowerFeed::setLinkPeers(const QList<QString> &link_peers) {
    m_link_peers = link_peers;
    m_link_peers_isSet = true;
}

bool OAIPowerFeed::is_link_peers_Set() const{
    return m_link_peers_isSet;
}

bool OAIPowerFeed::is_link_peers_Valid() const{
    return m_link_peers_isValid;
}

QString OAIPowerFeed::getLinkPeersType() const {
    return m_link_peers_type;
}
void OAIPowerFeed::setLinkPeersType(const QString &link_peers_type) {
    m_link_peers_type = link_peers_type;
    m_link_peers_type_isSet = true;
}

bool OAIPowerFeed::is_link_peers_type_Set() const{
    return m_link_peers_type_isSet;
}

bool OAIPowerFeed::is_link_peers_type_Valid() const{
    return m_link_peers_type_isValid;
}

bool OAIPowerFeed::isMarkConnected() const {
    return m_mark_connected;
}
void OAIPowerFeed::setMarkConnected(const bool &mark_connected) {
    m_mark_connected = mark_connected;
    m_mark_connected_isSet = true;
}

bool OAIPowerFeed::is_mark_connected_Set() const{
    return m_mark_connected_isSet;
}

bool OAIPowerFeed::is_mark_connected_Valid() const{
    return m_mark_connected_isValid;
}

qint32 OAIPowerFeed::getMaxUtilization() const {
    return m_max_utilization;
}
void OAIPowerFeed::setMaxUtilization(const qint32 &max_utilization) {
    m_max_utilization = max_utilization;
    m_max_utilization_isSet = true;
}

bool OAIPowerFeed::is_max_utilization_Set() const{
    return m_max_utilization_isSet;
}

bool OAIPowerFeed::is_max_utilization_Valid() const{
    return m_max_utilization_isValid;
}

QString OAIPowerFeed::getName() const {
    return m_name;
}
void OAIPowerFeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPowerFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPowerFeed::is_name_Valid() const{
    return m_name_isValid;
}

OAIPhase OAIPowerFeed::getPhase() const {
    return m_phase;
}
void OAIPowerFeed::setPhase(const OAIPhase &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIPowerFeed::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIPowerFeed::is_phase_Valid() const{
    return m_phase_isValid;
}

OAINestedPowerPanel OAIPowerFeed::getPowerPanel() const {
    return m_power_panel;
}
void OAIPowerFeed::setPowerPanel(const OAINestedPowerPanel &power_panel) {
    m_power_panel = power_panel;
    m_power_panel_isSet = true;
}

bool OAIPowerFeed::is_power_panel_Set() const{
    return m_power_panel_isSet;
}

bool OAIPowerFeed::is_power_panel_Valid() const{
    return m_power_panel_isValid;
}

OAINestedRack OAIPowerFeed::getRack() const {
    return m_rack;
}
void OAIPowerFeed::setRack(const OAINestedRack &rack) {
    m_rack = rack;
    m_rack_isSet = true;
}

bool OAIPowerFeed::is_rack_Set() const{
    return m_rack_isSet;
}

bool OAIPowerFeed::is_rack_Valid() const{
    return m_rack_isValid;
}

OAIStatus_9 OAIPowerFeed::getStatus() const {
    return m_status;
}
void OAIPowerFeed::setStatus(const OAIStatus_9 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPowerFeed::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPowerFeed::is_status_Valid() const{
    return m_status_isValid;
}

OAISupply OAIPowerFeed::getSupply() const {
    return m_supply;
}
void OAIPowerFeed::setSupply(const OAISupply &supply) {
    m_supply = supply;
    m_supply_isSet = true;
}

bool OAIPowerFeed::is_supply_Set() const{
    return m_supply_isSet;
}

bool OAIPowerFeed::is_supply_Valid() const{
    return m_supply_isValid;
}

QList<OAINestedTag> OAIPowerFeed::getTags() const {
    return m_tags;
}
void OAIPowerFeed::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPowerFeed::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPowerFeed::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIType_5 OAIPowerFeed::getType() const {
    return m_type;
}
void OAIPowerFeed::setType(const OAIType_5 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPowerFeed::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPowerFeed::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPowerFeed::getUrl() const {
    return m_url;
}
void OAIPowerFeed::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPowerFeed::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPowerFeed::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIPowerFeed::getVoltage() const {
    return m_voltage;
}
void OAIPowerFeed::setVoltage(const qint32 &voltage) {
    m_voltage = voltage;
    m_voltage_isSet = true;
}

bool OAIPowerFeed::is_voltage_Set() const{
    return m_voltage_isSet;
}

bool OAIPowerFeed::is_voltage_Valid() const{
    return m_voltage_isValid;
}

bool OAIPowerFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__occupied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amperage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoints_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoints_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_panel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPowerFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_power_panel_isValid && true;
}

} // namespace OpenAPI
