/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInterface::OAIInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInterface::OAIInterface() {
    this->initializeModel();
}

OAIInterface::~OAIInterface() {}

void OAIInterface::initializeModel() {

    m__occupied_isSet = false;
    m__occupied_isValid = false;

    m_bridge_isSet = false;
    m_bridge_isValid = false;

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_cable_end_isSet = false;
    m_cable_end_isValid = false;

    m_connected_endpoints_isSet = false;
    m_connected_endpoints_isValid = false;

    m_connected_endpoints_reachable_isSet = false;
    m_connected_endpoints_reachable_isValid = false;

    m_connected_endpoints_type_isSet = false;
    m_connected_endpoints_type_isValid = false;

    m_count_fhrp_groups_isSet = false;
    m_count_fhrp_groups_isValid = false;

    m_count_ipaddresses_isSet = false;
    m_count_ipaddresses_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_duplex_isSet = false;
    m_duplex_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_l2vpn_termination_isSet = false;
    m_l2vpn_termination_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_lag_isSet = false;
    m_lag_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_link_peers_isSet = false;
    m_link_peers_isValid = false;

    m_link_peers_type_isSet = false;
    m_link_peers_type_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_mark_connected_isSet = false;
    m_mark_connected_isValid = false;

    m_mgmt_only_isSet = false;
    m_mgmt_only_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_mtu_isSet = false;
    m_mtu_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_poe_mode_isSet = false;
    m_poe_mode_isValid = false;

    m_poe_type_isSet = false;
    m_poe_type_isValid = false;

    m_rf_channel_isSet = false;
    m_rf_channel_isValid = false;

    m_rf_channel_frequency_isSet = false;
    m_rf_channel_frequency_isValid = false;

    m_rf_channel_width_isSet = false;
    m_rf_channel_width_isValid = false;

    m_rf_role_isSet = false;
    m_rf_role_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_tagged_vlans_isSet = false;
    m_tagged_vlans_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tx_power_isSet = false;
    m_tx_power_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_untagged_vlan_isSet = false;
    m_untagged_vlan_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vdcs_isSet = false;
    m_vdcs_isValid = false;

    m_vrf_isSet = false;
    m_vrf_isValid = false;

    m_wireless_lans_isSet = false;
    m_wireless_lans_isValid = false;

    m_wireless_link_isSet = false;
    m_wireless_link_isValid = false;

    m_wwn_isSet = false;
    m_wwn_isValid = false;
}

void OAIInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInterface::fromJsonObject(QJsonObject json) {

    m__occupied_isValid = ::OpenAPI::fromJsonValue(m__occupied, json[QString("_occupied")]);
    m__occupied_isSet = !json[QString("_occupied")].isNull() && m__occupied_isValid;

    m_bridge_isValid = ::OpenAPI::fromJsonValue(m_bridge, json[QString("bridge")]);
    m_bridge_isSet = !json[QString("bridge")].isNull() && m_bridge_isValid;

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_cable_end_isValid = ::OpenAPI::fromJsonValue(m_cable_end, json[QString("cable_end")]);
    m_cable_end_isSet = !json[QString("cable_end")].isNull() && m_cable_end_isValid;

    m_connected_endpoints_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoints, json[QString("connected_endpoints")]);
    m_connected_endpoints_isSet = !json[QString("connected_endpoints")].isNull() && m_connected_endpoints_isValid;

    m_connected_endpoints_reachable_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoints_reachable, json[QString("connected_endpoints_reachable")]);
    m_connected_endpoints_reachable_isSet = !json[QString("connected_endpoints_reachable")].isNull() && m_connected_endpoints_reachable_isValid;

    m_connected_endpoints_type_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoints_type, json[QString("connected_endpoints_type")]);
    m_connected_endpoints_type_isSet = !json[QString("connected_endpoints_type")].isNull() && m_connected_endpoints_type_isValid;

    m_count_fhrp_groups_isValid = ::OpenAPI::fromJsonValue(m_count_fhrp_groups, json[QString("count_fhrp_groups")]);
    m_count_fhrp_groups_isSet = !json[QString("count_fhrp_groups")].isNull() && m_count_fhrp_groups_isValid;

    m_count_ipaddresses_isValid = ::OpenAPI::fromJsonValue(m_count_ipaddresses, json[QString("count_ipaddresses")]);
    m_count_ipaddresses_isSet = !json[QString("count_ipaddresses")].isNull() && m_count_ipaddresses_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_duplex_isValid = ::OpenAPI::fromJsonValue(m_duplex, json[QString("duplex")]);
    m_duplex_isSet = !json[QString("duplex")].isNull() && m_duplex_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_l2vpn_termination_isValid = ::OpenAPI::fromJsonValue(m_l2vpn_termination, json[QString("l2vpn_termination")]);
    m_l2vpn_termination_isSet = !json[QString("l2vpn_termination")].isNull() && m_l2vpn_termination_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_lag_isValid = ::OpenAPI::fromJsonValue(m_lag, json[QString("lag")]);
    m_lag_isSet = !json[QString("lag")].isNull() && m_lag_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_link_peers_isValid = ::OpenAPI::fromJsonValue(m_link_peers, json[QString("link_peers")]);
    m_link_peers_isSet = !json[QString("link_peers")].isNull() && m_link_peers_isValid;

    m_link_peers_type_isValid = ::OpenAPI::fromJsonValue(m_link_peers_type, json[QString("link_peers_type")]);
    m_link_peers_type_isSet = !json[QString("link_peers_type")].isNull() && m_link_peers_type_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("mac_address")]);
    m_mac_address_isSet = !json[QString("mac_address")].isNull() && m_mac_address_isValid;

    m_mark_connected_isValid = ::OpenAPI::fromJsonValue(m_mark_connected, json[QString("mark_connected")]);
    m_mark_connected_isSet = !json[QString("mark_connected")].isNull() && m_mark_connected_isValid;

    m_mgmt_only_isValid = ::OpenAPI::fromJsonValue(m_mgmt_only, json[QString("mgmt_only")]);
    m_mgmt_only_isSet = !json[QString("mgmt_only")].isNull() && m_mgmt_only_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_mtu_isValid = ::OpenAPI::fromJsonValue(m_mtu, json[QString("mtu")]);
    m_mtu_isSet = !json[QString("mtu")].isNull() && m_mtu_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_poe_mode_isValid = ::OpenAPI::fromJsonValue(m_poe_mode, json[QString("poe_mode")]);
    m_poe_mode_isSet = !json[QString("poe_mode")].isNull() && m_poe_mode_isValid;

    m_poe_type_isValid = ::OpenAPI::fromJsonValue(m_poe_type, json[QString("poe_type")]);
    m_poe_type_isSet = !json[QString("poe_type")].isNull() && m_poe_type_isValid;

    m_rf_channel_isValid = ::OpenAPI::fromJsonValue(m_rf_channel, json[QString("rf_channel")]);
    m_rf_channel_isSet = !json[QString("rf_channel")].isNull() && m_rf_channel_isValid;

    m_rf_channel_frequency_isValid = ::OpenAPI::fromJsonValue(m_rf_channel_frequency, json[QString("rf_channel_frequency")]);
    m_rf_channel_frequency_isSet = !json[QString("rf_channel_frequency")].isNull() && m_rf_channel_frequency_isValid;

    m_rf_channel_width_isValid = ::OpenAPI::fromJsonValue(m_rf_channel_width, json[QString("rf_channel_width")]);
    m_rf_channel_width_isSet = !json[QString("rf_channel_width")].isNull() && m_rf_channel_width_isValid;

    m_rf_role_isValid = ::OpenAPI::fromJsonValue(m_rf_role, json[QString("rf_role")]);
    m_rf_role_isSet = !json[QString("rf_role")].isNull() && m_rf_role_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_tagged_vlans_isValid = ::OpenAPI::fromJsonValue(m_tagged_vlans, json[QString("tagged_vlans")]);
    m_tagged_vlans_isSet = !json[QString("tagged_vlans")].isNull() && m_tagged_vlans_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tx_power_isValid = ::OpenAPI::fromJsonValue(m_tx_power, json[QString("tx_power")]);
    m_tx_power_isSet = !json[QString("tx_power")].isNull() && m_tx_power_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_untagged_vlan_isValid = ::OpenAPI::fromJsonValue(m_untagged_vlan, json[QString("untagged_vlan")]);
    m_untagged_vlan_isSet = !json[QString("untagged_vlan")].isNull() && m_untagged_vlan_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vdcs_isValid = ::OpenAPI::fromJsonValue(m_vdcs, json[QString("vdcs")]);
    m_vdcs_isSet = !json[QString("vdcs")].isNull() && m_vdcs_isValid;

    m_vrf_isValid = ::OpenAPI::fromJsonValue(m_vrf, json[QString("vrf")]);
    m_vrf_isSet = !json[QString("vrf")].isNull() && m_vrf_isValid;

    m_wireless_lans_isValid = ::OpenAPI::fromJsonValue(m_wireless_lans, json[QString("wireless_lans")]);
    m_wireless_lans_isSet = !json[QString("wireless_lans")].isNull() && m_wireless_lans_isValid;

    m_wireless_link_isValid = ::OpenAPI::fromJsonValue(m_wireless_link, json[QString("wireless_link")]);
    m_wireless_link_isSet = !json[QString("wireless_link")].isNull() && m_wireless_link_isValid;

    m_wwn_isValid = ::OpenAPI::fromJsonValue(m_wwn, json[QString("wwn")]);
    m_wwn_isSet = !json[QString("wwn")].isNull() && m_wwn_isValid;
}

QString OAIInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInterface::asJsonObject() const {
    QJsonObject obj;
    if (m__occupied_isSet) {
        obj.insert(QString("_occupied"), ::OpenAPI::toJsonValue(m__occupied));
    }
    if (m_bridge.isSet()) {
        obj.insert(QString("bridge"), ::OpenAPI::toJsonValue(m_bridge));
    }
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_cable_end_isSet) {
        obj.insert(QString("cable_end"), ::OpenAPI::toJsonValue(m_cable_end));
    }
    if (m_connected_endpoints.size() > 0) {
        obj.insert(QString("connected_endpoints"), ::OpenAPI::toJsonValue(m_connected_endpoints));
    }
    if (m_connected_endpoints_reachable_isSet) {
        obj.insert(QString("connected_endpoints_reachable"), ::OpenAPI::toJsonValue(m_connected_endpoints_reachable));
    }
    if (m_connected_endpoints_type_isSet) {
        obj.insert(QString("connected_endpoints_type"), ::OpenAPI::toJsonValue(m_connected_endpoints_type));
    }
    if (m_count_fhrp_groups_isSet) {
        obj.insert(QString("count_fhrp_groups"), ::OpenAPI::toJsonValue(m_count_fhrp_groups));
    }
    if (m_count_ipaddresses_isSet) {
        obj.insert(QString("count_ipaddresses"), ::OpenAPI::toJsonValue(m_count_ipaddresses));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_duplex.isSet()) {
        obj.insert(QString("duplex"), ::OpenAPI::toJsonValue(m_duplex));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_l2vpn_termination.isSet()) {
        obj.insert(QString("l2vpn_termination"), ::OpenAPI::toJsonValue(m_l2vpn_termination));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_lag.isSet()) {
        obj.insert(QString("lag"), ::OpenAPI::toJsonValue(m_lag));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_link_peers.size() > 0) {
        obj.insert(QString("link_peers"), ::OpenAPI::toJsonValue(m_link_peers));
    }
    if (m_link_peers_type_isSet) {
        obj.insert(QString("link_peers_type"), ::OpenAPI::toJsonValue(m_link_peers_type));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("mac_address"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_mark_connected_isSet) {
        obj.insert(QString("mark_connected"), ::OpenAPI::toJsonValue(m_mark_connected));
    }
    if (m_mgmt_only_isSet) {
        obj.insert(QString("mgmt_only"), ::OpenAPI::toJsonValue(m_mgmt_only));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_module.isSet()) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_mtu_isSet) {
        obj.insert(QString("mtu"), ::OpenAPI::toJsonValue(m_mtu));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_poe_mode.isSet()) {
        obj.insert(QString("poe_mode"), ::OpenAPI::toJsonValue(m_poe_mode));
    }
    if (m_poe_type.isSet()) {
        obj.insert(QString("poe_type"), ::OpenAPI::toJsonValue(m_poe_type));
    }
    if (m_rf_channel.isSet()) {
        obj.insert(QString("rf_channel"), ::OpenAPI::toJsonValue(m_rf_channel));
    }
    if (m_rf_channel_frequency_isSet) {
        obj.insert(QString("rf_channel_frequency"), ::OpenAPI::toJsonValue(m_rf_channel_frequency));
    }
    if (m_rf_channel_width_isSet) {
        obj.insert(QString("rf_channel_width"), ::OpenAPI::toJsonValue(m_rf_channel_width));
    }
    if (m_rf_role.isSet()) {
        obj.insert(QString("rf_role"), ::OpenAPI::toJsonValue(m_rf_role));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_tagged_vlans.size() > 0) {
        obj.insert(QString("tagged_vlans"), ::OpenAPI::toJsonValue(m_tagged_vlans));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tx_power_isSet) {
        obj.insert(QString("tx_power"), ::OpenAPI::toJsonValue(m_tx_power));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_untagged_vlan.isSet()) {
        obj.insert(QString("untagged_vlan"), ::OpenAPI::toJsonValue(m_untagged_vlan));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vdcs.size() > 0) {
        obj.insert(QString("vdcs"), ::OpenAPI::toJsonValue(m_vdcs));
    }
    if (m_vrf.isSet()) {
        obj.insert(QString("vrf"), ::OpenAPI::toJsonValue(m_vrf));
    }
    if (m_wireless_lans.size() > 0) {
        obj.insert(QString("wireless_lans"), ::OpenAPI::toJsonValue(m_wireless_lans));
    }
    if (m_wireless_link.isSet()) {
        obj.insert(QString("wireless_link"), ::OpenAPI::toJsonValue(m_wireless_link));
    }
    if (m_wwn_isSet) {
        obj.insert(QString("wwn"), ::OpenAPI::toJsonValue(m_wwn));
    }
    return obj;
}

bool OAIInterface::isOccupied() const {
    return m__occupied;
}
void OAIInterface::setOccupied(const bool &_occupied) {
    m__occupied = _occupied;
    m__occupied_isSet = true;
}

bool OAIInterface::is__occupied_Set() const{
    return m__occupied_isSet;
}

bool OAIInterface::is__occupied_Valid() const{
    return m__occupied_isValid;
}

OAINestedInterface OAIInterface::getBridge() const {
    return m_bridge;
}
void OAIInterface::setBridge(const OAINestedInterface &bridge) {
    m_bridge = bridge;
    m_bridge_isSet = true;
}

bool OAIInterface::is_bridge_Set() const{
    return m_bridge_isSet;
}

bool OAIInterface::is_bridge_Valid() const{
    return m_bridge_isValid;
}

OAINestedCable OAIInterface::getCable() const {
    return m_cable;
}
void OAIInterface::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAIInterface::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAIInterface::is_cable_Valid() const{
    return m_cable_isValid;
}

QString OAIInterface::getCableEnd() const {
    return m_cable_end;
}
void OAIInterface::setCableEnd(const QString &cable_end) {
    m_cable_end = cable_end;
    m_cable_end_isSet = true;
}

bool OAIInterface::is_cable_end_Set() const{
    return m_cable_end_isSet;
}

bool OAIInterface::is_cable_end_Valid() const{
    return m_cable_end_isValid;
}

QList<QString> OAIInterface::getConnectedEndpoints() const {
    return m_connected_endpoints;
}
void OAIInterface::setConnectedEndpoints(const QList<QString> &connected_endpoints) {
    m_connected_endpoints = connected_endpoints;
    m_connected_endpoints_isSet = true;
}

bool OAIInterface::is_connected_endpoints_Set() const{
    return m_connected_endpoints_isSet;
}

bool OAIInterface::is_connected_endpoints_Valid() const{
    return m_connected_endpoints_isValid;
}

bool OAIInterface::isConnectedEndpointsReachable() const {
    return m_connected_endpoints_reachable;
}
void OAIInterface::setConnectedEndpointsReachable(const bool &connected_endpoints_reachable) {
    m_connected_endpoints_reachable = connected_endpoints_reachable;
    m_connected_endpoints_reachable_isSet = true;
}

bool OAIInterface::is_connected_endpoints_reachable_Set() const{
    return m_connected_endpoints_reachable_isSet;
}

bool OAIInterface::is_connected_endpoints_reachable_Valid() const{
    return m_connected_endpoints_reachable_isValid;
}

QString OAIInterface::getConnectedEndpointsType() const {
    return m_connected_endpoints_type;
}
void OAIInterface::setConnectedEndpointsType(const QString &connected_endpoints_type) {
    m_connected_endpoints_type = connected_endpoints_type;
    m_connected_endpoints_type_isSet = true;
}

bool OAIInterface::is_connected_endpoints_type_Set() const{
    return m_connected_endpoints_type_isSet;
}

bool OAIInterface::is_connected_endpoints_type_Valid() const{
    return m_connected_endpoints_type_isValid;
}

qint32 OAIInterface::getCountFhrpGroups() const {
    return m_count_fhrp_groups;
}
void OAIInterface::setCountFhrpGroups(const qint32 &count_fhrp_groups) {
    m_count_fhrp_groups = count_fhrp_groups;
    m_count_fhrp_groups_isSet = true;
}

bool OAIInterface::is_count_fhrp_groups_Set() const{
    return m_count_fhrp_groups_isSet;
}

bool OAIInterface::is_count_fhrp_groups_Valid() const{
    return m_count_fhrp_groups_isValid;
}

qint32 OAIInterface::getCountIpaddresses() const {
    return m_count_ipaddresses;
}
void OAIInterface::setCountIpaddresses(const qint32 &count_ipaddresses) {
    m_count_ipaddresses = count_ipaddresses;
    m_count_ipaddresses_isSet = true;
}

bool OAIInterface::is_count_ipaddresses_Set() const{
    return m_count_ipaddresses_isSet;
}

bool OAIInterface::is_count_ipaddresses_Valid() const{
    return m_count_ipaddresses_isValid;
}

QDateTime OAIInterface::getCreated() const {
    return m_created;
}
void OAIInterface::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIInterface::is_created_Set() const{
    return m_created_isSet;
}

bool OAIInterface::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIInterface::getCustomFields() const {
    return m_custom_fields;
}
void OAIInterface::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIInterface::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIInterface::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIInterface::getDescription() const {
    return m_description;
}
void OAIInterface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInterface::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInterface::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIInterface::getDevice() const {
    return m_device;
}
void OAIInterface::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIInterface::is_device_Set() const{
    return m_device_isSet;
}

bool OAIInterface::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIInterface::getDisplay() const {
    return m_display;
}
void OAIInterface::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIInterface::is_display_Set() const{
    return m_display_isSet;
}

bool OAIInterface::is_display_Valid() const{
    return m_display_isValid;
}

OAIDuplex OAIInterface::getDuplex() const {
    return m_duplex;
}
void OAIInterface::setDuplex(const OAIDuplex &duplex) {
    m_duplex = duplex;
    m_duplex_isSet = true;
}

bool OAIInterface::is_duplex_Set() const{
    return m_duplex_isSet;
}

bool OAIInterface::is_duplex_Valid() const{
    return m_duplex_isValid;
}

bool OAIInterface::isEnabled() const {
    return m_enabled;
}
void OAIInterface::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIInterface::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIInterface::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIInterface::getId() const {
    return m_id;
}
void OAIInterface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInterface::is_id_Valid() const{
    return m_id_isValid;
}

OAINestedL2VPNTermination OAIInterface::getL2vpnTermination() const {
    return m_l2vpn_termination;
}
void OAIInterface::setL2vpnTermination(const OAINestedL2VPNTermination &l2vpn_termination) {
    m_l2vpn_termination = l2vpn_termination;
    m_l2vpn_termination_isSet = true;
}

bool OAIInterface::is_l2vpn_termination_Set() const{
    return m_l2vpn_termination_isSet;
}

bool OAIInterface::is_l2vpn_termination_Valid() const{
    return m_l2vpn_termination_isValid;
}

QString OAIInterface::getLabel() const {
    return m_label;
}
void OAIInterface::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIInterface::is_label_Set() const{
    return m_label_isSet;
}

bool OAIInterface::is_label_Valid() const{
    return m_label_isValid;
}

OAINestedInterface OAIInterface::getLag() const {
    return m_lag;
}
void OAIInterface::setLag(const OAINestedInterface &lag) {
    m_lag = lag;
    m_lag_isSet = true;
}

bool OAIInterface::is_lag_Set() const{
    return m_lag_isSet;
}

bool OAIInterface::is_lag_Valid() const{
    return m_lag_isValid;
}

QDateTime OAIInterface::getLastUpdated() const {
    return m_last_updated;
}
void OAIInterface::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIInterface::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIInterface::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<QString> OAIInterface::getLinkPeers() const {
    return m_link_peers;
}
void OAIInterface::setLinkPeers(const QList<QString> &link_peers) {
    m_link_peers = link_peers;
    m_link_peers_isSet = true;
}

bool OAIInterface::is_link_peers_Set() const{
    return m_link_peers_isSet;
}

bool OAIInterface::is_link_peers_Valid() const{
    return m_link_peers_isValid;
}

QString OAIInterface::getLinkPeersType() const {
    return m_link_peers_type;
}
void OAIInterface::setLinkPeersType(const QString &link_peers_type) {
    m_link_peers_type = link_peers_type;
    m_link_peers_type_isSet = true;
}

bool OAIInterface::is_link_peers_type_Set() const{
    return m_link_peers_type_isSet;
}

bool OAIInterface::is_link_peers_type_Valid() const{
    return m_link_peers_type_isValid;
}

QString OAIInterface::getMacAddress() const {
    return m_mac_address;
}
void OAIInterface::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIInterface::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIInterface::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

bool OAIInterface::isMarkConnected() const {
    return m_mark_connected;
}
void OAIInterface::setMarkConnected(const bool &mark_connected) {
    m_mark_connected = mark_connected;
    m_mark_connected_isSet = true;
}

bool OAIInterface::is_mark_connected_Set() const{
    return m_mark_connected_isSet;
}

bool OAIInterface::is_mark_connected_Valid() const{
    return m_mark_connected_isValid;
}

bool OAIInterface::isMgmtOnly() const {
    return m_mgmt_only;
}
void OAIInterface::setMgmtOnly(const bool &mgmt_only) {
    m_mgmt_only = mgmt_only;
    m_mgmt_only_isSet = true;
}

bool OAIInterface::is_mgmt_only_Set() const{
    return m_mgmt_only_isSet;
}

bool OAIInterface::is_mgmt_only_Valid() const{
    return m_mgmt_only_isValid;
}

OAIMode OAIInterface::getMode() const {
    return m_mode;
}
void OAIInterface::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIInterface::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIInterface::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIComponentNestedModule OAIInterface::getModule() const {
    return m_module;
}
void OAIInterface::setModule(const OAIComponentNestedModule &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIInterface::is_module_Set() const{
    return m_module_isSet;
}

bool OAIInterface::is_module_Valid() const{
    return m_module_isValid;
}

qint32 OAIInterface::getMtu() const {
    return m_mtu;
}
void OAIInterface::setMtu(const qint32 &mtu) {
    m_mtu = mtu;
    m_mtu_isSet = true;
}

bool OAIInterface::is_mtu_Set() const{
    return m_mtu_isSet;
}

bool OAIInterface::is_mtu_Valid() const{
    return m_mtu_isValid;
}

QString OAIInterface::getName() const {
    return m_name;
}
void OAIInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInterface::is_name_Valid() const{
    return m_name_isValid;
}

OAINestedInterface OAIInterface::getParent() const {
    return m_parent;
}
void OAIInterface::setParent(const OAINestedInterface &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIInterface::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIInterface::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIPoe_mode OAIInterface::getPoeMode() const {
    return m_poe_mode;
}
void OAIInterface::setPoeMode(const OAIPoe_mode &poe_mode) {
    m_poe_mode = poe_mode;
    m_poe_mode_isSet = true;
}

bool OAIInterface::is_poe_mode_Set() const{
    return m_poe_mode_isSet;
}

bool OAIInterface::is_poe_mode_Valid() const{
    return m_poe_mode_isValid;
}

OAIPoe_type OAIInterface::getPoeType() const {
    return m_poe_type;
}
void OAIInterface::setPoeType(const OAIPoe_type &poe_type) {
    m_poe_type = poe_type;
    m_poe_type_isSet = true;
}

bool OAIInterface::is_poe_type_Set() const{
    return m_poe_type_isSet;
}

bool OAIInterface::is_poe_type_Valid() const{
    return m_poe_type_isValid;
}

OAIRf_channel OAIInterface::getRfChannel() const {
    return m_rf_channel;
}
void OAIInterface::setRfChannel(const OAIRf_channel &rf_channel) {
    m_rf_channel = rf_channel;
    m_rf_channel_isSet = true;
}

bool OAIInterface::is_rf_channel_Set() const{
    return m_rf_channel_isSet;
}

bool OAIInterface::is_rf_channel_Valid() const{
    return m_rf_channel_isValid;
}

double OAIInterface::getRfChannelFrequency() const {
    return m_rf_channel_frequency;
}
void OAIInterface::setRfChannelFrequency(const double &rf_channel_frequency) {
    m_rf_channel_frequency = rf_channel_frequency;
    m_rf_channel_frequency_isSet = true;
}

bool OAIInterface::is_rf_channel_frequency_Set() const{
    return m_rf_channel_frequency_isSet;
}

bool OAIInterface::is_rf_channel_frequency_Valid() const{
    return m_rf_channel_frequency_isValid;
}

double OAIInterface::getRfChannelWidth() const {
    return m_rf_channel_width;
}
void OAIInterface::setRfChannelWidth(const double &rf_channel_width) {
    m_rf_channel_width = rf_channel_width;
    m_rf_channel_width_isSet = true;
}

bool OAIInterface::is_rf_channel_width_Set() const{
    return m_rf_channel_width_isSet;
}

bool OAIInterface::is_rf_channel_width_Valid() const{
    return m_rf_channel_width_isValid;
}

OAIRf_role OAIInterface::getRfRole() const {
    return m_rf_role;
}
void OAIInterface::setRfRole(const OAIRf_role &rf_role) {
    m_rf_role = rf_role;
    m_rf_role_isSet = true;
}

bool OAIInterface::is_rf_role_Set() const{
    return m_rf_role_isSet;
}

bool OAIInterface::is_rf_role_Valid() const{
    return m_rf_role_isValid;
}

qint32 OAIInterface::getSpeed() const {
    return m_speed;
}
void OAIInterface::setSpeed(const qint32 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIInterface::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIInterface::is_speed_Valid() const{
    return m_speed_isValid;
}

QSet<OAINestedVLAN> OAIInterface::getTaggedVlans() const {
    return m_tagged_vlans;
}
void OAIInterface::setTaggedVlans(const QSet<OAINestedVLAN> &tagged_vlans) {
    m_tagged_vlans = tagged_vlans;
    m_tagged_vlans_isSet = true;
}

bool OAIInterface::is_tagged_vlans_Set() const{
    return m_tagged_vlans_isSet;
}

bool OAIInterface::is_tagged_vlans_Valid() const{
    return m_tagged_vlans_isValid;
}

QList<OAINestedTag> OAIInterface::getTags() const {
    return m_tags;
}
void OAIInterface::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIInterface::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIInterface::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIInterface::getTxPower() const {
    return m_tx_power;
}
void OAIInterface::setTxPower(const qint32 &tx_power) {
    m_tx_power = tx_power;
    m_tx_power_isSet = true;
}

bool OAIInterface::is_tx_power_Set() const{
    return m_tx_power_isSet;
}

bool OAIInterface::is_tx_power_Valid() const{
    return m_tx_power_isValid;
}

OAIType_3 OAIInterface::getType() const {
    return m_type;
}
void OAIInterface::setType(const OAIType_3 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInterface::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInterface::is_type_Valid() const{
    return m_type_isValid;
}

OAINestedVLAN OAIInterface::getUntaggedVlan() const {
    return m_untagged_vlan;
}
void OAIInterface::setUntaggedVlan(const OAINestedVLAN &untagged_vlan) {
    m_untagged_vlan = untagged_vlan;
    m_untagged_vlan_isSet = true;
}

bool OAIInterface::is_untagged_vlan_Set() const{
    return m_untagged_vlan_isSet;
}

bool OAIInterface::is_untagged_vlan_Valid() const{
    return m_untagged_vlan_isValid;
}

QString OAIInterface::getUrl() const {
    return m_url;
}
void OAIInterface::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInterface::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInterface::is_url_Valid() const{
    return m_url_isValid;
}

QSet<OAINestedVirtualDeviceContext> OAIInterface::getVdcs() const {
    return m_vdcs;
}
void OAIInterface::setVdcs(const QSet<OAINestedVirtualDeviceContext> &vdcs) {
    m_vdcs = vdcs;
    m_vdcs_isSet = true;
}

bool OAIInterface::is_vdcs_Set() const{
    return m_vdcs_isSet;
}

bool OAIInterface::is_vdcs_Valid() const{
    return m_vdcs_isValid;
}

OAINestedVRF OAIInterface::getVrf() const {
    return m_vrf;
}
void OAIInterface::setVrf(const OAINestedVRF &vrf) {
    m_vrf = vrf;
    m_vrf_isSet = true;
}

bool OAIInterface::is_vrf_Set() const{
    return m_vrf_isSet;
}

bool OAIInterface::is_vrf_Valid() const{
    return m_vrf_isValid;
}

QSet<OAINestedWirelessLAN> OAIInterface::getWirelessLans() const {
    return m_wireless_lans;
}
void OAIInterface::setWirelessLans(const QSet<OAINestedWirelessLAN> &wireless_lans) {
    m_wireless_lans = wireless_lans;
    m_wireless_lans_isSet = true;
}

bool OAIInterface::is_wireless_lans_Set() const{
    return m_wireless_lans_isSet;
}

bool OAIInterface::is_wireless_lans_Valid() const{
    return m_wireless_lans_isValid;
}

OAINestedWirelessLink OAIInterface::getWirelessLink() const {
    return m_wireless_link;
}
void OAIInterface::setWirelessLink(const OAINestedWirelessLink &wireless_link) {
    m_wireless_link = wireless_link;
    m_wireless_link_isSet = true;
}

bool OAIInterface::is_wireless_link_Set() const{
    return m_wireless_link_isSet;
}

bool OAIInterface::is_wireless_link_Valid() const{
    return m_wireless_link_isValid;
}

QString OAIInterface::getWwn() const {
    return m_wwn;
}
void OAIInterface::setWwn(const QString &wwn) {
    m_wwn = wwn;
    m_wwn_isSet = true;
}

bool OAIInterface::is_wwn_Set() const{
    return m_wwn_isSet;
}

bool OAIInterface::is_wwn_Valid() const{
    return m_wwn_isValid;
}

bool OAIInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__occupied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bridge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoints_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoints_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_fhrp_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_ipaddresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplex.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l2vpn_termination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_peers_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mgmt_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poe_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poe_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_channel_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_channel_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_vlans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_untagged_vlan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vdcs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_lans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wwn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
