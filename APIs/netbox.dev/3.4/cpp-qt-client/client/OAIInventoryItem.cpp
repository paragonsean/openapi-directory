/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryItem::OAIInventoryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryItem::OAIInventoryItem() {
    this->initializeModel();
}

OAIInventoryItem::~OAIInventoryItem() {}

void OAIInventoryItem::initializeModel() {

    m__depth_isSet = false;
    m__depth_isValid = false;

    m_asset_tag_isSet = false;
    m_asset_tag_isValid = false;

    m_component_isSet = false;
    m_component_isValid = false;

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_component_type_isSet = false;
    m_component_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_discovered_isSet = false;
    m_discovered_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_part_id_isSet = false;
    m_part_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIInventoryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryItem::fromJsonObject(QJsonObject json) {

    m__depth_isValid = ::OpenAPI::fromJsonValue(m__depth, json[QString("_depth")]);
    m__depth_isSet = !json[QString("_depth")].isNull() && m__depth_isValid;

    m_asset_tag_isValid = ::OpenAPI::fromJsonValue(m_asset_tag, json[QString("asset_tag")]);
    m_asset_tag_isSet = !json[QString("asset_tag")].isNull() && m_asset_tag_isValid;

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("component_id")]);
    m_component_id_isSet = !json[QString("component_id")].isNull() && m_component_id_isValid;

    m_component_type_isValid = ::OpenAPI::fromJsonValue(m_component_type, json[QString("component_type")]);
    m_component_type_isSet = !json[QString("component_type")].isNull() && m_component_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_discovered_isValid = ::OpenAPI::fromJsonValue(m_discovered, json[QString("discovered")]);
    m_discovered_isSet = !json[QString("discovered")].isNull() && m_discovered_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_part_id_isValid = ::OpenAPI::fromJsonValue(m_part_id, json[QString("part_id")]);
    m_part_id_isSet = !json[QString("part_id")].isNull() && m_part_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIInventoryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryItem::asJsonObject() const {
    QJsonObject obj;
    if (m__depth_isSet) {
        obj.insert(QString("_depth"), ::OpenAPI::toJsonValue(m__depth));
    }
    if (m_asset_tag_isSet) {
        obj.insert(QString("asset_tag"), ::OpenAPI::toJsonValue(m_asset_tag));
    }
    if (m_component_isSet) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_component_id_isSet) {
        obj.insert(QString("component_id"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_component_type_isSet) {
        obj.insert(QString("component_type"), ::OpenAPI::toJsonValue(m_component_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_discovered_isSet) {
        obj.insert(QString("discovered"), ::OpenAPI::toJsonValue(m_discovered));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_manufacturer.isSet()) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_part_id_isSet) {
        obj.insert(QString("part_id"), ::OpenAPI::toJsonValue(m_part_id));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIInventoryItem::getDepth() const {
    return m__depth;
}
void OAIInventoryItem::setDepth(const qint32 &_depth) {
    m__depth = _depth;
    m__depth_isSet = true;
}

bool OAIInventoryItem::is__depth_Set() const{
    return m__depth_isSet;
}

bool OAIInventoryItem::is__depth_Valid() const{
    return m__depth_isValid;
}

QString OAIInventoryItem::getAssetTag() const {
    return m_asset_tag;
}
void OAIInventoryItem::setAssetTag(const QString &asset_tag) {
    m_asset_tag = asset_tag;
    m_asset_tag_isSet = true;
}

bool OAIInventoryItem::is_asset_tag_Set() const{
    return m_asset_tag_isSet;
}

bool OAIInventoryItem::is_asset_tag_Valid() const{
    return m_asset_tag_isValid;
}

OAIObject OAIInventoryItem::getComponent() const {
    return m_component;
}
void OAIInventoryItem::setComponent(const OAIObject &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIInventoryItem::is_component_Set() const{
    return m_component_isSet;
}

bool OAIInventoryItem::is_component_Valid() const{
    return m_component_isValid;
}

qint32 OAIInventoryItem::getComponentId() const {
    return m_component_id;
}
void OAIInventoryItem::setComponentId(const qint32 &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIInventoryItem::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIInventoryItem::is_component_id_Valid() const{
    return m_component_id_isValid;
}

QString OAIInventoryItem::getComponentType() const {
    return m_component_type;
}
void OAIInventoryItem::setComponentType(const QString &component_type) {
    m_component_type = component_type;
    m_component_type_isSet = true;
}

bool OAIInventoryItem::is_component_type_Set() const{
    return m_component_type_isSet;
}

bool OAIInventoryItem::is_component_type_Valid() const{
    return m_component_type_isValid;
}

QDateTime OAIInventoryItem::getCreated() const {
    return m_created;
}
void OAIInventoryItem::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIInventoryItem::is_created_Set() const{
    return m_created_isSet;
}

bool OAIInventoryItem::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIInventoryItem::getCustomFields() const {
    return m_custom_fields;
}
void OAIInventoryItem::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIInventoryItem::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIInventoryItem::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIInventoryItem::getDescription() const {
    return m_description;
}
void OAIInventoryItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInventoryItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInventoryItem::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIInventoryItem::getDevice() const {
    return m_device;
}
void OAIInventoryItem::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIInventoryItem::is_device_Set() const{
    return m_device_isSet;
}

bool OAIInventoryItem::is_device_Valid() const{
    return m_device_isValid;
}

bool OAIInventoryItem::isDiscovered() const {
    return m_discovered;
}
void OAIInventoryItem::setDiscovered(const bool &discovered) {
    m_discovered = discovered;
    m_discovered_isSet = true;
}

bool OAIInventoryItem::is_discovered_Set() const{
    return m_discovered_isSet;
}

bool OAIInventoryItem::is_discovered_Valid() const{
    return m_discovered_isValid;
}

QString OAIInventoryItem::getDisplay() const {
    return m_display;
}
void OAIInventoryItem::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIInventoryItem::is_display_Set() const{
    return m_display_isSet;
}

bool OAIInventoryItem::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIInventoryItem::getId() const {
    return m_id;
}
void OAIInventoryItem::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInventoryItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInventoryItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInventoryItem::getLabel() const {
    return m_label;
}
void OAIInventoryItem::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIInventoryItem::is_label_Set() const{
    return m_label_isSet;
}

bool OAIInventoryItem::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIInventoryItem::getLastUpdated() const {
    return m_last_updated;
}
void OAIInventoryItem::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIInventoryItem::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIInventoryItem::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAINestedManufacturer OAIInventoryItem::getManufacturer() const {
    return m_manufacturer;
}
void OAIInventoryItem::setManufacturer(const OAINestedManufacturer &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIInventoryItem::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIInventoryItem::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIInventoryItem::getName() const {
    return m_name;
}
void OAIInventoryItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInventoryItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInventoryItem::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIInventoryItem::getParent() const {
    return m_parent;
}
void OAIInventoryItem::setParent(const qint32 &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIInventoryItem::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIInventoryItem::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIInventoryItem::getPartId() const {
    return m_part_id;
}
void OAIInventoryItem::setPartId(const QString &part_id) {
    m_part_id = part_id;
    m_part_id_isSet = true;
}

bool OAIInventoryItem::is_part_id_Set() const{
    return m_part_id_isSet;
}

bool OAIInventoryItem::is_part_id_Valid() const{
    return m_part_id_isValid;
}

OAINestedInventoryItemRole OAIInventoryItem::getRole() const {
    return m_role;
}
void OAIInventoryItem::setRole(const OAINestedInventoryItemRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIInventoryItem::is_role_Set() const{
    return m_role_isSet;
}

bool OAIInventoryItem::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIInventoryItem::getSerial() const {
    return m_serial;
}
void OAIInventoryItem::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIInventoryItem::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIInventoryItem::is_serial_Valid() const{
    return m_serial_isValid;
}

QList<OAINestedTag> OAIInventoryItem::getTags() const {
    return m_tags;
}
void OAIInventoryItem::setTags(const QList<OAINestedTag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIInventoryItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIInventoryItem::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIInventoryItem::getUrl() const {
    return m_url;
}
void OAIInventoryItem::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIInventoryItem::is_url_Set() const{
    return m_url_isSet;
}

bool OAIInventoryItem::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIInventoryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
