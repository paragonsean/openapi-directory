/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedFilter::OAISavedFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedFilter::OAISavedFilter() {
    this->initializeModel();
}

OAISavedFilter::~OAISavedFilter() {}

void OAISavedFilter::initializeModel() {

    m_content_types_isSet = false;
    m_content_types_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISavedFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedFilter::fromJsonObject(QJsonObject json) {

    m_content_types_isValid = ::OpenAPI::fromJsonValue(m_content_types, json[QString("content_types")]);
    m_content_types_isSet = !json[QString("content_types")].isNull() && m_content_types_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAISavedFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_content_types.size() > 0) {
        obj.insert(QString("content_types"), ::OpenAPI::toJsonValue(m_content_types));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_shared_isSet) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QSet<QString> OAISavedFilter::getContentTypes() const {
    return m_content_types;
}
void OAISavedFilter::setContentTypes(const QSet<QString> &content_types) {
    m_content_types = content_types;
    m_content_types_isSet = true;
}

bool OAISavedFilter::is_content_types_Set() const{
    return m_content_types_isSet;
}

bool OAISavedFilter::is_content_types_Valid() const{
    return m_content_types_isValid;
}

QDateTime OAISavedFilter::getCreated() const {
    return m_created;
}
void OAISavedFilter::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISavedFilter::is_created_Set() const{
    return m_created_isSet;
}

bool OAISavedFilter::is_created_Valid() const{
    return m_created_isValid;
}

QString OAISavedFilter::getDescription() const {
    return m_description;
}
void OAISavedFilter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavedFilter::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavedFilter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISavedFilter::getDisplay() const {
    return m_display;
}
void OAISavedFilter::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAISavedFilter::is_display_Set() const{
    return m_display_isSet;
}

bool OAISavedFilter::is_display_Valid() const{
    return m_display_isValid;
}

bool OAISavedFilter::isEnabled() const {
    return m_enabled;
}
void OAISavedFilter::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISavedFilter::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISavedFilter::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAISavedFilter::getId() const {
    return m_id;
}
void OAISavedFilter::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISavedFilter::is_id_Set() const{
    return m_id_isSet;
}

bool OAISavedFilter::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAISavedFilter::getLastUpdated() const {
    return m_last_updated;
}
void OAISavedFilter::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAISavedFilter::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAISavedFilter::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAISavedFilter::getName() const {
    return m_name;
}
void OAISavedFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISavedFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAISavedFilter::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAISavedFilter::getParameters() const {
    return m_parameters;
}
void OAISavedFilter::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAISavedFilter::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAISavedFilter::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAISavedFilter::isShared() const {
    return m_shared;
}
void OAISavedFilter::setShared(const bool &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAISavedFilter::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAISavedFilter::is_shared_Valid() const{
    return m_shared_isValid;
}

QString OAISavedFilter::getSlug() const {
    return m_slug;
}
void OAISavedFilter::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAISavedFilter::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAISavedFilter::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAISavedFilter::getUrl() const {
    return m_url;
}
void OAISavedFilter::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISavedFilter::is_url_Set() const{
    return m_url_isSet;
}

bool OAISavedFilter::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAISavedFilter::getUser() const {
    return m_user;
}
void OAISavedFilter::setUser(const qint32 &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISavedFilter::is_user_Set() const{
    return m_user_isSet;
}

bool OAISavedFilter::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAISavedFilter::getWeight() const {
    return m_weight;
}
void OAISavedFilter::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISavedFilter::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISavedFilter::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISavedFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_types_isValid && m_name_isValid && m_parameters_isValid && m_slug_isValid && true;
}

} // namespace OpenAPI
