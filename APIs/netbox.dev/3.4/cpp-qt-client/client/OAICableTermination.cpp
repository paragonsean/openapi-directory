/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICableTermination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICableTermination::OAICableTermination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICableTermination::OAICableTermination() {
    this->initializeModel();
}

OAICableTermination::~OAICableTermination() {}

void OAICableTermination::initializeModel() {

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_cable_end_isSet = false;
    m_cable_end_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_termination_isSet = false;
    m_termination_isValid = false;

    m_termination_id_isSet = false;
    m_termination_id_isValid = false;

    m_termination_type_isSet = false;
    m_termination_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICableTermination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICableTermination::fromJsonObject(QJsonObject json) {

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_cable_end_isValid = ::OpenAPI::fromJsonValue(m_cable_end, json[QString("cable_end")]);
    m_cable_end_isSet = !json[QString("cable_end")].isNull() && m_cable_end_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_termination_isValid = ::OpenAPI::fromJsonValue(m_termination, json[QString("termination")]);
    m_termination_isSet = !json[QString("termination")].isNull() && m_termination_isValid;

    m_termination_id_isValid = ::OpenAPI::fromJsonValue(m_termination_id, json[QString("termination_id")]);
    m_termination_id_isSet = !json[QString("termination_id")].isNull() && m_termination_id_isValid;

    m_termination_type_isValid = ::OpenAPI::fromJsonValue(m_termination_type, json[QString("termination_type")]);
    m_termination_type_isSet = !json[QString("termination_type")].isNull() && m_termination_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICableTermination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICableTermination::asJsonObject() const {
    QJsonObject obj;
    if (m_cable_isSet) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_cable_end_isSet) {
        obj.insert(QString("cable_end"), ::OpenAPI::toJsonValue(m_cable_end));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_termination_isSet) {
        obj.insert(QString("termination"), ::OpenAPI::toJsonValue(m_termination));
    }
    if (m_termination_id_isSet) {
        obj.insert(QString("termination_id"), ::OpenAPI::toJsonValue(m_termination_id));
    }
    if (m_termination_type_isSet) {
        obj.insert(QString("termination_type"), ::OpenAPI::toJsonValue(m_termination_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAICableTermination::getCable() const {
    return m_cable;
}
void OAICableTermination::setCable(const qint32 &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAICableTermination::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAICableTermination::is_cable_Valid() const{
    return m_cable_isValid;
}

QString OAICableTermination::getCableEnd() const {
    return m_cable_end;
}
void OAICableTermination::setCableEnd(const QString &cable_end) {
    m_cable_end = cable_end;
    m_cable_end_isSet = true;
}

bool OAICableTermination::is_cable_end_Set() const{
    return m_cable_end_isSet;
}

bool OAICableTermination::is_cable_end_Valid() const{
    return m_cable_end_isValid;
}

QString OAICableTermination::getDisplay() const {
    return m_display;
}
void OAICableTermination::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAICableTermination::is_display_Set() const{
    return m_display_isSet;
}

bool OAICableTermination::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAICableTermination::getId() const {
    return m_id;
}
void OAICableTermination::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICableTermination::is_id_Set() const{
    return m_id_isSet;
}

bool OAICableTermination::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAICableTermination::getTermination() const {
    return m_termination;
}
void OAICableTermination::setTermination(const OAIObject &termination) {
    m_termination = termination;
    m_termination_isSet = true;
}

bool OAICableTermination::is_termination_Set() const{
    return m_termination_isSet;
}

bool OAICableTermination::is_termination_Valid() const{
    return m_termination_isValid;
}

qint32 OAICableTermination::getTerminationId() const {
    return m_termination_id;
}
void OAICableTermination::setTerminationId(const qint32 &termination_id) {
    m_termination_id = termination_id;
    m_termination_id_isSet = true;
}

bool OAICableTermination::is_termination_id_Set() const{
    return m_termination_id_isSet;
}

bool OAICableTermination::is_termination_id_Valid() const{
    return m_termination_id_isValid;
}

QString OAICableTermination::getTerminationType() const {
    return m_termination_type;
}
void OAICableTermination::setTerminationType(const QString &termination_type) {
    m_termination_type = termination_type;
    m_termination_type_isSet = true;
}

bool OAICableTermination::is_termination_type_Set() const{
    return m_termination_type_isSet;
}

bool OAICableTermination::is_termination_type_Valid() const{
    return m_termination_type_isValid;
}

QString OAICableTermination::getUrl() const {
    return m_url;
}
void OAICableTermination::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICableTermination::is_url_Set() const{
    return m_url_isSet;
}

bool OAICableTermination::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICableTermination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cable_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICableTermination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cable_isValid && m_cable_end_isValid && m_termination_id_isValid && m_termination_type_isValid && true;
}

} // namespace OpenAPI
