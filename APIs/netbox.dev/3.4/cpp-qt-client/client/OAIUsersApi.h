/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroup.h"
#include "OAIObjectPermission.h"
#include "OAIToken.h"
#include "OAIUser.h"
#include "OAIUsers_groups_list_200_response.h"
#include "OAIUsers_permissions_list_200_response.h"
#include "OAIUsers_tokens_list_200_response.h"
#include "OAIUsers_users_list_200_response.h"
#include "OAIWritableObjectPermission.h"
#include "OAIWritableToken.h"
#include "OAIWritableUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void usersConfigList();


    virtual void usersGroupsBulkDelete();

    /**
    * @param[in]  oai_group OAIGroup [required]
    */
    virtual void usersGroupsBulkPartialUpdate(const OAIGroup &oai_group);

    /**
    * @param[in]  oai_group OAIGroup [required]
    */
    virtual void usersGroupsBulkUpdate(const OAIGroup &oai_group);

    /**
    * @param[in]  oai_group OAIGroup [required]
    */
    virtual void usersGroupsCreate(const OAIGroup &oai_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_group OAIGroup [required]
    */
    virtual void usersGroupsPartialUpdate(const qint32 &id, const OAIGroup &oai_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_group OAIGroup [required]
    */
    virtual void usersGroupsUpdate(const qint32 &id, const OAIGroup &oai_group);


    virtual void usersPermissionsBulkDelete();

    /**
    * @param[in]  oai_writable_object_permission OAIWritableObjectPermission [required]
    */
    virtual void usersPermissionsBulkPartialUpdate(const OAIWritableObjectPermission &oai_writable_object_permission);

    /**
    * @param[in]  oai_writable_object_permission OAIWritableObjectPermission [required]
    */
    virtual void usersPermissionsBulkUpdate(const OAIWritableObjectPermission &oai_writable_object_permission);

    /**
    * @param[in]  oai_writable_object_permission OAIWritableObjectPermission [required]
    */
    virtual void usersPermissionsCreate(const OAIWritableObjectPermission &oai_writable_object_permission);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersPermissionsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  enabled QString [optional]
    * @param[in]  object_types QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  name__empty QString [optional]
    * @param[in]  object_types__n QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  user_id__n QString [optional]
    * @param[in]  user__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersPermissionsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &object_types__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_object_permission OAIWritableObjectPermission [required]
    */
    virtual void usersPermissionsPartialUpdate(const qint32 &id, const OAIWritableObjectPermission &oai_writable_object_permission);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersPermissionsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_object_permission OAIWritableObjectPermission [required]
    */
    virtual void usersPermissionsUpdate(const qint32 &id, const OAIWritableObjectPermission &oai_writable_object_permission);


    virtual void usersTokensBulkDelete();

    /**
    * @param[in]  oai_writable_token OAIWritableToken [required]
    */
    virtual void usersTokensBulkPartialUpdate(const OAIWritableToken &oai_writable_token);

    /**
    * @param[in]  oai_writable_token OAIWritableToken [required]
    */
    virtual void usersTokensBulkUpdate(const OAIWritableToken &oai_writable_token);

    /**
    * @param[in]  oai_writable_token OAIWritableToken [required]
    */
    virtual void usersTokensCreate(const OAIWritableToken &oai_writable_token);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersTokensDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  write_enabled QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  expires QString [optional]
    * @param[in]  expires__gte QString [optional]
    * @param[in]  expires__lte QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  key__n QString [optional]
    * @param[in]  key__ic QString [optional]
    * @param[in]  key__nic QString [optional]
    * @param[in]  key__iew QString [optional]
    * @param[in]  key__niew QString [optional]
    * @param[in]  key__isw QString [optional]
    * @param[in]  key__nisw QString [optional]
    * @param[in]  key__ie QString [optional]
    * @param[in]  key__nie QString [optional]
    * @param[in]  key__empty QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  description__empty QString [optional]
    * @param[in]  user_id__n QString [optional]
    * @param[in]  user__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersTokensList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &write_enabled = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expires = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expires__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expires__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_token OAIWritableToken [required]
    */
    virtual void usersTokensPartialUpdate(const qint32 &id, const OAIWritableToken &oai_writable_token);


    virtual void usersTokensProvisionCreate();

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersTokensRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_token OAIWritableToken [required]
    */
    virtual void usersTokensUpdate(const qint32 &id, const OAIWritableToken &oai_writable_token);


    virtual void usersUsersBulkDelete();

    /**
    * @param[in]  oai_writable_user OAIWritableUser [required]
    */
    virtual void usersUsersBulkPartialUpdate(const OAIWritableUser &oai_writable_user);

    /**
    * @param[in]  oai_writable_user OAIWritableUser [required]
    */
    virtual void usersUsersBulkUpdate(const OAIWritableUser &oai_writable_user);

    /**
    * @param[in]  oai_writable_user OAIWritableUser [required]
    */
    virtual void usersUsersCreate(const OAIWritableUser &oai_writable_user);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersUsersDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  is_staff QString [optional]
    * @param[in]  is_active QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  username__n QString [optional]
    * @param[in]  username__ic QString [optional]
    * @param[in]  username__nic QString [optional]
    * @param[in]  username__iew QString [optional]
    * @param[in]  username__niew QString [optional]
    * @param[in]  username__isw QString [optional]
    * @param[in]  username__nisw QString [optional]
    * @param[in]  username__ie QString [optional]
    * @param[in]  username__nie QString [optional]
    * @param[in]  username__empty QString [optional]
    * @param[in]  first_name__n QString [optional]
    * @param[in]  first_name__ic QString [optional]
    * @param[in]  first_name__nic QString [optional]
    * @param[in]  first_name__iew QString [optional]
    * @param[in]  first_name__niew QString [optional]
    * @param[in]  first_name__isw QString [optional]
    * @param[in]  first_name__nisw QString [optional]
    * @param[in]  first_name__ie QString [optional]
    * @param[in]  first_name__nie QString [optional]
    * @param[in]  first_name__empty QString [optional]
    * @param[in]  last_name__n QString [optional]
    * @param[in]  last_name__ic QString [optional]
    * @param[in]  last_name__nic QString [optional]
    * @param[in]  last_name__iew QString [optional]
    * @param[in]  last_name__niew QString [optional]
    * @param[in]  last_name__isw QString [optional]
    * @param[in]  last_name__nisw QString [optional]
    * @param[in]  last_name__ie QString [optional]
    * @param[in]  last_name__nie QString [optional]
    * @param[in]  last_name__empty QString [optional]
    * @param[in]  email__n QString [optional]
    * @param[in]  email__ic QString [optional]
    * @param[in]  email__nic QString [optional]
    * @param[in]  email__iew QString [optional]
    * @param[in]  email__niew QString [optional]
    * @param[in]  email__isw QString [optional]
    * @param[in]  email__nisw QString [optional]
    * @param[in]  email__ie QString [optional]
    * @param[in]  email__nie QString [optional]
    * @param[in]  email__empty QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  ordering QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void usersUsersList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_staff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_active = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email__empty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_user OAIWritableUser [required]
    */
    virtual void usersUsersPartialUpdate(const qint32 &id, const OAIWritableUser &oai_writable_user);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersUsersRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_user OAIWritableUser [required]
    */
    virtual void usersUsersUpdate(const qint32 &id, const OAIWritableUser &oai_writable_user);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersConfigListCallback(OAIHttpRequestWorker *worker);
    void usersGroupsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void usersGroupsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersGroupsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void usersGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void usersGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void usersGroupsListCallback(OAIHttpRequestWorker *worker);
    void usersGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersGroupsReadCallback(OAIHttpRequestWorker *worker);
    void usersGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsCreateCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsDeleteCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsListCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsReadCallback(OAIHttpRequestWorker *worker);
    void usersPermissionsUpdateCallback(OAIHttpRequestWorker *worker);
    void usersTokensBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void usersTokensBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersTokensBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void usersTokensCreateCallback(OAIHttpRequestWorker *worker);
    void usersTokensDeleteCallback(OAIHttpRequestWorker *worker);
    void usersTokensListCallback(OAIHttpRequestWorker *worker);
    void usersTokensPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersTokensProvisionCreateCallback(OAIHttpRequestWorker *worker);
    void usersTokensReadCallback(OAIHttpRequestWorker *worker);
    void usersTokensUpdateCallback(OAIHttpRequestWorker *worker);
    void usersUsersBulkDeleteCallback(OAIHttpRequestWorker *worker);
    void usersUsersBulkPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersUsersBulkUpdateCallback(OAIHttpRequestWorker *worker);
    void usersUsersCreateCallback(OAIHttpRequestWorker *worker);
    void usersUsersDeleteCallback(OAIHttpRequestWorker *worker);
    void usersUsersListCallback(OAIHttpRequestWorker *worker);
    void usersUsersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void usersUsersReadCallback(OAIHttpRequestWorker *worker);
    void usersUsersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersConfigListSignal();
    void usersGroupsBulkDeleteSignal();
    void usersGroupsBulkPartialUpdateSignal(OAIGroup summary);
    void usersGroupsBulkUpdateSignal(OAIGroup summary);
    void usersGroupsCreateSignal(OAIGroup summary);
    void usersGroupsDeleteSignal();
    void usersGroupsListSignal(OAIUsers_groups_list_200_response summary);
    void usersGroupsPartialUpdateSignal(OAIGroup summary);
    void usersGroupsReadSignal(OAIGroup summary);
    void usersGroupsUpdateSignal(OAIGroup summary);
    void usersPermissionsBulkDeleteSignal();
    void usersPermissionsBulkPartialUpdateSignal(OAIObjectPermission summary);
    void usersPermissionsBulkUpdateSignal(OAIObjectPermission summary);
    void usersPermissionsCreateSignal(OAIObjectPermission summary);
    void usersPermissionsDeleteSignal();
    void usersPermissionsListSignal(OAIUsers_permissions_list_200_response summary);
    void usersPermissionsPartialUpdateSignal(OAIObjectPermission summary);
    void usersPermissionsReadSignal(OAIObjectPermission summary);
    void usersPermissionsUpdateSignal(OAIObjectPermission summary);
    void usersTokensBulkDeleteSignal();
    void usersTokensBulkPartialUpdateSignal(OAIToken summary);
    void usersTokensBulkUpdateSignal(OAIToken summary);
    void usersTokensCreateSignal(OAIToken summary);
    void usersTokensDeleteSignal();
    void usersTokensListSignal(OAIUsers_tokens_list_200_response summary);
    void usersTokensPartialUpdateSignal(OAIToken summary);
    void usersTokensProvisionCreateSignal();
    void usersTokensReadSignal(OAIToken summary);
    void usersTokensUpdateSignal(OAIToken summary);
    void usersUsersBulkDeleteSignal();
    void usersUsersBulkPartialUpdateSignal(OAIUser summary);
    void usersUsersBulkUpdateSignal(OAIUser summary);
    void usersUsersCreateSignal(OAIUser summary);
    void usersUsersDeleteSignal();
    void usersUsersListSignal(OAIUsers_users_list_200_response summary);
    void usersUsersPartialUpdateSignal(OAIUser summary);
    void usersUsersReadSignal(OAIUser summary);
    void usersUsersUpdateSignal(OAIUser summary);


    void usersConfigListSignalFull(OAIHttpRequestWorker *worker);
    void usersGroupsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersGroupsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void usersGroupsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void usersGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void usersGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIUsers_groups_list_200_response summary);
    void usersGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void usersGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void usersGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void usersPermissionsBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersPermissionsBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIObjectPermission summary);
    void usersPermissionsBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIObjectPermission summary);
    void usersPermissionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIObjectPermission summary);
    void usersPermissionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersPermissionsListSignalFull(OAIHttpRequestWorker *worker, OAIUsers_permissions_list_200_response summary);
    void usersPermissionsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIObjectPermission summary);
    void usersPermissionsReadSignalFull(OAIHttpRequestWorker *worker, OAIObjectPermission summary);
    void usersPermissionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIObjectPermission summary);
    void usersTokensBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersTokensBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void usersTokensBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void usersTokensCreateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void usersTokensDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersTokensListSignalFull(OAIHttpRequestWorker *worker, OAIUsers_tokens_list_200_response summary);
    void usersTokensPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void usersTokensProvisionCreateSignalFull(OAIHttpRequestWorker *worker);
    void usersTokensReadSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void usersTokensUpdateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void usersUsersBulkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersUsersBulkPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUsersBulkUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUsersCreateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUsersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersUsersListSignalFull(OAIHttpRequestWorker *worker, OAIUsers_users_list_200_response summary);
    void usersUsersPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUsersReadSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUsersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use usersConfigListSignalError() instead")
    void usersConfigListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersConfigListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsBulkDeleteSignalError() instead")
    void usersGroupsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsBulkPartialUpdateSignalError() instead")
    void usersGroupsBulkPartialUpdateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsBulkPartialUpdateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsBulkUpdateSignalError() instead")
    void usersGroupsBulkUpdateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsBulkUpdateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsCreateSignalError() instead")
    void usersGroupsCreateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsCreateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsDeleteSignalError() instead")
    void usersGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsListSignalError() instead")
    void usersGroupsListSignalE(OAIUsers_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsListSignalError(OAIUsers_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsPartialUpdateSignalError() instead")
    void usersGroupsPartialUpdateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsPartialUpdateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsReadSignalError() instead")
    void usersGroupsReadSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsReadSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsUpdateSignalError() instead")
    void usersGroupsUpdateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsUpdateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsBulkDeleteSignalError() instead")
    void usersPermissionsBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsBulkPartialUpdateSignalError() instead")
    void usersPermissionsBulkPartialUpdateSignalE(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsBulkPartialUpdateSignalError(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsBulkUpdateSignalError() instead")
    void usersPermissionsBulkUpdateSignalE(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsBulkUpdateSignalError(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsCreateSignalError() instead")
    void usersPermissionsCreateSignalE(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsCreateSignalError(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsDeleteSignalError() instead")
    void usersPermissionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsListSignalError() instead")
    void usersPermissionsListSignalE(OAIUsers_permissions_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsListSignalError(OAIUsers_permissions_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsPartialUpdateSignalError() instead")
    void usersPermissionsPartialUpdateSignalE(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsPartialUpdateSignalError(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsReadSignalError() instead")
    void usersPermissionsReadSignalE(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsReadSignalError(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsUpdateSignalError() instead")
    void usersPermissionsUpdateSignalE(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsUpdateSignalError(OAIObjectPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensBulkDeleteSignalError() instead")
    void usersTokensBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensBulkPartialUpdateSignalError() instead")
    void usersTokensBulkPartialUpdateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensBulkPartialUpdateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensBulkUpdateSignalError() instead")
    void usersTokensBulkUpdateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensBulkUpdateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensCreateSignalError() instead")
    void usersTokensCreateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensCreateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensDeleteSignalError() instead")
    void usersTokensDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensListSignalError() instead")
    void usersTokensListSignalE(OAIUsers_tokens_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensListSignalError(OAIUsers_tokens_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensPartialUpdateSignalError() instead")
    void usersTokensPartialUpdateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensPartialUpdateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensProvisionCreateSignalError() instead")
    void usersTokensProvisionCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensProvisionCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensReadSignalError() instead")
    void usersTokensReadSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensReadSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensUpdateSignalError() instead")
    void usersTokensUpdateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensUpdateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersBulkDeleteSignalError() instead")
    void usersUsersBulkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersBulkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersBulkPartialUpdateSignalError() instead")
    void usersUsersBulkPartialUpdateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersBulkPartialUpdateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersBulkUpdateSignalError() instead")
    void usersUsersBulkUpdateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersBulkUpdateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersCreateSignalError() instead")
    void usersUsersCreateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersCreateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersDeleteSignalError() instead")
    void usersUsersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersListSignalError() instead")
    void usersUsersListSignalE(OAIUsers_users_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersListSignalError(OAIUsers_users_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersPartialUpdateSignalError() instead")
    void usersUsersPartialUpdateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersPartialUpdateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersReadSignalError() instead")
    void usersUsersReadSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersReadSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersUpdateSignalError() instead")
    void usersUsersUpdateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersUpdateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersConfigListSignalErrorFull() instead")
    void usersConfigListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersConfigListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsBulkDeleteSignalErrorFull() instead")
    void usersGroupsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsBulkPartialUpdateSignalErrorFull() instead")
    void usersGroupsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsBulkUpdateSignalErrorFull() instead")
    void usersGroupsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsCreateSignalErrorFull() instead")
    void usersGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsDeleteSignalErrorFull() instead")
    void usersGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsListSignalErrorFull() instead")
    void usersGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsPartialUpdateSignalErrorFull() instead")
    void usersGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsReadSignalErrorFull() instead")
    void usersGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGroupsUpdateSignalErrorFull() instead")
    void usersGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsBulkDeleteSignalErrorFull() instead")
    void usersPermissionsBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsBulkPartialUpdateSignalErrorFull() instead")
    void usersPermissionsBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsBulkUpdateSignalErrorFull() instead")
    void usersPermissionsBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsCreateSignalErrorFull() instead")
    void usersPermissionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsDeleteSignalErrorFull() instead")
    void usersPermissionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsListSignalErrorFull() instead")
    void usersPermissionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsPartialUpdateSignalErrorFull() instead")
    void usersPermissionsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsReadSignalErrorFull() instead")
    void usersPermissionsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersPermissionsUpdateSignalErrorFull() instead")
    void usersPermissionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersPermissionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensBulkDeleteSignalErrorFull() instead")
    void usersTokensBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensBulkPartialUpdateSignalErrorFull() instead")
    void usersTokensBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensBulkUpdateSignalErrorFull() instead")
    void usersTokensBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensCreateSignalErrorFull() instead")
    void usersTokensCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensDeleteSignalErrorFull() instead")
    void usersTokensDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensListSignalErrorFull() instead")
    void usersTokensListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensPartialUpdateSignalErrorFull() instead")
    void usersTokensPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensProvisionCreateSignalErrorFull() instead")
    void usersTokensProvisionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensProvisionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensReadSignalErrorFull() instead")
    void usersTokensReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersTokensUpdateSignalErrorFull() instead")
    void usersTokensUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersTokensUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersBulkDeleteSignalErrorFull() instead")
    void usersUsersBulkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersBulkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersBulkPartialUpdateSignalErrorFull() instead")
    void usersUsersBulkPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersBulkPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersBulkUpdateSignalErrorFull() instead")
    void usersUsersBulkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersBulkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersCreateSignalErrorFull() instead")
    void usersUsersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersDeleteSignalErrorFull() instead")
    void usersUsersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersListSignalErrorFull() instead")
    void usersUsersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersPartialUpdateSignalErrorFull() instead")
    void usersUsersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersReadSignalErrorFull() instead")
    void usersUsersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUsersUpdateSignalErrorFull() instead")
    void usersUsersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUsersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
