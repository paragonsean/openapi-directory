/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAttachment::OAIImageAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAttachment::OAIImageAttachment() {
    this->initializeModel();
}

OAIImageAttachment::~OAIImageAttachment() {}

void OAIImageAttachment::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_height_isSet = false;
    m_image_height_isValid = false;

    m_image_width_isSet = false;
    m_image_width_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIImageAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAttachment::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_height_isValid = ::OpenAPI::fromJsonValue(m_image_height, json[QString("image_height")]);
    m_image_height_isSet = !json[QString("image_height")].isNull() && m_image_height_isValid;

    m_image_width_isValid = ::OpenAPI::fromJsonValue(m_image_width, json[QString("image_width")]);
    m_image_width_isSet = !json[QString("image_width")].isNull() && m_image_width_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("object_id")]);
    m_object_id_isSet = !json[QString("object_id")].isNull() && m_object_id_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIImageAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_height_isSet) {
        obj.insert(QString("image_height"), ::OpenAPI::toJsonValue(m_image_height));
    }
    if (m_image_width_isSet) {
        obj.insert(QString("image_width"), ::OpenAPI::toJsonValue(m_image_width));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("object_id"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIImageAttachment::getContentType() const {
    return m_content_type;
}
void OAIImageAttachment::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIImageAttachment::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIImageAttachment::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIImageAttachment::getCreated() const {
    return m_created;
}
void OAIImageAttachment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIImageAttachment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIImageAttachment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIImageAttachment::getDisplay() const {
    return m_display;
}
void OAIImageAttachment::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIImageAttachment::is_display_Set() const{
    return m_display_isSet;
}

bool OAIImageAttachment::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIImageAttachment::getId() const {
    return m_id;
}
void OAIImageAttachment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImageAttachment::getImage() const {
    return m_image;
}
void OAIImageAttachment::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageAttachment::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageAttachment::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIImageAttachment::getImageHeight() const {
    return m_image_height;
}
void OAIImageAttachment::setImageHeight(const qint32 &image_height) {
    m_image_height = image_height;
    m_image_height_isSet = true;
}

bool OAIImageAttachment::is_image_height_Set() const{
    return m_image_height_isSet;
}

bool OAIImageAttachment::is_image_height_Valid() const{
    return m_image_height_isValid;
}

qint32 OAIImageAttachment::getImageWidth() const {
    return m_image_width;
}
void OAIImageAttachment::setImageWidth(const qint32 &image_width) {
    m_image_width = image_width;
    m_image_width_isSet = true;
}

bool OAIImageAttachment::is_image_width_Set() const{
    return m_image_width_isSet;
}

bool OAIImageAttachment::is_image_width_Valid() const{
    return m_image_width_isValid;
}

QDateTime OAIImageAttachment::getLastUpdated() const {
    return m_last_updated;
}
void OAIImageAttachment::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIImageAttachment::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIImageAttachment::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIImageAttachment::getName() const {
    return m_name;
}
void OAIImageAttachment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageAttachment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageAttachment::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIImageAttachment::getObjectId() const {
    return m_object_id;
}
void OAIImageAttachment::setObjectId(const qint32 &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIImageAttachment::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIImageAttachment::is_object_id_Valid() const{
    return m_object_id_isValid;
}

OAIObject OAIImageAttachment::getParent() const {
    return m_parent;
}
void OAIImageAttachment::setParent(const OAIObject &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIImageAttachment::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIImageAttachment::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIImageAttachment::getUrl() const {
    return m_url;
}
void OAIImageAttachment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImageAttachment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImageAttachment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIImageAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && m_image_height_isValid && m_image_width_isValid && m_object_id_isValid && true;
}

} // namespace OpenAPI
