/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableUser::OAIWritableUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableUser::OAIWritableUser() {
    this->initializeModel();
}

OAIWritableUser::~OAIWritableUser() {}

void OAIWritableUser::initializeModel() {

    m_date_joined_isSet = false;
    m_date_joined_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_staff_isSet = false;
    m_is_staff_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWritableUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableUser::fromJsonObject(QJsonObject json) {

    m_date_joined_isValid = ::OpenAPI::fromJsonValue(m_date_joined, json[QString("date_joined")]);
    m_date_joined_isSet = !json[QString("date_joined")].isNull() && m_date_joined_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_staff_isValid = ::OpenAPI::fromJsonValue(m_is_staff, json[QString("is_staff")]);
    m_is_staff_isSet = !json[QString("is_staff")].isNull() && m_is_staff_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWritableUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableUser::asJsonObject() const {
    QJsonObject obj;
    if (m_date_joined_isSet) {
        obj.insert(QString("date_joined"), ::OpenAPI::toJsonValue(m_date_joined));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_staff_isSet) {
        obj.insert(QString("is_staff"), ::OpenAPI::toJsonValue(m_is_staff));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QDateTime OAIWritableUser::getDateJoined() const {
    return m_date_joined;
}
void OAIWritableUser::setDateJoined(const QDateTime &date_joined) {
    m_date_joined = date_joined;
    m_date_joined_isSet = true;
}

bool OAIWritableUser::is_date_joined_Set() const{
    return m_date_joined_isSet;
}

bool OAIWritableUser::is_date_joined_Valid() const{
    return m_date_joined_isValid;
}

QString OAIWritableUser::getDisplay() const {
    return m_display;
}
void OAIWritableUser::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIWritableUser::is_display_Set() const{
    return m_display_isSet;
}

bool OAIWritableUser::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIWritableUser::getEmail() const {
    return m_email;
}
void OAIWritableUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIWritableUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIWritableUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIWritableUser::getFirstName() const {
    return m_first_name;
}
void OAIWritableUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIWritableUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIWritableUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QSet<qint32> OAIWritableUser::getGroups() const {
    return m_groups;
}
void OAIWritableUser::setGroups(const QSet<qint32> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIWritableUser::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIWritableUser::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIWritableUser::getId() const {
    return m_id;
}
void OAIWritableUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIWritableUser::isIsActive() const {
    return m_is_active;
}
void OAIWritableUser::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIWritableUser::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIWritableUser::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIWritableUser::isIsStaff() const {
    return m_is_staff;
}
void OAIWritableUser::setIsStaff(const bool &is_staff) {
    m_is_staff = is_staff;
    m_is_staff_isSet = true;
}

bool OAIWritableUser::is_is_staff_Set() const{
    return m_is_staff_isSet;
}

bool OAIWritableUser::is_is_staff_Valid() const{
    return m_is_staff_isValid;
}

QString OAIWritableUser::getLastName() const {
    return m_last_name;
}
void OAIWritableUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIWritableUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIWritableUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIWritableUser::getPassword() const {
    return m_password;
}
void OAIWritableUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIWritableUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIWritableUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIWritableUser::getUrl() const {
    return m_url;
}
void OAIWritableUser::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWritableUser::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWritableUser::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWritableUser::getUsername() const {
    return m_username;
}
void OAIWritableUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWritableUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWritableUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWritableUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_joined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_staff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_password_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
