/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import NestedUser from './NestedUser';

/**
 * The ObjectChange model module.
 * @module model/ObjectChange
 * @version 3.4
 */
class ObjectChange {
    /**
     * Constructs a new <code>ObjectChange</code>.
     * @alias module:model/ObjectChange
     * @param changedObjectId {Number} 
     */
    constructor(changedObjectId) { 
        
        ObjectChange.initialize(this, changedObjectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changedObjectId) { 
        obj['changed_object_id'] = changedObjectId;
    }

    /**
     * Constructs a <code>ObjectChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectChange} obj Optional instance to populate.
     * @return {module:model/ObjectChange} The populated <code>ObjectChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectChange();

            if (data.hasOwnProperty('action')) {
                obj['action'] = Action.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('changed_object')) {
                obj['changed_object'] = ApiClient.convertToType(data['changed_object'], Object);
            }
            if (data.hasOwnProperty('changed_object_id')) {
                obj['changed_object_id'] = ApiClient.convertToType(data['changed_object_id'], 'Number');
            }
            if (data.hasOwnProperty('changed_object_type')) {
                obj['changed_object_type'] = ApiClient.convertToType(data['changed_object_type'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('postchange_data')) {
                obj['postchange_data'] = ApiClient.convertToType(data['postchange_data'], Object);
            }
            if (data.hasOwnProperty('prechange_data')) {
                obj['prechange_data'] = ApiClient.convertToType(data['prechange_data'], Object);
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NestedUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_name')) {
                obj['user_name'] = ApiClient.convertToType(data['user_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectChange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjectChange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `action`
        if (data['action']) { // data not null
          Action.validateJSON(data['action']);
        }
        // ensure the json data is a string
        if (data['changed_object_type'] && !(typeof data['changed_object_type'] === 'string' || data['changed_object_type'] instanceof String)) {
            throw new Error("Expected the field `changed_object_type` to be a primitive type in the JSON string but got " + data['changed_object_type']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NestedUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['user_name'] && !(typeof data['user_name'] === 'string' || data['user_name'] instanceof String)) {
            throw new Error("Expected the field `user_name` to be a primitive type in the JSON string but got " + data['user_name']);
        }

        return true;
    }


}

ObjectChange.RequiredProperties = ["changed_object_id"];

/**
 * @member {module:model/Action} action
 */
ObjectChange.prototype['action'] = undefined;

/**
 *  Serialize a nested representation of the changed object. 
 * @member {Object} changed_object
 */
ObjectChange.prototype['changed_object'] = undefined;

/**
 * @member {Number} changed_object_id
 */
ObjectChange.prototype['changed_object_id'] = undefined;

/**
 * @member {String} changed_object_type
 */
ObjectChange.prototype['changed_object_type'] = undefined;

/**
 * @member {String} display
 */
ObjectChange.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
ObjectChange.prototype['id'] = undefined;

/**
 * @member {Object} postchange_data
 */
ObjectChange.prototype['postchange_data'] = undefined;

/**
 * @member {Object} prechange_data
 */
ObjectChange.prototype['prechange_data'] = undefined;

/**
 * @member {String} request_id
 */
ObjectChange.prototype['request_id'] = undefined;

/**
 * @member {Date} time
 */
ObjectChange.prototype['time'] = undefined;

/**
 * @member {String} url
 */
ObjectChange.prototype['url'] = undefined;

/**
 * @member {module:model/NestedUser} user
 */
ObjectChange.prototype['user'] = undefined;

/**
 * @member {String} user_name
 */
ObjectChange.prototype['user_name'] = undefined;






export default ObjectChange;

