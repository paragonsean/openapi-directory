/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomLink model module.
 * @module model/CustomLink
 * @version 3.4
 */
class CustomLink {
    /**
     * Constructs a new <code>CustomLink</code>.
     * @alias module:model/CustomLink
     * @param contentTypes {Array.<String>} 
     * @param linkText {String} Jinja2 template code for link text
     * @param linkUrl {String} Jinja2 template code for link URL
     * @param name {String} 
     */
    constructor(contentTypes, linkText, linkUrl, name) { 
        
        CustomLink.initialize(this, contentTypes, linkText, linkUrl, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentTypes, linkText, linkUrl, name) { 
        obj['content_types'] = contentTypes;
        obj['link_text'] = linkText;
        obj['link_url'] = linkUrl;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CustomLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomLink} obj Optional instance to populate.
     * @return {module:model/CustomLink} The populated <code>CustomLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomLink();

            if (data.hasOwnProperty('button_class')) {
                obj['button_class'] = ApiClient.convertToType(data['button_class'], 'String');
            }
            if (data.hasOwnProperty('content_types')) {
                obj['content_types'] = ApiClient.convertToType(data['content_types'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('group_name')) {
                obj['group_name'] = ApiClient.convertToType(data['group_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('link_text')) {
                obj['link_text'] = ApiClient.convertToType(data['link_text'], 'String');
            }
            if (data.hasOwnProperty('link_url')) {
                obj['link_url'] = ApiClient.convertToType(data['link_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new_window')) {
                obj['new_window'] = ApiClient.convertToType(data['new_window'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['button_class'] && !(typeof data['button_class'] === 'string' || data['button_class'] instanceof String)) {
            throw new Error("Expected the field `button_class` to be a primitive type in the JSON string but got " + data['button_class']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_types'])) {
            throw new Error("Expected the field `content_types` to be an array in the JSON data but got " + data['content_types']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['group_name'] && !(typeof data['group_name'] === 'string' || data['group_name'] instanceof String)) {
            throw new Error("Expected the field `group_name` to be a primitive type in the JSON string but got " + data['group_name']);
        }
        // ensure the json data is a string
        if (data['link_text'] && !(typeof data['link_text'] === 'string' || data['link_text'] instanceof String)) {
            throw new Error("Expected the field `link_text` to be a primitive type in the JSON string but got " + data['link_text']);
        }
        // ensure the json data is a string
        if (data['link_url'] && !(typeof data['link_url'] === 'string' || data['link_url'] instanceof String)) {
            throw new Error("Expected the field `link_url` to be a primitive type in the JSON string but got " + data['link_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CustomLink.RequiredProperties = ["content_types", "link_text", "link_url", "name"];

/**
 * The class of the first link in a group will be used for the dropdown button
 * @member {module:model/CustomLink.ButtonClassEnum} button_class
 */
CustomLink.prototype['button_class'] = undefined;

/**
 * @member {Array.<String>} content_types
 */
CustomLink.prototype['content_types'] = undefined;

/**
 * @member {Date} created
 */
CustomLink.prototype['created'] = undefined;

/**
 * @member {String} display
 */
CustomLink.prototype['display'] = undefined;

/**
 * @member {Boolean} enabled
 */
CustomLink.prototype['enabled'] = undefined;

/**
 * Links with the same group will appear as a dropdown menu
 * @member {String} group_name
 */
CustomLink.prototype['group_name'] = undefined;

/**
 * @member {Number} id
 */
CustomLink.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
CustomLink.prototype['last_updated'] = undefined;

/**
 * Jinja2 template code for link text
 * @member {String} link_text
 */
CustomLink.prototype['link_text'] = undefined;

/**
 * Jinja2 template code for link URL
 * @member {String} link_url
 */
CustomLink.prototype['link_url'] = undefined;

/**
 * @member {String} name
 */
CustomLink.prototype['name'] = undefined;

/**
 * Force link to open in a new window
 * @member {Boolean} new_window
 */
CustomLink.prototype['new_window'] = undefined;

/**
 * @member {String} url
 */
CustomLink.prototype['url'] = undefined;

/**
 * @member {Number} weight
 */
CustomLink.prototype['weight'] = undefined;





/**
 * Allowed values for the <code>button_class</code> property.
 * @enum {String}
 * @readonly
 */
CustomLink['ButtonClassEnum'] = {

    /**
     * value: "outline-dark"
     * @const
     */
    "outline-dark": "outline-dark",

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue",

    /**
     * value: "indigo"
     * @const
     */
    "indigo": "indigo",

    /**
     * value: "purple"
     * @const
     */
    "purple": "purple",

    /**
     * value: "pink"
     * @const
     */
    "pink": "pink",

    /**
     * value: "red"
     * @const
     */
    "red": "red",

    /**
     * value: "orange"
     * @const
     */
    "orange": "orange",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow",

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "teal"
     * @const
     */
    "teal": "teal",

    /**
     * value: "cyan"
     * @const
     */
    "cyan": "cyan",

    /**
     * value: "gray"
     * @const
     */
    "gray": "gray",

    /**
     * value: "black"
     * @const
     */
    "black": "black",

    /**
     * value: "white"
     * @const
     */
    "white": "white",

    /**
     * value: "ghost-dark"
     * @const
     */
    "ghost-dark": "ghost-dark"
};



export default CustomLink;

