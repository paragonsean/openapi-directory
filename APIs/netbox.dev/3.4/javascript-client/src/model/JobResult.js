/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedUser from './NestedUser';
import Status6 from './Status6';

/**
 * The JobResult model module.
 * @module model/JobResult
 * @version 3.4
 */
class JobResult {
    /**
     * Constructs a new <code>JobResult</code>.
     * @alias module:model/JobResult
     * @param jobId {String} 
     * @param name {String} 
     */
    constructor(jobId, name) { 
        
        JobResult.initialize(this, jobId, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jobId, name) { 
        obj['job_id'] = jobId;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>JobResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobResult} obj Optional instance to populate.
     * @return {module:model/JobResult} The populated <code>JobResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobResult();

            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Date');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'Number');
            }
            if (data.hasOwnProperty('job_id')) {
                obj['job_id'] = ApiClient.convertToType(data['job_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('obj_type')) {
                obj['obj_type'] = ApiClient.convertToType(data['obj_type'], 'String');
            }
            if (data.hasOwnProperty('scheduled')) {
                obj['scheduled'] = ApiClient.convertToType(data['scheduled'], 'Date');
            }
            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status6.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NestedUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['job_id'] && !(typeof data['job_id'] === 'string' || data['job_id'] instanceof String)) {
            throw new Error("Expected the field `job_id` to be a primitive type in the JSON string but got " + data['job_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['obj_type'] && !(typeof data['obj_type'] === 'string' || data['obj_type'] instanceof String)) {
            throw new Error("Expected the field `obj_type` to be a primitive type in the JSON string but got " + data['obj_type']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status6.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NestedUser.validateJSON(data['user']);
        }

        return true;
    }


}

JobResult.RequiredProperties = ["job_id", "name"];

/**
 * @member {Date} completed
 */
JobResult.prototype['completed'] = undefined;

/**
 * @member {Date} created
 */
JobResult.prototype['created'] = undefined;

/**
 * @member {Object} data
 */
JobResult.prototype['data'] = undefined;

/**
 * @member {String} display
 */
JobResult.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
JobResult.prototype['id'] = undefined;

/**
 * Recurrence interval (in minutes)
 * @member {Number} interval
 */
JobResult.prototype['interval'] = undefined;

/**
 * @member {String} job_id
 */
JobResult.prototype['job_id'] = undefined;

/**
 * @member {String} name
 */
JobResult.prototype['name'] = undefined;

/**
 * @member {String} obj_type
 */
JobResult.prototype['obj_type'] = undefined;

/**
 * @member {Date} scheduled
 */
JobResult.prototype['scheduled'] = undefined;

/**
 * @member {Date} started
 */
JobResult.prototype['started'] = undefined;

/**
 * @member {module:model/Status6} status
 */
JobResult.prototype['status'] = undefined;

/**
 * @member {String} url
 */
JobResult.prototype['url'] = undefined;

/**
 * @member {module:model/NestedUser} user
 */
JobResult.prototype['user'] = undefined;






export default JobResult;

