/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenericObject from './GenericObject';
import LengthUnit from './LengthUnit';
import NestedTag from './NestedTag';
import NestedTenant from './NestedTenant';
import Status from './Status';

/**
 * The Cable model module.
 * @module model/Cable
 * @version 3.4
 */
class Cable {
    /**
     * Constructs a new <code>Cable</code>.
     * @alias module:model/Cable
     */
    constructor() { 
        
        Cable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cable} obj Optional instance to populate.
     * @return {module:model/Cable} The populated <code>Cable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cable();

            if (data.hasOwnProperty('a_terminations')) {
                obj['a_terminations'] = ApiClient.convertToType(data['a_terminations'], [GenericObject]);
            }
            if (data.hasOwnProperty('b_terminations')) {
                obj['b_terminations'] = ApiClient.convertToType(data['b_terminations'], [GenericObject]);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('length_unit')) {
                obj['length_unit'] = LengthUnit.constructFromObject(data['length_unit']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = NestedTenant.constructFromObject(data['tenant']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cable</code>.
     */
    static validateJSON(data) {
        if (data['a_terminations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['a_terminations'])) {
                throw new Error("Expected the field `a_terminations` to be an array in the JSON data but got " + data['a_terminations']);
            }
            // validate the optional field `a_terminations` (array)
            for (const item of data['a_terminations']) {
                GenericObject.validateJSON(item);
            };
        }
        if (data['b_terminations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['b_terminations'])) {
                throw new Error("Expected the field `b_terminations` to be an array in the JSON data but got " + data['b_terminations']);
            }
            // validate the optional field `b_terminations` (array)
            for (const item of data['b_terminations']) {
                GenericObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `length_unit`
        if (data['length_unit']) { // data not null
          LengthUnit.validateJSON(data['length_unit']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `tenant`
        if (data['tenant']) { // data not null
          NestedTenant.validateJSON(data['tenant']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/GenericObject>} a_terminations
 */
Cable.prototype['a_terminations'] = undefined;

/**
 * @member {Array.<module:model/GenericObject>} b_terminations
 */
Cable.prototype['b_terminations'] = undefined;

/**
 * @member {String} color
 */
Cable.prototype['color'] = undefined;

/**
 * @member {String} comments
 */
Cable.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
Cable.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
Cable.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
Cable.prototype['description'] = undefined;

/**
 * @member {String} display
 */
Cable.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
Cable.prototype['id'] = undefined;

/**
 * @member {String} label
 */
Cable.prototype['label'] = undefined;

/**
 * @member {Date} last_updated
 */
Cable.prototype['last_updated'] = undefined;

/**
 * @member {Number} length
 */
Cable.prototype['length'] = undefined;

/**
 * @member {module:model/LengthUnit} length_unit
 */
Cable.prototype['length_unit'] = undefined;

/**
 * @member {module:model/Status} status
 */
Cable.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
Cable.prototype['tags'] = undefined;

/**
 * @member {module:model/NestedTenant} tenant
 */
Cable.prototype['tenant'] = undefined;

/**
 * @member {module:model/Cable.TypeEnum} type
 */
Cable.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Cable.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Cable['TypeEnum'] = {

    /**
     * value: "cat3"
     * @const
     */
    "cat3": "cat3",

    /**
     * value: "cat5"
     * @const
     */
    "cat5": "cat5",

    /**
     * value: "cat5e"
     * @const
     */
    "cat5e": "cat5e",

    /**
     * value: "cat6"
     * @const
     */
    "cat6": "cat6",

    /**
     * value: "cat6a"
     * @const
     */
    "cat6a": "cat6a",

    /**
     * value: "cat7"
     * @const
     */
    "cat7": "cat7",

    /**
     * value: "cat7a"
     * @const
     */
    "cat7a": "cat7a",

    /**
     * value: "cat8"
     * @const
     */
    "cat8": "cat8",

    /**
     * value: "dac-active"
     * @const
     */
    "dac-active": "dac-active",

    /**
     * value: "dac-passive"
     * @const
     */
    "dac-passive": "dac-passive",

    /**
     * value: "mrj21-trunk"
     * @const
     */
    "mrj21-trunk": "mrj21-trunk",

    /**
     * value: "coaxial"
     * @const
     */
    "coaxial": "coaxial",

    /**
     * value: "mmf"
     * @const
     */
    "mmf": "mmf",

    /**
     * value: "mmf-om1"
     * @const
     */
    "mmf-om1": "mmf-om1",

    /**
     * value: "mmf-om2"
     * @const
     */
    "mmf-om2": "mmf-om2",

    /**
     * value: "mmf-om3"
     * @const
     */
    "mmf-om3": "mmf-om3",

    /**
     * value: "mmf-om4"
     * @const
     */
    "mmf-om4": "mmf-om4",

    /**
     * value: "mmf-om5"
     * @const
     */
    "mmf-om5": "mmf-om5",

    /**
     * value: "smf"
     * @const
     */
    "smf": "smf",

    /**
     * value: "smf-os1"
     * @const
     */
    "smf-os1": "smf-os1",

    /**
     * value: "smf-os2"
     * @const
     */
    "smf-os2": "smf-os2",

    /**
     * value: "aoc"
     * @const
     */
    "aoc": "aoc",

    /**
     * value: "power"
     * @const
     */
    "power": "power"
};



export default Cable;

