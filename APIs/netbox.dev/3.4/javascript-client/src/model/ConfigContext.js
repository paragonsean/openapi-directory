/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedCluster from './NestedCluster';
import NestedClusterGroup from './NestedClusterGroup';
import NestedClusterType from './NestedClusterType';
import NestedDeviceRole from './NestedDeviceRole';
import NestedDeviceType from './NestedDeviceType';
import NestedLocation from './NestedLocation';
import NestedPlatform from './NestedPlatform';
import NestedRegion from './NestedRegion';
import NestedSite from './NestedSite';
import NestedSiteGroup from './NestedSiteGroup';
import NestedTenant from './NestedTenant';
import NestedTenantGroup from './NestedTenantGroup';

/**
 * The ConfigContext model module.
 * @module model/ConfigContext
 * @version 3.4
 */
class ConfigContext {
    /**
     * Constructs a new <code>ConfigContext</code>.
     * @alias module:model/ConfigContext
     * @param data {Object} 
     * @param name {String} 
     */
    constructor(data, name) { 
        
        ConfigContext.initialize(this, data, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, name) { 
        obj['data'] = data;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ConfigContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigContext} obj Optional instance to populate.
     * @return {module:model/ConfigContext} The populated <code>ConfigContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigContext();

            if (data.hasOwnProperty('cluster_groups')) {
                obj['cluster_groups'] = ApiClient.convertToType(data['cluster_groups'], [NestedClusterGroup]);
            }
            if (data.hasOwnProperty('cluster_types')) {
                obj['cluster_types'] = ApiClient.convertToType(data['cluster_types'], [NestedClusterType]);
            }
            if (data.hasOwnProperty('clusters')) {
                obj['clusters'] = ApiClient.convertToType(data['clusters'], [NestedCluster]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_types')) {
                obj['device_types'] = ApiClient.convertToType(data['device_types'], [NestedDeviceType]);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [NestedLocation]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platforms')) {
                obj['platforms'] = ApiClient.convertToType(data['platforms'], [NestedPlatform]);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], [NestedRegion]);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [NestedDeviceRole]);
            }
            if (data.hasOwnProperty('site_groups')) {
                obj['site_groups'] = ApiClient.convertToType(data['site_groups'], [NestedSiteGroup]);
            }
            if (data.hasOwnProperty('sites')) {
                obj['sites'] = ApiClient.convertToType(data['sites'], [NestedSite]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tenant_groups')) {
                obj['tenant_groups'] = ApiClient.convertToType(data['tenant_groups'], [NestedTenantGroup]);
            }
            if (data.hasOwnProperty('tenants')) {
                obj['tenants'] = ApiClient.convertToType(data['tenants'], [NestedTenant]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConfigContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['cluster_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cluster_groups'])) {
                throw new Error("Expected the field `cluster_groups` to be an array in the JSON data but got " + data['cluster_groups']);
            }
            // validate the optional field `cluster_groups` (array)
            for (const item of data['cluster_groups']) {
                NestedClusterGroup.validateJSON(item);
            };
        }
        if (data['cluster_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cluster_types'])) {
                throw new Error("Expected the field `cluster_types` to be an array in the JSON data but got " + data['cluster_types']);
            }
            // validate the optional field `cluster_types` (array)
            for (const item of data['cluster_types']) {
                NestedClusterType.validateJSON(item);
            };
        }
        if (data['clusters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clusters'])) {
                throw new Error("Expected the field `clusters` to be an array in the JSON data but got " + data['clusters']);
            }
            // validate the optional field `clusters` (array)
            for (const item of data['clusters']) {
                NestedCluster.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['device_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['device_types'])) {
                throw new Error("Expected the field `device_types` to be an array in the JSON data but got " + data['device_types']);
            }
            // validate the optional field `device_types` (array)
            for (const item of data['device_types']) {
                NestedDeviceType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                NestedLocation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['platforms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['platforms'])) {
                throw new Error("Expected the field `platforms` to be an array in the JSON data but got " + data['platforms']);
            }
            // validate the optional field `platforms` (array)
            for (const item of data['platforms']) {
                NestedPlatform.validateJSON(item);
            };
        }
        if (data['regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions'])) {
                throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
            }
            // validate the optional field `regions` (array)
            for (const item of data['regions']) {
                NestedRegion.validateJSON(item);
            };
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                NestedDeviceRole.validateJSON(item);
            };
        }
        if (data['site_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['site_groups'])) {
                throw new Error("Expected the field `site_groups` to be an array in the JSON data but got " + data['site_groups']);
            }
            // validate the optional field `site_groups` (array)
            for (const item of data['site_groups']) {
                NestedSiteGroup.validateJSON(item);
            };
        }
        if (data['sites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sites'])) {
                throw new Error("Expected the field `sites` to be an array in the JSON data but got " + data['sites']);
            }
            // validate the optional field `sites` (array)
            for (const item of data['sites']) {
                NestedSite.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['tenant_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tenant_groups'])) {
                throw new Error("Expected the field `tenant_groups` to be an array in the JSON data but got " + data['tenant_groups']);
            }
            // validate the optional field `tenant_groups` (array)
            for (const item of data['tenant_groups']) {
                NestedTenantGroup.validateJSON(item);
            };
        }
        if (data['tenants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tenants'])) {
                throw new Error("Expected the field `tenants` to be an array in the JSON data but got " + data['tenants']);
            }
            // validate the optional field `tenants` (array)
            for (const item of data['tenants']) {
                NestedTenant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ConfigContext.RequiredProperties = ["data", "name"];

/**
 * @member {Array.<module:model/NestedClusterGroup>} cluster_groups
 */
ConfigContext.prototype['cluster_groups'] = undefined;

/**
 * @member {Array.<module:model/NestedClusterType>} cluster_types
 */
ConfigContext.prototype['cluster_types'] = undefined;

/**
 * @member {Array.<module:model/NestedCluster>} clusters
 */
ConfigContext.prototype['clusters'] = undefined;

/**
 * @member {Date} created
 */
ConfigContext.prototype['created'] = undefined;

/**
 * @member {Object} data
 */
ConfigContext.prototype['data'] = undefined;

/**
 * @member {String} description
 */
ConfigContext.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/NestedDeviceType>} device_types
 */
ConfigContext.prototype['device_types'] = undefined;

/**
 * @member {String} display
 */
ConfigContext.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
ConfigContext.prototype['id'] = undefined;

/**
 * @member {Boolean} is_active
 */
ConfigContext.prototype['is_active'] = undefined;

/**
 * @member {Date} last_updated
 */
ConfigContext.prototype['last_updated'] = undefined;

/**
 * @member {Array.<module:model/NestedLocation>} locations
 */
ConfigContext.prototype['locations'] = undefined;

/**
 * @member {String} name
 */
ConfigContext.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/NestedPlatform>} platforms
 */
ConfigContext.prototype['platforms'] = undefined;

/**
 * @member {Array.<module:model/NestedRegion>} regions
 */
ConfigContext.prototype['regions'] = undefined;

/**
 * @member {Array.<module:model/NestedDeviceRole>} roles
 */
ConfigContext.prototype['roles'] = undefined;

/**
 * @member {Array.<module:model/NestedSiteGroup>} site_groups
 */
ConfigContext.prototype['site_groups'] = undefined;

/**
 * @member {Array.<module:model/NestedSite>} sites
 */
ConfigContext.prototype['sites'] = undefined;

/**
 * @member {Array.<String>} tags
 */
ConfigContext.prototype['tags'] = undefined;

/**
 * @member {Array.<module:model/NestedTenantGroup>} tenant_groups
 */
ConfigContext.prototype['tenant_groups'] = undefined;

/**
 * @member {Array.<module:model/NestedTenant>} tenants
 */
ConfigContext.prototype['tenants'] = undefined;

/**
 * @member {String} url
 */
ConfigContext.prototype['url'] = undefined;

/**
 * @member {Number} weight
 */
ConfigContext.prototype['weight'] = undefined;






export default ConfigContext;

