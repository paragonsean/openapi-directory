/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedASN from './NestedASN';
import NestedRegion from './NestedRegion';
import NestedSiteGroup from './NestedSiteGroup';
import NestedTag from './NestedTag';
import NestedTenant from './NestedTenant';
import Status7 from './Status7';

/**
 * The Site model module.
 * @module model/Site
 * @version 3.4
 */
class Site {
    /**
     * Constructs a new <code>Site</code>.
     * @alias module:model/Site
     * @param name {String} 
     * @param slug {String} 
     */
    constructor(name, slug) { 
        
        Site.initialize(this, name, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, slug) { 
        obj['name'] = name;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>Site</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Site} obj Optional instance to populate.
     * @return {module:model/Site} The populated <code>Site</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Site();

            if (data.hasOwnProperty('asns')) {
                obj['asns'] = ApiClient.convertToType(data['asns'], [NestedASN]);
            }
            if (data.hasOwnProperty('circuit_count')) {
                obj['circuit_count'] = ApiClient.convertToType(data['circuit_count'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_count')) {
                obj['device_count'] = ApiClient.convertToType(data['device_count'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('facility')) {
                obj['facility'] = ApiClient.convertToType(data['facility'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = NestedSiteGroup.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('physical_address')) {
                obj['physical_address'] = ApiClient.convertToType(data['physical_address'], 'String');
            }
            if (data.hasOwnProperty('prefix_count')) {
                obj['prefix_count'] = ApiClient.convertToType(data['prefix_count'], 'Number');
            }
            if (data.hasOwnProperty('rack_count')) {
                obj['rack_count'] = ApiClient.convertToType(data['rack_count'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = NestedRegion.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = ApiClient.convertToType(data['shipping_address'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status7.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = NestedTenant.constructFromObject(data['tenant']);
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('virtualmachine_count')) {
                obj['virtualmachine_count'] = ApiClient.convertToType(data['virtualmachine_count'], 'Number');
            }
            if (data.hasOwnProperty('vlan_count')) {
                obj['vlan_count'] = ApiClient.convertToType(data['vlan_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Site</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Site</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Site.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['asns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['asns'])) {
                throw new Error("Expected the field `asns` to be an array in the JSON data but got " + data['asns']);
            }
            // validate the optional field `asns` (array)
            for (const item of data['asns']) {
                NestedASN.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['facility'] && !(typeof data['facility'] === 'string' || data['facility'] instanceof String)) {
            throw new Error("Expected the field `facility` to be a primitive type in the JSON string but got " + data['facility']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          NestedSiteGroup.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['physical_address'] && !(typeof data['physical_address'] === 'string' || data['physical_address'] instanceof String)) {
            throw new Error("Expected the field `physical_address` to be a primitive type in the JSON string but got " + data['physical_address']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          NestedRegion.validateJSON(data['region']);
        }
        // ensure the json data is a string
        if (data['shipping_address'] && !(typeof data['shipping_address'] === 'string' || data['shipping_address'] instanceof String)) {
            throw new Error("Expected the field `shipping_address` to be a primitive type in the JSON string but got " + data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status7.validateJSON(data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `tenant`
        if (data['tenant']) { // data not null
          NestedTenant.validateJSON(data['tenant']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Site.RequiredProperties = ["name", "slug"];

/**
 * @member {Array.<module:model/NestedASN>} asns
 */
Site.prototype['asns'] = undefined;

/**
 * @member {Number} circuit_count
 */
Site.prototype['circuit_count'] = undefined;

/**
 * @member {String} comments
 */
Site.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
Site.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
Site.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
Site.prototype['description'] = undefined;

/**
 * @member {Number} device_count
 */
Site.prototype['device_count'] = undefined;

/**
 * @member {String} display
 */
Site.prototype['display'] = undefined;

/**
 * Local facility ID or description
 * @member {String} facility
 */
Site.prototype['facility'] = undefined;

/**
 * @member {module:model/NestedSiteGroup} group
 */
Site.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
Site.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
Site.prototype['last_updated'] = undefined;

/**
 * GPS coordinate (latitude)
 * @member {Number} latitude
 */
Site.prototype['latitude'] = undefined;

/**
 * GPS coordinate (longitude)
 * @member {Number} longitude
 */
Site.prototype['longitude'] = undefined;

/**
 * @member {String} name
 */
Site.prototype['name'] = undefined;

/**
 * @member {String} physical_address
 */
Site.prototype['physical_address'] = undefined;

/**
 * @member {Number} prefix_count
 */
Site.prototype['prefix_count'] = undefined;

/**
 * @member {Number} rack_count
 */
Site.prototype['rack_count'] = undefined;

/**
 * @member {module:model/NestedRegion} region
 */
Site.prototype['region'] = undefined;

/**
 * @member {String} shipping_address
 */
Site.prototype['shipping_address'] = undefined;

/**
 * @member {String} slug
 */
Site.prototype['slug'] = undefined;

/**
 * @member {module:model/Status7} status
 */
Site.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
Site.prototype['tags'] = undefined;

/**
 * @member {module:model/NestedTenant} tenant
 */
Site.prototype['tenant'] = undefined;

/**
 * @member {String} time_zone
 */
Site.prototype['time_zone'] = undefined;

/**
 * @member {String} url
 */
Site.prototype['url'] = undefined;

/**
 * @member {Number} virtualmachine_count
 */
Site.prototype['virtualmachine_count'] = undefined;

/**
 * @member {Number} vlan_count
 */
Site.prototype['vlan_count'] = undefined;






export default Site;

