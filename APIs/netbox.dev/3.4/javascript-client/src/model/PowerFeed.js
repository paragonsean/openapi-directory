/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedCable from './NestedCable';
import NestedPowerPanel from './NestedPowerPanel';
import NestedRack from './NestedRack';
import NestedTag from './NestedTag';
import Phase from './Phase';
import Status9 from './Status9';
import Supply from './Supply';
import Type5 from './Type5';

/**
 * The PowerFeed model module.
 * @module model/PowerFeed
 * @version 3.4
 */
class PowerFeed {
    /**
     * Constructs a new <code>PowerFeed</code>.
     * @alias module:model/PowerFeed
     * @param name {String} 
     * @param powerPanel {module:model/NestedPowerPanel} 
     */
    constructor(name, powerPanel) { 
        
        PowerFeed.initialize(this, name, powerPanel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, powerPanel) { 
        obj['name'] = name;
        obj['power_panel'] = powerPanel;
    }

    /**
     * Constructs a <code>PowerFeed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PowerFeed} obj Optional instance to populate.
     * @return {module:model/PowerFeed} The populated <code>PowerFeed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PowerFeed();

            if (data.hasOwnProperty('_occupied')) {
                obj['_occupied'] = ApiClient.convertToType(data['_occupied'], 'Boolean');
            }
            if (data.hasOwnProperty('amperage')) {
                obj['amperage'] = ApiClient.convertToType(data['amperage'], 'Number');
            }
            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('cable_end')) {
                obj['cable_end'] = ApiClient.convertToType(data['cable_end'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('connected_endpoints')) {
                obj['connected_endpoints'] = ApiClient.convertToType(data['connected_endpoints'], ['String']);
            }
            if (data.hasOwnProperty('connected_endpoints_reachable')) {
                obj['connected_endpoints_reachable'] = ApiClient.convertToType(data['connected_endpoints_reachable'], 'Boolean');
            }
            if (data.hasOwnProperty('connected_endpoints_type')) {
                obj['connected_endpoints_type'] = ApiClient.convertToType(data['connected_endpoints_type'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('link_peers')) {
                obj['link_peers'] = ApiClient.convertToType(data['link_peers'], ['String']);
            }
            if (data.hasOwnProperty('link_peers_type')) {
                obj['link_peers_type'] = ApiClient.convertToType(data['link_peers_type'], 'String');
            }
            if (data.hasOwnProperty('mark_connected')) {
                obj['mark_connected'] = ApiClient.convertToType(data['mark_connected'], 'Boolean');
            }
            if (data.hasOwnProperty('max_utilization')) {
                obj['max_utilization'] = ApiClient.convertToType(data['max_utilization'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = Phase.constructFromObject(data['phase']);
            }
            if (data.hasOwnProperty('power_panel')) {
                obj['power_panel'] = NestedPowerPanel.constructFromObject(data['power_panel']);
            }
            if (data.hasOwnProperty('rack')) {
                obj['rack'] = NestedRack.constructFromObject(data['rack']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status9.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('supply')) {
                obj['supply'] = Supply.constructFromObject(data['supply']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type5.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('voltage')) {
                obj['voltage'] = ApiClient.convertToType(data['voltage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PowerFeed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PowerFeed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PowerFeed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['cable_end'] && !(typeof data['cable_end'] === 'string' || data['cable_end'] instanceof String)) {
            throw new Error("Expected the field `cable_end` to be a primitive type in the JSON string but got " + data['cable_end']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected_endpoints'])) {
            throw new Error("Expected the field `connected_endpoints` to be an array in the JSON data but got " + data['connected_endpoints']);
        }
        // ensure the json data is a string
        if (data['connected_endpoints_type'] && !(typeof data['connected_endpoints_type'] === 'string' || data['connected_endpoints_type'] instanceof String)) {
            throw new Error("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got " + data['connected_endpoints_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['link_peers'])) {
            throw new Error("Expected the field `link_peers` to be an array in the JSON data but got " + data['link_peers']);
        }
        // ensure the json data is a string
        if (data['link_peers_type'] && !(typeof data['link_peers_type'] === 'string' || data['link_peers_type'] instanceof String)) {
            throw new Error("Expected the field `link_peers_type` to be a primitive type in the JSON string but got " + data['link_peers_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `phase`
        if (data['phase']) { // data not null
          Phase.validateJSON(data['phase']);
        }
        // validate the optional field `power_panel`
        if (data['power_panel']) { // data not null
          NestedPowerPanel.validateJSON(data['power_panel']);
        }
        // validate the optional field `rack`
        if (data['rack']) { // data not null
          NestedRack.validateJSON(data['rack']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status9.validateJSON(data['status']);
        }
        // validate the optional field `supply`
        if (data['supply']) { // data not null
          Supply.validateJSON(data['supply']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type5.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

PowerFeed.RequiredProperties = ["name", "power_panel"];

/**
 * @member {Boolean} _occupied
 */
PowerFeed.prototype['_occupied'] = undefined;

/**
 * @member {Number} amperage
 */
PowerFeed.prototype['amperage'] = undefined;

/**
 * @member {module:model/NestedCable} cable
 */
PowerFeed.prototype['cable'] = undefined;

/**
 * @member {String} cable_end
 */
PowerFeed.prototype['cable_end'] = undefined;

/**
 * @member {String} comments
 */
PowerFeed.prototype['comments'] = undefined;

/**
 *  Return the appropriate serializer for the type of connected object. 
 * @member {Array.<String>} connected_endpoints
 */
PowerFeed.prototype['connected_endpoints'] = undefined;

/**
 * @member {Boolean} connected_endpoints_reachable
 */
PowerFeed.prototype['connected_endpoints_reachable'] = undefined;

/**
 * @member {String} connected_endpoints_type
 */
PowerFeed.prototype['connected_endpoints_type'] = undefined;

/**
 * @member {Date} created
 */
PowerFeed.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
PowerFeed.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
PowerFeed.prototype['description'] = undefined;

/**
 * @member {String} display
 */
PowerFeed.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
PowerFeed.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
PowerFeed.prototype['last_updated'] = undefined;

/**
 *  Return the appropriate serializer for the link termination model. 
 * @member {Array.<String>} link_peers
 */
PowerFeed.prototype['link_peers'] = undefined;

/**
 * @member {String} link_peers_type
 */
PowerFeed.prototype['link_peers_type'] = undefined;

/**
 * Treat as if a cable is connected
 * @member {Boolean} mark_connected
 */
PowerFeed.prototype['mark_connected'] = undefined;

/**
 * Maximum permissible draw (percentage)
 * @member {Number} max_utilization
 */
PowerFeed.prototype['max_utilization'] = undefined;

/**
 * @member {String} name
 */
PowerFeed.prototype['name'] = undefined;

/**
 * @member {module:model/Phase} phase
 */
PowerFeed.prototype['phase'] = undefined;

/**
 * @member {module:model/NestedPowerPanel} power_panel
 */
PowerFeed.prototype['power_panel'] = undefined;

/**
 * @member {module:model/NestedRack} rack
 */
PowerFeed.prototype['rack'] = undefined;

/**
 * @member {module:model/Status9} status
 */
PowerFeed.prototype['status'] = undefined;

/**
 * @member {module:model/Supply} supply
 */
PowerFeed.prototype['supply'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
PowerFeed.prototype['tags'] = undefined;

/**
 * @member {module:model/Type5} type
 */
PowerFeed.prototype['type'] = undefined;

/**
 * @member {String} url
 */
PowerFeed.prototype['url'] = undefined;

/**
 * @member {Number} voltage
 */
PowerFeed.prototype['voltage'] = undefined;






export default PowerFeed;

