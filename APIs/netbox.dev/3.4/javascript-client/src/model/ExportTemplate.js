/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportTemplate model module.
 * @module model/ExportTemplate
 * @version 3.4
 */
class ExportTemplate {
    /**
     * Constructs a new <code>ExportTemplate</code>.
     * @alias module:model/ExportTemplate
     * @param contentTypes {Array.<String>} 
     * @param name {String} 
     * @param templateCode {String} Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.
     */
    constructor(contentTypes, name, templateCode) { 
        
        ExportTemplate.initialize(this, contentTypes, name, templateCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentTypes, name, templateCode) { 
        obj['content_types'] = contentTypes;
        obj['name'] = name;
        obj['template_code'] = templateCode;
    }

    /**
     * Constructs a <code>ExportTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportTemplate} obj Optional instance to populate.
     * @return {module:model/ExportTemplate} The populated <code>ExportTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportTemplate();

            if (data.hasOwnProperty('as_attachment')) {
                obj['as_attachment'] = ApiClient.convertToType(data['as_attachment'], 'Boolean');
            }
            if (data.hasOwnProperty('content_types')) {
                obj['content_types'] = ApiClient.convertToType(data['content_types'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('file_extension')) {
                obj['file_extension'] = ApiClient.convertToType(data['file_extension'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('mime_type')) {
                obj['mime_type'] = ApiClient.convertToType(data['mime_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('template_code')) {
                obj['template_code'] = ApiClient.convertToType(data['template_code'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExportTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_types'])) {
            throw new Error("Expected the field `content_types` to be an array in the JSON data but got " + data['content_types']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['file_extension'] && !(typeof data['file_extension'] === 'string' || data['file_extension'] instanceof String)) {
            throw new Error("Expected the field `file_extension` to be a primitive type in the JSON string but got " + data['file_extension']);
        }
        // ensure the json data is a string
        if (data['mime_type'] && !(typeof data['mime_type'] === 'string' || data['mime_type'] instanceof String)) {
            throw new Error("Expected the field `mime_type` to be a primitive type in the JSON string but got " + data['mime_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['template_code'] && !(typeof data['template_code'] === 'string' || data['template_code'] instanceof String)) {
            throw new Error("Expected the field `template_code` to be a primitive type in the JSON string but got " + data['template_code']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ExportTemplate.RequiredProperties = ["content_types", "name", "template_code"];

/**
 * Download file as attachment
 * @member {Boolean} as_attachment
 */
ExportTemplate.prototype['as_attachment'] = undefined;

/**
 * @member {Array.<String>} content_types
 */
ExportTemplate.prototype['content_types'] = undefined;

/**
 * @member {Date} created
 */
ExportTemplate.prototype['created'] = undefined;

/**
 * @member {String} description
 */
ExportTemplate.prototype['description'] = undefined;

/**
 * @member {String} display
 */
ExportTemplate.prototype['display'] = undefined;

/**
 * Extension to append to the rendered filename
 * @member {String} file_extension
 */
ExportTemplate.prototype['file_extension'] = undefined;

/**
 * @member {Number} id
 */
ExportTemplate.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
ExportTemplate.prototype['last_updated'] = undefined;

/**
 * Defaults to <code>text/plain</code>
 * @member {String} mime_type
 */
ExportTemplate.prototype['mime_type'] = undefined;

/**
 * @member {String} name
 */
ExportTemplate.prototype['name'] = undefined;

/**
 * Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.
 * @member {String} template_code
 */
ExportTemplate.prototype['template_code'] = undefined;

/**
 * @member {String} url
 */
ExportTemplate.prototype['url'] = undefined;






export default ExportTemplate;

