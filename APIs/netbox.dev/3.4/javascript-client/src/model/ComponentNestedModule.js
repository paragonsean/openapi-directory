/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModuleNestedModuleBay from './ModuleNestedModuleBay';

/**
 * The ComponentNestedModule model module.
 * @module model/ComponentNestedModule
 * @version 3.4
 */
class ComponentNestedModule {
    /**
     * Constructs a new <code>ComponentNestedModule</code>.
     * @alias module:model/ComponentNestedModule
     * @param device {Number} 
     */
    constructor(device) { 
        
        ComponentNestedModule.initialize(this, device);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device) { 
        obj['device'] = device;
    }

    /**
     * Constructs a <code>ComponentNestedModule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComponentNestedModule} obj Optional instance to populate.
     * @return {module:model/ComponentNestedModule} The populated <code>ComponentNestedModule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComponentNestedModule();

            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('module_bay')) {
                obj['module_bay'] = ModuleNestedModuleBay.constructFromObject(data['module_bay']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComponentNestedModule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComponentNestedModule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ComponentNestedModule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `module_bay`
        if (data['module_bay']) { // data not null
          ModuleNestedModuleBay.validateJSON(data['module_bay']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ComponentNestedModule.RequiredProperties = ["device"];

/**
 * @member {Number} device
 */
ComponentNestedModule.prototype['device'] = undefined;

/**
 * @member {String} display
 */
ComponentNestedModule.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
ComponentNestedModule.prototype['id'] = undefined;

/**
 * @member {module:model/ModuleNestedModuleBay} module_bay
 */
ComponentNestedModule.prototype['module_bay'] = undefined;

/**
 * @member {String} url
 */
ComponentNestedModule.prototype['url'] = undefined;






export default ComponentNestedModule;

