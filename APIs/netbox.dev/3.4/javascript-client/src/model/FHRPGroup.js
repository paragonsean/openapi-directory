/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedIPAddress from './NestedIPAddress';
import NestedTag from './NestedTag';

/**
 * The FHRPGroup model module.
 * @module model/FHRPGroup
 * @version 3.4
 */
class FHRPGroup {
    /**
     * Constructs a new <code>FHRPGroup</code>.
     * @alias module:model/FHRPGroup
     * @param groupId {Number} 
     * @param protocol {module:model/FHRPGroup.ProtocolEnum} 
     */
    constructor(groupId, protocol) { 
        
        FHRPGroup.initialize(this, groupId, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groupId, protocol) { 
        obj['group_id'] = groupId;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>FHRPGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FHRPGroup} obj Optional instance to populate.
     * @return {module:model/FHRPGroup} The populated <code>FHRPGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FHRPGroup();

            if (data.hasOwnProperty('auth_key')) {
                obj['auth_key'] = ApiClient.convertToType(data['auth_key'], 'String');
            }
            if (data.hasOwnProperty('auth_type')) {
                obj['auth_type'] = ApiClient.convertToType(data['auth_type'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ip_addresses')) {
                obj['ip_addresses'] = ApiClient.convertToType(data['ip_addresses'], [NestedIPAddress]);
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FHRPGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FHRPGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FHRPGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['auth_key'] && !(typeof data['auth_key'] === 'string' || data['auth_key'] instanceof String)) {
            throw new Error("Expected the field `auth_key` to be a primitive type in the JSON string but got " + data['auth_key']);
        }
        // ensure the json data is a string
        if (data['auth_type'] && !(typeof data['auth_type'] === 'string' || data['auth_type'] instanceof String)) {
            throw new Error("Expected the field `auth_type` to be a primitive type in the JSON string but got " + data['auth_type']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        if (data['ip_addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ip_addresses'])) {
                throw new Error("Expected the field `ip_addresses` to be an array in the JSON data but got " + data['ip_addresses']);
            }
            // validate the optional field `ip_addresses` (array)
            for (const item of data['ip_addresses']) {
                NestedIPAddress.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

FHRPGroup.RequiredProperties = ["group_id", "protocol"];

/**
 * @member {String} auth_key
 */
FHRPGroup.prototype['auth_key'] = undefined;

/**
 * @member {module:model/FHRPGroup.AuthTypeEnum} auth_type
 */
FHRPGroup.prototype['auth_type'] = undefined;

/**
 * @member {String} comments
 */
FHRPGroup.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
FHRPGroup.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
FHRPGroup.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
FHRPGroup.prototype['description'] = undefined;

/**
 * @member {String} display
 */
FHRPGroup.prototype['display'] = undefined;

/**
 * @member {Number} group_id
 */
FHRPGroup.prototype['group_id'] = undefined;

/**
 * @member {Number} id
 */
FHRPGroup.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/NestedIPAddress>} ip_addresses
 */
FHRPGroup.prototype['ip_addresses'] = undefined;

/**
 * @member {Date} last_updated
 */
FHRPGroup.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
FHRPGroup.prototype['name'] = undefined;

/**
 * @member {module:model/FHRPGroup.ProtocolEnum} protocol
 */
FHRPGroup.prototype['protocol'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
FHRPGroup.prototype['tags'] = undefined;

/**
 * @member {String} url
 */
FHRPGroup.prototype['url'] = undefined;





/**
 * Allowed values for the <code>auth_type</code> property.
 * @enum {String}
 * @readonly
 */
FHRPGroup['AuthTypeEnum'] = {

    /**
     * value: "plaintext"
     * @const
     */
    "plaintext": "plaintext",

    /**
     * value: "md5"
     * @const
     */
    "md5": "md5"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
FHRPGroup['ProtocolEnum'] = {

    /**
     * value: "vrrp2"
     * @const
     */
    "vrrp2": "vrrp2",

    /**
     * value: "vrrp3"
     * @const
     */
    "vrrp3": "vrrp3",

    /**
     * value: "carp"
     * @const
     */
    "carp": "carp",

    /**
     * value: "clusterxl"
     * @const
     */
    "clusterxl": "clusterxl",

    /**
     * value: "hsrp"
     * @const
     */
    "hsrp": "hsrp",

    /**
     * value: "glbp"
     * @const
     */
    "glbp": "glbp",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default FHRPGroup;

