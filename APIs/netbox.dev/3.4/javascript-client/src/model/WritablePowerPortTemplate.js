/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritablePowerPortTemplate model module.
 * @module model/WritablePowerPortTemplate
 * @version 3.4
 */
class WritablePowerPortTemplate {
    /**
     * Constructs a new <code>WritablePowerPortTemplate</code>.
     * @alias module:model/WritablePowerPortTemplate
     * @param name {String}  {module} is accepted as a substitution for the module bay position when attached to a module type. 
     */
    constructor(name) { 
        
        WritablePowerPortTemplate.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritablePowerPortTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritablePowerPortTemplate} obj Optional instance to populate.
     * @return {module:model/WritablePowerPortTemplate} The populated <code>WritablePowerPortTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritablePowerPortTemplate();

            if (data.hasOwnProperty('allocated_draw')) {
                obj['allocated_draw'] = ApiClient.convertToType(data['allocated_draw'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('maximum_draw')) {
                obj['maximum_draw'] = ApiClient.convertToType(data['maximum_draw'], 'Number');
            }
            if (data.hasOwnProperty('module_type')) {
                obj['module_type'] = ApiClient.convertToType(data['module_type'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritablePowerPortTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritablePowerPortTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritablePowerPortTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WritablePowerPortTemplate.RequiredProperties = ["name"];

/**
 * Allocated power draw (watts)
 * @member {Number} allocated_draw
 */
WritablePowerPortTemplate.prototype['allocated_draw'] = undefined;

/**
 * @member {Date} created
 */
WritablePowerPortTemplate.prototype['created'] = undefined;

/**
 * @member {String} description
 */
WritablePowerPortTemplate.prototype['description'] = undefined;

/**
 * @member {Number} device_type
 */
WritablePowerPortTemplate.prototype['device_type'] = undefined;

/**
 * @member {String} display
 */
WritablePowerPortTemplate.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
WritablePowerPortTemplate.prototype['id'] = undefined;

/**
 * Physical label
 * @member {String} label
 */
WritablePowerPortTemplate.prototype['label'] = undefined;

/**
 * @member {Date} last_updated
 */
WritablePowerPortTemplate.prototype['last_updated'] = undefined;

/**
 * Maximum power draw (watts)
 * @member {Number} maximum_draw
 */
WritablePowerPortTemplate.prototype['maximum_draw'] = undefined;

/**
 * @member {Number} module_type
 */
WritablePowerPortTemplate.prototype['module_type'] = undefined;

/**
 *  {module} is accepted as a substitution for the module bay position when attached to a module type. 
 * @member {String} name
 */
WritablePowerPortTemplate.prototype['name'] = undefined;

/**
 * @member {module:model/WritablePowerPortTemplate.TypeEnum} type
 */
WritablePowerPortTemplate.prototype['type'] = undefined;

/**
 * @member {String} url
 */
WritablePowerPortTemplate.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerPortTemplate['TypeEnum'] = {

    /**
     * value: "iec-60320-c6"
     * @const
     */
    "iec-60320-c6": "iec-60320-c6",

    /**
     * value: "iec-60320-c8"
     * @const
     */
    "iec-60320-c8": "iec-60320-c8",

    /**
     * value: "iec-60320-c14"
     * @const
     */
    "iec-60320-c14": "iec-60320-c14",

    /**
     * value: "iec-60320-c16"
     * @const
     */
    "iec-60320-c16": "iec-60320-c16",

    /**
     * value: "iec-60320-c20"
     * @const
     */
    "iec-60320-c20": "iec-60320-c20",

    /**
     * value: "iec-60320-c22"
     * @const
     */
    "iec-60320-c22": "iec-60320-c22",

    /**
     * value: "iec-60309-p-n-e-4h"
     * @const
     */
    "iec-60309-p-n-e-4h": "iec-60309-p-n-e-4h",

    /**
     * value: "iec-60309-p-n-e-6h"
     * @const
     */
    "iec-60309-p-n-e-6h": "iec-60309-p-n-e-6h",

    /**
     * value: "iec-60309-p-n-e-9h"
     * @const
     */
    "iec-60309-p-n-e-9h": "iec-60309-p-n-e-9h",

    /**
     * value: "iec-60309-2p-e-4h"
     * @const
     */
    "iec-60309-2p-e-4h": "iec-60309-2p-e-4h",

    /**
     * value: "iec-60309-2p-e-6h"
     * @const
     */
    "iec-60309-2p-e-6h": "iec-60309-2p-e-6h",

    /**
     * value: "iec-60309-2p-e-9h"
     * @const
     */
    "iec-60309-2p-e-9h": "iec-60309-2p-e-9h",

    /**
     * value: "iec-60309-3p-e-4h"
     * @const
     */
    "iec-60309-3p-e-4h": "iec-60309-3p-e-4h",

    /**
     * value: "iec-60309-3p-e-6h"
     * @const
     */
    "iec-60309-3p-e-6h": "iec-60309-3p-e-6h",

    /**
     * value: "iec-60309-3p-e-9h"
     * @const
     */
    "iec-60309-3p-e-9h": "iec-60309-3p-e-9h",

    /**
     * value: "iec-60309-3p-n-e-4h"
     * @const
     */
    "iec-60309-3p-n-e-4h": "iec-60309-3p-n-e-4h",

    /**
     * value: "iec-60309-3p-n-e-6h"
     * @const
     */
    "iec-60309-3p-n-e-6h": "iec-60309-3p-n-e-6h",

    /**
     * value: "iec-60309-3p-n-e-9h"
     * @const
     */
    "iec-60309-3p-n-e-9h": "iec-60309-3p-n-e-9h",

    /**
     * value: "nema-1-15p"
     * @const
     */
    "nema-1-15p": "nema-1-15p",

    /**
     * value: "nema-5-15p"
     * @const
     */
    "nema-5-15p": "nema-5-15p",

    /**
     * value: "nema-5-20p"
     * @const
     */
    "nema-5-20p": "nema-5-20p",

    /**
     * value: "nema-5-30p"
     * @const
     */
    "nema-5-30p": "nema-5-30p",

    /**
     * value: "nema-5-50p"
     * @const
     */
    "nema-5-50p": "nema-5-50p",

    /**
     * value: "nema-6-15p"
     * @const
     */
    "nema-6-15p": "nema-6-15p",

    /**
     * value: "nema-6-20p"
     * @const
     */
    "nema-6-20p": "nema-6-20p",

    /**
     * value: "nema-6-30p"
     * @const
     */
    "nema-6-30p": "nema-6-30p",

    /**
     * value: "nema-6-50p"
     * @const
     */
    "nema-6-50p": "nema-6-50p",

    /**
     * value: "nema-10-30p"
     * @const
     */
    "nema-10-30p": "nema-10-30p",

    /**
     * value: "nema-10-50p"
     * @const
     */
    "nema-10-50p": "nema-10-50p",

    /**
     * value: "nema-14-20p"
     * @const
     */
    "nema-14-20p": "nema-14-20p",

    /**
     * value: "nema-14-30p"
     * @const
     */
    "nema-14-30p": "nema-14-30p",

    /**
     * value: "nema-14-50p"
     * @const
     */
    "nema-14-50p": "nema-14-50p",

    /**
     * value: "nema-14-60p"
     * @const
     */
    "nema-14-60p": "nema-14-60p",

    /**
     * value: "nema-15-15p"
     * @const
     */
    "nema-15-15p": "nema-15-15p",

    /**
     * value: "nema-15-20p"
     * @const
     */
    "nema-15-20p": "nema-15-20p",

    /**
     * value: "nema-15-30p"
     * @const
     */
    "nema-15-30p": "nema-15-30p",

    /**
     * value: "nema-15-50p"
     * @const
     */
    "nema-15-50p": "nema-15-50p",

    /**
     * value: "nema-15-60p"
     * @const
     */
    "nema-15-60p": "nema-15-60p",

    /**
     * value: "nema-l1-15p"
     * @const
     */
    "nema-l1-15p": "nema-l1-15p",

    /**
     * value: "nema-l5-15p"
     * @const
     */
    "nema-l5-15p": "nema-l5-15p",

    /**
     * value: "nema-l5-20p"
     * @const
     */
    "nema-l5-20p": "nema-l5-20p",

    /**
     * value: "nema-l5-30p"
     * @const
     */
    "nema-l5-30p": "nema-l5-30p",

    /**
     * value: "nema-l5-50p"
     * @const
     */
    "nema-l5-50p": "nema-l5-50p",

    /**
     * value: "nema-l6-15p"
     * @const
     */
    "nema-l6-15p": "nema-l6-15p",

    /**
     * value: "nema-l6-20p"
     * @const
     */
    "nema-l6-20p": "nema-l6-20p",

    /**
     * value: "nema-l6-30p"
     * @const
     */
    "nema-l6-30p": "nema-l6-30p",

    /**
     * value: "nema-l6-50p"
     * @const
     */
    "nema-l6-50p": "nema-l6-50p",

    /**
     * value: "nema-l10-30p"
     * @const
     */
    "nema-l10-30p": "nema-l10-30p",

    /**
     * value: "nema-l14-20p"
     * @const
     */
    "nema-l14-20p": "nema-l14-20p",

    /**
     * value: "nema-l14-30p"
     * @const
     */
    "nema-l14-30p": "nema-l14-30p",

    /**
     * value: "nema-l14-50p"
     * @const
     */
    "nema-l14-50p": "nema-l14-50p",

    /**
     * value: "nema-l14-60p"
     * @const
     */
    "nema-l14-60p": "nema-l14-60p",

    /**
     * value: "nema-l15-20p"
     * @const
     */
    "nema-l15-20p": "nema-l15-20p",

    /**
     * value: "nema-l15-30p"
     * @const
     */
    "nema-l15-30p": "nema-l15-30p",

    /**
     * value: "nema-l15-50p"
     * @const
     */
    "nema-l15-50p": "nema-l15-50p",

    /**
     * value: "nema-l15-60p"
     * @const
     */
    "nema-l15-60p": "nema-l15-60p",

    /**
     * value: "nema-l21-20p"
     * @const
     */
    "nema-l21-20p": "nema-l21-20p",

    /**
     * value: "nema-l21-30p"
     * @const
     */
    "nema-l21-30p": "nema-l21-30p",

    /**
     * value: "nema-l22-30p"
     * @const
     */
    "nema-l22-30p": "nema-l22-30p",

    /**
     * value: "cs6361c"
     * @const
     */
    "cs6361c": "cs6361c",

    /**
     * value: "cs6365c"
     * @const
     */
    "cs6365c": "cs6365c",

    /**
     * value: "cs8165c"
     * @const
     */
    "cs8165c": "cs8165c",

    /**
     * value: "cs8265c"
     * @const
     */
    "cs8265c": "cs8265c",

    /**
     * value: "cs8365c"
     * @const
     */
    "cs8365c": "cs8365c",

    /**
     * value: "cs8465c"
     * @const
     */
    "cs8465c": "cs8465c",

    /**
     * value: "ita-c"
     * @const
     */
    "ita-c": "ita-c",

    /**
     * value: "ita-e"
     * @const
     */
    "ita-e": "ita-e",

    /**
     * value: "ita-f"
     * @const
     */
    "ita-f": "ita-f",

    /**
     * value: "ita-ef"
     * @const
     */
    "ita-ef": "ita-ef",

    /**
     * value: "ita-g"
     * @const
     */
    "ita-g": "ita-g",

    /**
     * value: "ita-h"
     * @const
     */
    "ita-h": "ita-h",

    /**
     * value: "ita-i"
     * @const
     */
    "ita-i": "ita-i",

    /**
     * value: "ita-j"
     * @const
     */
    "ita-j": "ita-j",

    /**
     * value: "ita-k"
     * @const
     */
    "ita-k": "ita-k",

    /**
     * value: "ita-l"
     * @const
     */
    "ita-l": "ita-l",

    /**
     * value: "ita-m"
     * @const
     */
    "ita-m": "ita-m",

    /**
     * value: "ita-n"
     * @const
     */
    "ita-n": "ita-n",

    /**
     * value: "ita-o"
     * @const
     */
    "ita-o": "ita-o",

    /**
     * value: "usb-a"
     * @const
     */
    "usb-a": "usb-a",

    /**
     * value: "usb-b"
     * @const
     */
    "usb-b": "usb-b",

    /**
     * value: "usb-c"
     * @const
     */
    "usb-c": "usb-c",

    /**
     * value: "usb-mini-a"
     * @const
     */
    "usb-mini-a": "usb-mini-a",

    /**
     * value: "usb-mini-b"
     * @const
     */
    "usb-mini-b": "usb-mini-b",

    /**
     * value: "usb-micro-a"
     * @const
     */
    "usb-micro-a": "usb-micro-a",

    /**
     * value: "usb-micro-b"
     * @const
     */
    "usb-micro-b": "usb-micro-b",

    /**
     * value: "usb-micro-ab"
     * @const
     */
    "usb-micro-ab": "usb-micro-ab",

    /**
     * value: "usb-3-b"
     * @const
     */
    "usb-3-b": "usb-3-b",

    /**
     * value: "usb-3-micro-b"
     * @const
     */
    "usb-3-micro-b": "usb-3-micro-b",

    /**
     * value: "dc-terminal"
     * @const
     */
    "dc-terminal": "dc-terminal",

    /**
     * value: "saf-d-grid"
     * @const
     */
    "saf-d-grid": "saf-d-grid",

    /**
     * value: "neutrik-powercon-20"
     * @const
     */
    "neutrik-powercon-20": "neutrik-powercon-20",

    /**
     * value: "neutrik-powercon-32"
     * @const
     */
    "neutrik-powercon-32": "neutrik-powercon-32",

    /**
     * value: "neutrik-powercon-true1"
     * @const
     */
    "neutrik-powercon-true1": "neutrik-powercon-true1",

    /**
     * value: "neutrik-powercon-true1-top"
     * @const
     */
    "neutrik-powercon-true1-top": "neutrik-powercon-true1-top",

    /**
     * value: "ubiquiti-smartpower"
     * @const
     */
    "ubiquiti-smartpower": "ubiquiti-smartpower",

    /**
     * value: "hardwired"
     * @const
     */
    "hardwired": "hardwired",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default WritablePowerPortTemplate;

