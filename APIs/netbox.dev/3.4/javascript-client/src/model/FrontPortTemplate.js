/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedDeviceType from './NestedDeviceType';
import NestedModuleType from './NestedModuleType';
import NestedRearPortTemplate from './NestedRearPortTemplate';
import Type2 from './Type2';

/**
 * The FrontPortTemplate model module.
 * @module model/FrontPortTemplate
 * @version 3.4
 */
class FrontPortTemplate {
    /**
     * Constructs a new <code>FrontPortTemplate</code>.
     * @alias module:model/FrontPortTemplate
     * @param name {String}  {module} is accepted as a substitution for the module bay position when attached to a module type. 
     * @param rearPort {module:model/NestedRearPortTemplate} 
     * @param type {module:model/Type2} 
     */
    constructor(name, rearPort, type) { 
        
        FrontPortTemplate.initialize(this, name, rearPort, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, rearPort, type) { 
        obj['name'] = name;
        obj['rear_port'] = rearPort;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FrontPortTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrontPortTemplate} obj Optional instance to populate.
     * @return {module:model/FrontPortTemplate} The populated <code>FrontPortTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrontPortTemplate();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = NestedDeviceType.constructFromObject(data['device_type']);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('module_type')) {
                obj['module_type'] = NestedModuleType.constructFromObject(data['module_type']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rear_port')) {
                obj['rear_port'] = NestedRearPortTemplate.constructFromObject(data['rear_port']);
            }
            if (data.hasOwnProperty('rear_port_position')) {
                obj['rear_port_position'] = ApiClient.convertToType(data['rear_port_position'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type2.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrontPortTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrontPortTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FrontPortTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `device_type`
        if (data['device_type']) { // data not null
          NestedDeviceType.validateJSON(data['device_type']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `module_type`
        if (data['module_type']) { // data not null
          NestedModuleType.validateJSON(data['module_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `rear_port`
        if (data['rear_port']) { // data not null
          NestedRearPortTemplate.validateJSON(data['rear_port']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type2.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

FrontPortTemplate.RequiredProperties = ["name", "rear_port", "type"];

/**
 * @member {String} color
 */
FrontPortTemplate.prototype['color'] = undefined;

/**
 * @member {Date} created
 */
FrontPortTemplate.prototype['created'] = undefined;

/**
 * @member {String} description
 */
FrontPortTemplate.prototype['description'] = undefined;

/**
 * @member {module:model/NestedDeviceType} device_type
 */
FrontPortTemplate.prototype['device_type'] = undefined;

/**
 * @member {String} display
 */
FrontPortTemplate.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
FrontPortTemplate.prototype['id'] = undefined;

/**
 * Physical label
 * @member {String} label
 */
FrontPortTemplate.prototype['label'] = undefined;

/**
 * @member {Date} last_updated
 */
FrontPortTemplate.prototype['last_updated'] = undefined;

/**
 * @member {module:model/NestedModuleType} module_type
 */
FrontPortTemplate.prototype['module_type'] = undefined;

/**
 *  {module} is accepted as a substitution for the module bay position when attached to a module type. 
 * @member {String} name
 */
FrontPortTemplate.prototype['name'] = undefined;

/**
 * @member {module:model/NestedRearPortTemplate} rear_port
 */
FrontPortTemplate.prototype['rear_port'] = undefined;

/**
 * @member {Number} rear_port_position
 */
FrontPortTemplate.prototype['rear_port_position'] = undefined;

/**
 * @member {module:model/Type2} type
 */
FrontPortTemplate.prototype['type'] = undefined;

/**
 * @member {String} url
 */
FrontPortTemplate.prototype['url'] = undefined;






export default FrontPortTemplate;

