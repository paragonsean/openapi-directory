/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComponentNestedModule from './ComponentNestedModule';
import FeedLeg from './FeedLeg';
import NestedCable from './NestedCable';
import NestedDevice from './NestedDevice';
import NestedPowerPort from './NestedPowerPort';
import NestedTag from './NestedTag';
import Type6 from './Type6';

/**
 * The PowerOutlet model module.
 * @module model/PowerOutlet
 * @version 3.4
 */
class PowerOutlet {
    /**
     * Constructs a new <code>PowerOutlet</code>.
     * @alias module:model/PowerOutlet
     * @param device {module:model/NestedDevice} 
     * @param name {String} 
     */
    constructor(device, name) { 
        
        PowerOutlet.initialize(this, device, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name) { 
        obj['device'] = device;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>PowerOutlet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PowerOutlet} obj Optional instance to populate.
     * @return {module:model/PowerOutlet} The populated <code>PowerOutlet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PowerOutlet();

            if (data.hasOwnProperty('_occupied')) {
                obj['_occupied'] = ApiClient.convertToType(data['_occupied'], 'Boolean');
            }
            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('cable_end')) {
                obj['cable_end'] = ApiClient.convertToType(data['cable_end'], 'String');
            }
            if (data.hasOwnProperty('connected_endpoints')) {
                obj['connected_endpoints'] = ApiClient.convertToType(data['connected_endpoints'], ['String']);
            }
            if (data.hasOwnProperty('connected_endpoints_reachable')) {
                obj['connected_endpoints_reachable'] = ApiClient.convertToType(data['connected_endpoints_reachable'], 'Boolean');
            }
            if (data.hasOwnProperty('connected_endpoints_type')) {
                obj['connected_endpoints_type'] = ApiClient.convertToType(data['connected_endpoints_type'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = NestedDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('feed_leg')) {
                obj['feed_leg'] = FeedLeg.constructFromObject(data['feed_leg']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('link_peers')) {
                obj['link_peers'] = ApiClient.convertToType(data['link_peers'], ['String']);
            }
            if (data.hasOwnProperty('link_peers_type')) {
                obj['link_peers_type'] = ApiClient.convertToType(data['link_peers_type'], 'String');
            }
            if (data.hasOwnProperty('mark_connected')) {
                obj['mark_connected'] = ApiClient.convertToType(data['mark_connected'], 'Boolean');
            }
            if (data.hasOwnProperty('module')) {
                obj['module'] = ComponentNestedModule.constructFromObject(data['module']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('power_port')) {
                obj['power_port'] = NestedPowerPort.constructFromObject(data['power_port']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type6.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PowerOutlet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PowerOutlet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PowerOutlet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['cable_end'] && !(typeof data['cable_end'] === 'string' || data['cable_end'] instanceof String)) {
            throw new Error("Expected the field `cable_end` to be a primitive type in the JSON string but got " + data['cable_end']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected_endpoints'])) {
            throw new Error("Expected the field `connected_endpoints` to be an array in the JSON data but got " + data['connected_endpoints']);
        }
        // ensure the json data is a string
        if (data['connected_endpoints_type'] && !(typeof data['connected_endpoints_type'] === 'string' || data['connected_endpoints_type'] instanceof String)) {
            throw new Error("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got " + data['connected_endpoints_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          NestedDevice.validateJSON(data['device']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `feed_leg`
        if (data['feed_leg']) { // data not null
          FeedLeg.validateJSON(data['feed_leg']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['link_peers'])) {
            throw new Error("Expected the field `link_peers` to be an array in the JSON data but got " + data['link_peers']);
        }
        // ensure the json data is a string
        if (data['link_peers_type'] && !(typeof data['link_peers_type'] === 'string' || data['link_peers_type'] instanceof String)) {
            throw new Error("Expected the field `link_peers_type` to be a primitive type in the JSON string but got " + data['link_peers_type']);
        }
        // validate the optional field `module`
        if (data['module']) { // data not null
          ComponentNestedModule.validateJSON(data['module']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `power_port`
        if (data['power_port']) { // data not null
          NestedPowerPort.validateJSON(data['power_port']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type6.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

PowerOutlet.RequiredProperties = ["device", "name"];

/**
 * @member {Boolean} _occupied
 */
PowerOutlet.prototype['_occupied'] = undefined;

/**
 * @member {module:model/NestedCable} cable
 */
PowerOutlet.prototype['cable'] = undefined;

/**
 * @member {String} cable_end
 */
PowerOutlet.prototype['cable_end'] = undefined;

/**
 *  Return the appropriate serializer for the type of connected object. 
 * @member {Array.<String>} connected_endpoints
 */
PowerOutlet.prototype['connected_endpoints'] = undefined;

/**
 * @member {Boolean} connected_endpoints_reachable
 */
PowerOutlet.prototype['connected_endpoints_reachable'] = undefined;

/**
 * @member {String} connected_endpoints_type
 */
PowerOutlet.prototype['connected_endpoints_type'] = undefined;

/**
 * @member {Date} created
 */
PowerOutlet.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
PowerOutlet.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
PowerOutlet.prototype['description'] = undefined;

/**
 * @member {module:model/NestedDevice} device
 */
PowerOutlet.prototype['device'] = undefined;

/**
 * @member {String} display
 */
PowerOutlet.prototype['display'] = undefined;

/**
 * @member {module:model/FeedLeg} feed_leg
 */
PowerOutlet.prototype['feed_leg'] = undefined;

/**
 * @member {Number} id
 */
PowerOutlet.prototype['id'] = undefined;

/**
 * Physical label
 * @member {String} label
 */
PowerOutlet.prototype['label'] = undefined;

/**
 * @member {Date} last_updated
 */
PowerOutlet.prototype['last_updated'] = undefined;

/**
 *  Return the appropriate serializer for the link termination model. 
 * @member {Array.<String>} link_peers
 */
PowerOutlet.prototype['link_peers'] = undefined;

/**
 * @member {String} link_peers_type
 */
PowerOutlet.prototype['link_peers_type'] = undefined;

/**
 * Treat as if a cable is connected
 * @member {Boolean} mark_connected
 */
PowerOutlet.prototype['mark_connected'] = undefined;

/**
 * @member {module:model/ComponentNestedModule} module
 */
PowerOutlet.prototype['module'] = undefined;

/**
 * @member {String} name
 */
PowerOutlet.prototype['name'] = undefined;

/**
 * @member {module:model/NestedPowerPort} power_port
 */
PowerOutlet.prototype['power_port'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
PowerOutlet.prototype['tags'] = undefined;

/**
 * @member {module:model/Type6} type
 */
PowerOutlet.prototype['type'] = undefined;

/**
 * @member {String} url
 */
PowerOutlet.prototype['url'] = undefined;






export default PowerOutlet;

