/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedTag from './NestedTag';

/**
 * The WritableVirtualDeviceContext model module.
 * @module model/WritableVirtualDeviceContext
 * @version 3.4
 */
class WritableVirtualDeviceContext {
    /**
     * Constructs a new <code>WritableVirtualDeviceContext</code>.
     * @alias module:model/WritableVirtualDeviceContext
     * @param name {String} 
     * @param status {module:model/WritableVirtualDeviceContext.StatusEnum} 
     */
    constructor(name, status) { 
        
        WritableVirtualDeviceContext.initialize(this, name, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, status) { 
        obj['name'] = name;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>WritableVirtualDeviceContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableVirtualDeviceContext} obj Optional instance to populate.
     * @return {module:model/WritableVirtualDeviceContext} The populated <code>WritableVirtualDeviceContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableVirtualDeviceContext();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'Number');
            }
            if (data.hasOwnProperty('interface_count')) {
                obj['interface_count'] = ApiClient.convertToType(data['interface_count'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primary_ip')) {
                obj['primary_ip'] = ApiClient.convertToType(data['primary_ip'], 'String');
            }
            if (data.hasOwnProperty('primary_ip4')) {
                obj['primary_ip4'] = ApiClient.convertToType(data['primary_ip4'], 'Number');
            }
            if (data.hasOwnProperty('primary_ip6')) {
                obj['primary_ip6'] = ApiClient.convertToType(data['primary_ip6'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableVirtualDeviceContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableVirtualDeviceContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableVirtualDeviceContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primary_ip'] && !(typeof data['primary_ip'] === 'string' || data['primary_ip'] instanceof String)) {
            throw new Error("Expected the field `primary_ip` to be a primitive type in the JSON string but got " + data['primary_ip']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WritableVirtualDeviceContext.RequiredProperties = ["name", "status"];

/**
 * @member {String} comments
 */
WritableVirtualDeviceContext.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WritableVirtualDeviceContext.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableVirtualDeviceContext.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritableVirtualDeviceContext.prototype['description'] = undefined;

/**
 * @member {Number} device
 */
WritableVirtualDeviceContext.prototype['device'] = undefined;

/**
 * @member {String} display
 */
WritableVirtualDeviceContext.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
WritableVirtualDeviceContext.prototype['id'] = undefined;

/**
 * Numeric identifier unique to the parent device
 * @member {Number} identifier
 */
WritableVirtualDeviceContext.prototype['identifier'] = undefined;

/**
 * @member {Number} interface_count
 */
WritableVirtualDeviceContext.prototype['interface_count'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableVirtualDeviceContext.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
WritableVirtualDeviceContext.prototype['name'] = undefined;

/**
 * @member {String} primary_ip
 */
WritableVirtualDeviceContext.prototype['primary_ip'] = undefined;

/**
 * @member {Number} primary_ip4
 */
WritableVirtualDeviceContext.prototype['primary_ip4'] = undefined;

/**
 * @member {Number} primary_ip6
 */
WritableVirtualDeviceContext.prototype['primary_ip6'] = undefined;

/**
 * @member {module:model/WritableVirtualDeviceContext.StatusEnum} status
 */
WritableVirtualDeviceContext.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
WritableVirtualDeviceContext.prototype['tags'] = undefined;

/**
 * @member {Number} tenant
 */
WritableVirtualDeviceContext.prototype['tenant'] = undefined;

/**
 * @member {String} url
 */
WritableVirtualDeviceContext.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WritableVirtualDeviceContext['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",

    /**
     * value: "offline"
     * @const
     */
    "offline": "offline"
};



export default WritableVirtualDeviceContext;

