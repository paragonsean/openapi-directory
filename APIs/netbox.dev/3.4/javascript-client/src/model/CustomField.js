/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterLogic from './FilterLogic';
import Type1 from './Type1';
import UiVisibility from './UiVisibility';

/**
 * The CustomField model module.
 * @module model/CustomField
 * @version 3.4
 */
class CustomField {
    /**
     * Constructs a new <code>CustomField</code>.
     * @alias module:model/CustomField
     * @param contentTypes {Array.<String>} 
     * @param name {String} Internal field name
     * @param type {module:model/Type1} 
     */
    constructor(contentTypes, name, type) { 
        
        CustomField.initialize(this, contentTypes, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentTypes, name, type) { 
        obj['content_types'] = contentTypes;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CustomField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomField} obj Optional instance to populate.
     * @return {module:model/CustomField} The populated <code>CustomField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomField();

            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], ['String']);
            }
            if (data.hasOwnProperty('content_types')) {
                obj['content_types'] = ApiClient.convertToType(data['content_types'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('filter_logic')) {
                obj['filter_logic'] = FilterLogic.constructFromObject(data['filter_logic']);
            }
            if (data.hasOwnProperty('group_name')) {
                obj['group_name'] = ApiClient.convertToType(data['group_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object_type')) {
                obj['object_type'] = ApiClient.convertToType(data['object_type'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('search_weight')) {
                obj['search_weight'] = ApiClient.convertToType(data['search_weight'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type1.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('ui_visibility')) {
                obj['ui_visibility'] = UiVisibility.constructFromObject(data['ui_visibility']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('validation_maximum')) {
                obj['validation_maximum'] = ApiClient.convertToType(data['validation_maximum'], 'Number');
            }
            if (data.hasOwnProperty('validation_minimum')) {
                obj['validation_minimum'] = ApiClient.convertToType(data['validation_minimum'], 'Number');
            }
            if (data.hasOwnProperty('validation_regex')) {
                obj['validation_regex'] = ApiClient.convertToType(data['validation_regex'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['choices'])) {
            throw new Error("Expected the field `choices` to be an array in the JSON data but got " + data['choices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_types'])) {
            throw new Error("Expected the field `content_types` to be an array in the JSON data but got " + data['content_types']);
        }
        // ensure the json data is a string
        if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
            throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `filter_logic`
        if (data['filter_logic']) { // data not null
          FilterLogic.validateJSON(data['filter_logic']);
        }
        // ensure the json data is a string
        if (data['group_name'] && !(typeof data['group_name'] === 'string' || data['group_name'] instanceof String)) {
            throw new Error("Expected the field `group_name` to be a primitive type in the JSON string but got " + data['group_name']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object_type'] && !(typeof data['object_type'] === 'string' || data['object_type'] instanceof String)) {
            throw new Error("Expected the field `object_type` to be a primitive type in the JSON string but got " + data['object_type']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type1.validateJSON(data['type']);
        }
        // validate the optional field `ui_visibility`
        if (data['ui_visibility']) { // data not null
          UiVisibility.validateJSON(data['ui_visibility']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['validation_regex'] && !(typeof data['validation_regex'] === 'string' || data['validation_regex'] instanceof String)) {
            throw new Error("Expected the field `validation_regex` to be a primitive type in the JSON string but got " + data['validation_regex']);
        }

        return true;
    }


}

CustomField.RequiredProperties = ["content_types", "name", "type"];

/**
 * Comma-separated list of available choices (for selection fields)
 * @member {Array.<String>} choices
 */
CustomField.prototype['choices'] = undefined;

/**
 * @member {Array.<String>} content_types
 */
CustomField.prototype['content_types'] = undefined;

/**
 * @member {Date} created
 */
CustomField.prototype['created'] = undefined;

/**
 * @member {String} data_type
 */
CustomField.prototype['data_type'] = undefined;

/**
 * Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").
 * @member {Object} default
 */
CustomField.prototype['default'] = undefined;

/**
 * @member {String} description
 */
CustomField.prototype['description'] = undefined;

/**
 * @member {String} display
 */
CustomField.prototype['display'] = undefined;

/**
 * @member {module:model/FilterLogic} filter_logic
 */
CustomField.prototype['filter_logic'] = undefined;

/**
 * Custom fields within the same group will be displayed together
 * @member {String} group_name
 */
CustomField.prototype['group_name'] = undefined;

/**
 * @member {Number} id
 */
CustomField.prototype['id'] = undefined;

/**
 * Name of the field as displayed to users (if not provided, the field's name will be used)
 * @member {String} label
 */
CustomField.prototype['label'] = undefined;

/**
 * @member {Date} last_updated
 */
CustomField.prototype['last_updated'] = undefined;

/**
 * Internal field name
 * @member {String} name
 */
CustomField.prototype['name'] = undefined;

/**
 * @member {String} object_type
 */
CustomField.prototype['object_type'] = undefined;

/**
 * If true, this field is required when creating new objects or editing an existing object.
 * @member {Boolean} required
 */
CustomField.prototype['required'] = undefined;

/**
 * Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.
 * @member {Number} search_weight
 */
CustomField.prototype['search_weight'] = undefined;

/**
 * @member {module:model/Type1} type
 */
CustomField.prototype['type'] = undefined;

/**
 * @member {module:model/UiVisibility} ui_visibility
 */
CustomField.prototype['ui_visibility'] = undefined;

/**
 * @member {String} url
 */
CustomField.prototype['url'] = undefined;

/**
 * Maximum allowed value (for numeric fields)
 * @member {Number} validation_maximum
 */
CustomField.prototype['validation_maximum'] = undefined;

/**
 * Minimum allowed value (for numeric fields)
 * @member {Number} validation_minimum
 */
CustomField.prototype['validation_minimum'] = undefined;

/**
 * Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.
 * @member {String} validation_regex
 */
CustomField.prototype['validation_regex'] = undefined;

/**
 * Fields with higher weights appear lower in a form.
 * @member {Number} weight
 */
CustomField.prototype['weight'] = undefined;






export default CustomField;

