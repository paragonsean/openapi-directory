/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedCable from './NestedCable';
import NestedTag from './NestedTag';

/**
 * The WritableCircuitTermination model module.
 * @module model/WritableCircuitTermination
 * @version 3.4
 */
class WritableCircuitTermination {
    /**
     * Constructs a new <code>WritableCircuitTermination</code>.
     * @alias module:model/WritableCircuitTermination
     * @param circuit {Number} 
     * @param termSide {module:model/WritableCircuitTermination.TermSideEnum} 
     */
    constructor(circuit, termSide) { 
        
        WritableCircuitTermination.initialize(this, circuit, termSide);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, circuit, termSide) { 
        obj['circuit'] = circuit;
        obj['term_side'] = termSide;
    }

    /**
     * Constructs a <code>WritableCircuitTermination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableCircuitTermination} obj Optional instance to populate.
     * @return {module:model/WritableCircuitTermination} The populated <code>WritableCircuitTermination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableCircuitTermination();

            if (data.hasOwnProperty('_occupied')) {
                obj['_occupied'] = ApiClient.convertToType(data['_occupied'], 'Boolean');
            }
            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('cable_end')) {
                obj['cable_end'] = ApiClient.convertToType(data['cable_end'], 'String');
            }
            if (data.hasOwnProperty('circuit')) {
                obj['circuit'] = ApiClient.convertToType(data['circuit'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('link_peers')) {
                obj['link_peers'] = ApiClient.convertToType(data['link_peers'], ['String']);
            }
            if (data.hasOwnProperty('link_peers_type')) {
                obj['link_peers_type'] = ApiClient.convertToType(data['link_peers_type'], 'String');
            }
            if (data.hasOwnProperty('mark_connected')) {
                obj['mark_connected'] = ApiClient.convertToType(data['mark_connected'], 'Boolean');
            }
            if (data.hasOwnProperty('port_speed')) {
                obj['port_speed'] = ApiClient.convertToType(data['port_speed'], 'Number');
            }
            if (data.hasOwnProperty('pp_info')) {
                obj['pp_info'] = ApiClient.convertToType(data['pp_info'], 'String');
            }
            if (data.hasOwnProperty('provider_network')) {
                obj['provider_network'] = ApiClient.convertToType(data['provider_network'], 'Number');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('term_side')) {
                obj['term_side'] = ApiClient.convertToType(data['term_side'], 'String');
            }
            if (data.hasOwnProperty('upstream_speed')) {
                obj['upstream_speed'] = ApiClient.convertToType(data['upstream_speed'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('xconnect_id')) {
                obj['xconnect_id'] = ApiClient.convertToType(data['xconnect_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableCircuitTermination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableCircuitTermination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableCircuitTermination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['cable_end'] && !(typeof data['cable_end'] === 'string' || data['cable_end'] instanceof String)) {
            throw new Error("Expected the field `cable_end` to be a primitive type in the JSON string but got " + data['cable_end']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['link_peers'])) {
            throw new Error("Expected the field `link_peers` to be an array in the JSON data but got " + data['link_peers']);
        }
        // ensure the json data is a string
        if (data['link_peers_type'] && !(typeof data['link_peers_type'] === 'string' || data['link_peers_type'] instanceof String)) {
            throw new Error("Expected the field `link_peers_type` to be a primitive type in the JSON string but got " + data['link_peers_type']);
        }
        // ensure the json data is a string
        if (data['pp_info'] && !(typeof data['pp_info'] === 'string' || data['pp_info'] instanceof String)) {
            throw new Error("Expected the field `pp_info` to be a primitive type in the JSON string but got " + data['pp_info']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['term_side'] && !(typeof data['term_side'] === 'string' || data['term_side'] instanceof String)) {
            throw new Error("Expected the field `term_side` to be a primitive type in the JSON string but got " + data['term_side']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['xconnect_id'] && !(typeof data['xconnect_id'] === 'string' || data['xconnect_id'] instanceof String)) {
            throw new Error("Expected the field `xconnect_id` to be a primitive type in the JSON string but got " + data['xconnect_id']);
        }

        return true;
    }


}

WritableCircuitTermination.RequiredProperties = ["circuit", "term_side"];

/**
 * @member {Boolean} _occupied
 */
WritableCircuitTermination.prototype['_occupied'] = undefined;

/**
 * @member {module:model/NestedCable} cable
 */
WritableCircuitTermination.prototype['cable'] = undefined;

/**
 * @member {String} cable_end
 */
WritableCircuitTermination.prototype['cable_end'] = undefined;

/**
 * @member {Number} circuit
 */
WritableCircuitTermination.prototype['circuit'] = undefined;

/**
 * @member {Date} created
 */
WritableCircuitTermination.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableCircuitTermination.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritableCircuitTermination.prototype['description'] = undefined;

/**
 * @member {String} display
 */
WritableCircuitTermination.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
WritableCircuitTermination.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableCircuitTermination.prototype['last_updated'] = undefined;

/**
 *  Return the appropriate serializer for the link termination model. 
 * @member {Array.<String>} link_peers
 */
WritableCircuitTermination.prototype['link_peers'] = undefined;

/**
 * @member {String} link_peers_type
 */
WritableCircuitTermination.prototype['link_peers_type'] = undefined;

/**
 * Treat as if a cable is connected
 * @member {Boolean} mark_connected
 */
WritableCircuitTermination.prototype['mark_connected'] = undefined;

/**
 * @member {Number} port_speed
 */
WritableCircuitTermination.prototype['port_speed'] = undefined;

/**
 * @member {String} pp_info
 */
WritableCircuitTermination.prototype['pp_info'] = undefined;

/**
 * @member {Number} provider_network
 */
WritableCircuitTermination.prototype['provider_network'] = undefined;

/**
 * @member {Number} site
 */
WritableCircuitTermination.prototype['site'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
WritableCircuitTermination.prototype['tags'] = undefined;

/**
 * @member {module:model/WritableCircuitTermination.TermSideEnum} term_side
 */
WritableCircuitTermination.prototype['term_side'] = undefined;

/**
 * Upstream speed, if different from port speed
 * @member {Number} upstream_speed
 */
WritableCircuitTermination.prototype['upstream_speed'] = undefined;

/**
 * @member {String} url
 */
WritableCircuitTermination.prototype['url'] = undefined;

/**
 * @member {String} xconnect_id
 */
WritableCircuitTermination.prototype['xconnect_id'] = undefined;





/**
 * Allowed values for the <code>term_side</code> property.
 * @enum {String}
 * @readonly
 */
WritableCircuitTermination['TermSideEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "Z"
     * @const
     */
    "Z": "Z"
};



export default WritableCircuitTermination;

