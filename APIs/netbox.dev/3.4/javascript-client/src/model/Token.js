/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedUser from './NestedUser';

/**
 * The Token model module.
 * @module model/Token
 * @version 3.4
 */
class Token {
    /**
     * Constructs a new <code>Token</code>.
     * @alias module:model/Token
     * @param user {module:model/NestedUser} 
     */
    constructor(user) { 
        
        Token.initialize(this, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, user) { 
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Token</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Token} obj Optional instance to populate.
     * @return {module:model/Token} The populated <code>Token</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Token();

            if (data.hasOwnProperty('allowed_ips')) {
                obj['allowed_ips'] = ApiClient.convertToType(data['allowed_ips'], [Object]);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('last_used')) {
                obj['last_used'] = ApiClient.convertToType(data['last_used'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NestedUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('write_enabled')) {
                obj['write_enabled'] = ApiClient.convertToType(data['write_enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Token</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Token</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Token.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_ips'])) {
            throw new Error("Expected the field `allowed_ips` to be an array in the JSON data but got " + data['allowed_ips']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NestedUser.validateJSON(data['user']);
        }

        return true;
    }


}

Token.RequiredProperties = ["user"];

/**
 * @member {Array.<Object>} allowed_ips
 */
Token.prototype['allowed_ips'] = undefined;

/**
 * @member {Date} created
 */
Token.prototype['created'] = undefined;

/**
 * @member {String} description
 */
Token.prototype['description'] = undefined;

/**
 * @member {String} display
 */
Token.prototype['display'] = undefined;

/**
 * @member {Date} expires
 */
Token.prototype['expires'] = undefined;

/**
 * @member {Number} id
 */
Token.prototype['id'] = undefined;

/**
 * @member {String} key
 */
Token.prototype['key'] = undefined;

/**
 * @member {Date} last_used
 */
Token.prototype['last_used'] = undefined;

/**
 * @member {String} url
 */
Token.prototype['url'] = undefined;

/**
 * @member {module:model/NestedUser} user
 */
Token.prototype['user'] = undefined;

/**
 * Permit create/update/delete operations using this key
 * @member {Boolean} write_enabled
 */
Token.prototype['write_enabled'] = undefined;






export default Token;

