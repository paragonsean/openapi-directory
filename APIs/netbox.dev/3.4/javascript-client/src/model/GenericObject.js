/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GenericObject model module.
 * @module model/GenericObject
 * @version 3.4
 */
class GenericObject {
    /**
     * Constructs a new <code>GenericObject</code>.
     * @alias module:model/GenericObject
     * @param objectId {Number} 
     * @param objectType {String} 
     */
    constructor(objectId, objectType) { 
        
        GenericObject.initialize(this, objectId, objectType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectId, objectType) { 
        obj['object_id'] = objectId;
        obj['object_type'] = objectType;
    }

    /**
     * Constructs a <code>GenericObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenericObject} obj Optional instance to populate.
     * @return {module:model/GenericObject} The populated <code>GenericObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenericObject();

            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], Object);
            }
            if (data.hasOwnProperty('object_id')) {
                obj['object_id'] = ApiClient.convertToType(data['object_id'], 'Number');
            }
            if (data.hasOwnProperty('object_type')) {
                obj['object_type'] = ApiClient.convertToType(data['object_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenericObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenericObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GenericObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['object_type'] && !(typeof data['object_type'] === 'string' || data['object_type'] instanceof String)) {
            throw new Error("Expected the field `object_type` to be a primitive type in the JSON string but got " + data['object_type']);
        }

        return true;
    }


}

GenericObject.RequiredProperties = ["object_id", "object_type"];

/**
 * @member {Object} object
 */
GenericObject.prototype['object'] = undefined;

/**
 * @member {Number} object_id
 */
GenericObject.prototype['object_id'] = undefined;

/**
 * @member {String} object_type
 */
GenericObject.prototype['object_type'] = undefined;






export default GenericObject;

