/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedRouteTarget from './NestedRouteTarget';
import NestedTag from './NestedTag';
import NestedTenant from './NestedTenant';

/**
 * The VRF model module.
 * @module model/VRF
 * @version 3.4
 */
class VRF {
    /**
     * Constructs a new <code>VRF</code>.
     * @alias module:model/VRF
     * @param name {String} 
     */
    constructor(name) { 
        
        VRF.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>VRF</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VRF} obj Optional instance to populate.
     * @return {module:model/VRF} The populated <code>VRF</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VRF();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('enforce_unique')) {
                obj['enforce_unique'] = ApiClient.convertToType(data['enforce_unique'], 'Boolean');
            }
            if (data.hasOwnProperty('export_targets')) {
                obj['export_targets'] = ApiClient.convertToType(data['export_targets'], [NestedRouteTarget]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('import_targets')) {
                obj['import_targets'] = ApiClient.convertToType(data['import_targets'], [NestedRouteTarget]);
            }
            if (data.hasOwnProperty('ipaddress_count')) {
                obj['ipaddress_count'] = ApiClient.convertToType(data['ipaddress_count'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prefix_count')) {
                obj['prefix_count'] = ApiClient.convertToType(data['prefix_count'], 'Number');
            }
            if (data.hasOwnProperty('rd')) {
                obj['rd'] = ApiClient.convertToType(data['rd'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = NestedTenant.constructFromObject(data['tenant']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VRF</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VRF</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VRF.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        if (data['export_targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['export_targets'])) {
                throw new Error("Expected the field `export_targets` to be an array in the JSON data but got " + data['export_targets']);
            }
            // validate the optional field `export_targets` (array)
            for (const item of data['export_targets']) {
                NestedRouteTarget.validateJSON(item);
            };
        }
        if (data['import_targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['import_targets'])) {
                throw new Error("Expected the field `import_targets` to be an array in the JSON data but got " + data['import_targets']);
            }
            // validate the optional field `import_targets` (array)
            for (const item of data['import_targets']) {
                NestedRouteTarget.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rd'] && !(typeof data['rd'] === 'string' || data['rd'] instanceof String)) {
            throw new Error("Expected the field `rd` to be a primitive type in the JSON string but got " + data['rd']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `tenant`
        if (data['tenant']) { // data not null
          NestedTenant.validateJSON(data['tenant']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

VRF.RequiredProperties = ["name"];

/**
 * @member {String} comments
 */
VRF.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
VRF.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
VRF.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
VRF.prototype['description'] = undefined;

/**
 * @member {String} display
 */
VRF.prototype['display'] = undefined;

/**
 * Prevent duplicate prefixes/IP addresses within this VRF
 * @member {Boolean} enforce_unique
 */
VRF.prototype['enforce_unique'] = undefined;

/**
 * @member {Array.<module:model/NestedRouteTarget>} export_targets
 */
VRF.prototype['export_targets'] = undefined;

/**
 * @member {Number} id
 */
VRF.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/NestedRouteTarget>} import_targets
 */
VRF.prototype['import_targets'] = undefined;

/**
 * @member {Number} ipaddress_count
 */
VRF.prototype['ipaddress_count'] = undefined;

/**
 * @member {Date} last_updated
 */
VRF.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
VRF.prototype['name'] = undefined;

/**
 * @member {Number} prefix_count
 */
VRF.prototype['prefix_count'] = undefined;

/**
 * Unique route distinguisher (as defined in RFC 4364)
 * @member {String} rd
 */
VRF.prototype['rd'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
VRF.prototype['tags'] = undefined;

/**
 * @member {module:model/NestedTenant} tenant
 */
VRF.prototype['tenant'] = undefined;

/**
 * @member {String} url
 */
VRF.prototype['url'] = undefined;






export default VRF;

