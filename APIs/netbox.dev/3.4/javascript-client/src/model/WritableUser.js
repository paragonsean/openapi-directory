/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableUser model module.
 * @module model/WritableUser
 * @version 3.4
 */
class WritableUser {
    /**
     * Constructs a new <code>WritableUser</code>.
     * @alias module:model/WritableUser
     * @param password {String} 
     * @param username {String} Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     */
    constructor(password, username) { 
        
        WritableUser.initialize(this, password, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, password, username) { 
        obj['password'] = password;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>WritableUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableUser} obj Optional instance to populate.
     * @return {module:model/WritableUser} The populated <code>WritableUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableUser();

            if (data.hasOwnProperty('date_joined')) {
                obj['date_joined'] = ApiClient.convertToType(data['date_joined'], 'Date');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['Number']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_staff')) {
                obj['is_staff'] = ApiClient.convertToType(data['is_staff'], 'Boolean');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

WritableUser.RequiredProperties = ["password", "username"];

/**
 * @member {Date} date_joined
 */
WritableUser.prototype['date_joined'] = undefined;

/**
 * @member {String} display
 */
WritableUser.prototype['display'] = undefined;

/**
 * @member {String} email
 */
WritableUser.prototype['email'] = undefined;

/**
 * @member {String} first_name
 */
WritableUser.prototype['first_name'] = undefined;

/**
 * The groups this user belongs to. A user will get all permissions granted to each of their groups.
 * @member {Array.<Number>} groups
 */
WritableUser.prototype['groups'] = undefined;

/**
 * @member {Number} id
 */
WritableUser.prototype['id'] = undefined;

/**
 * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
 * @member {Boolean} is_active
 */
WritableUser.prototype['is_active'] = undefined;

/**
 * Designates whether the user can log into this admin site.
 * @member {Boolean} is_staff
 */
WritableUser.prototype['is_staff'] = undefined;

/**
 * @member {String} last_name
 */
WritableUser.prototype['last_name'] = undefined;

/**
 * @member {String} password
 */
WritableUser.prototype['password'] = undefined;

/**
 * @member {String} url
 */
WritableUser.prototype['url'] = undefined;

/**
 * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
 * @member {String} username
 */
WritableUser.prototype['username'] = undefined;






export default WritableUser;

