/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type model module.
 * @module model/Type
 * @version 3.4
 */
class Type {
    /**
     * Constructs a new <code>Type</code>.
     * @alias module:model/Type
     * @param label {module:model/Type.LabelEnum} 
     * @param value {module:model/Type.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type} obj Optional instance to populate.
     * @return {module:model/Type} The populated <code>Type</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type.LabelEnum} label
 */
Type.prototype['label'] = undefined;

/**
 * @member {module:model/Type.ValueEnum} value
 */
Type.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type['LabelEnum'] = {

    /**
     * value: "DE-9"
     * @const
     */
    "DE-9": "DE-9",

    /**
     * value: "DB-25"
     * @const
     */
    "DB-25": "DB-25",

    /**
     * value: "RJ-11"
     * @const
     */
    "RJ-11": "RJ-11",

    /**
     * value: "RJ-12"
     * @const
     */
    "RJ-12": "RJ-12",

    /**
     * value: "RJ-45"
     * @const
     */
    "RJ-45": "RJ-45",

    /**
     * value: "Mini-DIN 8"
     * @const
     */
    "Mini-DIN 8": "Mini-DIN 8",

    /**
     * value: "USB Type A"
     * @const
     */
    "USB Type A": "USB Type A",

    /**
     * value: "USB Type B"
     * @const
     */
    "USB Type B": "USB Type B",

    /**
     * value: "USB Type C"
     * @const
     */
    "USB Type C": "USB Type C",

    /**
     * value: "USB Mini A"
     * @const
     */
    "USB Mini A": "USB Mini A",

    /**
     * value: "USB Mini B"
     * @const
     */
    "USB Mini B": "USB Mini B",

    /**
     * value: "USB Micro A"
     * @const
     */
    "USB Micro A": "USB Micro A",

    /**
     * value: "USB Micro B"
     * @const
     */
    "USB Micro B": "USB Micro B",

    /**
     * value: "USB Micro AB"
     * @const
     */
    "USB Micro AB": "USB Micro AB",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type['ValueEnum'] = {

    /**
     * value: "de-9"
     * @const
     */
    "de-9": "de-9",

    /**
     * value: "db-25"
     * @const
     */
    "db-25": "db-25",

    /**
     * value: "rj-11"
     * @const
     */
    "rj-11": "rj-11",

    /**
     * value: "rj-12"
     * @const
     */
    "rj-12": "rj-12",

    /**
     * value: "rj-45"
     * @const
     */
    "rj-45": "rj-45",

    /**
     * value: "mini-din-8"
     * @const
     */
    "mini-din-8": "mini-din-8",

    /**
     * value: "usb-a"
     * @const
     */
    "usb-a": "usb-a",

    /**
     * value: "usb-b"
     * @const
     */
    "usb-b": "usb-b",

    /**
     * value: "usb-c"
     * @const
     */
    "usb-c": "usb-c",

    /**
     * value: "usb-mini-a"
     * @const
     */
    "usb-mini-a": "usb-mini-a",

    /**
     * value: "usb-mini-b"
     * @const
     */
    "usb-mini-b": "usb-mini-b",

    /**
     * value: "usb-micro-a"
     * @const
     */
    "usb-micro-a": "usb-micro-a",

    /**
     * value: "usb-micro-b"
     * @const
     */
    "usb-micro-b": "usb-micro-b",

    /**
     * value: "usb-micro-ab"
     * @const
     */
    "usb-micro-ab": "usb-micro-ab",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Type;

