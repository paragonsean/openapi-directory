/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type1 model module.
 * @module model/Type1
 * @version 3.4
 */
class Type1 {
    /**
     * Constructs a new <code>Type1</code>.
     * @alias module:model/Type1
     * @param label {module:model/Type1.LabelEnum} 
     * @param value {module:model/Type1.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type1.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type1} obj Optional instance to populate.
     * @return {module:model/Type1} The populated <code>Type1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type1();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type1.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type1.LabelEnum} label
 */
Type1.prototype['label'] = undefined;

/**
 * @member {module:model/Type1.ValueEnum} value
 */
Type1.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type1['LabelEnum'] = {

    /**
     * value: "Text"
     * @const
     */
    "Text": "Text",

    /**
     * value: "Text (long)"
     * @const
     */
    "Text (long)": "Text (long)",

    /**
     * value: "Integer"
     * @const
     */
    "Integer": "Integer",

    /**
     * value: "Decimal"
     * @const
     */
    "Decimal": "Decimal",

    /**
     * value: "Boolean (true/false)"
     * @const
     */
    "Boolean (true/false)": "Boolean (true/false)",

    /**
     * value: "Date"
     * @const
     */
    "Date": "Date",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "Selection"
     * @const
     */
    "Selection": "Selection",

    /**
     * value: "Multiple selection"
     * @const
     */
    "Multiple selection": "Multiple selection",

    /**
     * value: "Object"
     * @const
     */
    "Object": "Object",

    /**
     * value: "Multiple objects"
     * @const
     */
    "Multiple objects": "Multiple objects"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type1['ValueEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "longtext"
     * @const
     */
    "longtext": "longtext",

    /**
     * value: "integer"
     * @const
     */
    "integer": "integer",

    /**
     * value: "decimal"
     * @const
     */
    "decimal": "decimal",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "url"
     * @const
     */
    "url": "url",

    /**
     * value: "json"
     * @const
     */
    "json": "json",

    /**
     * value: "select"
     * @const
     */
    "select": "select",

    /**
     * value: "multiselect"
     * @const
     */
    "multiselect": "multiselect",

    /**
     * value: "object"
     * @const
     */
    "object": "object",

    /**
     * value: "multiobject"
     * @const
     */
    "multiobject": "multiobject"
};



export default Type1;

