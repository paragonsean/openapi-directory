/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type2 model module.
 * @module model/Type2
 * @version 3.4
 */
class Type2 {
    /**
     * Constructs a new <code>Type2</code>.
     * @alias module:model/Type2
     * @param label {module:model/Type2.LabelEnum} 
     * @param value {module:model/Type2.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type2.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type2} obj Optional instance to populate.
     * @return {module:model/Type2} The populated <code>Type2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type2();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type2.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type2.LabelEnum} label
 */
Type2.prototype['label'] = undefined;

/**
 * @member {module:model/Type2.ValueEnum} value
 */
Type2.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type2['LabelEnum'] = {

    /**
     * value: "8P8C"
     * @const
     */
    "8P8C": "8P8C",

    /**
     * value: "8P6C"
     * @const
     */
    "8P6C": "8P6C",

    /**
     * value: "8P4C"
     * @const
     */
    "8P4C": "8P4C",

    /**
     * value: "8P2C"
     * @const
     */
    "8P2C": "8P2C",

    /**
     * value: "6P6C"
     * @const
     */
    "6P6C": "6P6C",

    /**
     * value: "6P4C"
     * @const
     */
    "6P4C": "6P4C",

    /**
     * value: "6P2C"
     * @const
     */
    "6P2C": "6P2C",

    /**
     * value: "4P4C"
     * @const
     */
    "4P4C": "4P4C",

    /**
     * value: "4P2C"
     * @const
     */
    "4P2C": "4P2C",

    /**
     * value: "GG45"
     * @const
     */
    "GG45": "GG45",

    /**
     * value: "TERA 4P"
     * @const
     */
    "TERA 4P": "TERA 4P",

    /**
     * value: "TERA 2P"
     * @const
     */
    "TERA 2P": "TERA 2P",

    /**
     * value: "TERA 1P"
     * @const
     */
    "TERA 1P": "TERA 1P",

    /**
     * value: "110 Punch"
     * @const
     */
    "110 Punch": "110 Punch",

    /**
     * value: "BNC"
     * @const
     */
    "BNC": "BNC",

    /**
     * value: "F Connector"
     * @const
     */
    "F Connector": "F Connector",

    /**
     * value: "N Connector"
     * @const
     */
    "N Connector": "N Connector",

    /**
     * value: "MRJ21"
     * @const
     */
    "MRJ21": "MRJ21",

    /**
     * value: "FC"
     * @const
     */
    "FC": "FC",

    /**
     * value: "LC"
     * @const
     */
    "LC": "LC",

    /**
     * value: "LC/PC"
     * @const
     */
    "LC/PC": "LC/PC",

    /**
     * value: "LC/UPC"
     * @const
     */
    "LC/UPC": "LC/UPC",

    /**
     * value: "LC/APC"
     * @const
     */
    "LC/APC": "LC/APC",

    /**
     * value: "LSH"
     * @const
     */
    "LSH": "LSH",

    /**
     * value: "LSH/PC"
     * @const
     */
    "LSH/PC": "LSH/PC",

    /**
     * value: "LSH/UPC"
     * @const
     */
    "LSH/UPC": "LSH/UPC",

    /**
     * value: "LSH/APC"
     * @const
     */
    "LSH/APC": "LSH/APC",

    /**
     * value: "MPO"
     * @const
     */
    "MPO": "MPO",

    /**
     * value: "MTRJ"
     * @const
     */
    "MTRJ": "MTRJ",

    /**
     * value: "SC"
     * @const
     */
    "SC": "SC",

    /**
     * value: "SC/PC"
     * @const
     */
    "SC/PC": "SC/PC",

    /**
     * value: "SC/UPC"
     * @const
     */
    "SC/UPC": "SC/UPC",

    /**
     * value: "SC/APC"
     * @const
     */
    "SC/APC": "SC/APC",

    /**
     * value: "ST"
     * @const
     */
    "ST": "ST",

    /**
     * value: "CS"
     * @const
     */
    "CS": "CS",

    /**
     * value: "SN"
     * @const
     */
    "SN": "SN",

    /**
     * value: "SMA 905"
     * @const
     */
    "SMA 905": "SMA 905",

    /**
     * value: "SMA 906"
     * @const
     */
    "SMA 906": "SMA 906",

    /**
     * value: "URM-P2"
     * @const
     */
    "URM-P2": "URM-P2",

    /**
     * value: "URM-P4"
     * @const
     */
    "URM-P4": "URM-P4",

    /**
     * value: "URM-P8"
     * @const
     */
    "URM-P8": "URM-P8",

    /**
     * value: "Splice"
     * @const
     */
    "Splice": "Splice",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type2['ValueEnum'] = {

    /**
     * value: "8p8c"
     * @const
     */
    "8p8c": "8p8c",

    /**
     * value: "8p6c"
     * @const
     */
    "8p6c": "8p6c",

    /**
     * value: "8p4c"
     * @const
     */
    "8p4c": "8p4c",

    /**
     * value: "8p2c"
     * @const
     */
    "8p2c": "8p2c",

    /**
     * value: "6p6c"
     * @const
     */
    "6p6c": "6p6c",

    /**
     * value: "6p4c"
     * @const
     */
    "6p4c": "6p4c",

    /**
     * value: "6p2c"
     * @const
     */
    "6p2c": "6p2c",

    /**
     * value: "4p4c"
     * @const
     */
    "4p4c": "4p4c",

    /**
     * value: "4p2c"
     * @const
     */
    "4p2c": "4p2c",

    /**
     * value: "gg45"
     * @const
     */
    "gg45": "gg45",

    /**
     * value: "tera-4p"
     * @const
     */
    "tera-4p": "tera-4p",

    /**
     * value: "tera-2p"
     * @const
     */
    "tera-2p": "tera-2p",

    /**
     * value: "tera-1p"
     * @const
     */
    "tera-1p": "tera-1p",

    /**
     * value: "110-punch"
     * @const
     */
    "110-punch": "110-punch",

    /**
     * value: "bnc"
     * @const
     */
    "bnc": "bnc",

    /**
     * value: "f"
     * @const
     */
    "f": "f",

    /**
     * value: "n"
     * @const
     */
    "n": "n",

    /**
     * value: "mrj21"
     * @const
     */
    "mrj21": "mrj21",

    /**
     * value: "fc"
     * @const
     */
    "fc": "fc",

    /**
     * value: "lc"
     * @const
     */
    "lc": "lc",

    /**
     * value: "lc-pc"
     * @const
     */
    "lc-pc": "lc-pc",

    /**
     * value: "lc-upc"
     * @const
     */
    "lc-upc": "lc-upc",

    /**
     * value: "lc-apc"
     * @const
     */
    "lc-apc": "lc-apc",

    /**
     * value: "lsh"
     * @const
     */
    "lsh": "lsh",

    /**
     * value: "lsh-pc"
     * @const
     */
    "lsh-pc": "lsh-pc",

    /**
     * value: "lsh-upc"
     * @const
     */
    "lsh-upc": "lsh-upc",

    /**
     * value: "lsh-apc"
     * @const
     */
    "lsh-apc": "lsh-apc",

    /**
     * value: "mpo"
     * @const
     */
    "mpo": "mpo",

    /**
     * value: "mtrj"
     * @const
     */
    "mtrj": "mtrj",

    /**
     * value: "sc"
     * @const
     */
    "sc": "sc",

    /**
     * value: "sc-pc"
     * @const
     */
    "sc-pc": "sc-pc",

    /**
     * value: "sc-upc"
     * @const
     */
    "sc-upc": "sc-upc",

    /**
     * value: "sc-apc"
     * @const
     */
    "sc-apc": "sc-apc",

    /**
     * value: "st"
     * @const
     */
    "st": "st",

    /**
     * value: "cs"
     * @const
     */
    "cs": "cs",

    /**
     * value: "sn"
     * @const
     */
    "sn": "sn",

    /**
     * value: "sma-905"
     * @const
     */
    "sma-905": "sma-905",

    /**
     * value: "sma-906"
     * @const
     */
    "sma-906": "sma-906",

    /**
     * value: "urm-p2"
     * @const
     */
    "urm-p2": "urm-p2",

    /**
     * value: "urm-p4"
     * @const
     */
    "urm-p4": "urm-p4",

    /**
     * value: "urm-p8"
     * @const
     */
    "urm-p8": "urm-p8",

    /**
     * value: "splice"
     * @const
     */
    "splice": "splice",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Type2;

