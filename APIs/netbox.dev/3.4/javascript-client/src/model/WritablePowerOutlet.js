/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedCable from './NestedCable';
import NestedTag from './NestedTag';

/**
 * The WritablePowerOutlet model module.
 * @module model/WritablePowerOutlet
 * @version 3.4
 */
class WritablePowerOutlet {
    /**
     * Constructs a new <code>WritablePowerOutlet</code>.
     * @alias module:model/WritablePowerOutlet
     * @param device {Number} 
     * @param name {String} 
     */
    constructor(device, name) { 
        
        WritablePowerOutlet.initialize(this, device, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name) { 
        obj['device'] = device;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritablePowerOutlet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritablePowerOutlet} obj Optional instance to populate.
     * @return {module:model/WritablePowerOutlet} The populated <code>WritablePowerOutlet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritablePowerOutlet();

            if (data.hasOwnProperty('_occupied')) {
                obj['_occupied'] = ApiClient.convertToType(data['_occupied'], 'Boolean');
            }
            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('cable_end')) {
                obj['cable_end'] = ApiClient.convertToType(data['cable_end'], 'String');
            }
            if (data.hasOwnProperty('connected_endpoints')) {
                obj['connected_endpoints'] = ApiClient.convertToType(data['connected_endpoints'], ['String']);
            }
            if (data.hasOwnProperty('connected_endpoints_reachable')) {
                obj['connected_endpoints_reachable'] = ApiClient.convertToType(data['connected_endpoints_reachable'], 'Boolean');
            }
            if (data.hasOwnProperty('connected_endpoints_type')) {
                obj['connected_endpoints_type'] = ApiClient.convertToType(data['connected_endpoints_type'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('feed_leg')) {
                obj['feed_leg'] = ApiClient.convertToType(data['feed_leg'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('link_peers')) {
                obj['link_peers'] = ApiClient.convertToType(data['link_peers'], ['String']);
            }
            if (data.hasOwnProperty('link_peers_type')) {
                obj['link_peers_type'] = ApiClient.convertToType(data['link_peers_type'], 'String');
            }
            if (data.hasOwnProperty('mark_connected')) {
                obj['mark_connected'] = ApiClient.convertToType(data['mark_connected'], 'Boolean');
            }
            if (data.hasOwnProperty('module')) {
                obj['module'] = ApiClient.convertToType(data['module'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('power_port')) {
                obj['power_port'] = ApiClient.convertToType(data['power_port'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritablePowerOutlet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritablePowerOutlet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritablePowerOutlet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['cable_end'] && !(typeof data['cable_end'] === 'string' || data['cable_end'] instanceof String)) {
            throw new Error("Expected the field `cable_end` to be a primitive type in the JSON string but got " + data['cable_end']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected_endpoints'])) {
            throw new Error("Expected the field `connected_endpoints` to be an array in the JSON data but got " + data['connected_endpoints']);
        }
        // ensure the json data is a string
        if (data['connected_endpoints_type'] && !(typeof data['connected_endpoints_type'] === 'string' || data['connected_endpoints_type'] instanceof String)) {
            throw new Error("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got " + data['connected_endpoints_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['feed_leg'] && !(typeof data['feed_leg'] === 'string' || data['feed_leg'] instanceof String)) {
            throw new Error("Expected the field `feed_leg` to be a primitive type in the JSON string but got " + data['feed_leg']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['link_peers'])) {
            throw new Error("Expected the field `link_peers` to be an array in the JSON data but got " + data['link_peers']);
        }
        // ensure the json data is a string
        if (data['link_peers_type'] && !(typeof data['link_peers_type'] === 'string' || data['link_peers_type'] instanceof String)) {
            throw new Error("Expected the field `link_peers_type` to be a primitive type in the JSON string but got " + data['link_peers_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WritablePowerOutlet.RequiredProperties = ["device", "name"];

/**
 * @member {Boolean} _occupied
 */
WritablePowerOutlet.prototype['_occupied'] = undefined;

/**
 * @member {module:model/NestedCable} cable
 */
WritablePowerOutlet.prototype['cable'] = undefined;

/**
 * @member {String} cable_end
 */
WritablePowerOutlet.prototype['cable_end'] = undefined;

/**
 *  Return the appropriate serializer for the type of connected object. 
 * @member {Array.<String>} connected_endpoints
 */
WritablePowerOutlet.prototype['connected_endpoints'] = undefined;

/**
 * @member {Boolean} connected_endpoints_reachable
 */
WritablePowerOutlet.prototype['connected_endpoints_reachable'] = undefined;

/**
 * @member {String} connected_endpoints_type
 */
WritablePowerOutlet.prototype['connected_endpoints_type'] = undefined;

/**
 * @member {Date} created
 */
WritablePowerOutlet.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritablePowerOutlet.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritablePowerOutlet.prototype['description'] = undefined;

/**
 * @member {Number} device
 */
WritablePowerOutlet.prototype['device'] = undefined;

/**
 * @member {String} display
 */
WritablePowerOutlet.prototype['display'] = undefined;

/**
 * Phase (for three-phase feeds)
 * @member {module:model/WritablePowerOutlet.FeedLegEnum} feed_leg
 */
WritablePowerOutlet.prototype['feed_leg'] = undefined;

/**
 * @member {Number} id
 */
WritablePowerOutlet.prototype['id'] = undefined;

/**
 * Physical label
 * @member {String} label
 */
WritablePowerOutlet.prototype['label'] = undefined;

/**
 * @member {Date} last_updated
 */
WritablePowerOutlet.prototype['last_updated'] = undefined;

/**
 *  Return the appropriate serializer for the link termination model. 
 * @member {Array.<String>} link_peers
 */
WritablePowerOutlet.prototype['link_peers'] = undefined;

/**
 * @member {String} link_peers_type
 */
WritablePowerOutlet.prototype['link_peers_type'] = undefined;

/**
 * Treat as if a cable is connected
 * @member {Boolean} mark_connected
 */
WritablePowerOutlet.prototype['mark_connected'] = undefined;

/**
 * @member {Number} module
 */
WritablePowerOutlet.prototype['module'] = undefined;

/**
 * @member {String} name
 */
WritablePowerOutlet.prototype['name'] = undefined;

/**
 * @member {Number} power_port
 */
WritablePowerOutlet.prototype['power_port'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
WritablePowerOutlet.prototype['tags'] = undefined;

/**
 * Physical port type
 * @member {module:model/WritablePowerOutlet.TypeEnum} type
 */
WritablePowerOutlet.prototype['type'] = undefined;

/**
 * @member {String} url
 */
WritablePowerOutlet.prototype['url'] = undefined;





/**
 * Allowed values for the <code>feed_leg</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerOutlet['FeedLegEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B",

    /**
     * value: "C"
     * @const
     */
    "C": "C"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerOutlet['TypeEnum'] = {

    /**
     * value: "iec-60320-c5"
     * @const
     */
    "iec-60320-c5": "iec-60320-c5",

    /**
     * value: "iec-60320-c7"
     * @const
     */
    "iec-60320-c7": "iec-60320-c7",

    /**
     * value: "iec-60320-c13"
     * @const
     */
    "iec-60320-c13": "iec-60320-c13",

    /**
     * value: "iec-60320-c15"
     * @const
     */
    "iec-60320-c15": "iec-60320-c15",

    /**
     * value: "iec-60320-c19"
     * @const
     */
    "iec-60320-c19": "iec-60320-c19",

    /**
     * value: "iec-60320-c21"
     * @const
     */
    "iec-60320-c21": "iec-60320-c21",

    /**
     * value: "iec-60309-p-n-e-4h"
     * @const
     */
    "iec-60309-p-n-e-4h": "iec-60309-p-n-e-4h",

    /**
     * value: "iec-60309-p-n-e-6h"
     * @const
     */
    "iec-60309-p-n-e-6h": "iec-60309-p-n-e-6h",

    /**
     * value: "iec-60309-p-n-e-9h"
     * @const
     */
    "iec-60309-p-n-e-9h": "iec-60309-p-n-e-9h",

    /**
     * value: "iec-60309-2p-e-4h"
     * @const
     */
    "iec-60309-2p-e-4h": "iec-60309-2p-e-4h",

    /**
     * value: "iec-60309-2p-e-6h"
     * @const
     */
    "iec-60309-2p-e-6h": "iec-60309-2p-e-6h",

    /**
     * value: "iec-60309-2p-e-9h"
     * @const
     */
    "iec-60309-2p-e-9h": "iec-60309-2p-e-9h",

    /**
     * value: "iec-60309-3p-e-4h"
     * @const
     */
    "iec-60309-3p-e-4h": "iec-60309-3p-e-4h",

    /**
     * value: "iec-60309-3p-e-6h"
     * @const
     */
    "iec-60309-3p-e-6h": "iec-60309-3p-e-6h",

    /**
     * value: "iec-60309-3p-e-9h"
     * @const
     */
    "iec-60309-3p-e-9h": "iec-60309-3p-e-9h",

    /**
     * value: "iec-60309-3p-n-e-4h"
     * @const
     */
    "iec-60309-3p-n-e-4h": "iec-60309-3p-n-e-4h",

    /**
     * value: "iec-60309-3p-n-e-6h"
     * @const
     */
    "iec-60309-3p-n-e-6h": "iec-60309-3p-n-e-6h",

    /**
     * value: "iec-60309-3p-n-e-9h"
     * @const
     */
    "iec-60309-3p-n-e-9h": "iec-60309-3p-n-e-9h",

    /**
     * value: "nema-1-15r"
     * @const
     */
    "nema-1-15r": "nema-1-15r",

    /**
     * value: "nema-5-15r"
     * @const
     */
    "nema-5-15r": "nema-5-15r",

    /**
     * value: "nema-5-20r"
     * @const
     */
    "nema-5-20r": "nema-5-20r",

    /**
     * value: "nema-5-30r"
     * @const
     */
    "nema-5-30r": "nema-5-30r",

    /**
     * value: "nema-5-50r"
     * @const
     */
    "nema-5-50r": "nema-5-50r",

    /**
     * value: "nema-6-15r"
     * @const
     */
    "nema-6-15r": "nema-6-15r",

    /**
     * value: "nema-6-20r"
     * @const
     */
    "nema-6-20r": "nema-6-20r",

    /**
     * value: "nema-6-30r"
     * @const
     */
    "nema-6-30r": "nema-6-30r",

    /**
     * value: "nema-6-50r"
     * @const
     */
    "nema-6-50r": "nema-6-50r",

    /**
     * value: "nema-10-30r"
     * @const
     */
    "nema-10-30r": "nema-10-30r",

    /**
     * value: "nema-10-50r"
     * @const
     */
    "nema-10-50r": "nema-10-50r",

    /**
     * value: "nema-14-20r"
     * @const
     */
    "nema-14-20r": "nema-14-20r",

    /**
     * value: "nema-14-30r"
     * @const
     */
    "nema-14-30r": "nema-14-30r",

    /**
     * value: "nema-14-50r"
     * @const
     */
    "nema-14-50r": "nema-14-50r",

    /**
     * value: "nema-14-60r"
     * @const
     */
    "nema-14-60r": "nema-14-60r",

    /**
     * value: "nema-15-15r"
     * @const
     */
    "nema-15-15r": "nema-15-15r",

    /**
     * value: "nema-15-20r"
     * @const
     */
    "nema-15-20r": "nema-15-20r",

    /**
     * value: "nema-15-30r"
     * @const
     */
    "nema-15-30r": "nema-15-30r",

    /**
     * value: "nema-15-50r"
     * @const
     */
    "nema-15-50r": "nema-15-50r",

    /**
     * value: "nema-15-60r"
     * @const
     */
    "nema-15-60r": "nema-15-60r",

    /**
     * value: "nema-l1-15r"
     * @const
     */
    "nema-l1-15r": "nema-l1-15r",

    /**
     * value: "nema-l5-15r"
     * @const
     */
    "nema-l5-15r": "nema-l5-15r",

    /**
     * value: "nema-l5-20r"
     * @const
     */
    "nema-l5-20r": "nema-l5-20r",

    /**
     * value: "nema-l5-30r"
     * @const
     */
    "nema-l5-30r": "nema-l5-30r",

    /**
     * value: "nema-l5-50r"
     * @const
     */
    "nema-l5-50r": "nema-l5-50r",

    /**
     * value: "nema-l6-15r"
     * @const
     */
    "nema-l6-15r": "nema-l6-15r",

    /**
     * value: "nema-l6-20r"
     * @const
     */
    "nema-l6-20r": "nema-l6-20r",

    /**
     * value: "nema-l6-30r"
     * @const
     */
    "nema-l6-30r": "nema-l6-30r",

    /**
     * value: "nema-l6-50r"
     * @const
     */
    "nema-l6-50r": "nema-l6-50r",

    /**
     * value: "nema-l10-30r"
     * @const
     */
    "nema-l10-30r": "nema-l10-30r",

    /**
     * value: "nema-l14-20r"
     * @const
     */
    "nema-l14-20r": "nema-l14-20r",

    /**
     * value: "nema-l14-30r"
     * @const
     */
    "nema-l14-30r": "nema-l14-30r",

    /**
     * value: "nema-l14-50r"
     * @const
     */
    "nema-l14-50r": "nema-l14-50r",

    /**
     * value: "nema-l14-60r"
     * @const
     */
    "nema-l14-60r": "nema-l14-60r",

    /**
     * value: "nema-l15-20r"
     * @const
     */
    "nema-l15-20r": "nema-l15-20r",

    /**
     * value: "nema-l15-30r"
     * @const
     */
    "nema-l15-30r": "nema-l15-30r",

    /**
     * value: "nema-l15-50r"
     * @const
     */
    "nema-l15-50r": "nema-l15-50r",

    /**
     * value: "nema-l15-60r"
     * @const
     */
    "nema-l15-60r": "nema-l15-60r",

    /**
     * value: "nema-l21-20r"
     * @const
     */
    "nema-l21-20r": "nema-l21-20r",

    /**
     * value: "nema-l21-30r"
     * @const
     */
    "nema-l21-30r": "nema-l21-30r",

    /**
     * value: "nema-l22-30r"
     * @const
     */
    "nema-l22-30r": "nema-l22-30r",

    /**
     * value: "CS6360C"
     * @const
     */
    "CS6360C": "CS6360C",

    /**
     * value: "CS6364C"
     * @const
     */
    "CS6364C": "CS6364C",

    /**
     * value: "CS8164C"
     * @const
     */
    "CS8164C": "CS8164C",

    /**
     * value: "CS8264C"
     * @const
     */
    "CS8264C": "CS8264C",

    /**
     * value: "CS8364C"
     * @const
     */
    "CS8364C": "CS8364C",

    /**
     * value: "CS8464C"
     * @const
     */
    "CS8464C": "CS8464C",

    /**
     * value: "ita-e"
     * @const
     */
    "ita-e": "ita-e",

    /**
     * value: "ita-f"
     * @const
     */
    "ita-f": "ita-f",

    /**
     * value: "ita-g"
     * @const
     */
    "ita-g": "ita-g",

    /**
     * value: "ita-h"
     * @const
     */
    "ita-h": "ita-h",

    /**
     * value: "ita-i"
     * @const
     */
    "ita-i": "ita-i",

    /**
     * value: "ita-j"
     * @const
     */
    "ita-j": "ita-j",

    /**
     * value: "ita-k"
     * @const
     */
    "ita-k": "ita-k",

    /**
     * value: "ita-l"
     * @const
     */
    "ita-l": "ita-l",

    /**
     * value: "ita-m"
     * @const
     */
    "ita-m": "ita-m",

    /**
     * value: "ita-n"
     * @const
     */
    "ita-n": "ita-n",

    /**
     * value: "ita-o"
     * @const
     */
    "ita-o": "ita-o",

    /**
     * value: "ita-multistandard"
     * @const
     */
    "ita-multistandard": "ita-multistandard",

    /**
     * value: "usb-a"
     * @const
     */
    "usb-a": "usb-a",

    /**
     * value: "usb-micro-b"
     * @const
     */
    "usb-micro-b": "usb-micro-b",

    /**
     * value: "usb-c"
     * @const
     */
    "usb-c": "usb-c",

    /**
     * value: "dc-terminal"
     * @const
     */
    "dc-terminal": "dc-terminal",

    /**
     * value: "hdot-cx"
     * @const
     */
    "hdot-cx": "hdot-cx",

    /**
     * value: "saf-d-grid"
     * @const
     */
    "saf-d-grid": "saf-d-grid",

    /**
     * value: "neutrik-powercon-20a"
     * @const
     */
    "neutrik-powercon-20a": "neutrik-powercon-20a",

    /**
     * value: "neutrik-powercon-32a"
     * @const
     */
    "neutrik-powercon-32a": "neutrik-powercon-32a",

    /**
     * value: "neutrik-powercon-true1"
     * @const
     */
    "neutrik-powercon-true1": "neutrik-powercon-true1",

    /**
     * value: "neutrik-powercon-true1-top"
     * @const
     */
    "neutrik-powercon-true1-top": "neutrik-powercon-true1-top",

    /**
     * value: "ubiquiti-smartpower"
     * @const
     */
    "ubiquiti-smartpower": "ubiquiti-smartpower",

    /**
     * value: "hardwired"
     * @const
     */
    "hardwired": "hardwired",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default WritablePowerOutlet;

