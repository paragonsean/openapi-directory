/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Webhook model module.
 * @module model/Webhook
 * @version 3.4
 */
class Webhook {
    /**
     * Constructs a new <code>Webhook</code>.
     * @alias module:model/Webhook
     * @param contentTypes {Array.<String>} 
     * @param name {String} 
     * @param payloadUrl {String} This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.
     */
    constructor(contentTypes, name, payloadUrl) { 
        
        Webhook.initialize(this, contentTypes, name, payloadUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentTypes, name, payloadUrl) { 
        obj['content_types'] = contentTypes;
        obj['name'] = name;
        obj['payload_url'] = payloadUrl;
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webhook} obj Optional instance to populate.
     * @return {module:model/Webhook} The populated <code>Webhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webhook();

            if (data.hasOwnProperty('additional_headers')) {
                obj['additional_headers'] = ApiClient.convertToType(data['additional_headers'], 'String');
            }
            if (data.hasOwnProperty('body_template')) {
                obj['body_template'] = ApiClient.convertToType(data['body_template'], 'String');
            }
            if (data.hasOwnProperty('ca_file_path')) {
                obj['ca_file_path'] = ApiClient.convertToType(data['ca_file_path'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], Object);
            }
            if (data.hasOwnProperty('content_types')) {
                obj['content_types'] = ApiClient.convertToType(data['content_types'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('http_content_type')) {
                obj['http_content_type'] = ApiClient.convertToType(data['http_content_type'], 'String');
            }
            if (data.hasOwnProperty('http_method')) {
                obj['http_method'] = ApiClient.convertToType(data['http_method'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('payload_url')) {
                obj['payload_url'] = ApiClient.convertToType(data['payload_url'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('ssl_verification')) {
                obj['ssl_verification'] = ApiClient.convertToType(data['ssl_verification'], 'Boolean');
            }
            if (data.hasOwnProperty('type_create')) {
                obj['type_create'] = ApiClient.convertToType(data['type_create'], 'Boolean');
            }
            if (data.hasOwnProperty('type_delete')) {
                obj['type_delete'] = ApiClient.convertToType(data['type_delete'], 'Boolean');
            }
            if (data.hasOwnProperty('type_update')) {
                obj['type_update'] = ApiClient.convertToType(data['type_update'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Webhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['additional_headers'] && !(typeof data['additional_headers'] === 'string' || data['additional_headers'] instanceof String)) {
            throw new Error("Expected the field `additional_headers` to be a primitive type in the JSON string but got " + data['additional_headers']);
        }
        // ensure the json data is a string
        if (data['body_template'] && !(typeof data['body_template'] === 'string' || data['body_template'] instanceof String)) {
            throw new Error("Expected the field `body_template` to be a primitive type in the JSON string but got " + data['body_template']);
        }
        // ensure the json data is a string
        if (data['ca_file_path'] && !(typeof data['ca_file_path'] === 'string' || data['ca_file_path'] instanceof String)) {
            throw new Error("Expected the field `ca_file_path` to be a primitive type in the JSON string but got " + data['ca_file_path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_types'])) {
            throw new Error("Expected the field `content_types` to be an array in the JSON data but got " + data['content_types']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['http_content_type'] && !(typeof data['http_content_type'] === 'string' || data['http_content_type'] instanceof String)) {
            throw new Error("Expected the field `http_content_type` to be a primitive type in the JSON string but got " + data['http_content_type']);
        }
        // ensure the json data is a string
        if (data['http_method'] && !(typeof data['http_method'] === 'string' || data['http_method'] instanceof String)) {
            throw new Error("Expected the field `http_method` to be a primitive type in the JSON string but got " + data['http_method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['payload_url'] && !(typeof data['payload_url'] === 'string' || data['payload_url'] instanceof String)) {
            throw new Error("Expected the field `payload_url` to be a primitive type in the JSON string but got " + data['payload_url']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Webhook.RequiredProperties = ["content_types", "name", "payload_url"];

/**
 * User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).
 * @member {String} additional_headers
 */
Webhook.prototype['additional_headers'] = undefined;

/**
 * Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.
 * @member {String} body_template
 */
Webhook.prototype['body_template'] = undefined;

/**
 * The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.
 * @member {String} ca_file_path
 */
Webhook.prototype['ca_file_path'] = undefined;

/**
 * A set of conditions which determine whether the webhook will be generated.
 * @member {Object} conditions
 */
Webhook.prototype['conditions'] = undefined;

/**
 * @member {Array.<String>} content_types
 */
Webhook.prototype['content_types'] = undefined;

/**
 * @member {Date} created
 */
Webhook.prototype['created'] = undefined;

/**
 * @member {String} display
 */
Webhook.prototype['display'] = undefined;

/**
 * @member {Boolean} enabled
 */
Webhook.prototype['enabled'] = undefined;

/**
 * The complete list of official content types is available <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">here</a>.
 * @member {String} http_content_type
 */
Webhook.prototype['http_content_type'] = undefined;

/**
 * @member {module:model/Webhook.HttpMethodEnum} http_method
 */
Webhook.prototype['http_method'] = undefined;

/**
 * @member {Number} id
 */
Webhook.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
Webhook.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
Webhook.prototype['name'] = undefined;

/**
 * This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.
 * @member {String} payload_url
 */
Webhook.prototype['payload_url'] = undefined;

/**
 * When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.
 * @member {String} secret
 */
Webhook.prototype['secret'] = undefined;

/**
 * Enable SSL certificate verification. Disable with caution!
 * @member {Boolean} ssl_verification
 */
Webhook.prototype['ssl_verification'] = undefined;

/**
 * Call this webhook when a matching object is created.
 * @member {Boolean} type_create
 */
Webhook.prototype['type_create'] = undefined;

/**
 * Call this webhook when a matching object is deleted.
 * @member {Boolean} type_delete
 */
Webhook.prototype['type_delete'] = undefined;

/**
 * Call this webhook when a matching object is updated.
 * @member {Boolean} type_update
 */
Webhook.prototype['type_update'] = undefined;

/**
 * @member {String} url
 */
Webhook.prototype['url'] = undefined;





/**
 * Allowed values for the <code>http_method</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['HttpMethodEnum'] = {

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE"
};



export default Webhook;

