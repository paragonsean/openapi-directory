/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthCipher from './AuthCipher';
import AuthType from './AuthType';
import NestedTag from './NestedTag';
import NestedTenant from './NestedTenant';
import NestedVLAN from './NestedVLAN';
import NestedWirelessLANGroup from './NestedWirelessLANGroup';
import Status12 from './Status12';

/**
 * The WirelessLAN model module.
 * @module model/WirelessLAN
 * @version 3.4
 */
class WirelessLAN {
    /**
     * Constructs a new <code>WirelessLAN</code>.
     * @alias module:model/WirelessLAN
     * @param ssid {String} 
     */
    constructor(ssid) { 
        
        WirelessLAN.initialize(this, ssid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ssid) { 
        obj['ssid'] = ssid;
    }

    /**
     * Constructs a <code>WirelessLAN</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WirelessLAN} obj Optional instance to populate.
     * @return {module:model/WirelessLAN} The populated <code>WirelessLAN</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WirelessLAN();

            if (data.hasOwnProperty('auth_cipher')) {
                obj['auth_cipher'] = AuthCipher.constructFromObject(data['auth_cipher']);
            }
            if (data.hasOwnProperty('auth_psk')) {
                obj['auth_psk'] = ApiClient.convertToType(data['auth_psk'], 'String');
            }
            if (data.hasOwnProperty('auth_type')) {
                obj['auth_type'] = AuthType.constructFromObject(data['auth_type']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = NestedWirelessLANGroup.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('ssid')) {
                obj['ssid'] = ApiClient.convertToType(data['ssid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status12.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = NestedTenant.constructFromObject(data['tenant']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = NestedVLAN.constructFromObject(data['vlan']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WirelessLAN</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WirelessLAN</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WirelessLAN.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `auth_cipher`
        if (data['auth_cipher']) { // data not null
          AuthCipher.validateJSON(data['auth_cipher']);
        }
        // ensure the json data is a string
        if (data['auth_psk'] && !(typeof data['auth_psk'] === 'string' || data['auth_psk'] instanceof String)) {
            throw new Error("Expected the field `auth_psk` to be a primitive type in the JSON string but got " + data['auth_psk']);
        }
        // validate the optional field `auth_type`
        if (data['auth_type']) { // data not null
          AuthType.validateJSON(data['auth_type']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          NestedWirelessLANGroup.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['ssid'] && !(typeof data['ssid'] === 'string' || data['ssid'] instanceof String)) {
            throw new Error("Expected the field `ssid` to be a primitive type in the JSON string but got " + data['ssid']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status12.validateJSON(data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `tenant`
        if (data['tenant']) { // data not null
          NestedTenant.validateJSON(data['tenant']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `vlan`
        if (data['vlan']) { // data not null
          NestedVLAN.validateJSON(data['vlan']);
        }

        return true;
    }


}

WirelessLAN.RequiredProperties = ["ssid"];

/**
 * @member {module:model/AuthCipher} auth_cipher
 */
WirelessLAN.prototype['auth_cipher'] = undefined;

/**
 * @member {String} auth_psk
 */
WirelessLAN.prototype['auth_psk'] = undefined;

/**
 * @member {module:model/AuthType} auth_type
 */
WirelessLAN.prototype['auth_type'] = undefined;

/**
 * @member {String} comments
 */
WirelessLAN.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WirelessLAN.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WirelessLAN.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WirelessLAN.prototype['description'] = undefined;

/**
 * @member {String} display
 */
WirelessLAN.prototype['display'] = undefined;

/**
 * @member {module:model/NestedWirelessLANGroup} group
 */
WirelessLAN.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
WirelessLAN.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
WirelessLAN.prototype['last_updated'] = undefined;

/**
 * @member {String} ssid
 */
WirelessLAN.prototype['ssid'] = undefined;

/**
 * @member {module:model/Status12} status
 */
WirelessLAN.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
WirelessLAN.prototype['tags'] = undefined;

/**
 * @member {module:model/NestedTenant} tenant
 */
WirelessLAN.prototype['tenant'] = undefined;

/**
 * @member {String} url
 */
WirelessLAN.prototype['url'] = undefined;

/**
 * @member {module:model/NestedVLAN} vlan
 */
WirelessLAN.prototype['vlan'] = undefined;






export default WirelessLAN;

