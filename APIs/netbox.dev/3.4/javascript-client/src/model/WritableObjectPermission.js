/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableObjectPermission model module.
 * @module model/WritableObjectPermission
 * @version 3.4
 */
class WritableObjectPermission {
    /**
     * Constructs a new <code>WritableObjectPermission</code>.
     * @alias module:model/WritableObjectPermission
     * @param actions {Array.<String>} The list of actions granted by this permission
     * @param name {String} 
     * @param objectTypes {Array.<String>} 
     */
    constructor(actions, name, objectTypes) { 
        
        WritableObjectPermission.initialize(this, actions, name, objectTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actions, name, objectTypes) { 
        obj['actions'] = actions;
        obj['name'] = name;
        obj['object_types'] = objectTypes;
    }

    /**
     * Constructs a <code>WritableObjectPermission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableObjectPermission} obj Optional instance to populate.
     * @return {module:model/WritableObjectPermission} The populated <code>WritableObjectPermission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableObjectPermission();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['Number']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object_types')) {
                obj['object_types'] = ApiClient.convertToType(data['object_types'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableObjectPermission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableObjectPermission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableObjectPermission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['object_types'])) {
            throw new Error("Expected the field `object_types` to be an array in the JSON data but got " + data['object_types']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['users'])) {
            throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
        }

        return true;
    }


}

WritableObjectPermission.RequiredProperties = ["actions", "name", "object_types"];

/**
 * The list of actions granted by this permission
 * @member {Array.<String>} actions
 */
WritableObjectPermission.prototype['actions'] = undefined;

/**
 * Queryset filter matching the applicable objects of the selected type(s)
 * @member {Object} constraints
 */
WritableObjectPermission.prototype['constraints'] = undefined;

/**
 * @member {String} description
 */
WritableObjectPermission.prototype['description'] = undefined;

/**
 * @member {String} display
 */
WritableObjectPermission.prototype['display'] = undefined;

/**
 * @member {Boolean} enabled
 */
WritableObjectPermission.prototype['enabled'] = undefined;

/**
 * @member {Array.<Number>} groups
 */
WritableObjectPermission.prototype['groups'] = undefined;

/**
 * @member {Number} id
 */
WritableObjectPermission.prototype['id'] = undefined;

/**
 * @member {String} name
 */
WritableObjectPermission.prototype['name'] = undefined;

/**
 * @member {Array.<String>} object_types
 */
WritableObjectPermission.prototype['object_types'] = undefined;

/**
 * @member {String} url
 */
WritableObjectPermission.prototype['url'] = undefined;

/**
 * @member {Array.<Number>} users
 */
WritableObjectPermission.prototype['users'] = undefined;






export default WritableObjectPermission;

