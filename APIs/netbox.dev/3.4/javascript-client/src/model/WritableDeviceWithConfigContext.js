/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedDevice from './NestedDevice';
import NestedTag from './NestedTag';

/**
 * The WritableDeviceWithConfigContext model module.
 * @module model/WritableDeviceWithConfigContext
 * @version 3.4
 */
class WritableDeviceWithConfigContext {
    /**
     * Constructs a new <code>WritableDeviceWithConfigContext</code>.
     * @alias module:model/WritableDeviceWithConfigContext
     * @param deviceRole {Number} 
     * @param deviceType {Number} 
     * @param site {Number} 
     */
    constructor(deviceRole, deviceType, site) { 
        
        WritableDeviceWithConfigContext.initialize(this, deviceRole, deviceType, site);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceRole, deviceType, site) { 
        obj['device_role'] = deviceRole;
        obj['device_type'] = deviceType;
        obj['site'] = site;
    }

    /**
     * Constructs a <code>WritableDeviceWithConfigContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableDeviceWithConfigContext} obj Optional instance to populate.
     * @return {module:model/WritableDeviceWithConfigContext} The populated <code>WritableDeviceWithConfigContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableDeviceWithConfigContext();

            if (data.hasOwnProperty('airflow')) {
                obj['airflow'] = ApiClient.convertToType(data['airflow'], 'String');
            }
            if (data.hasOwnProperty('asset_tag')) {
                obj['asset_tag'] = ApiClient.convertToType(data['asset_tag'], 'String');
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = ApiClient.convertToType(data['cluster'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('config_context')) {
                obj['config_context'] = ApiClient.convertToType(data['config_context'], Object);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_role')) {
                obj['device_role'] = ApiClient.convertToType(data['device_role'], 'Number');
            }
            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('face')) {
                obj['face'] = ApiClient.convertToType(data['face'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('local_context_data')) {
                obj['local_context_data'] = ApiClient.convertToType(data['local_context_data'], Object);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent_device')) {
                obj['parent_device'] = NestedDevice.constructFromObject(data['parent_device']);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('primary_ip')) {
                obj['primary_ip'] = ApiClient.convertToType(data['primary_ip'], 'String');
            }
            if (data.hasOwnProperty('primary_ip4')) {
                obj['primary_ip4'] = ApiClient.convertToType(data['primary_ip4'], 'Number');
            }
            if (data.hasOwnProperty('primary_ip6')) {
                obj['primary_ip6'] = ApiClient.convertToType(data['primary_ip6'], 'Number');
            }
            if (data.hasOwnProperty('rack')) {
                obj['rack'] = ApiClient.convertToType(data['rack'], 'Number');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vc_position')) {
                obj['vc_position'] = ApiClient.convertToType(data['vc_position'], 'Number');
            }
            if (data.hasOwnProperty('vc_priority')) {
                obj['vc_priority'] = ApiClient.convertToType(data['vc_priority'], 'Number');
            }
            if (data.hasOwnProperty('virtual_chassis')) {
                obj['virtual_chassis'] = ApiClient.convertToType(data['virtual_chassis'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableDeviceWithConfigContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableDeviceWithConfigContext</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableDeviceWithConfigContext.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['airflow'] && !(typeof data['airflow'] === 'string' || data['airflow'] instanceof String)) {
            throw new Error("Expected the field `airflow` to be a primitive type in the JSON string but got " + data['airflow']);
        }
        // ensure the json data is a string
        if (data['asset_tag'] && !(typeof data['asset_tag'] === 'string' || data['asset_tag'] instanceof String)) {
            throw new Error("Expected the field `asset_tag` to be a primitive type in the JSON string but got " + data['asset_tag']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['face'] && !(typeof data['face'] === 'string' || data['face'] instanceof String)) {
            throw new Error("Expected the field `face` to be a primitive type in the JSON string but got " + data['face']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parent_device`
        if (data['parent_device']) { // data not null
          NestedDevice.validateJSON(data['parent_device']);
        }
        // ensure the json data is a string
        if (data['primary_ip'] && !(typeof data['primary_ip'] === 'string' || data['primary_ip'] instanceof String)) {
            throw new Error("Expected the field `primary_ip` to be a primitive type in the JSON string but got " + data['primary_ip']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WritableDeviceWithConfigContext.RequiredProperties = ["device_role", "device_type", "site"];

/**
 * @member {module:model/WritableDeviceWithConfigContext.AirflowEnum} airflow
 */
WritableDeviceWithConfigContext.prototype['airflow'] = undefined;

/**
 * A unique tag used to identify this device
 * @member {String} asset_tag
 */
WritableDeviceWithConfigContext.prototype['asset_tag'] = undefined;

/**
 * @member {Number} cluster
 */
WritableDeviceWithConfigContext.prototype['cluster'] = undefined;

/**
 * @member {String} comments
 */
WritableDeviceWithConfigContext.prototype['comments'] = undefined;

/**
 * @member {Object} config_context
 */
WritableDeviceWithConfigContext.prototype['config_context'] = undefined;

/**
 * @member {Date} created
 */
WritableDeviceWithConfigContext.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableDeviceWithConfigContext.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritableDeviceWithConfigContext.prototype['description'] = undefined;

/**
 * @member {Number} device_role
 */
WritableDeviceWithConfigContext.prototype['device_role'] = undefined;

/**
 * @member {Number} device_type
 */
WritableDeviceWithConfigContext.prototype['device_type'] = undefined;

/**
 * @member {String} display
 */
WritableDeviceWithConfigContext.prototype['display'] = undefined;

/**
 * @member {module:model/WritableDeviceWithConfigContext.FaceEnum} face
 */
WritableDeviceWithConfigContext.prototype['face'] = undefined;

/**
 * @member {Number} id
 */
WritableDeviceWithConfigContext.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableDeviceWithConfigContext.prototype['last_updated'] = undefined;

/**
 * @member {Object} local_context_data
 */
WritableDeviceWithConfigContext.prototype['local_context_data'] = undefined;

/**
 * @member {Number} location
 */
WritableDeviceWithConfigContext.prototype['location'] = undefined;

/**
 * @member {String} name
 */
WritableDeviceWithConfigContext.prototype['name'] = undefined;

/**
 * @member {module:model/NestedDevice} parent_device
 */
WritableDeviceWithConfigContext.prototype['parent_device'] = undefined;

/**
 * @member {Number} platform
 */
WritableDeviceWithConfigContext.prototype['platform'] = undefined;

/**
 * @member {Number} position
 */
WritableDeviceWithConfigContext.prototype['position'] = undefined;

/**
 * @member {String} primary_ip
 */
WritableDeviceWithConfigContext.prototype['primary_ip'] = undefined;

/**
 * @member {Number} primary_ip4
 */
WritableDeviceWithConfigContext.prototype['primary_ip4'] = undefined;

/**
 * @member {Number} primary_ip6
 */
WritableDeviceWithConfigContext.prototype['primary_ip6'] = undefined;

/**
 * @member {Number} rack
 */
WritableDeviceWithConfigContext.prototype['rack'] = undefined;

/**
 * @member {String} serial
 */
WritableDeviceWithConfigContext.prototype['serial'] = undefined;

/**
 * @member {Number} site
 */
WritableDeviceWithConfigContext.prototype['site'] = undefined;

/**
 * @member {module:model/WritableDeviceWithConfigContext.StatusEnum} status
 */
WritableDeviceWithConfigContext.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
WritableDeviceWithConfigContext.prototype['tags'] = undefined;

/**
 * @member {Number} tenant
 */
WritableDeviceWithConfigContext.prototype['tenant'] = undefined;

/**
 * @member {String} url
 */
WritableDeviceWithConfigContext.prototype['url'] = undefined;

/**
 * @member {Number} vc_position
 */
WritableDeviceWithConfigContext.prototype['vc_position'] = undefined;

/**
 * @member {Number} vc_priority
 */
WritableDeviceWithConfigContext.prototype['vc_priority'] = undefined;

/**
 * @member {Number} virtual_chassis
 */
WritableDeviceWithConfigContext.prototype['virtual_chassis'] = undefined;





/**
 * Allowed values for the <code>airflow</code> property.
 * @enum {String}
 * @readonly
 */
WritableDeviceWithConfigContext['AirflowEnum'] = {

    /**
     * value: "front-to-rear"
     * @const
     */
    "front-to-rear": "front-to-rear",

    /**
     * value: "rear-to-front"
     * @const
     */
    "rear-to-front": "rear-to-front",

    /**
     * value: "left-to-right"
     * @const
     */
    "left-to-right": "left-to-right",

    /**
     * value: "right-to-left"
     * @const
     */
    "right-to-left": "right-to-left",

    /**
     * value: "side-to-rear"
     * @const
     */
    "side-to-rear": "side-to-rear",

    /**
     * value: "passive"
     * @const
     */
    "passive": "passive",

    /**
     * value: "mixed"
     * @const
     */
    "mixed": "mixed"
};


/**
 * Allowed values for the <code>face</code> property.
 * @enum {String}
 * @readonly
 */
WritableDeviceWithConfigContext['FaceEnum'] = {

    /**
     * value: "front"
     * @const
     */
    "front": "front",

    /**
     * value: "rear"
     * @const
     */
    "rear": "rear"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WritableDeviceWithConfigContext['StatusEnum'] = {

    /**
     * value: "offline"
     * @const
     */
    "offline": "offline",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",

    /**
     * value: "staged"
     * @const
     */
    "staged": "staged",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "inventory"
     * @const
     */
    "inventory": "inventory",

    /**
     * value: "decommissioning"
     * @const
     */
    "decommissioning": "decommissioning"
};



export default WritableDeviceWithConfigContext;

