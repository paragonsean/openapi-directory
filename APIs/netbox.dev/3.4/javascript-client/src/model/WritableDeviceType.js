/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedTag from './NestedTag';

/**
 * The WritableDeviceType model module.
 * @module model/WritableDeviceType
 * @version 3.4
 */
class WritableDeviceType {
    /**
     * Constructs a new <code>WritableDeviceType</code>.
     * @alias module:model/WritableDeviceType
     * @param manufacturer {Number} 
     * @param model {String} 
     * @param slug {String} 
     */
    constructor(manufacturer, model, slug) { 
        
        WritableDeviceType.initialize(this, manufacturer, model, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, manufacturer, model, slug) { 
        obj['manufacturer'] = manufacturer;
        obj['model'] = model;
        obj['slug'] = slug;
        obj['u_height'] = 1;
    }

    /**
     * Constructs a <code>WritableDeviceType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableDeviceType} obj Optional instance to populate.
     * @return {module:model/WritableDeviceType} The populated <code>WritableDeviceType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableDeviceType();

            if (data.hasOwnProperty('airflow')) {
                obj['airflow'] = ApiClient.convertToType(data['airflow'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device_count')) {
                obj['device_count'] = ApiClient.convertToType(data['device_count'], 'Number');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('front_image')) {
                obj['front_image'] = ApiClient.convertToType(data['front_image'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_full_depth')) {
                obj['is_full_depth'] = ApiClient.convertToType(data['is_full_depth'], 'Boolean');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('part_number')) {
                obj['part_number'] = ApiClient.convertToType(data['part_number'], 'String');
            }
            if (data.hasOwnProperty('rear_image')) {
                obj['rear_image'] = ApiClient.convertToType(data['rear_image'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('subdevice_role')) {
                obj['subdevice_role'] = ApiClient.convertToType(data['subdevice_role'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('u_height')) {
                obj['u_height'] = ApiClient.convertToType(data['u_height'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('weight_unit')) {
                obj['weight_unit'] = ApiClient.convertToType(data['weight_unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableDeviceType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableDeviceType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableDeviceType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['airflow'] && !(typeof data['airflow'] === 'string' || data['airflow'] instanceof String)) {
            throw new Error("Expected the field `airflow` to be a primitive type in the JSON string but got " + data['airflow']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['front_image'] && !(typeof data['front_image'] === 'string' || data['front_image'] instanceof String)) {
            throw new Error("Expected the field `front_image` to be a primitive type in the JSON string but got " + data['front_image']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['part_number'] && !(typeof data['part_number'] === 'string' || data['part_number'] instanceof String)) {
            throw new Error("Expected the field `part_number` to be a primitive type in the JSON string but got " + data['part_number']);
        }
        // ensure the json data is a string
        if (data['rear_image'] && !(typeof data['rear_image'] === 'string' || data['rear_image'] instanceof String)) {
            throw new Error("Expected the field `rear_image` to be a primitive type in the JSON string but got " + data['rear_image']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['subdevice_role'] && !(typeof data['subdevice_role'] === 'string' || data['subdevice_role'] instanceof String)) {
            throw new Error("Expected the field `subdevice_role` to be a primitive type in the JSON string but got " + data['subdevice_role']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['weight_unit'] && !(typeof data['weight_unit'] === 'string' || data['weight_unit'] instanceof String)) {
            throw new Error("Expected the field `weight_unit` to be a primitive type in the JSON string but got " + data['weight_unit']);
        }

        return true;
    }


}

WritableDeviceType.RequiredProperties = ["manufacturer", "model", "slug"];

/**
 * @member {module:model/WritableDeviceType.AirflowEnum} airflow
 */
WritableDeviceType.prototype['airflow'] = undefined;

/**
 * @member {String} comments
 */
WritableDeviceType.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WritableDeviceType.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableDeviceType.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritableDeviceType.prototype['description'] = undefined;

/**
 * @member {Number} device_count
 */
WritableDeviceType.prototype['device_count'] = undefined;

/**
 * @member {String} display
 */
WritableDeviceType.prototype['display'] = undefined;

/**
 * @member {String} front_image
 */
WritableDeviceType.prototype['front_image'] = undefined;

/**
 * @member {Number} id
 */
WritableDeviceType.prototype['id'] = undefined;

/**
 * Device consumes both front and rear rack faces
 * @member {Boolean} is_full_depth
 */
WritableDeviceType.prototype['is_full_depth'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableDeviceType.prototype['last_updated'] = undefined;

/**
 * @member {Number} manufacturer
 */
WritableDeviceType.prototype['manufacturer'] = undefined;

/**
 * @member {String} model
 */
WritableDeviceType.prototype['model'] = undefined;

/**
 * Discrete part number (optional)
 * @member {String} part_number
 */
WritableDeviceType.prototype['part_number'] = undefined;

/**
 * @member {String} rear_image
 */
WritableDeviceType.prototype['rear_image'] = undefined;

/**
 * @member {String} slug
 */
WritableDeviceType.prototype['slug'] = undefined;

/**
 * Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
 * @member {module:model/WritableDeviceType.SubdeviceRoleEnum} subdevice_role
 */
WritableDeviceType.prototype['subdevice_role'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
WritableDeviceType.prototype['tags'] = undefined;

/**
 * @member {Number} u_height
 * @default 1
 */
WritableDeviceType.prototype['u_height'] = 1;

/**
 * @member {String} url
 */
WritableDeviceType.prototype['url'] = undefined;

/**
 * @member {Number} weight
 */
WritableDeviceType.prototype['weight'] = undefined;

/**
 * @member {module:model/WritableDeviceType.WeightUnitEnum} weight_unit
 */
WritableDeviceType.prototype['weight_unit'] = undefined;





/**
 * Allowed values for the <code>airflow</code> property.
 * @enum {String}
 * @readonly
 */
WritableDeviceType['AirflowEnum'] = {

    /**
     * value: "front-to-rear"
     * @const
     */
    "front-to-rear": "front-to-rear",

    /**
     * value: "rear-to-front"
     * @const
     */
    "rear-to-front": "rear-to-front",

    /**
     * value: "left-to-right"
     * @const
     */
    "left-to-right": "left-to-right",

    /**
     * value: "right-to-left"
     * @const
     */
    "right-to-left": "right-to-left",

    /**
     * value: "side-to-rear"
     * @const
     */
    "side-to-rear": "side-to-rear",

    /**
     * value: "passive"
     * @const
     */
    "passive": "passive",

    /**
     * value: "mixed"
     * @const
     */
    "mixed": "mixed"
};


/**
 * Allowed values for the <code>subdevice_role</code> property.
 * @enum {String}
 * @readonly
 */
WritableDeviceType['SubdeviceRoleEnum'] = {

    /**
     * value: "parent"
     * @const
     */
    "parent": "parent",

    /**
     * value: "child"
     * @const
     */
    "child": "child"
};


/**
 * Allowed values for the <code>weight_unit</code> property.
 * @enum {String}
 * @readonly
 */
WritableDeviceType['WeightUnitEnum'] = {

    /**
     * value: "kg"
     * @const
     */
    "kg": "kg",

    /**
     * value: "g"
     * @const
     */
    "g": "g",

    /**
     * value: "lb"
     * @const
     */
    "lb": "lb",

    /**
     * value: "oz"
     * @const
     */
    "oz": "oz"
};



export default WritableDeviceType;

