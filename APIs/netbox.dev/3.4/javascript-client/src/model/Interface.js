/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComponentNestedModule from './ComponentNestedModule';
import Duplex from './Duplex';
import Mode from './Mode';
import NestedCable from './NestedCable';
import NestedDevice from './NestedDevice';
import NestedInterface from './NestedInterface';
import NestedL2VPNTermination from './NestedL2VPNTermination';
import NestedTag from './NestedTag';
import NestedVLAN from './NestedVLAN';
import NestedVRF from './NestedVRF';
import NestedVirtualDeviceContext from './NestedVirtualDeviceContext';
import NestedWirelessLAN from './NestedWirelessLAN';
import NestedWirelessLink from './NestedWirelessLink';
import PoeMode from './PoeMode';
import PoeType from './PoeType';
import RfChannel from './RfChannel';
import RfRole from './RfRole';
import Type3 from './Type3';

/**
 * The Interface model module.
 * @module model/Interface
 * @version 3.4
 */
class Interface {
    /**
     * Constructs a new <code>Interface</code>.
     * @alias module:model/Interface
     * @param device {module:model/NestedDevice} 
     * @param name {String} 
     * @param type {module:model/Type3} 
     */
    constructor(device, name, type) { 
        
        Interface.initialize(this, device, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name, type) { 
        obj['device'] = device;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Interface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Interface} obj Optional instance to populate.
     * @return {module:model/Interface} The populated <code>Interface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Interface();

            if (data.hasOwnProperty('_occupied')) {
                obj['_occupied'] = ApiClient.convertToType(data['_occupied'], 'Boolean');
            }
            if (data.hasOwnProperty('bridge')) {
                obj['bridge'] = NestedInterface.constructFromObject(data['bridge']);
            }
            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('cable_end')) {
                obj['cable_end'] = ApiClient.convertToType(data['cable_end'], 'String');
            }
            if (data.hasOwnProperty('connected_endpoints')) {
                obj['connected_endpoints'] = ApiClient.convertToType(data['connected_endpoints'], ['String']);
            }
            if (data.hasOwnProperty('connected_endpoints_reachable')) {
                obj['connected_endpoints_reachable'] = ApiClient.convertToType(data['connected_endpoints_reachable'], 'Boolean');
            }
            if (data.hasOwnProperty('connected_endpoints_type')) {
                obj['connected_endpoints_type'] = ApiClient.convertToType(data['connected_endpoints_type'], 'String');
            }
            if (data.hasOwnProperty('count_fhrp_groups')) {
                obj['count_fhrp_groups'] = ApiClient.convertToType(data['count_fhrp_groups'], 'Number');
            }
            if (data.hasOwnProperty('count_ipaddresses')) {
                obj['count_ipaddresses'] = ApiClient.convertToType(data['count_ipaddresses'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = NestedDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('duplex')) {
                obj['duplex'] = Duplex.constructFromObject(data['duplex']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('l2vpn_termination')) {
                obj['l2vpn_termination'] = NestedL2VPNTermination.constructFromObject(data['l2vpn_termination']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('lag')) {
                obj['lag'] = NestedInterface.constructFromObject(data['lag']);
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('link_peers')) {
                obj['link_peers'] = ApiClient.convertToType(data['link_peers'], ['String']);
            }
            if (data.hasOwnProperty('link_peers_type')) {
                obj['link_peers_type'] = ApiClient.convertToType(data['link_peers_type'], 'String');
            }
            if (data.hasOwnProperty('mac_address')) {
                obj['mac_address'] = ApiClient.convertToType(data['mac_address'], 'String');
            }
            if (data.hasOwnProperty('mark_connected')) {
                obj['mark_connected'] = ApiClient.convertToType(data['mark_connected'], 'Boolean');
            }
            if (data.hasOwnProperty('mgmt_only')) {
                obj['mgmt_only'] = ApiClient.convertToType(data['mgmt_only'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = Mode.constructFromObject(data['mode']);
            }
            if (data.hasOwnProperty('module')) {
                obj['module'] = ComponentNestedModule.constructFromObject(data['module']);
            }
            if (data.hasOwnProperty('mtu')) {
                obj['mtu'] = ApiClient.convertToType(data['mtu'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = NestedInterface.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('poe_mode')) {
                obj['poe_mode'] = PoeMode.constructFromObject(data['poe_mode']);
            }
            if (data.hasOwnProperty('poe_type')) {
                obj['poe_type'] = PoeType.constructFromObject(data['poe_type']);
            }
            if (data.hasOwnProperty('rf_channel')) {
                obj['rf_channel'] = RfChannel.constructFromObject(data['rf_channel']);
            }
            if (data.hasOwnProperty('rf_channel_frequency')) {
                obj['rf_channel_frequency'] = ApiClient.convertToType(data['rf_channel_frequency'], 'Number');
            }
            if (data.hasOwnProperty('rf_channel_width')) {
                obj['rf_channel_width'] = ApiClient.convertToType(data['rf_channel_width'], 'Number');
            }
            if (data.hasOwnProperty('rf_role')) {
                obj['rf_role'] = RfRole.constructFromObject(data['rf_role']);
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Number');
            }
            if (data.hasOwnProperty('tagged_vlans')) {
                obj['tagged_vlans'] = ApiClient.convertToType(data['tagged_vlans'], [NestedVLAN]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tx_power')) {
                obj['tx_power'] = ApiClient.convertToType(data['tx_power'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type3.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('untagged_vlan')) {
                obj['untagged_vlan'] = NestedVLAN.constructFromObject(data['untagged_vlan']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vdcs')) {
                obj['vdcs'] = ApiClient.convertToType(data['vdcs'], [NestedVirtualDeviceContext]);
            }
            if (data.hasOwnProperty('vrf')) {
                obj['vrf'] = NestedVRF.constructFromObject(data['vrf']);
            }
            if (data.hasOwnProperty('wireless_lans')) {
                obj['wireless_lans'] = ApiClient.convertToType(data['wireless_lans'], [NestedWirelessLAN]);
            }
            if (data.hasOwnProperty('wireless_link')) {
                obj['wireless_link'] = NestedWirelessLink.constructFromObject(data['wireless_link']);
            }
            if (data.hasOwnProperty('wwn')) {
                obj['wwn'] = ApiClient.convertToType(data['wwn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Interface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Interface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Interface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bridge`
        if (data['bridge']) { // data not null
          NestedInterface.validateJSON(data['bridge']);
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['cable_end'] && !(typeof data['cable_end'] === 'string' || data['cable_end'] instanceof String)) {
            throw new Error("Expected the field `cable_end` to be a primitive type in the JSON string but got " + data['cable_end']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected_endpoints'])) {
            throw new Error("Expected the field `connected_endpoints` to be an array in the JSON data but got " + data['connected_endpoints']);
        }
        // ensure the json data is a string
        if (data['connected_endpoints_type'] && !(typeof data['connected_endpoints_type'] === 'string' || data['connected_endpoints_type'] instanceof String)) {
            throw new Error("Expected the field `connected_endpoints_type` to be a primitive type in the JSON string but got " + data['connected_endpoints_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          NestedDevice.validateJSON(data['device']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `duplex`
        if (data['duplex']) { // data not null
          Duplex.validateJSON(data['duplex']);
        }
        // validate the optional field `l2vpn_termination`
        if (data['l2vpn_termination']) { // data not null
          NestedL2VPNTermination.validateJSON(data['l2vpn_termination']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `lag`
        if (data['lag']) { // data not null
          NestedInterface.validateJSON(data['lag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['link_peers'])) {
            throw new Error("Expected the field `link_peers` to be an array in the JSON data but got " + data['link_peers']);
        }
        // ensure the json data is a string
        if (data['link_peers_type'] && !(typeof data['link_peers_type'] === 'string' || data['link_peers_type'] instanceof String)) {
            throw new Error("Expected the field `link_peers_type` to be a primitive type in the JSON string but got " + data['link_peers_type']);
        }
        // ensure the json data is a string
        if (data['mac_address'] && !(typeof data['mac_address'] === 'string' || data['mac_address'] instanceof String)) {
            throw new Error("Expected the field `mac_address` to be a primitive type in the JSON string but got " + data['mac_address']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          Mode.validateJSON(data['mode']);
        }
        // validate the optional field `module`
        if (data['module']) { // data not null
          ComponentNestedModule.validateJSON(data['module']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          NestedInterface.validateJSON(data['parent']);
        }
        // validate the optional field `poe_mode`
        if (data['poe_mode']) { // data not null
          PoeMode.validateJSON(data['poe_mode']);
        }
        // validate the optional field `poe_type`
        if (data['poe_type']) { // data not null
          PoeType.validateJSON(data['poe_type']);
        }
        // validate the optional field `rf_channel`
        if (data['rf_channel']) { // data not null
          RfChannel.validateJSON(data['rf_channel']);
        }
        // validate the optional field `rf_role`
        if (data['rf_role']) { // data not null
          RfRole.validateJSON(data['rf_role']);
        }
        if (data['tagged_vlans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tagged_vlans'])) {
                throw new Error("Expected the field `tagged_vlans` to be an array in the JSON data but got " + data['tagged_vlans']);
            }
            // validate the optional field `tagged_vlans` (array)
            for (const item of data['tagged_vlans']) {
                NestedVLAN.validateJSON(item);
            };
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type3.validateJSON(data['type']);
        }
        // validate the optional field `untagged_vlan`
        if (data['untagged_vlan']) { // data not null
          NestedVLAN.validateJSON(data['untagged_vlan']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['vdcs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vdcs'])) {
                throw new Error("Expected the field `vdcs` to be an array in the JSON data but got " + data['vdcs']);
            }
            // validate the optional field `vdcs` (array)
            for (const item of data['vdcs']) {
                NestedVirtualDeviceContext.validateJSON(item);
            };
        }
        // validate the optional field `vrf`
        if (data['vrf']) { // data not null
          NestedVRF.validateJSON(data['vrf']);
        }
        if (data['wireless_lans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['wireless_lans'])) {
                throw new Error("Expected the field `wireless_lans` to be an array in the JSON data but got " + data['wireless_lans']);
            }
            // validate the optional field `wireless_lans` (array)
            for (const item of data['wireless_lans']) {
                NestedWirelessLAN.validateJSON(item);
            };
        }
        // validate the optional field `wireless_link`
        if (data['wireless_link']) { // data not null
          NestedWirelessLink.validateJSON(data['wireless_link']);
        }
        // ensure the json data is a string
        if (data['wwn'] && !(typeof data['wwn'] === 'string' || data['wwn'] instanceof String)) {
            throw new Error("Expected the field `wwn` to be a primitive type in the JSON string but got " + data['wwn']);
        }

        return true;
    }


}

Interface.RequiredProperties = ["device", "name", "type"];

/**
 * @member {Boolean} _occupied
 */
Interface.prototype['_occupied'] = undefined;

/**
 * @member {module:model/NestedInterface} bridge
 */
Interface.prototype['bridge'] = undefined;

/**
 * @member {module:model/NestedCable} cable
 */
Interface.prototype['cable'] = undefined;

/**
 * @member {String} cable_end
 */
Interface.prototype['cable_end'] = undefined;

/**
 *  Return the appropriate serializer for the type of connected object. 
 * @member {Array.<String>} connected_endpoints
 */
Interface.prototype['connected_endpoints'] = undefined;

/**
 * @member {Boolean} connected_endpoints_reachable
 */
Interface.prototype['connected_endpoints_reachable'] = undefined;

/**
 * @member {String} connected_endpoints_type
 */
Interface.prototype['connected_endpoints_type'] = undefined;

/**
 * @member {Number} count_fhrp_groups
 */
Interface.prototype['count_fhrp_groups'] = undefined;

/**
 * @member {Number} count_ipaddresses
 */
Interface.prototype['count_ipaddresses'] = undefined;

/**
 * @member {Date} created
 */
Interface.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
Interface.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
Interface.prototype['description'] = undefined;

/**
 * @member {module:model/NestedDevice} device
 */
Interface.prototype['device'] = undefined;

/**
 * @member {String} display
 */
Interface.prototype['display'] = undefined;

/**
 * @member {module:model/Duplex} duplex
 */
Interface.prototype['duplex'] = undefined;

/**
 * @member {Boolean} enabled
 */
Interface.prototype['enabled'] = undefined;

/**
 * @member {Number} id
 */
Interface.prototype['id'] = undefined;

/**
 * @member {module:model/NestedL2VPNTermination} l2vpn_termination
 */
Interface.prototype['l2vpn_termination'] = undefined;

/**
 * Physical label
 * @member {String} label
 */
Interface.prototype['label'] = undefined;

/**
 * @member {module:model/NestedInterface} lag
 */
Interface.prototype['lag'] = undefined;

/**
 * @member {Date} last_updated
 */
Interface.prototype['last_updated'] = undefined;

/**
 *  Return the appropriate serializer for the link termination model. 
 * @member {Array.<String>} link_peers
 */
Interface.prototype['link_peers'] = undefined;

/**
 * @member {String} link_peers_type
 */
Interface.prototype['link_peers_type'] = undefined;

/**
 * @member {String} mac_address
 */
Interface.prototype['mac_address'] = undefined;

/**
 * Treat as if a cable is connected
 * @member {Boolean} mark_connected
 */
Interface.prototype['mark_connected'] = undefined;

/**
 * This interface is used only for out-of-band management
 * @member {Boolean} mgmt_only
 */
Interface.prototype['mgmt_only'] = undefined;

/**
 * @member {module:model/Mode} mode
 */
Interface.prototype['mode'] = undefined;

/**
 * @member {module:model/ComponentNestedModule} module
 */
Interface.prototype['module'] = undefined;

/**
 * @member {Number} mtu
 */
Interface.prototype['mtu'] = undefined;

/**
 * @member {String} name
 */
Interface.prototype['name'] = undefined;

/**
 * @member {module:model/NestedInterface} parent
 */
Interface.prototype['parent'] = undefined;

/**
 * @member {module:model/PoeMode} poe_mode
 */
Interface.prototype['poe_mode'] = undefined;

/**
 * @member {module:model/PoeType} poe_type
 */
Interface.prototype['poe_type'] = undefined;

/**
 * @member {module:model/RfChannel} rf_channel
 */
Interface.prototype['rf_channel'] = undefined;

/**
 * @member {Number} rf_channel_frequency
 */
Interface.prototype['rf_channel_frequency'] = undefined;

/**
 * @member {Number} rf_channel_width
 */
Interface.prototype['rf_channel_width'] = undefined;

/**
 * @member {module:model/RfRole} rf_role
 */
Interface.prototype['rf_role'] = undefined;

/**
 * @member {Number} speed
 */
Interface.prototype['speed'] = undefined;

/**
 * @member {Array.<module:model/NestedVLAN>} tagged_vlans
 */
Interface.prototype['tagged_vlans'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
Interface.prototype['tags'] = undefined;

/**
 * @member {Number} tx_power
 */
Interface.prototype['tx_power'] = undefined;

/**
 * @member {module:model/Type3} type
 */
Interface.prototype['type'] = undefined;

/**
 * @member {module:model/NestedVLAN} untagged_vlan
 */
Interface.prototype['untagged_vlan'] = undefined;

/**
 * @member {String} url
 */
Interface.prototype['url'] = undefined;

/**
 * @member {Array.<module:model/NestedVirtualDeviceContext>} vdcs
 */
Interface.prototype['vdcs'] = undefined;

/**
 * @member {module:model/NestedVRF} vrf
 */
Interface.prototype['vrf'] = undefined;

/**
 * @member {Array.<module:model/NestedWirelessLAN>} wireless_lans
 */
Interface.prototype['wireless_lans'] = undefined;

/**
 * @member {module:model/NestedWirelessLink} wireless_link
 */
Interface.prototype['wireless_link'] = undefined;

/**
 * 64-bit World Wide Name
 * @member {String} wwn
 */
Interface.prototype['wwn'] = undefined;






export default Interface;

