/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CircuitCircuitTermination from './CircuitCircuitTermination';
import NestedCircuitType from './NestedCircuitType';
import NestedProvider from './NestedProvider';
import NestedTag from './NestedTag';
import NestedTenant from './NestedTenant';
import Status1 from './Status1';

/**
 * The Circuit model module.
 * @module model/Circuit
 * @version 3.4
 */
class Circuit {
    /**
     * Constructs a new <code>Circuit</code>.
     * @alias module:model/Circuit
     * @param cid {String} 
     * @param provider {module:model/NestedProvider} 
     * @param type {module:model/NestedCircuitType} 
     */
    constructor(cid, provider, type) { 
        
        Circuit.initialize(this, cid, provider, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cid, provider, type) { 
        obj['cid'] = cid;
        obj['provider'] = provider;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Circuit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Circuit} obj Optional instance to populate.
     * @return {module:model/Circuit} The populated <code>Circuit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Circuit();

            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('commit_rate')) {
                obj['commit_rate'] = ApiClient.convertToType(data['commit_rate'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('install_date')) {
                obj['install_date'] = ApiClient.convertToType(data['install_date'], 'Date');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = NestedProvider.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status1.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [NestedTag]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = NestedTenant.constructFromObject(data['tenant']);
            }
            if (data.hasOwnProperty('termination_a')) {
                obj['termination_a'] = CircuitCircuitTermination.constructFromObject(data['termination_a']);
            }
            if (data.hasOwnProperty('termination_date')) {
                obj['termination_date'] = ApiClient.convertToType(data['termination_date'], 'Date');
            }
            if (data.hasOwnProperty('termination_z')) {
                obj['termination_z'] = CircuitCircuitTermination.constructFromObject(data['termination_z']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NestedCircuitType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Circuit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Circuit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Circuit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cid'] && !(typeof data['cid'] === 'string' || data['cid'] instanceof String)) {
            throw new Error("Expected the field `cid` to be a primitive type in the JSON string but got " + data['cid']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          NestedProvider.validateJSON(data['provider']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status1.validateJSON(data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                NestedTag.validateJSON(item);
            };
        }
        // validate the optional field `tenant`
        if (data['tenant']) { // data not null
          NestedTenant.validateJSON(data['tenant']);
        }
        // validate the optional field `termination_a`
        if (data['termination_a']) { // data not null
          CircuitCircuitTermination.validateJSON(data['termination_a']);
        }
        // validate the optional field `termination_z`
        if (data['termination_z']) { // data not null
          CircuitCircuitTermination.validateJSON(data['termination_z']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          NestedCircuitType.validateJSON(data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Circuit.RequiredProperties = ["cid", "provider", "type"];

/**
 * @member {String} cid
 */
Circuit.prototype['cid'] = undefined;

/**
 * @member {String} comments
 */
Circuit.prototype['comments'] = undefined;

/**
 * @member {Number} commit_rate
 */
Circuit.prototype['commit_rate'] = undefined;

/**
 * @member {Date} created
 */
Circuit.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
Circuit.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
Circuit.prototype['description'] = undefined;

/**
 * @member {String} display
 */
Circuit.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
Circuit.prototype['id'] = undefined;

/**
 * @member {Date} install_date
 */
Circuit.prototype['install_date'] = undefined;

/**
 * @member {Date} last_updated
 */
Circuit.prototype['last_updated'] = undefined;

/**
 * @member {module:model/NestedProvider} provider
 */
Circuit.prototype['provider'] = undefined;

/**
 * @member {module:model/Status1} status
 */
Circuit.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/NestedTag>} tags
 */
Circuit.prototype['tags'] = undefined;

/**
 * @member {module:model/NestedTenant} tenant
 */
Circuit.prototype['tenant'] = undefined;

/**
 * @member {module:model/CircuitCircuitTermination} termination_a
 */
Circuit.prototype['termination_a'] = undefined;

/**
 * @member {Date} termination_date
 */
Circuit.prototype['termination_date'] = undefined;

/**
 * @member {module:model/CircuitCircuitTermination} termination_z
 */
Circuit.prototype['termination_z'] = undefined;

/**
 * @member {module:model/NestedCircuitType} type
 */
Circuit.prototype['type'] = undefined;

/**
 * @member {String} url
 */
Circuit.prototype['url'] = undefined;






export default Circuit;

