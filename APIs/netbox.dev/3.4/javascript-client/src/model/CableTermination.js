/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CableTermination model module.
 * @module model/CableTermination
 * @version 3.4
 */
class CableTermination {
    /**
     * Constructs a new <code>CableTermination</code>.
     * @alias module:model/CableTermination
     * @param cable {Number} 
     * @param cableEnd {module:model/CableTermination.CableEndEnum} 
     * @param terminationId {Number} 
     * @param terminationType {String} 
     */
    constructor(cable, cableEnd, terminationId, terminationType) { 
        
        CableTermination.initialize(this, cable, cableEnd, terminationId, terminationType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cable, cableEnd, terminationId, terminationType) { 
        obj['cable'] = cable;
        obj['cable_end'] = cableEnd;
        obj['termination_id'] = terminationId;
        obj['termination_type'] = terminationType;
    }

    /**
     * Constructs a <code>CableTermination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CableTermination} obj Optional instance to populate.
     * @return {module:model/CableTermination} The populated <code>CableTermination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CableTermination();

            if (data.hasOwnProperty('cable')) {
                obj['cable'] = ApiClient.convertToType(data['cable'], 'Number');
            }
            if (data.hasOwnProperty('cable_end')) {
                obj['cable_end'] = ApiClient.convertToType(data['cable_end'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('termination')) {
                obj['termination'] = ApiClient.convertToType(data['termination'], Object);
            }
            if (data.hasOwnProperty('termination_id')) {
                obj['termination_id'] = ApiClient.convertToType(data['termination_id'], 'Number');
            }
            if (data.hasOwnProperty('termination_type')) {
                obj['termination_type'] = ApiClient.convertToType(data['termination_type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CableTermination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CableTermination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CableTermination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cable_end'] && !(typeof data['cable_end'] === 'string' || data['cable_end'] instanceof String)) {
            throw new Error("Expected the field `cable_end` to be a primitive type in the JSON string but got " + data['cable_end']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['termination_type'] && !(typeof data['termination_type'] === 'string' || data['termination_type'] instanceof String)) {
            throw new Error("Expected the field `termination_type` to be a primitive type in the JSON string but got " + data['termination_type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CableTermination.RequiredProperties = ["cable", "cable_end", "termination_id", "termination_type"];

/**
 * @member {Number} cable
 */
CableTermination.prototype['cable'] = undefined;

/**
 * @member {module:model/CableTermination.CableEndEnum} cable_end
 */
CableTermination.prototype['cable_end'] = undefined;

/**
 * @member {String} display
 */
CableTermination.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
CableTermination.prototype['id'] = undefined;

/**
 * @member {Object} termination
 */
CableTermination.prototype['termination'] = undefined;

/**
 * @member {Number} termination_id
 */
CableTermination.prototype['termination_id'] = undefined;

/**
 * @member {String} termination_type
 */
CableTermination.prototype['termination_type'] = undefined;

/**
 * @member {String} url
 */
CableTermination.prototype['url'] = undefined;





/**
 * Allowed values for the <code>cable_end</code> property.
 * @enum {String}
 * @readonly
 */
CableTermination['CableEndEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B"
};



export default CableTermination;

