/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedContact from './NestedContact';
import NestedContactRole from './NestedContactRole';
import Priority from './Priority';

/**
 * The ContactAssignment model module.
 * @module model/ContactAssignment
 * @version 3.4
 */
class ContactAssignment {
    /**
     * Constructs a new <code>ContactAssignment</code>.
     * @alias module:model/ContactAssignment
     * @param contact {module:model/NestedContact} 
     * @param contentType {String} 
     * @param objectId {Number} 
     */
    constructor(contact, contentType, objectId) { 
        
        ContactAssignment.initialize(this, contact, contentType, objectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contact, contentType, objectId) { 
        obj['contact'] = contact;
        obj['content_type'] = contentType;
        obj['object_id'] = objectId;
    }

    /**
     * Constructs a <code>ContactAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactAssignment} obj Optional instance to populate.
     * @return {module:model/ContactAssignment} The populated <code>ContactAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactAssignment();

            if (data.hasOwnProperty('contact')) {
                obj['contact'] = NestedContact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], Object);
            }
            if (data.hasOwnProperty('object_id')) {
                obj['object_id'] = ApiClient.convertToType(data['object_id'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = Priority.constructFromObject(data['priority']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = NestedContactRole.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          NestedContact.validateJSON(data['contact']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // validate the optional field `priority`
        if (data['priority']) { // data not null
          Priority.validateJSON(data['priority']);
        }
        // validate the optional field `role`
        if (data['role']) { // data not null
          NestedContactRole.validateJSON(data['role']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ContactAssignment.RequiredProperties = ["contact", "content_type", "object_id"];

/**
 * @member {module:model/NestedContact} contact
 */
ContactAssignment.prototype['contact'] = undefined;

/**
 * @member {String} content_type
 */
ContactAssignment.prototype['content_type'] = undefined;

/**
 * @member {Date} created
 */
ContactAssignment.prototype['created'] = undefined;

/**
 * @member {String} display
 */
ContactAssignment.prototype['display'] = undefined;

/**
 * @member {Number} id
 */
ContactAssignment.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
ContactAssignment.prototype['last_updated'] = undefined;

/**
 * @member {Object} object
 */
ContactAssignment.prototype['object'] = undefined;

/**
 * @member {Number} object_id
 */
ContactAssignment.prototype['object_id'] = undefined;

/**
 * @member {module:model/Priority} priority
 */
ContactAssignment.prototype['priority'] = undefined;

/**
 * @member {module:model/NestedContactRole} role
 */
ContactAssignment.prototype['role'] = undefined;

/**
 * @member {String} url
 */
ContactAssignment.prototype['url'] = undefined;






export default ContactAssignment;

