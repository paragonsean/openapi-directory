/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SavedFilter model module.
 * @module model/SavedFilter
 * @version 3.4
 */
class SavedFilter {
    /**
     * Constructs a new <code>SavedFilter</code>.
     * @alias module:model/SavedFilter
     * @param contentTypes {Array.<String>} 
     * @param name {String} 
     * @param parameters {Object} 
     * @param slug {String} 
     */
    constructor(contentTypes, name, parameters, slug) { 
        
        SavedFilter.initialize(this, contentTypes, name, parameters, slug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentTypes, name, parameters, slug) { 
        obj['content_types'] = contentTypes;
        obj['name'] = name;
        obj['parameters'] = parameters;
        obj['slug'] = slug;
    }

    /**
     * Constructs a <code>SavedFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SavedFilter} obj Optional instance to populate.
     * @return {module:model/SavedFilter} The populated <code>SavedFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SavedFilter();

            if (data.hasOwnProperty('content_types')) {
                obj['content_types'] = ApiClient.convertToType(data['content_types'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('shared')) {
                obj['shared'] = ApiClient.convertToType(data['shared'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SavedFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SavedFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SavedFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_types'])) {
            throw new Error("Expected the field `content_types` to be an array in the JSON data but got " + data['content_types']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

SavedFilter.RequiredProperties = ["content_types", "name", "parameters", "slug"];

/**
 * @member {Array.<String>} content_types
 */
SavedFilter.prototype['content_types'] = undefined;

/**
 * @member {Date} created
 */
SavedFilter.prototype['created'] = undefined;

/**
 * @member {String} description
 */
SavedFilter.prototype['description'] = undefined;

/**
 * @member {String} display
 */
SavedFilter.prototype['display'] = undefined;

/**
 * @member {Boolean} enabled
 */
SavedFilter.prototype['enabled'] = undefined;

/**
 * @member {Number} id
 */
SavedFilter.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
SavedFilter.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
SavedFilter.prototype['name'] = undefined;

/**
 * @member {Object} parameters
 */
SavedFilter.prototype['parameters'] = undefined;

/**
 * @member {Boolean} shared
 */
SavedFilter.prototype['shared'] = undefined;

/**
 * @member {String} slug
 */
SavedFilter.prototype['slug'] = undefined;

/**
 * @member {String} url
 */
SavedFilter.prototype['url'] = undefined;

/**
 * @member {Number} user
 */
SavedFilter.prototype['user'] = undefined;

/**
 * @member {Number} weight
 */
SavedFilter.prototype['weight'] = undefined;






export default SavedFilter;

