/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ASN from '../model/ASN';
import Aggregate from '../model/Aggregate';
import AvailableIP from '../model/AvailableIP';
import AvailablePrefix from '../model/AvailablePrefix';
import AvailableVLAN from '../model/AvailableVLAN';
import FHRPGroup from '../model/FHRPGroup';
import FHRPGroupAssignment from '../model/FHRPGroupAssignment';
import IPAddress from '../model/IPAddress';
import IPRange from '../model/IPRange';
import IpamAggregatesList200Response from '../model/IpamAggregatesList200Response';
import IpamAsnsList200Response from '../model/IpamAsnsList200Response';
import IpamFhrpGroupAssignmentsList200Response from '../model/IpamFhrpGroupAssignmentsList200Response';
import IpamFhrpGroupsList200Response from '../model/IpamFhrpGroupsList200Response';
import IpamIpAddressesList200Response from '../model/IpamIpAddressesList200Response';
import IpamIpRangesList200Response from '../model/IpamIpRangesList200Response';
import IpamL2vpnTerminationsList200Response from '../model/IpamL2vpnTerminationsList200Response';
import IpamL2vpnsList200Response from '../model/IpamL2vpnsList200Response';
import IpamPrefixesList200Response from '../model/IpamPrefixesList200Response';
import IpamRirsList200Response from '../model/IpamRirsList200Response';
import IpamRolesList200Response from '../model/IpamRolesList200Response';
import IpamRouteTargetsList200Response from '../model/IpamRouteTargetsList200Response';
import IpamServiceTemplatesList200Response from '../model/IpamServiceTemplatesList200Response';
import IpamServicesList200Response from '../model/IpamServicesList200Response';
import IpamVlanGroupsList200Response from '../model/IpamVlanGroupsList200Response';
import IpamVlansList200Response from '../model/IpamVlansList200Response';
import IpamVrfsList200Response from '../model/IpamVrfsList200Response';
import L2VPN from '../model/L2VPN';
import L2VPNTermination from '../model/L2VPNTermination';
import Prefix from '../model/Prefix';
import PrefixLength from '../model/PrefixLength';
import RIR from '../model/RIR';
import Role from '../model/Role';
import RouteTarget from '../model/RouteTarget';
import Service from '../model/Service';
import ServiceTemplate from '../model/ServiceTemplate';
import VLAN from '../model/VLAN';
import VLANGroup from '../model/VLANGroup';
import VRF from '../model/VRF';
import WritableASN from '../model/WritableASN';
import WritableAggregate from '../model/WritableAggregate';
import WritableAvailableIP from '../model/WritableAvailableIP';
import WritableCreateAvailableVLAN from '../model/WritableCreateAvailableVLAN';
import WritableFHRPGroupAssignment from '../model/WritableFHRPGroupAssignment';
import WritableIPAddress from '../model/WritableIPAddress';
import WritableIPRange from '../model/WritableIPRange';
import WritableL2VPN from '../model/WritableL2VPN';
import WritableL2VPNTermination from '../model/WritableL2VPNTermination';
import WritablePrefix from '../model/WritablePrefix';
import WritableRouteTarget from '../model/WritableRouteTarget';
import WritableService from '../model/WritableService';
import WritableServiceTemplate from '../model/WritableServiceTemplate';
import WritableVLAN from '../model/WritableVLAN';
import WritableVRF from '../model/WritableVRF';

/**
* Ipam service.
* @module api/IpamApi
* @version 3.4
*/
export default class IpamApi {

    /**
    * Constructs a new IpamApi. 
    * @alias module:api/IpamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ipamAggregatesBulkDelete operation.
     * @callback module:api/IpamApi~ipamAggregatesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamAggregatesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamAggregatesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamAggregatesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesBulkPartialUpdate(writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamAggregatesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesBulkUpdate(writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesCreate operation.
     * @callback module:api/IpamApi~ipamAggregatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesCreate(writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesDelete operation.
     * @callback module:api/IpamApi~ipamAggregatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:api/IpamApi~ipamAggregatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamAggregatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesList operation.
     * @callback module:api/IpamApi~ipamAggregatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamAggregatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [dateAdded] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {Number} [family] 
     * @param {String} [prefix] 
     * @param {String} [rirId] 
     * @param {String} [rir] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [dateAddedN] 
     * @param {String} [dateAddedLte] 
     * @param {String} [dateAddedLt] 
     * @param {String} [dateAddedGte] 
     * @param {String} [dateAddedGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [rirIdN] 
     * @param {String} [rirN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamAggregatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamAggregatesList200Response}
     */
    ipamAggregatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'date_added': opts['dateAdded'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'family': opts['family'],
        'prefix': opts['prefix'],
        'rir_id': opts['rirId'],
        'rir': opts['rir'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'date_added__n': opts['dateAddedN'],
        'date_added__lte': opts['dateAddedLte'],
        'date_added__lt': opts['dateAddedLt'],
        'date_added__gte': opts['dateAddedGte'],
        'date_added__gt': opts['dateAddedGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'rir_id__n': opts['rirIdN'],
        'rir__n': opts['rirN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamAggregatesList200Response;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamAggregatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesPartialUpdate(id, writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesPartialUpdate");
      }
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesRead operation.
     * @callback module:api/IpamApi~ipamAggregatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:api/IpamApi~ipamAggregatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesUpdate operation.
     * @callback module:api/IpamApi~ipamAggregatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesUpdate(id, writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesUpdate");
      }
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsBulkDelete operation.
     * @callback module:api/IpamApi~ipamAsnsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamAsnsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamAsnsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/asns/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamAsnsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableASN} writableASN 
     * @param {module:api/IpamApi~ipamAsnsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASN}
     */
    ipamAsnsBulkPartialUpdate(writableASN, callback) {
      let postBody = writableASN;
      // verify the required parameter 'writableASN' is set
      if (writableASN === undefined || writableASN === null) {
        throw new Error("Missing the required parameter 'writableASN' when calling ipamAsnsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ASN;
      return this.apiClient.callApi(
        '/ipam/asns/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamAsnsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableASN} writableASN 
     * @param {module:api/IpamApi~ipamAsnsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASN}
     */
    ipamAsnsBulkUpdate(writableASN, callback) {
      let postBody = writableASN;
      // verify the required parameter 'writableASN' is set
      if (writableASN === undefined || writableASN === null) {
        throw new Error("Missing the required parameter 'writableASN' when calling ipamAsnsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ASN;
      return this.apiClient.callApi(
        '/ipam/asns/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsCreate operation.
     * @callback module:api/IpamApi~ipamAsnsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableASN} writableASN 
     * @param {module:api/IpamApi~ipamAsnsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASN}
     */
    ipamAsnsCreate(writableASN, callback) {
      let postBody = writableASN;
      // verify the required parameter 'writableASN' is set
      if (writableASN === undefined || writableASN === null) {
        throw new Error("Missing the required parameter 'writableASN' when calling ipamAsnsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ASN;
      return this.apiClient.callApi(
        '/ipam/asns/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsDelete operation.
     * @callback module:api/IpamApi~ipamAsnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this ASN.
     * @param {module:api/IpamApi~ipamAsnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamAsnsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAsnsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/asns/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsList operation.
     * @callback module:api/IpamApi~ipamAsnsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamAsnsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [asn] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [rirId] 
     * @param {String} [rir] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [asnN] 
     * @param {String} [asnLte] 
     * @param {String} [asnLt] 
     * @param {String} [asnGte] 
     * @param {String} [asnGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [rirIdN] 
     * @param {String} [rirN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamAsnsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamAsnsList200Response}
     */
    ipamAsnsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'asn': opts['asn'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'rir_id': opts['rirId'],
        'rir': opts['rir'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'asn__n': opts['asnN'],
        'asn__lte': opts['asnLte'],
        'asn__lt': opts['asnLt'],
        'asn__gte': opts['asnGte'],
        'asn__gt': opts['asnGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'rir_id__n': opts['rirIdN'],
        'rir__n': opts['rirN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamAsnsList200Response;
      return this.apiClient.callApi(
        '/ipam/asns/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamAsnsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this ASN.
     * @param {module:model/WritableASN} writableASN 
     * @param {module:api/IpamApi~ipamAsnsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASN}
     */
    ipamAsnsPartialUpdate(id, writableASN, callback) {
      let postBody = writableASN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAsnsPartialUpdate");
      }
      // verify the required parameter 'writableASN' is set
      if (writableASN === undefined || writableASN === null) {
        throw new Error("Missing the required parameter 'writableASN' when calling ipamAsnsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ASN;
      return this.apiClient.callApi(
        '/ipam/asns/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsRead operation.
     * @callback module:api/IpamApi~ipamAsnsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this ASN.
     * @param {module:api/IpamApi~ipamAsnsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASN}
     */
    ipamAsnsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAsnsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ASN;
      return this.apiClient.callApi(
        '/ipam/asns/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAsnsUpdate operation.
     * @callback module:api/IpamApi~ipamAsnsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this ASN.
     * @param {module:model/WritableASN} writableASN 
     * @param {module:api/IpamApi~ipamAsnsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASN}
     */
    ipamAsnsUpdate(id, writableASN, callback) {
      let postBody = writableASN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAsnsUpdate");
      }
      // verify the required parameter 'writableASN' is set
      if (writableASN === undefined || writableASN === null) {
        throw new Error("Missing the required parameter 'writableASN' when calling ipamAsnsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ASN;
      return this.apiClient.callApi(
        '/ipam/asns/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsBulkDelete operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamFhrpGroupAssignmentsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableFHRPGroupAssignment} writableFHRPGroupAssignment 
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroupAssignment}
     */
    ipamFhrpGroupAssignmentsBulkPartialUpdate(writableFHRPGroupAssignment, callback) {
      let postBody = writableFHRPGroupAssignment;
      // verify the required parameter 'writableFHRPGroupAssignment' is set
      if (writableFHRPGroupAssignment === undefined || writableFHRPGroupAssignment === null) {
        throw new Error("Missing the required parameter 'writableFHRPGroupAssignment' when calling ipamFhrpGroupAssignmentsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroupAssignment;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableFHRPGroupAssignment} writableFHRPGroupAssignment 
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroupAssignment}
     */
    ipamFhrpGroupAssignmentsBulkUpdate(writableFHRPGroupAssignment, callback) {
      let postBody = writableFHRPGroupAssignment;
      // verify the required parameter 'writableFHRPGroupAssignment' is set
      if (writableFHRPGroupAssignment === undefined || writableFHRPGroupAssignment === null) {
        throw new Error("Missing the required parameter 'writableFHRPGroupAssignment' when calling ipamFhrpGroupAssignmentsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroupAssignment;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsCreate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableFHRPGroupAssignment} writableFHRPGroupAssignment 
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroupAssignment}
     */
    ipamFhrpGroupAssignmentsCreate(writableFHRPGroupAssignment, callback) {
      let postBody = writableFHRPGroupAssignment;
      // verify the required parameter 'writableFHRPGroupAssignment' is set
      if (writableFHRPGroupAssignment === undefined || writableFHRPGroupAssignment === null) {
        throw new Error("Missing the required parameter 'writableFHRPGroupAssignment' when calling ipamFhrpGroupAssignmentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroupAssignment;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsDelete operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group assignment.
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamFhrpGroupAssignmentsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsList operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamFhrpGroupAssignmentsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [groupId] 
     * @param {String} [interfaceType] 
     * @param {String} [interfaceId] 
     * @param {String} [priority] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [device] 
     * @param {String} [deviceId] 
     * @param {String} [virtualMachine] 
     * @param {String} [virtualMachineId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [groupIdN] 
     * @param {String} [interfaceTypeN] 
     * @param {String} [interfaceIdN] 
     * @param {String} [interfaceIdLte] 
     * @param {String} [interfaceIdLt] 
     * @param {String} [interfaceIdGte] 
     * @param {String} [interfaceIdGt] 
     * @param {String} [priorityN] 
     * @param {String} [priorityLte] 
     * @param {String} [priorityLt] 
     * @param {String} [priorityGte] 
     * @param {String} [priorityGt] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamFhrpGroupAssignmentsList200Response}
     */
    ipamFhrpGroupAssignmentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'group_id': opts['groupId'],
        'interface_type': opts['interfaceType'],
        'interface_id': opts['interfaceId'],
        'priority': opts['priority'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'device': opts['device'],
        'device_id': opts['deviceId'],
        'virtual_machine': opts['virtualMachine'],
        'virtual_machine_id': opts['virtualMachineId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'group_id__n': opts['groupIdN'],
        'interface_type__n': opts['interfaceTypeN'],
        'interface_id__n': opts['interfaceIdN'],
        'interface_id__lte': opts['interfaceIdLte'],
        'interface_id__lt': opts['interfaceIdLt'],
        'interface_id__gte': opts['interfaceIdGte'],
        'interface_id__gt': opts['interfaceIdGt'],
        'priority__n': opts['priorityN'],
        'priority__lte': opts['priorityLte'],
        'priority__lt': opts['priorityLt'],
        'priority__gte': opts['priorityGte'],
        'priority__gt': opts['priorityGt'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamFhrpGroupAssignmentsList200Response;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group assignment.
     * @param {module:model/WritableFHRPGroupAssignment} writableFHRPGroupAssignment 
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroupAssignment}
     */
    ipamFhrpGroupAssignmentsPartialUpdate(id, writableFHRPGroupAssignment, callback) {
      let postBody = writableFHRPGroupAssignment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsPartialUpdate");
      }
      // verify the required parameter 'writableFHRPGroupAssignment' is set
      if (writableFHRPGroupAssignment === undefined || writableFHRPGroupAssignment === null) {
        throw new Error("Missing the required parameter 'writableFHRPGroupAssignment' when calling ipamFhrpGroupAssignmentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroupAssignment;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsRead operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group assignment.
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroupAssignment}
     */
    ipamFhrpGroupAssignmentsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FHRPGroupAssignment;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupAssignmentsUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupAssignmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroupAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group assignment.
     * @param {module:model/WritableFHRPGroupAssignment} writableFHRPGroupAssignment 
     * @param {module:api/IpamApi~ipamFhrpGroupAssignmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroupAssignment}
     */
    ipamFhrpGroupAssignmentsUpdate(id, writableFHRPGroupAssignment, callback) {
      let postBody = writableFHRPGroupAssignment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupAssignmentsUpdate");
      }
      // verify the required parameter 'writableFHRPGroupAssignment' is set
      if (writableFHRPGroupAssignment === undefined || writableFHRPGroupAssignment === null) {
        throw new Error("Missing the required parameter 'writableFHRPGroupAssignment' when calling ipamFhrpGroupAssignmentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroupAssignment;
      return this.apiClient.callApi(
        '/ipam/fhrp-group-assignments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsBulkDelete operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamFhrpGroupsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamFhrpGroupsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/FHRPGroup} fHRPGroup 
     * @param {module:api/IpamApi~ipamFhrpGroupsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroup}
     */
    ipamFhrpGroupsBulkPartialUpdate(fHRPGroup, callback) {
      let postBody = fHRPGroup;
      // verify the required parameter 'fHRPGroup' is set
      if (fHRPGroup === undefined || fHRPGroup === null) {
        throw new Error("Missing the required parameter 'fHRPGroup' when calling ipamFhrpGroupsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroup;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/FHRPGroup} fHRPGroup 
     * @param {module:api/IpamApi~ipamFhrpGroupsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroup}
     */
    ipamFhrpGroupsBulkUpdate(fHRPGroup, callback) {
      let postBody = fHRPGroup;
      // verify the required parameter 'fHRPGroup' is set
      if (fHRPGroup === undefined || fHRPGroup === null) {
        throw new Error("Missing the required parameter 'fHRPGroup' when calling ipamFhrpGroupsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroup;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsCreate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/FHRPGroup} fHRPGroup 
     * @param {module:api/IpamApi~ipamFhrpGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroup}
     */
    ipamFhrpGroupsCreate(fHRPGroup, callback) {
      let postBody = fHRPGroup;
      // verify the required parameter 'fHRPGroup' is set
      if (fHRPGroup === undefined || fHRPGroup === null) {
        throw new Error("Missing the required parameter 'fHRPGroup' when calling ipamFhrpGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroup;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsDelete operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group.
     * @param {module:api/IpamApi~ipamFhrpGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamFhrpGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsList operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamFhrpGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [groupId] 
     * @param {String} [name] 
     * @param {String} [authKey] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [protocol] 
     * @param {String} [authType] 
     * @param {String} [relatedIp] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [groupIdN] 
     * @param {String} [groupIdLte] 
     * @param {String} [groupIdLt] 
     * @param {String} [groupIdGte] 
     * @param {String} [groupIdGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [authKeyN] 
     * @param {String} [authKeyIc] 
     * @param {String} [authKeyNic] 
     * @param {String} [authKeyIew] 
     * @param {String} [authKeyNiew] 
     * @param {String} [authKeyIsw] 
     * @param {String} [authKeyNisw] 
     * @param {String} [authKeyIe] 
     * @param {String} [authKeyNie] 
     * @param {String} [authKeyEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [protocolN] 
     * @param {String} [authTypeN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamFhrpGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamFhrpGroupsList200Response}
     */
    ipamFhrpGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'group_id': opts['groupId'],
        'name': opts['name'],
        'auth_key': opts['authKey'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'protocol': opts['protocol'],
        'auth_type': opts['authType'],
        'related_ip': opts['relatedIp'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'group_id__n': opts['groupIdN'],
        'group_id__lte': opts['groupIdLte'],
        'group_id__lt': opts['groupIdLt'],
        'group_id__gte': opts['groupIdGte'],
        'group_id__gt': opts['groupIdGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'auth_key__n': opts['authKeyN'],
        'auth_key__ic': opts['authKeyIc'],
        'auth_key__nic': opts['authKeyNic'],
        'auth_key__iew': opts['authKeyIew'],
        'auth_key__niew': opts['authKeyNiew'],
        'auth_key__isw': opts['authKeyIsw'],
        'auth_key__nisw': opts['authKeyNisw'],
        'auth_key__ie': opts['authKeyIe'],
        'auth_key__nie': opts['authKeyNie'],
        'auth_key__empty': opts['authKeyEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'protocol__n': opts['protocolN'],
        'auth_type__n': opts['authTypeN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamFhrpGroupsList200Response;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group.
     * @param {module:model/FHRPGroup} fHRPGroup 
     * @param {module:api/IpamApi~ipamFhrpGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroup}
     */
    ipamFhrpGroupsPartialUpdate(id, fHRPGroup, callback) {
      let postBody = fHRPGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupsPartialUpdate");
      }
      // verify the required parameter 'fHRPGroup' is set
      if (fHRPGroup === undefined || fHRPGroup === null) {
        throw new Error("Missing the required parameter 'fHRPGroup' when calling ipamFhrpGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroup;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsRead operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group.
     * @param {module:api/IpamApi~ipamFhrpGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroup}
     */
    ipamFhrpGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FHRPGroup;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamFhrpGroupsUpdate operation.
     * @callback module:api/IpamApi~ipamFhrpGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FHRPGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this FHRP group.
     * @param {module:model/FHRPGroup} fHRPGroup 
     * @param {module:api/IpamApi~ipamFhrpGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FHRPGroup}
     */
    ipamFhrpGroupsUpdate(id, fHRPGroup, callback) {
      let postBody = fHRPGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamFhrpGroupsUpdate");
      }
      // verify the required parameter 'fHRPGroup' is set
      if (fHRPGroup === undefined || fHRPGroup === null) {
        throw new Error("Missing the required parameter 'fHRPGroup' when calling ipamFhrpGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FHRPGroup;
      return this.apiClient.callApi(
        '/ipam/fhrp-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesBulkDelete operation.
     * @callback module:api/IpamApi~ipamIpAddressesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamIpAddressesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamIpAddressesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamIpAddressesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesBulkPartialUpdate(writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamIpAddressesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesBulkUpdate(writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesCreate operation.
     * @callback module:api/IpamApi~ipamIpAddressesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesCreate(writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesDelete operation.
     * @callback module:api/IpamApi~ipamIpAddressesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:api/IpamApi~ipamIpAddressesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamIpAddressesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesList operation.
     * @callback module:api/IpamApi~ipamIpAddressesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamIpAddressesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [dnsName] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {Number} [family] 
     * @param {String} [parent] 
     * @param {String} [address] 
     * @param {Number} [maskLength] 
     * @param {String} [vrfId] 
     * @param {String} [vrf] 
     * @param {String} [presentInVrfId] 
     * @param {String} [presentInVrf] 
     * @param {String} [device] 
     * @param {String} [deviceId] 
     * @param {String} [virtualMachine] 
     * @param {String} [virtualMachineId] 
     * @param {String} [_interface] 
     * @param {String} [interfaceId] 
     * @param {String} [vminterface] 
     * @param {String} [vminterfaceId] 
     * @param {String} [fhrpgroupId] 
     * @param {String} [assignedToInterface] 
     * @param {String} [status] 
     * @param {String} [role] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [dnsNameN] 
     * @param {String} [dnsNameIc] 
     * @param {String} [dnsNameNic] 
     * @param {String} [dnsNameIew] 
     * @param {String} [dnsNameNiew] 
     * @param {String} [dnsNameIsw] 
     * @param {String} [dnsNameNisw] 
     * @param {String} [dnsNameIe] 
     * @param {String} [dnsNameNie] 
     * @param {String} [dnsNameEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [vrfIdN] 
     * @param {String} [vrfN] 
     * @param {String} [interfaceN] 
     * @param {String} [interfaceIdN] 
     * @param {String} [vminterfaceN] 
     * @param {String} [vminterfaceIdN] 
     * @param {String} [fhrpgroupIdN] 
     * @param {String} [statusN] 
     * @param {String} [roleN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamIpAddressesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamIpAddressesList200Response}
     */
    ipamIpAddressesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'dns_name': opts['dnsName'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'family': opts['family'],
        'parent': opts['parent'],
        'address': opts['address'],
        'mask_length': opts['maskLength'],
        'vrf_id': opts['vrfId'],
        'vrf': opts['vrf'],
        'present_in_vrf_id': opts['presentInVrfId'],
        'present_in_vrf': opts['presentInVrf'],
        'device': opts['device'],
        'device_id': opts['deviceId'],
        'virtual_machine': opts['virtualMachine'],
        'virtual_machine_id': opts['virtualMachineId'],
        'interface': opts['_interface'],
        'interface_id': opts['interfaceId'],
        'vminterface': opts['vminterface'],
        'vminterface_id': opts['vminterfaceId'],
        'fhrpgroup_id': opts['fhrpgroupId'],
        'assigned_to_interface': opts['assignedToInterface'],
        'status': opts['status'],
        'role': opts['role'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'dns_name__n': opts['dnsNameN'],
        'dns_name__ic': opts['dnsNameIc'],
        'dns_name__nic': opts['dnsNameNic'],
        'dns_name__iew': opts['dnsNameIew'],
        'dns_name__niew': opts['dnsNameNiew'],
        'dns_name__isw': opts['dnsNameIsw'],
        'dns_name__nisw': opts['dnsNameNisw'],
        'dns_name__ie': opts['dnsNameIe'],
        'dns_name__nie': opts['dnsNameNie'],
        'dns_name__empty': opts['dnsNameEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'vrf_id__n': opts['vrfIdN'],
        'vrf__n': opts['vrfN'],
        'interface__n': opts['interfaceN'],
        'interface_id__n': opts['interfaceIdN'],
        'vminterface__n': opts['vminterfaceN'],
        'vminterface_id__n': opts['vminterfaceIdN'],
        'fhrpgroup_id__n': opts['fhrpgroupIdN'],
        'status__n': opts['statusN'],
        'role__n': opts['roleN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamIpAddressesList200Response;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamIpAddressesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesPartialUpdate(id, writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesPartialUpdate");
      }
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesRead operation.
     * @callback module:api/IpamApi~ipamIpAddressesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:api/IpamApi~ipamIpAddressesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesUpdate operation.
     * @callback module:api/IpamApi~ipamIpAddressesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesUpdate(id, writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesUpdate");
      }
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesAvailableIpsCreate operation.
     * @callback module:api/IpamApi~ipamIpRangesAvailableIpsCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IPAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:model/WritableAvailableIP} writableAvailableIP 
     * @param {module:api/IpamApi~ipamIpRangesAvailableIpsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IPAddress>}
     */
    ipamIpRangesAvailableIpsCreate(id, writableAvailableIP, callback) {
      let postBody = writableAvailableIP;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpRangesAvailableIpsCreate");
      }
      // verify the required parameter 'writableAvailableIP' is set
      if (writableAvailableIP === undefined || writableAvailableIP === null) {
        throw new Error("Missing the required parameter 'writableAvailableIP' when calling ipamIpRangesAvailableIpsCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IPAddress];
      return this.apiClient.callApi(
        '/ipam/ip-ranges/{id}/available-ips/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesAvailableIpsList operation.
     * @callback module:api/IpamApi~ipamIpRangesAvailableIpsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:api/IpamApi~ipamIpRangesAvailableIpsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableIP>}
     */
    ipamIpRangesAvailableIpsList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpRangesAvailableIpsList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailableIP];
      return this.apiClient.callApi(
        '/ipam/ip-ranges/{id}/available-ips/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesBulkDelete operation.
     * @callback module:api/IpamApi~ipamIpRangesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamIpRangesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamIpRangesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamIpRangesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPRange} writableIPRange 
     * @param {module:api/IpamApi~ipamIpRangesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPRange}
     */
    ipamIpRangesBulkPartialUpdate(writableIPRange, callback) {
      let postBody = writableIPRange;
      // verify the required parameter 'writableIPRange' is set
      if (writableIPRange === undefined || writableIPRange === null) {
        throw new Error("Missing the required parameter 'writableIPRange' when calling ipamIpRangesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPRange;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamIpRangesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPRange} writableIPRange 
     * @param {module:api/IpamApi~ipamIpRangesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPRange}
     */
    ipamIpRangesBulkUpdate(writableIPRange, callback) {
      let postBody = writableIPRange;
      // verify the required parameter 'writableIPRange' is set
      if (writableIPRange === undefined || writableIPRange === null) {
        throw new Error("Missing the required parameter 'writableIPRange' when calling ipamIpRangesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPRange;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesCreate operation.
     * @callback module:api/IpamApi~ipamIpRangesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPRange} writableIPRange 
     * @param {module:api/IpamApi~ipamIpRangesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPRange}
     */
    ipamIpRangesCreate(writableIPRange, callback) {
      let postBody = writableIPRange;
      // verify the required parameter 'writableIPRange' is set
      if (writableIPRange === undefined || writableIPRange === null) {
        throw new Error("Missing the required parameter 'writableIPRange' when calling ipamIpRangesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPRange;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesDelete operation.
     * @callback module:api/IpamApi~ipamIpRangesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP range.
     * @param {module:api/IpamApi~ipamIpRangesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamIpRangesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpRangesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesList operation.
     * @callback module:api/IpamApi~ipamIpRangesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamIpRangesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [description] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {Number} [family] 
     * @param {String} [startAddress] 
     * @param {String} [endAddress] 
     * @param {String} [contains] 
     * @param {String} [vrfId] 
     * @param {String} [vrf] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [status] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [vrfIdN] 
     * @param {String} [vrfN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [statusN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamIpRangesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamIpRangesList200Response}
     */
    ipamIpRangesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'description': opts['description'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'family': opts['family'],
        'start_address': opts['startAddress'],
        'end_address': opts['endAddress'],
        'contains': opts['contains'],
        'vrf_id': opts['vrfId'],
        'vrf': opts['vrf'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'status': opts['status'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'vrf_id__n': opts['vrfIdN'],
        'vrf__n': opts['vrfN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'status__n': opts['statusN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamIpRangesList200Response;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamIpRangesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP range.
     * @param {module:model/WritableIPRange} writableIPRange 
     * @param {module:api/IpamApi~ipamIpRangesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPRange}
     */
    ipamIpRangesPartialUpdate(id, writableIPRange, callback) {
      let postBody = writableIPRange;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpRangesPartialUpdate");
      }
      // verify the required parameter 'writableIPRange' is set
      if (writableIPRange === undefined || writableIPRange === null) {
        throw new Error("Missing the required parameter 'writableIPRange' when calling ipamIpRangesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPRange;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesRead operation.
     * @callback module:api/IpamApi~ipamIpRangesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP range.
     * @param {module:api/IpamApi~ipamIpRangesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPRange}
     */
    ipamIpRangesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpRangesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPRange;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpRangesUpdate operation.
     * @callback module:api/IpamApi~ipamIpRangesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPRange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP range.
     * @param {module:model/WritableIPRange} writableIPRange 
     * @param {module:api/IpamApi~ipamIpRangesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPRange}
     */
    ipamIpRangesUpdate(id, writableIPRange, callback) {
      let postBody = writableIPRange;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpRangesUpdate");
      }
      // verify the required parameter 'writableIPRange' is set
      if (writableIPRange === undefined || writableIPRange === null) {
        throw new Error("Missing the required parameter 'writableIPRange' when calling ipamIpRangesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPRange;
      return this.apiClient.callApi(
        '/ipam/ip-ranges/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsBulkDelete operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamL2vpnTerminationsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamL2vpnTerminationsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPNTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableL2VPNTermination} writableL2VPNTermination 
     * @param {module:api/IpamApi~ipamL2vpnTerminationsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPNTermination}
     */
    ipamL2vpnTerminationsBulkPartialUpdate(writableL2VPNTermination, callback) {
      let postBody = writableL2VPNTermination;
      // verify the required parameter 'writableL2VPNTermination' is set
      if (writableL2VPNTermination === undefined || writableL2VPNTermination === null) {
        throw new Error("Missing the required parameter 'writableL2VPNTermination' when calling ipamL2vpnTerminationsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPNTermination;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPNTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableL2VPNTermination} writableL2VPNTermination 
     * @param {module:api/IpamApi~ipamL2vpnTerminationsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPNTermination}
     */
    ipamL2vpnTerminationsBulkUpdate(writableL2VPNTermination, callback) {
      let postBody = writableL2VPNTermination;
      // verify the required parameter 'writableL2VPNTermination' is set
      if (writableL2VPNTermination === undefined || writableL2VPNTermination === null) {
        throw new Error("Missing the required parameter 'writableL2VPNTermination' when calling ipamL2vpnTerminationsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPNTermination;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsCreate operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPNTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableL2VPNTermination} writableL2VPNTermination 
     * @param {module:api/IpamApi~ipamL2vpnTerminationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPNTermination}
     */
    ipamL2vpnTerminationsCreate(writableL2VPNTermination, callback) {
      let postBody = writableL2VPNTermination;
      // verify the required parameter 'writableL2VPNTermination' is set
      if (writableL2VPNTermination === undefined || writableL2VPNTermination === null) {
        throw new Error("Missing the required parameter 'writableL2VPNTermination' when calling ipamL2vpnTerminationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPNTermination;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsDelete operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN termination.
     * @param {module:api/IpamApi~ipamL2vpnTerminationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamL2vpnTerminationsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnTerminationsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsList operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamL2vpnTerminationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [assignedObjectTypeId] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [l2vpnId] 
     * @param {String} [l2vpn] 
     * @param {String} [region] 
     * @param {String} [regionId] 
     * @param {String} [site] 
     * @param {String} [siteId] 
     * @param {String} [device] 
     * @param {String} [deviceId] 
     * @param {String} [virtualMachine] 
     * @param {String} [virtualMachineId] 
     * @param {String} [_interface] 
     * @param {String} [interfaceId] 
     * @param {String} [vminterface] 
     * @param {String} [vminterfaceId] 
     * @param {String} [vlan] 
     * @param {Number} [vlanVid] 
     * @param {String} [vlanId] 
     * @param {String} [assignedObjectType] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [assignedObjectTypeIdN] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [l2vpnIdN] 
     * @param {String} [l2vpnN] 
     * @param {String} [deviceN] 
     * @param {String} [deviceIdN] 
     * @param {String} [virtualMachineN] 
     * @param {String} [virtualMachineIdN] 
     * @param {String} [interfaceN] 
     * @param {String} [interfaceIdN] 
     * @param {String} [vminterfaceN] 
     * @param {String} [vminterfaceIdN] 
     * @param {String} [vlanN] 
     * @param {Number} [vlanVidN] 
     * @param {Number} [vlanVidLte] 
     * @param {Number} [vlanVidLt] 
     * @param {Number} [vlanVidGte] 
     * @param {Number} [vlanVidGt] 
     * @param {String} [vlanIdN] 
     * @param {String} [assignedObjectTypeN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamL2vpnTerminationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamL2vpnTerminationsList200Response}
     */
    ipamL2vpnTerminationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'assigned_object_type_id': opts['assignedObjectTypeId'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'l2vpn_id': opts['l2vpnId'],
        'l2vpn': opts['l2vpn'],
        'region': opts['region'],
        'region_id': opts['regionId'],
        'site': opts['site'],
        'site_id': opts['siteId'],
        'device': opts['device'],
        'device_id': opts['deviceId'],
        'virtual_machine': opts['virtualMachine'],
        'virtual_machine_id': opts['virtualMachineId'],
        'interface': opts['_interface'],
        'interface_id': opts['interfaceId'],
        'vminterface': opts['vminterface'],
        'vminterface_id': opts['vminterfaceId'],
        'vlan': opts['vlan'],
        'vlan_vid': opts['vlanVid'],
        'vlan_id': opts['vlanId'],
        'assigned_object_type': opts['assignedObjectType'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'assigned_object_type_id__n': opts['assignedObjectTypeIdN'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'l2vpn_id__n': opts['l2vpnIdN'],
        'l2vpn__n': opts['l2vpnN'],
        'device__n': opts['deviceN'],
        'device_id__n': opts['deviceIdN'],
        'virtual_machine__n': opts['virtualMachineN'],
        'virtual_machine_id__n': opts['virtualMachineIdN'],
        'interface__n': opts['interfaceN'],
        'interface_id__n': opts['interfaceIdN'],
        'vminterface__n': opts['vminterfaceN'],
        'vminterface_id__n': opts['vminterfaceIdN'],
        'vlan__n': opts['vlanN'],
        'vlan_vid__n': opts['vlanVidN'],
        'vlan_vid__lte': opts['vlanVidLte'],
        'vlan_vid__lt': opts['vlanVidLt'],
        'vlan_vid__gte': opts['vlanVidGte'],
        'vlan_vid__gt': opts['vlanVidGt'],
        'vlan_id__n': opts['vlanIdN'],
        'assigned_object_type__n': opts['assignedObjectTypeN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamL2vpnTerminationsList200Response;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPNTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN termination.
     * @param {module:model/WritableL2VPNTermination} writableL2VPNTermination 
     * @param {module:api/IpamApi~ipamL2vpnTerminationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPNTermination}
     */
    ipamL2vpnTerminationsPartialUpdate(id, writableL2VPNTermination, callback) {
      let postBody = writableL2VPNTermination;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnTerminationsPartialUpdate");
      }
      // verify the required parameter 'writableL2VPNTermination' is set
      if (writableL2VPNTermination === undefined || writableL2VPNTermination === null) {
        throw new Error("Missing the required parameter 'writableL2VPNTermination' when calling ipamL2vpnTerminationsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPNTermination;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsRead operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPNTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN termination.
     * @param {module:api/IpamApi~ipamL2vpnTerminationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPNTermination}
     */
    ipamL2vpnTerminationsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnTerminationsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = L2VPNTermination;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnTerminationsUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnTerminationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPNTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN termination.
     * @param {module:model/WritableL2VPNTermination} writableL2VPNTermination 
     * @param {module:api/IpamApi~ipamL2vpnTerminationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPNTermination}
     */
    ipamL2vpnTerminationsUpdate(id, writableL2VPNTermination, callback) {
      let postBody = writableL2VPNTermination;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnTerminationsUpdate");
      }
      // verify the required parameter 'writableL2VPNTermination' is set
      if (writableL2VPNTermination === undefined || writableL2VPNTermination === null) {
        throw new Error("Missing the required parameter 'writableL2VPNTermination' when calling ipamL2vpnTerminationsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPNTermination;
      return this.apiClient.callApi(
        '/ipam/l2vpn-terminations/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsBulkDelete operation.
     * @callback module:api/IpamApi~ipamL2vpnsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamL2vpnsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamL2vpnsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/l2vpns/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableL2VPN} writableL2VPN 
     * @param {module:api/IpamApi~ipamL2vpnsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPN}
     */
    ipamL2vpnsBulkPartialUpdate(writableL2VPN, callback) {
      let postBody = writableL2VPN;
      // verify the required parameter 'writableL2VPN' is set
      if (writableL2VPN === undefined || writableL2VPN === null) {
        throw new Error("Missing the required parameter 'writableL2VPN' when calling ipamL2vpnsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPN;
      return this.apiClient.callApi(
        '/ipam/l2vpns/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableL2VPN} writableL2VPN 
     * @param {module:api/IpamApi~ipamL2vpnsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPN}
     */
    ipamL2vpnsBulkUpdate(writableL2VPN, callback) {
      let postBody = writableL2VPN;
      // verify the required parameter 'writableL2VPN' is set
      if (writableL2VPN === undefined || writableL2VPN === null) {
        throw new Error("Missing the required parameter 'writableL2VPN' when calling ipamL2vpnsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPN;
      return this.apiClient.callApi(
        '/ipam/l2vpns/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsCreate operation.
     * @callback module:api/IpamApi~ipamL2vpnsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableL2VPN} writableL2VPN 
     * @param {module:api/IpamApi~ipamL2vpnsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPN}
     */
    ipamL2vpnsCreate(writableL2VPN, callback) {
      let postBody = writableL2VPN;
      // verify the required parameter 'writableL2VPN' is set
      if (writableL2VPN === undefined || writableL2VPN === null) {
        throw new Error("Missing the required parameter 'writableL2VPN' when calling ipamL2vpnsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPN;
      return this.apiClient.callApi(
        '/ipam/l2vpns/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsDelete operation.
     * @callback module:api/IpamApi~ipamL2vpnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN.
     * @param {module:api/IpamApi~ipamL2vpnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamL2vpnsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/l2vpns/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsList operation.
     * @callback module:api/IpamApi~ipamL2vpnsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamL2vpnsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [identifier] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [type] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [importTargetId] 
     * @param {String} [importTarget] 
     * @param {String} [exportTargetId] 
     * @param {String} [exportTarget] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [identifierN] 
     * @param {String} [identifierLte] 
     * @param {String} [identifierLt] 
     * @param {String} [identifierGte] 
     * @param {String} [identifierGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [typeN] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [importTargetIdN] 
     * @param {String} [importTargetN] 
     * @param {String} [exportTargetIdN] 
     * @param {String} [exportTargetN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamL2vpnsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamL2vpnsList200Response}
     */
    ipamL2vpnsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'identifier': opts['identifier'],
        'name': opts['name'],
        'slug': opts['slug'],
        'type': opts['type'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'import_target_id': opts['importTargetId'],
        'import_target': opts['importTarget'],
        'export_target_id': opts['exportTargetId'],
        'export_target': opts['exportTarget'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'identifier__n': opts['identifierN'],
        'identifier__lte': opts['identifierLte'],
        'identifier__lt': opts['identifierLt'],
        'identifier__gte': opts['identifierGte'],
        'identifier__gt': opts['identifierGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'type__n': opts['typeN'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'import_target_id__n': opts['importTargetIdN'],
        'import_target__n': opts['importTargetN'],
        'export_target_id__n': opts['exportTargetIdN'],
        'export_target__n': opts['exportTargetN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamL2vpnsList200Response;
      return this.apiClient.callApi(
        '/ipam/l2vpns/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN.
     * @param {module:model/WritableL2VPN} writableL2VPN 
     * @param {module:api/IpamApi~ipamL2vpnsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPN}
     */
    ipamL2vpnsPartialUpdate(id, writableL2VPN, callback) {
      let postBody = writableL2VPN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnsPartialUpdate");
      }
      // verify the required parameter 'writableL2VPN' is set
      if (writableL2VPN === undefined || writableL2VPN === null) {
        throw new Error("Missing the required parameter 'writableL2VPN' when calling ipamL2vpnsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPN;
      return this.apiClient.callApi(
        '/ipam/l2vpns/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsRead operation.
     * @callback module:api/IpamApi~ipamL2vpnsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN.
     * @param {module:api/IpamApi~ipamL2vpnsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPN}
     */
    ipamL2vpnsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = L2VPN;
      return this.apiClient.callApi(
        '/ipam/l2vpns/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamL2vpnsUpdate operation.
     * @callback module:api/IpamApi~ipamL2vpnsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/L2VPN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this L2VPN.
     * @param {module:model/WritableL2VPN} writableL2VPN 
     * @param {module:api/IpamApi~ipamL2vpnsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/L2VPN}
     */
    ipamL2vpnsUpdate(id, writableL2VPN, callback) {
      let postBody = writableL2VPN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamL2vpnsUpdate");
      }
      // verify the required parameter 'writableL2VPN' is set
      if (writableL2VPN === undefined || writableL2VPN === null) {
        throw new Error("Missing the required parameter 'writableL2VPN' when calling ipamL2vpnsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = L2VPN;
      return this.apiClient.callApi(
        '/ipam/l2vpns/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailableIpsCreate operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailableIpsCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IPAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:model/WritableAvailableIP} writableAvailableIP 
     * @param {module:api/IpamApi~ipamPrefixesAvailableIpsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IPAddress>}
     */
    ipamPrefixesAvailableIpsCreate(id, writableAvailableIP, callback) {
      let postBody = writableAvailableIP;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsCreate");
      }
      // verify the required parameter 'writableAvailableIP' is set
      if (writableAvailableIP === undefined || writableAvailableIP === null) {
        throw new Error("Missing the required parameter 'writableAvailableIP' when calling ipamPrefixesAvailableIpsCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [IPAddress];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-ips/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailableIpsList operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailableIpsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:api/IpamApi~ipamPrefixesAvailableIpsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableIP>}
     */
    ipamPrefixesAvailableIpsList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailableIP];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-ips/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailablePrefixesCreate operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailablePrefixesCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Prefix>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/PrefixLength} prefixLength 
     * @param {module:api/IpamApi~ipamPrefixesAvailablePrefixesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Prefix>}
     */
    ipamPrefixesAvailablePrefixesCreate(id, prefixLength, callback) {
      let postBody = prefixLength;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesCreate");
      }
      // verify the required parameter 'prefixLength' is set
      if (prefixLength === undefined || prefixLength === null) {
        throw new Error("Missing the required parameter 'prefixLength' when calling ipamPrefixesAvailablePrefixesCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Prefix];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-prefixes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailablePrefixesList operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailablePrefixesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailablePrefix>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesAvailablePrefixesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailablePrefix>}
     */
    ipamPrefixesAvailablePrefixesList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailablePrefix];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-prefixes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesBulkDelete operation.
     * @callback module:api/IpamApi~ipamPrefixesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamPrefixesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamPrefixesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamPrefixesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesBulkPartialUpdate(writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamPrefixesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesBulkUpdate(writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesCreate operation.
     * @callback module:api/IpamApi~ipamPrefixesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesCreate(writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesDelete operation.
     * @callback module:api/IpamApi~ipamPrefixesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamPrefixesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesList operation.
     * @callback module:api/IpamApi~ipamPrefixesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamPrefixesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [isPool] 
     * @param {String} [markUtilized] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {Number} [family] 
     * @param {String} [prefix] 
     * @param {String} [within] 
     * @param {String} [withinInclude] 
     * @param {String} [contains] 
     * @param {String} [depth] 
     * @param {String} [children] 
     * @param {String} [maskLength] 
     * @param {Number} [maskLengthGte] 
     * @param {Number} [maskLengthLte] 
     * @param {String} [vrfId] 
     * @param {String} [vrf] 
     * @param {String} [presentInVrfId] 
     * @param {String} [presentInVrf] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteGroupId] 
     * @param {String} [siteGroup] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [vlanId] 
     * @param {Number} [vlanVid] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [status] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [depthN] 
     * @param {String} [depthLte] 
     * @param {String} [depthLt] 
     * @param {String} [depthGte] 
     * @param {String} [depthGt] 
     * @param {String} [childrenN] 
     * @param {String} [childrenLte] 
     * @param {String} [childrenLt] 
     * @param {String} [childrenGte] 
     * @param {String} [childrenGt] 
     * @param {String} [vrfIdN] 
     * @param {String} [vrfN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteGroupIdN] 
     * @param {String} [siteGroupN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [vlanIdN] 
     * @param {Number} [vlanVidN] 
     * @param {Number} [vlanVidLte] 
     * @param {Number} [vlanVidLt] 
     * @param {Number} [vlanVidGte] 
     * @param {Number} [vlanVidGt] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [statusN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamPrefixesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamPrefixesList200Response}
     */
    ipamPrefixesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'is_pool': opts['isPool'],
        'mark_utilized': opts['markUtilized'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'family': opts['family'],
        'prefix': opts['prefix'],
        'within': opts['within'],
        'within_include': opts['withinInclude'],
        'contains': opts['contains'],
        'depth': opts['depth'],
        'children': opts['children'],
        'mask_length': opts['maskLength'],
        'mask_length__gte': opts['maskLengthGte'],
        'mask_length__lte': opts['maskLengthLte'],
        'vrf_id': opts['vrfId'],
        'vrf': opts['vrf'],
        'present_in_vrf_id': opts['presentInVrfId'],
        'present_in_vrf': opts['presentInVrf'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_group_id': opts['siteGroupId'],
        'site_group': opts['siteGroup'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'vlan_id': opts['vlanId'],
        'vlan_vid': opts['vlanVid'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'status': opts['status'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'depth__n': opts['depthN'],
        'depth__lte': opts['depthLte'],
        'depth__lt': opts['depthLt'],
        'depth__gte': opts['depthGte'],
        'depth__gt': opts['depthGt'],
        'children__n': opts['childrenN'],
        'children__lte': opts['childrenLte'],
        'children__lt': opts['childrenLt'],
        'children__gte': opts['childrenGte'],
        'children__gt': opts['childrenGt'],
        'vrf_id__n': opts['vrfIdN'],
        'vrf__n': opts['vrfN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_group_id__n': opts['siteGroupIdN'],
        'site_group__n': opts['siteGroupN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'vlan_id__n': opts['vlanIdN'],
        'vlan_vid__n': opts['vlanVidN'],
        'vlan_vid__lte': opts['vlanVidLte'],
        'vlan_vid__lt': opts['vlanVidLt'],
        'vlan_vid__gte': opts['vlanVidGte'],
        'vlan_vid__gt': opts['vlanVidGt'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'status__n': opts['statusN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamPrefixesList200Response;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamPrefixesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesPartialUpdate(id, writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesPartialUpdate");
      }
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesRead operation.
     * @callback module:api/IpamApi~ipamPrefixesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesUpdate operation.
     * @callback module:api/IpamApi~ipamPrefixesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesUpdate(id, writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesUpdate");
      }
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsBulkDelete operation.
     * @callback module:api/IpamApi~ipamRirsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamRirsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRirsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRirsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsBulkPartialUpdate(RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamRirsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsBulkUpdate(RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsCreate operation.
     * @callback module:api/IpamApi~ipamRirsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsCreate(RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsDelete operation.
     * @callback module:api/IpamApi~ipamRirsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:api/IpamApi~ipamRirsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRirsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsList operation.
     * @callback module:api/IpamApi~ipamRirsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamRirsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [isPrivate] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamRirsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamRirsList200Response}
     */
    ipamRirsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'is_private': opts['isPrivate'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamRirsList200Response;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRirsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsPartialUpdate(id, RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsPartialUpdate");
      }
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsRead operation.
     * @callback module:api/IpamApi~ipamRirsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:api/IpamApi~ipamRirsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsUpdate operation.
     * @callback module:api/IpamApi~ipamRirsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsUpdate(id, RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsUpdate");
      }
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesBulkDelete operation.
     * @callback module:api/IpamApi~ipamRolesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamRolesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRolesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/roles/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRolesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesBulkPartialUpdate(role, callback) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamRolesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesBulkUpdate(role, callback) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesCreate operation.
     * @callback module:api/IpamApi~ipamRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesCreate(role, callback) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesDelete operation.
     * @callback module:api/IpamApi~ipamRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:api/IpamApi~ipamRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesList operation.
     * @callback module:api/IpamApi~ipamRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamRolesList200Response}
     */
    ipamRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamRolesList200Response;
      return this.apiClient.callApi(
        '/ipam/roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesPartialUpdate(id, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesPartialUpdate");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesRead operation.
     * @callback module:api/IpamApi~ipamRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:api/IpamApi~ipamRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesUpdate operation.
     * @callback module:api/IpamApi~ipamRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesUpdate(id, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesUpdate");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsBulkDelete operation.
     * @callback module:api/IpamApi~ipamRouteTargetsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamRouteTargetsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRouteTargetsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/route-targets/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRouteTargetsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRouteTarget} writableRouteTarget 
     * @param {module:api/IpamApi~ipamRouteTargetsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTarget}
     */
    ipamRouteTargetsBulkPartialUpdate(writableRouteTarget, callback) {
      let postBody = writableRouteTarget;
      // verify the required parameter 'writableRouteTarget' is set
      if (writableRouteTarget === undefined || writableRouteTarget === null) {
        throw new Error("Missing the required parameter 'writableRouteTarget' when calling ipamRouteTargetsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteTarget;
      return this.apiClient.callApi(
        '/ipam/route-targets/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamRouteTargetsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRouteTarget} writableRouteTarget 
     * @param {module:api/IpamApi~ipamRouteTargetsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTarget}
     */
    ipamRouteTargetsBulkUpdate(writableRouteTarget, callback) {
      let postBody = writableRouteTarget;
      // verify the required parameter 'writableRouteTarget' is set
      if (writableRouteTarget === undefined || writableRouteTarget === null) {
        throw new Error("Missing the required parameter 'writableRouteTarget' when calling ipamRouteTargetsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteTarget;
      return this.apiClient.callApi(
        '/ipam/route-targets/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsCreate operation.
     * @callback module:api/IpamApi~ipamRouteTargetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRouteTarget} writableRouteTarget 
     * @param {module:api/IpamApi~ipamRouteTargetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTarget}
     */
    ipamRouteTargetsCreate(writableRouteTarget, callback) {
      let postBody = writableRouteTarget;
      // verify the required parameter 'writableRouteTarget' is set
      if (writableRouteTarget === undefined || writableRouteTarget === null) {
        throw new Error("Missing the required parameter 'writableRouteTarget' when calling ipamRouteTargetsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteTarget;
      return this.apiClient.callApi(
        '/ipam/route-targets/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsDelete operation.
     * @callback module:api/IpamApi~ipamRouteTargetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this route target.
     * @param {module:api/IpamApi~ipamRouteTargetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRouteTargetsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRouteTargetsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/route-targets/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsList operation.
     * @callback module:api/IpamApi~ipamRouteTargetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamRouteTargetsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [importingVrfId] 
     * @param {String} [importingVrf] 
     * @param {String} [exportingVrfId] 
     * @param {String} [exportingVrf] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [importingVrfIdN] 
     * @param {String} [importingVrfN] 
     * @param {String} [exportingVrfIdN] 
     * @param {String} [exportingVrfN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamRouteTargetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamRouteTargetsList200Response}
     */
    ipamRouteTargetsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'importing_vrf_id': opts['importingVrfId'],
        'importing_vrf': opts['importingVrf'],
        'exporting_vrf_id': opts['exportingVrfId'],
        'exporting_vrf': opts['exportingVrf'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'importing_vrf_id__n': opts['importingVrfIdN'],
        'importing_vrf__n': opts['importingVrfN'],
        'exporting_vrf_id__n': opts['exportingVrfIdN'],
        'exporting_vrf__n': opts['exportingVrfN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamRouteTargetsList200Response;
      return this.apiClient.callApi(
        '/ipam/route-targets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRouteTargetsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this route target.
     * @param {module:model/WritableRouteTarget} writableRouteTarget 
     * @param {module:api/IpamApi~ipamRouteTargetsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTarget}
     */
    ipamRouteTargetsPartialUpdate(id, writableRouteTarget, callback) {
      let postBody = writableRouteTarget;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRouteTargetsPartialUpdate");
      }
      // verify the required parameter 'writableRouteTarget' is set
      if (writableRouteTarget === undefined || writableRouteTarget === null) {
        throw new Error("Missing the required parameter 'writableRouteTarget' when calling ipamRouteTargetsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteTarget;
      return this.apiClient.callApi(
        '/ipam/route-targets/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsRead operation.
     * @callback module:api/IpamApi~ipamRouteTargetsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this route target.
     * @param {module:api/IpamApi~ipamRouteTargetsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTarget}
     */
    ipamRouteTargetsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRouteTargetsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteTarget;
      return this.apiClient.callApi(
        '/ipam/route-targets/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRouteTargetsUpdate operation.
     * @callback module:api/IpamApi~ipamRouteTargetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this route target.
     * @param {module:model/WritableRouteTarget} writableRouteTarget 
     * @param {module:api/IpamApi~ipamRouteTargetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTarget}
     */
    ipamRouteTargetsUpdate(id, writableRouteTarget, callback) {
      let postBody = writableRouteTarget;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRouteTargetsUpdate");
      }
      // verify the required parameter 'writableRouteTarget' is set
      if (writableRouteTarget === undefined || writableRouteTarget === null) {
        throw new Error("Missing the required parameter 'writableRouteTarget' when calling ipamRouteTargetsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RouteTarget;
      return this.apiClient.callApi(
        '/ipam/route-targets/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesBulkDelete operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamServiceTemplatesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamServiceTemplatesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/service-templates/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableServiceTemplate} writableServiceTemplate 
     * @param {module:api/IpamApi~ipamServiceTemplatesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTemplate}
     */
    ipamServiceTemplatesBulkPartialUpdate(writableServiceTemplate, callback) {
      let postBody = writableServiceTemplate;
      // verify the required parameter 'writableServiceTemplate' is set
      if (writableServiceTemplate === undefined || writableServiceTemplate === null) {
        throw new Error("Missing the required parameter 'writableServiceTemplate' when calling ipamServiceTemplatesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceTemplate;
      return this.apiClient.callApi(
        '/ipam/service-templates/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableServiceTemplate} writableServiceTemplate 
     * @param {module:api/IpamApi~ipamServiceTemplatesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTemplate}
     */
    ipamServiceTemplatesBulkUpdate(writableServiceTemplate, callback) {
      let postBody = writableServiceTemplate;
      // verify the required parameter 'writableServiceTemplate' is set
      if (writableServiceTemplate === undefined || writableServiceTemplate === null) {
        throw new Error("Missing the required parameter 'writableServiceTemplate' when calling ipamServiceTemplatesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceTemplate;
      return this.apiClient.callApi(
        '/ipam/service-templates/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesCreate operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableServiceTemplate} writableServiceTemplate 
     * @param {module:api/IpamApi~ipamServiceTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTemplate}
     */
    ipamServiceTemplatesCreate(writableServiceTemplate, callback) {
      let postBody = writableServiceTemplate;
      // verify the required parameter 'writableServiceTemplate' is set
      if (writableServiceTemplate === undefined || writableServiceTemplate === null) {
        throw new Error("Missing the required parameter 'writableServiceTemplate' when calling ipamServiceTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceTemplate;
      return this.apiClient.callApi(
        '/ipam/service-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesDelete operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service template.
     * @param {module:api/IpamApi~ipamServiceTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamServiceTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServiceTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/service-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesList operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamServiceTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [protocol] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {Number} [port] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [protocolN] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamServiceTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamServiceTemplatesList200Response}
     */
    ipamServiceTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'protocol': opts['protocol'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'port': opts['port'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'protocol__n': opts['protocolN'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamServiceTemplatesList200Response;
      return this.apiClient.callApi(
        '/ipam/service-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service template.
     * @param {module:model/WritableServiceTemplate} writableServiceTemplate 
     * @param {module:api/IpamApi~ipamServiceTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTemplate}
     */
    ipamServiceTemplatesPartialUpdate(id, writableServiceTemplate, callback) {
      let postBody = writableServiceTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServiceTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableServiceTemplate' is set
      if (writableServiceTemplate === undefined || writableServiceTemplate === null) {
        throw new Error("Missing the required parameter 'writableServiceTemplate' when calling ipamServiceTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceTemplate;
      return this.apiClient.callApi(
        '/ipam/service-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesRead operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service template.
     * @param {module:api/IpamApi~ipamServiceTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTemplate}
     */
    ipamServiceTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServiceTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceTemplate;
      return this.apiClient.callApi(
        '/ipam/service-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServiceTemplatesUpdate operation.
     * @callback module:api/IpamApi~ipamServiceTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service template.
     * @param {module:model/WritableServiceTemplate} writableServiceTemplate 
     * @param {module:api/IpamApi~ipamServiceTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceTemplate}
     */
    ipamServiceTemplatesUpdate(id, writableServiceTemplate, callback) {
      let postBody = writableServiceTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServiceTemplatesUpdate");
      }
      // verify the required parameter 'writableServiceTemplate' is set
      if (writableServiceTemplate === undefined || writableServiceTemplate === null) {
        throw new Error("Missing the required parameter 'writableServiceTemplate' when calling ipamServiceTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceTemplate;
      return this.apiClient.callApi(
        '/ipam/service-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesBulkDelete operation.
     * @callback module:api/IpamApi~ipamServicesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamServicesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamServicesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/services/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamServicesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesBulkPartialUpdate(writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesBulkUpdate operation.
     * @callback module:api/IpamApi~ipamServicesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesBulkUpdate(writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesCreate operation.
     * @callback module:api/IpamApi~ipamServicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesCreate(writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesDelete operation.
     * @callback module:api/IpamApi~ipamServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:api/IpamApi~ipamServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamServicesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesList operation.
     * @callback module:api/IpamApi~ipamServicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamServicesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [protocol] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [virtualMachineId] 
     * @param {String} [virtualMachine] 
     * @param {String} [ipaddressId] 
     * @param {String} [ipaddress] 
     * @param {Number} [port] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [protocolN] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [virtualMachineIdN] 
     * @param {String} [virtualMachineN] 
     * @param {String} [ipaddressIdN] 
     * @param {String} [ipaddressN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamServicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamServicesList200Response}
     */
    ipamServicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'protocol': opts['protocol'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'virtual_machine_id': opts['virtualMachineId'],
        'virtual_machine': opts['virtualMachine'],
        'ipaddress_id': opts['ipaddressId'],
        'ipaddress': opts['ipaddress'],
        'port': opts['port'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'protocol__n': opts['protocolN'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'virtual_machine_id__n': opts['virtualMachineIdN'],
        'virtual_machine__n': opts['virtualMachineN'],
        'ipaddress_id__n': opts['ipaddressIdN'],
        'ipaddress__n': opts['ipaddressN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamServicesList200Response;
      return this.apiClient.callApi(
        '/ipam/services/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamServicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesPartialUpdate(id, writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesPartialUpdate");
      }
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesRead operation.
     * @callback module:api/IpamApi~ipamServicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:api/IpamApi~ipamServicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesUpdate operation.
     * @callback module:api/IpamApi~ipamServicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesUpdate(id, writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesUpdate");
      }
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsAvailableVlansCreate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsAvailableVlansCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VLAN>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:model/WritableCreateAvailableVLAN} writableCreateAvailableVLAN 
     * @param {module:api/IpamApi~ipamVlanGroupsAvailableVlansCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VLAN>}
     */
    ipamVlanGroupsAvailableVlansCreate(id, writableCreateAvailableVLAN, callback) {
      let postBody = writableCreateAvailableVLAN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsAvailableVlansCreate");
      }
      // verify the required parameter 'writableCreateAvailableVLAN' is set
      if (writableCreateAvailableVLAN === undefined || writableCreateAvailableVLAN === null) {
        throw new Error("Missing the required parameter 'writableCreateAvailableVLAN' when calling ipamVlanGroupsAvailableVlansCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [VLAN];
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/available-vlans/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsAvailableVlansList operation.
     * @callback module:api/IpamApi~ipamVlanGroupsAvailableVlansListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableVLAN>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:api/IpamApi~ipamVlanGroupsAvailableVlansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableVLAN>}
     */
    ipamVlanGroupsAvailableVlansList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsAvailableVlansList");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailableVLAN];
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/available-vlans/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsBulkDelete operation.
     * @callback module:api/IpamApi~ipamVlanGroupsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamVlanGroupsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVlanGroupsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/VLANGroup} vLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsBulkPartialUpdate(vLANGroup, callback) {
      let postBody = vLANGroup;
      // verify the required parameter 'vLANGroup' is set
      if (vLANGroup === undefined || vLANGroup === null) {
        throw new Error("Missing the required parameter 'vLANGroup' when calling ipamVlanGroupsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/VLANGroup} vLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsBulkUpdate(vLANGroup, callback) {
      let postBody = vLANGroup;
      // verify the required parameter 'vLANGroup' is set
      if (vLANGroup === undefined || vLANGroup === null) {
        throw new Error("Missing the required parameter 'vLANGroup' when calling ipamVlanGroupsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsCreate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/VLANGroup} vLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsCreate(vLANGroup, callback) {
      let postBody = vLANGroup;
      // verify the required parameter 'vLANGroup' is set
      if (vLANGroup === undefined || vLANGroup === null) {
        throw new Error("Missing the required parameter 'vLANGroup' when calling ipamVlanGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsDelete operation.
     * @callback module:api/IpamApi~ipamVlanGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:api/IpamApi~ipamVlanGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVlanGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsList operation.
     * @callback module:api/IpamApi~ipamVlanGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamVlanGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [minVid] 
     * @param {String} [maxVid] 
     * @param {String} [description] 
     * @param {String} [scopeId] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [scopeType] 
     * @param {Number} [region] 
     * @param {Number} [sitegroup] 
     * @param {Number} [site] 
     * @param {Number} [location] 
     * @param {Number} [rack] 
     * @param {Number} [clustergroup] 
     * @param {Number} [cluster] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [minVidN] 
     * @param {String} [minVidLte] 
     * @param {String} [minVidLt] 
     * @param {String} [minVidGte] 
     * @param {String} [minVidGt] 
     * @param {String} [maxVidN] 
     * @param {String} [maxVidLte] 
     * @param {String} [maxVidLt] 
     * @param {String} [maxVidGte] 
     * @param {String} [maxVidGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [scopeIdN] 
     * @param {String} [scopeIdLte] 
     * @param {String} [scopeIdLt] 
     * @param {String} [scopeIdGte] 
     * @param {String} [scopeIdGt] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [scopeTypeN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamVlanGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamVlanGroupsList200Response}
     */
    ipamVlanGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'min_vid': opts['minVid'],
        'max_vid': opts['maxVid'],
        'description': opts['description'],
        'scope_id': opts['scopeId'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'scope_type': opts['scopeType'],
        'region': opts['region'],
        'sitegroup': opts['sitegroup'],
        'site': opts['site'],
        'location': opts['location'],
        'rack': opts['rack'],
        'clustergroup': opts['clustergroup'],
        'cluster': opts['cluster'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'min_vid__n': opts['minVidN'],
        'min_vid__lte': opts['minVidLte'],
        'min_vid__lt': opts['minVidLt'],
        'min_vid__gte': opts['minVidGte'],
        'min_vid__gt': opts['minVidGt'],
        'max_vid__n': opts['maxVidN'],
        'max_vid__lte': opts['maxVidLte'],
        'max_vid__lt': opts['maxVidLt'],
        'max_vid__gte': opts['maxVidGte'],
        'max_vid__gt': opts['maxVidGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'scope_id__n': opts['scopeIdN'],
        'scope_id__lte': opts['scopeIdLte'],
        'scope_id__lt': opts['scopeIdLt'],
        'scope_id__gte': opts['scopeIdGte'],
        'scope_id__gt': opts['scopeIdGt'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'scope_type__n': opts['scopeTypeN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamVlanGroupsList200Response;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:model/VLANGroup} vLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsPartialUpdate(id, vLANGroup, callback) {
      let postBody = vLANGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsPartialUpdate");
      }
      // verify the required parameter 'vLANGroup' is set
      if (vLANGroup === undefined || vLANGroup === null) {
        throw new Error("Missing the required parameter 'vLANGroup' when calling ipamVlanGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsRead operation.
     * @callback module:api/IpamApi~ipamVlanGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:api/IpamApi~ipamVlanGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsUpdate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:model/VLANGroup} vLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsUpdate(id, vLANGroup, callback) {
      let postBody = vLANGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsUpdate");
      }
      // verify the required parameter 'vLANGroup' is set
      if (vLANGroup === undefined || vLANGroup === null) {
        throw new Error("Missing the required parameter 'vLANGroup' when calling ipamVlanGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansBulkDelete operation.
     * @callback module:api/IpamApi~ipamVlansBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamVlansBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVlansBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVlansBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansBulkPartialUpdate(writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansBulkUpdate operation.
     * @callback module:api/IpamApi~ipamVlansBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansBulkUpdate(writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansCreate operation.
     * @callback module:api/IpamApi~ipamVlansCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansCreate(writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansDelete operation.
     * @callback module:api/IpamApi~ipamVlansDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:api/IpamApi~ipamVlansDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVlansDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansList operation.
     * @callback module:api/IpamApi~ipamVlansListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamVlansList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [vid] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteGroupId] 
     * @param {String} [siteGroup] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [status] 
     * @param {String} [availableOnDevice] 
     * @param {String} [availableOnVirtualmachine] 
     * @param {String} [l2vpnId] 
     * @param {String} [l2vpn] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [vidN] 
     * @param {String} [vidLte] 
     * @param {String} [vidLt] 
     * @param {String} [vidGte] 
     * @param {String} [vidGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteGroupIdN] 
     * @param {String} [siteGroupN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [statusN] 
     * @param {String} [l2vpnIdN] 
     * @param {String} [l2vpnN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamVlansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamVlansList200Response}
     */
    ipamVlansList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'vid': opts['vid'],
        'name': opts['name'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_group_id': opts['siteGroupId'],
        'site_group': opts['siteGroup'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'status': opts['status'],
        'available_on_device': opts['availableOnDevice'],
        'available_on_virtualmachine': opts['availableOnVirtualmachine'],
        'l2vpn_id': opts['l2vpnId'],
        'l2vpn': opts['l2vpn'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'vid__n': opts['vidN'],
        'vid__lte': opts['vidLte'],
        'vid__lt': opts['vidLt'],
        'vid__gte': opts['vidGte'],
        'vid__gt': opts['vidGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_group_id__n': opts['siteGroupIdN'],
        'site_group__n': opts['siteGroupN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'status__n': opts['statusN'],
        'l2vpn_id__n': opts['l2vpnIdN'],
        'l2vpn__n': opts['l2vpnN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamVlansList200Response;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVlansPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansPartialUpdate(id, writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansPartialUpdate");
      }
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansRead operation.
     * @callback module:api/IpamApi~ipamVlansReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:api/IpamApi~ipamVlansReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansUpdate operation.
     * @callback module:api/IpamApi~ipamVlansUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansUpdate(id, writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansUpdate");
      }
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsBulkDelete operation.
     * @callback module:api/IpamApi~ipamVrfsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/IpamApi~ipamVrfsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVrfsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsBulkPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVrfsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsBulkPartialUpdate(writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsBulkUpdate operation.
     * @callback module:api/IpamApi~ipamVrfsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsBulkUpdate(writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsCreate operation.
     * @callback module:api/IpamApi~ipamVrfsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsCreate(writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsDelete operation.
     * @callback module:api/IpamApi~ipamVrfsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:api/IpamApi~ipamVrfsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVrfsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsList operation.
     * @callback module:api/IpamApi~ipamVrfsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamVrfsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [rd] 
     * @param {String} [enforceUnique] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [importTargetId] 
     * @param {String} [importTarget] 
     * @param {String} [exportTargetId] 
     * @param {String} [exportTarget] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [rdN] 
     * @param {String} [rdIc] 
     * @param {String} [rdNic] 
     * @param {String} [rdIew] 
     * @param {String} [rdNiew] 
     * @param {String} [rdIsw] 
     * @param {String} [rdNisw] 
     * @param {String} [rdIe] 
     * @param {String} [rdNie] 
     * @param {String} [rdEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [importTargetIdN] 
     * @param {String} [importTargetN] 
     * @param {String} [exportTargetIdN] 
     * @param {String} [exportTargetN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamVrfsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamVrfsList200Response}
     */
    ipamVrfsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'rd': opts['rd'],
        'enforce_unique': opts['enforceUnique'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'import_target_id': opts['importTargetId'],
        'import_target': opts['importTarget'],
        'export_target_id': opts['exportTargetId'],
        'export_target': opts['exportTarget'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'rd__n': opts['rdN'],
        'rd__ic': opts['rdIc'],
        'rd__nic': opts['rdNic'],
        'rd__iew': opts['rdIew'],
        'rd__niew': opts['rdNiew'],
        'rd__isw': opts['rdIsw'],
        'rd__nisw': opts['rdNisw'],
        'rd__ie': opts['rdIe'],
        'rd__nie': opts['rdNie'],
        'rd__empty': opts['rdEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'import_target_id__n': opts['importTargetIdN'],
        'import_target__n': opts['importTargetN'],
        'export_target_id__n': opts['exportTargetIdN'],
        'export_target__n': opts['exportTargetN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamVrfsList200Response;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVrfsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsPartialUpdate(id, writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsPartialUpdate");
      }
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsRead operation.
     * @callback module:api/IpamApi~ipamVrfsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:api/IpamApi~ipamVrfsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsUpdate operation.
     * @callback module:api/IpamApi~ipamVrfsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsUpdate(id, writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsUpdate");
      }
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
