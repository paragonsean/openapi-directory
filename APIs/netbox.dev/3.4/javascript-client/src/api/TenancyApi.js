/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Contact from '../model/Contact';
import ContactAssignment from '../model/ContactAssignment';
import ContactGroup from '../model/ContactGroup';
import ContactRole from '../model/ContactRole';
import TenancyContactAssignmentsList200Response from '../model/TenancyContactAssignmentsList200Response';
import TenancyContactGroupsList200Response from '../model/TenancyContactGroupsList200Response';
import TenancyContactRolesList200Response from '../model/TenancyContactRolesList200Response';
import TenancyContactsList200Response from '../model/TenancyContactsList200Response';
import TenancyTenantGroupsList200Response from '../model/TenancyTenantGroupsList200Response';
import TenancyTenantsList200Response from '../model/TenancyTenantsList200Response';
import Tenant from '../model/Tenant';
import TenantGroup from '../model/TenantGroup';
import WritableContact from '../model/WritableContact';
import WritableContactAssignment from '../model/WritableContactAssignment';
import WritableContactGroup from '../model/WritableContactGroup';
import WritableTenant from '../model/WritableTenant';
import WritableTenantGroup from '../model/WritableTenantGroup';

/**
* Tenancy service.
* @module api/TenancyApi
* @version 3.4
*/
export default class TenancyApi {

    /**
    * Constructs a new TenancyApi. 
    * @alias module:api/TenancyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tenancyContactAssignmentsBulkDelete operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyContactAssignmentsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactAssignmentsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsBulkPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContactAssignment} writableContactAssignment 
     * @param {module:api/TenancyApi~tenancyContactAssignmentsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactAssignment}
     */
    tenancyContactAssignmentsBulkPartialUpdate(writableContactAssignment, callback) {
      let postBody = writableContactAssignment;
      // verify the required parameter 'writableContactAssignment' is set
      if (writableContactAssignment === undefined || writableContactAssignment === null) {
        throw new Error("Missing the required parameter 'writableContactAssignment' when calling tenancyContactAssignmentsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactAssignment;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsBulkUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContactAssignment} writableContactAssignment 
     * @param {module:api/TenancyApi~tenancyContactAssignmentsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactAssignment}
     */
    tenancyContactAssignmentsBulkUpdate(writableContactAssignment, callback) {
      let postBody = writableContactAssignment;
      // verify the required parameter 'writableContactAssignment' is set
      if (writableContactAssignment === undefined || writableContactAssignment === null) {
        throw new Error("Missing the required parameter 'writableContactAssignment' when calling tenancyContactAssignmentsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactAssignment;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsCreate operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContactAssignment} writableContactAssignment 
     * @param {module:api/TenancyApi~tenancyContactAssignmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactAssignment}
     */
    tenancyContactAssignmentsCreate(writableContactAssignment, callback) {
      let postBody = writableContactAssignment;
      // verify the required parameter 'writableContactAssignment' is set
      if (writableContactAssignment === undefined || writableContactAssignment === null) {
        throw new Error("Missing the required parameter 'writableContactAssignment' when calling tenancyContactAssignmentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactAssignment;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsDelete operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact assignment.
     * @param {module:api/TenancyApi~tenancyContactAssignmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactAssignmentsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactAssignmentsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsList operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyContactAssignmentsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [contentTypeId] 
     * @param {String} [objectId] 
     * @param {String} [priority] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [contentType] 
     * @param {String} [contactId] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [contentTypeIdN] 
     * @param {String} [objectIdN] 
     * @param {String} [objectIdLte] 
     * @param {String} [objectIdLt] 
     * @param {String} [objectIdGte] 
     * @param {String} [objectIdGt] 
     * @param {String} [priorityN] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [contentTypeN] 
     * @param {String} [contactIdN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyContactAssignmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyContactAssignmentsList200Response}
     */
    tenancyContactAssignmentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'content_type_id': opts['contentTypeId'],
        'object_id': opts['objectId'],
        'priority': opts['priority'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'content_type': opts['contentType'],
        'contact_id': opts['contactId'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'content_type_id__n': opts['contentTypeIdN'],
        'object_id__n': opts['objectIdN'],
        'object_id__lte': opts['objectIdLte'],
        'object_id__lt': opts['objectIdLt'],
        'object_id__gte': opts['objectIdGte'],
        'object_id__gt': opts['objectIdGt'],
        'priority__n': opts['priorityN'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'content_type__n': opts['contentTypeN'],
        'contact_id__n': opts['contactIdN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyContactAssignmentsList200Response;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact assignment.
     * @param {module:model/WritableContactAssignment} writableContactAssignment 
     * @param {module:api/TenancyApi~tenancyContactAssignmentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactAssignment}
     */
    tenancyContactAssignmentsPartialUpdate(id, writableContactAssignment, callback) {
      let postBody = writableContactAssignment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactAssignmentsPartialUpdate");
      }
      // verify the required parameter 'writableContactAssignment' is set
      if (writableContactAssignment === undefined || writableContactAssignment === null) {
        throw new Error("Missing the required parameter 'writableContactAssignment' when calling tenancyContactAssignmentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactAssignment;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsRead operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact assignment.
     * @param {module:api/TenancyApi~tenancyContactAssignmentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactAssignment}
     */
    tenancyContactAssignmentsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactAssignmentsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactAssignment;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactAssignmentsUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactAssignmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact assignment.
     * @param {module:model/WritableContactAssignment} writableContactAssignment 
     * @param {module:api/TenancyApi~tenancyContactAssignmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactAssignment}
     */
    tenancyContactAssignmentsUpdate(id, writableContactAssignment, callback) {
      let postBody = writableContactAssignment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactAssignmentsUpdate");
      }
      // verify the required parameter 'writableContactAssignment' is set
      if (writableContactAssignment === undefined || writableContactAssignment === null) {
        throw new Error("Missing the required parameter 'writableContactAssignment' when calling tenancyContactAssignmentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactAssignment;
      return this.apiClient.callApi(
        '/tenancy/contact-assignments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsBulkDelete operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyContactGroupsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactGroupsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsBulkPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContactGroup} writableContactGroup 
     * @param {module:api/TenancyApi~tenancyContactGroupsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroup}
     */
    tenancyContactGroupsBulkPartialUpdate(writableContactGroup, callback) {
      let postBody = writableContactGroup;
      // verify the required parameter 'writableContactGroup' is set
      if (writableContactGroup === undefined || writableContactGroup === null) {
        throw new Error("Missing the required parameter 'writableContactGroup' when calling tenancyContactGroupsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroup;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsBulkUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContactGroup} writableContactGroup 
     * @param {module:api/TenancyApi~tenancyContactGroupsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroup}
     */
    tenancyContactGroupsBulkUpdate(writableContactGroup, callback) {
      let postBody = writableContactGroup;
      // verify the required parameter 'writableContactGroup' is set
      if (writableContactGroup === undefined || writableContactGroup === null) {
        throw new Error("Missing the required parameter 'writableContactGroup' when calling tenancyContactGroupsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroup;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsCreate operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContactGroup} writableContactGroup 
     * @param {module:api/TenancyApi~tenancyContactGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroup}
     */
    tenancyContactGroupsCreate(writableContactGroup, callback) {
      let postBody = writableContactGroup;
      // verify the required parameter 'writableContactGroup' is set
      if (writableContactGroup === undefined || writableContactGroup === null) {
        throw new Error("Missing the required parameter 'writableContactGroup' when calling tenancyContactGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroup;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsDelete operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact group.
     * @param {module:api/TenancyApi~tenancyContactGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsList operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyContactGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [parentId] 
     * @param {String} [parent] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [parentIdN] 
     * @param {String} [parentN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyContactGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyContactGroupsList200Response}
     */
    tenancyContactGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'parent_id': opts['parentId'],
        'parent': opts['parent'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'parent_id__n': opts['parentIdN'],
        'parent__n': opts['parentN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyContactGroupsList200Response;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact group.
     * @param {module:model/WritableContactGroup} writableContactGroup 
     * @param {module:api/TenancyApi~tenancyContactGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroup}
     */
    tenancyContactGroupsPartialUpdate(id, writableContactGroup, callback) {
      let postBody = writableContactGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactGroupsPartialUpdate");
      }
      // verify the required parameter 'writableContactGroup' is set
      if (writableContactGroup === undefined || writableContactGroup === null) {
        throw new Error("Missing the required parameter 'writableContactGroup' when calling tenancyContactGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroup;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsRead operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact group.
     * @param {module:api/TenancyApi~tenancyContactGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroup}
     */
    tenancyContactGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactGroup;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactGroupsUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact group.
     * @param {module:model/WritableContactGroup} writableContactGroup 
     * @param {module:api/TenancyApi~tenancyContactGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactGroup}
     */
    tenancyContactGroupsUpdate(id, writableContactGroup, callback) {
      let postBody = writableContactGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactGroupsUpdate");
      }
      // verify the required parameter 'writableContactGroup' is set
      if (writableContactGroup === undefined || writableContactGroup === null) {
        throw new Error("Missing the required parameter 'writableContactGroup' when calling tenancyContactGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactGroup;
      return this.apiClient.callApi(
        '/tenancy/contact-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesBulkDelete operation.
     * @callback module:api/TenancyApi~tenancyContactRolesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyContactRolesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactRolesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesBulkPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactRolesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ContactRole} contactRole 
     * @param {module:api/TenancyApi~tenancyContactRolesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRole}
     */
    tenancyContactRolesBulkPartialUpdate(contactRole, callback) {
      let postBody = contactRole;
      // verify the required parameter 'contactRole' is set
      if (contactRole === undefined || contactRole === null) {
        throw new Error("Missing the required parameter 'contactRole' when calling tenancyContactRolesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactRole;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesBulkUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactRolesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ContactRole} contactRole 
     * @param {module:api/TenancyApi~tenancyContactRolesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRole}
     */
    tenancyContactRolesBulkUpdate(contactRole, callback) {
      let postBody = contactRole;
      // verify the required parameter 'contactRole' is set
      if (contactRole === undefined || contactRole === null) {
        throw new Error("Missing the required parameter 'contactRole' when calling tenancyContactRolesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactRole;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesCreate operation.
     * @callback module:api/TenancyApi~tenancyContactRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ContactRole} contactRole 
     * @param {module:api/TenancyApi~tenancyContactRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRole}
     */
    tenancyContactRolesCreate(contactRole, callback) {
      let postBody = contactRole;
      // verify the required parameter 'contactRole' is set
      if (contactRole === undefined || contactRole === null) {
        throw new Error("Missing the required parameter 'contactRole' when calling tenancyContactRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactRole;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesDelete operation.
     * @callback module:api/TenancyApi~tenancyContactRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact role.
     * @param {module:api/TenancyApi~tenancyContactRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesList operation.
     * @callback module:api/TenancyApi~tenancyContactRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyContactRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyContactRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyContactRolesList200Response}
     */
    tenancyContactRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyContactRolesList200Response;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact role.
     * @param {module:model/ContactRole} contactRole 
     * @param {module:api/TenancyApi~tenancyContactRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRole}
     */
    tenancyContactRolesPartialUpdate(id, contactRole, callback) {
      let postBody = contactRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactRolesPartialUpdate");
      }
      // verify the required parameter 'contactRole' is set
      if (contactRole === undefined || contactRole === null) {
        throw new Error("Missing the required parameter 'contactRole' when calling tenancyContactRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactRole;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesRead operation.
     * @callback module:api/TenancyApi~tenancyContactRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact role.
     * @param {module:api/TenancyApi~tenancyContactRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRole}
     */
    tenancyContactRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactRole;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactRolesUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact role.
     * @param {module:model/ContactRole} contactRole 
     * @param {module:api/TenancyApi~tenancyContactRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactRole}
     */
    tenancyContactRolesUpdate(id, contactRole, callback) {
      let postBody = contactRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactRolesUpdate");
      }
      // verify the required parameter 'contactRole' is set
      if (contactRole === undefined || contactRole === null) {
        throw new Error("Missing the required parameter 'contactRole' when calling tenancyContactRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactRole;
      return this.apiClient.callApi(
        '/tenancy/contact-roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsBulkDelete operation.
     * @callback module:api/TenancyApi~tenancyContactsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyContactsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contacts/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsBulkPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContact} writableContact 
     * @param {module:api/TenancyApi~tenancyContactsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    tenancyContactsBulkPartialUpdate(writableContact, callback) {
      let postBody = writableContact;
      // verify the required parameter 'writableContact' is set
      if (writableContact === undefined || writableContact === null) {
        throw new Error("Missing the required parameter 'writableContact' when calling tenancyContactsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/tenancy/contacts/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsBulkUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContact} writableContact 
     * @param {module:api/TenancyApi~tenancyContactsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    tenancyContactsBulkUpdate(writableContact, callback) {
      let postBody = writableContact;
      // verify the required parameter 'writableContact' is set
      if (writableContact === undefined || writableContact === null) {
        throw new Error("Missing the required parameter 'writableContact' when calling tenancyContactsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/tenancy/contacts/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsCreate operation.
     * @callback module:api/TenancyApi~tenancyContactsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableContact} writableContact 
     * @param {module:api/TenancyApi~tenancyContactsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    tenancyContactsCreate(writableContact, callback) {
      let postBody = writableContact;
      // verify the required parameter 'writableContact' is set
      if (writableContact === undefined || writableContact === null) {
        throw new Error("Missing the required parameter 'writableContact' when calling tenancyContactsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/tenancy/contacts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsDelete operation.
     * @callback module:api/TenancyApi~tenancyContactsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact.
     * @param {module:api/TenancyApi~tenancyContactsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyContactsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/contacts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsList operation.
     * @callback module:api/TenancyApi~tenancyContactsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyContactsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [title] 
     * @param {String} [phone] 
     * @param {String} [email] 
     * @param {String} [address] 
     * @param {String} [link] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [titleN] 
     * @param {String} [titleIc] 
     * @param {String} [titleNic] 
     * @param {String} [titleIew] 
     * @param {String} [titleNiew] 
     * @param {String} [titleIsw] 
     * @param {String} [titleNisw] 
     * @param {String} [titleIe] 
     * @param {String} [titleNie] 
     * @param {String} [titleEmpty] 
     * @param {String} [phoneN] 
     * @param {String} [phoneIc] 
     * @param {String} [phoneNic] 
     * @param {String} [phoneIew] 
     * @param {String} [phoneNiew] 
     * @param {String} [phoneIsw] 
     * @param {String} [phoneNisw] 
     * @param {String} [phoneIe] 
     * @param {String} [phoneNie] 
     * @param {String} [phoneEmpty] 
     * @param {String} [emailN] 
     * @param {String} [emailIc] 
     * @param {String} [emailNic] 
     * @param {String} [emailIew] 
     * @param {String} [emailNiew] 
     * @param {String} [emailIsw] 
     * @param {String} [emailNisw] 
     * @param {String} [emailIe] 
     * @param {String} [emailNie] 
     * @param {String} [emailEmpty] 
     * @param {String} [addressN] 
     * @param {String} [addressIc] 
     * @param {String} [addressNic] 
     * @param {String} [addressIew] 
     * @param {String} [addressNiew] 
     * @param {String} [addressIsw] 
     * @param {String} [addressNisw] 
     * @param {String} [addressIe] 
     * @param {String} [addressNie] 
     * @param {String} [addressEmpty] 
     * @param {String} [linkN] 
     * @param {String} [linkIc] 
     * @param {String} [linkNic] 
     * @param {String} [linkIew] 
     * @param {String} [linkNiew] 
     * @param {String} [linkIsw] 
     * @param {String} [linkNisw] 
     * @param {String} [linkIe] 
     * @param {String} [linkNie] 
     * @param {String} [linkEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyContactsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyContactsList200Response}
     */
    tenancyContactsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'title': opts['title'],
        'phone': opts['phone'],
        'email': opts['email'],
        'address': opts['address'],
        'link': opts['link'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'title__n': opts['titleN'],
        'title__ic': opts['titleIc'],
        'title__nic': opts['titleNic'],
        'title__iew': opts['titleIew'],
        'title__niew': opts['titleNiew'],
        'title__isw': opts['titleIsw'],
        'title__nisw': opts['titleNisw'],
        'title__ie': opts['titleIe'],
        'title__nie': opts['titleNie'],
        'title__empty': opts['titleEmpty'],
        'phone__n': opts['phoneN'],
        'phone__ic': opts['phoneIc'],
        'phone__nic': opts['phoneNic'],
        'phone__iew': opts['phoneIew'],
        'phone__niew': opts['phoneNiew'],
        'phone__isw': opts['phoneIsw'],
        'phone__nisw': opts['phoneNisw'],
        'phone__ie': opts['phoneIe'],
        'phone__nie': opts['phoneNie'],
        'phone__empty': opts['phoneEmpty'],
        'email__n': opts['emailN'],
        'email__ic': opts['emailIc'],
        'email__nic': opts['emailNic'],
        'email__iew': opts['emailIew'],
        'email__niew': opts['emailNiew'],
        'email__isw': opts['emailIsw'],
        'email__nisw': opts['emailNisw'],
        'email__ie': opts['emailIe'],
        'email__nie': opts['emailNie'],
        'email__empty': opts['emailEmpty'],
        'address__n': opts['addressN'],
        'address__ic': opts['addressIc'],
        'address__nic': opts['addressNic'],
        'address__iew': opts['addressIew'],
        'address__niew': opts['addressNiew'],
        'address__isw': opts['addressIsw'],
        'address__nisw': opts['addressNisw'],
        'address__ie': opts['addressIe'],
        'address__nie': opts['addressNie'],
        'address__empty': opts['addressEmpty'],
        'link__n': opts['linkN'],
        'link__ic': opts['linkIc'],
        'link__nic': opts['linkNic'],
        'link__iew': opts['linkIew'],
        'link__niew': opts['linkNiew'],
        'link__isw': opts['linkIsw'],
        'link__nisw': opts['linkNisw'],
        'link__ie': opts['linkIe'],
        'link__nie': opts['linkNie'],
        'link__empty': opts['linkEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyContactsList200Response;
      return this.apiClient.callApi(
        '/tenancy/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact.
     * @param {module:model/WritableContact} writableContact 
     * @param {module:api/TenancyApi~tenancyContactsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    tenancyContactsPartialUpdate(id, writableContact, callback) {
      let postBody = writableContact;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactsPartialUpdate");
      }
      // verify the required parameter 'writableContact' is set
      if (writableContact === undefined || writableContact === null) {
        throw new Error("Missing the required parameter 'writableContact' when calling tenancyContactsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/tenancy/contacts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsRead operation.
     * @callback module:api/TenancyApi~tenancyContactsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact.
     * @param {module:api/TenancyApi~tenancyContactsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    tenancyContactsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/tenancy/contacts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyContactsUpdate operation.
     * @callback module:api/TenancyApi~tenancyContactsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this contact.
     * @param {module:model/WritableContact} writableContact 
     * @param {module:api/TenancyApi~tenancyContactsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contact}
     */
    tenancyContactsUpdate(id, writableContact, callback) {
      let postBody = writableContact;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyContactsUpdate");
      }
      // verify the required parameter 'writableContact' is set
      if (writableContact === undefined || writableContact === null) {
        throw new Error("Missing the required parameter 'writableContact' when calling tenancyContactsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Contact;
      return this.apiClient.callApi(
        '/tenancy/contacts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsBulkDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyTenantGroupsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantGroupsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsBulkPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsBulkPartialUpdate(writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsBulkUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsBulkUpdate(writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsCreate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsCreate(writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:api/TenancyApi~tenancyTenantGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsList operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyTenantGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [parentId] 
     * @param {String} [parent] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [parentIdN] 
     * @param {String} [parentN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyTenantGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyTenantGroupsList200Response}
     */
    tenancyTenantGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'parent_id': opts['parentId'],
        'parent': opts['parent'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'parent_id__n': opts['parentIdN'],
        'parent__n': opts['parentN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyTenantGroupsList200Response;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsPartialUpdate(id, writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsPartialUpdate");
      }
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsRead operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:api/TenancyApi~tenancyTenantGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsUpdate(id, writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsUpdate");
      }
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsBulkDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/TenancyApi~tenancyTenantsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsBulkPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsBulkPartialUpdate(writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsBulkUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsBulkUpdate(writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsCreate operation.
     * @callback module:api/TenancyApi~tenancyTenantsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsCreate(writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:api/TenancyApi~tenancyTenantsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsList operation.
     * @callback module:api/TenancyApi~tenancyTenantsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyTenantsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [contact] 
     * @param {String} [contactRole] 
     * @param {String} [contactGroup] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [contactN] 
     * @param {String} [contactRoleN] 
     * @param {String} [contactGroupN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyTenantsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyTenantsList200Response}
     */
    tenancyTenantsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'contact': opts['contact'],
        'contact_role': opts['contactRole'],
        'contact_group': opts['contactGroup'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'contact__n': opts['contactN'],
        'contact_role__n': opts['contactRoleN'],
        'contact_group__n': opts['contactGroupN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyTenantsList200Response;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsPartialUpdate(id, writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsPartialUpdate");
      }
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsRead operation.
     * @callback module:api/TenancyApi~tenancyTenantsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:api/TenancyApi~tenancyTenantsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsUpdate(id, writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsUpdate");
      }
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
