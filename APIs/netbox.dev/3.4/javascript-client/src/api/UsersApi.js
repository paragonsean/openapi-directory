/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Group from '../model/Group';
import ObjectPermission from '../model/ObjectPermission';
import Token from '../model/Token';
import User from '../model/User';
import UsersGroupsList200Response from '../model/UsersGroupsList200Response';
import UsersPermissionsList200Response from '../model/UsersPermissionsList200Response';
import UsersTokensList200Response from '../model/UsersTokensList200Response';
import UsersUsersList200Response from '../model/UsersUsersList200Response';
import WritableObjectPermission from '../model/WritableObjectPermission';
import WritableToken from '../model/WritableToken';
import WritableUser from '../model/WritableUser';

/**
* Users service.
* @module api/UsersApi
* @version 3.4
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersConfigList operation.
     * @callback module:api/UsersApi~usersConfigListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the UserConfig for the currently authenticated User.
     * @param {module:api/UsersApi~usersConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersConfigList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsBulkDelete operation.
     * @callback module:api/UsersApi~usersGroupsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/UsersApi~usersGroupsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersGroupsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/groups/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsBulkPartialUpdate operation.
     * @callback module:api/UsersApi~usersGroupsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Group} group 
     * @param {module:api/UsersApi~usersGroupsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    usersGroupsBulkPartialUpdate(group, callback) {
      let postBody = group;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usersGroupsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/users/groups/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsBulkUpdate operation.
     * @callback module:api/UsersApi~usersGroupsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Group} group 
     * @param {module:api/UsersApi~usersGroupsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    usersGroupsBulkUpdate(group, callback) {
      let postBody = group;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usersGroupsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/users/groups/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsCreate operation.
     * @callback module:api/UsersApi~usersGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Group} group 
     * @param {module:api/UsersApi~usersGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    usersGroupsCreate(group, callback) {
      let postBody = group;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usersGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/users/groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsDelete operation.
     * @callback module:api/UsersApi~usersGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this group.
     * @param {module:api/UsersApi~usersGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsList operation.
     * @callback module:api/UsersApi~usersGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/UsersApi~usersGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersGroupsList200Response}
     */
    usersGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersGroupsList200Response;
      return this.apiClient.callApi(
        '/users/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsPartialUpdate operation.
     * @callback module:api/UsersApi~usersGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this group.
     * @param {module:model/Group} group 
     * @param {module:api/UsersApi~usersGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    usersGroupsPartialUpdate(id, group, callback) {
      let postBody = group;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersGroupsPartialUpdate");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usersGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/users/groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsRead operation.
     * @callback module:api/UsersApi~usersGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this group.
     * @param {module:api/UsersApi~usersGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    usersGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/users/groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGroupsUpdate operation.
     * @callback module:api/UsersApi~usersGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this group.
     * @param {module:model/Group} group 
     * @param {module:api/UsersApi~usersGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    usersGroupsUpdate(id, group, callback) {
      let postBody = group;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersGroupsUpdate");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling usersGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/users/groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsBulkDelete operation.
     * @callback module:api/UsersApi~usersPermissionsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/UsersApi~usersPermissionsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPermissionsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/permissions/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsBulkPartialUpdate operation.
     * @callback module:api/UsersApi~usersPermissionsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableObjectPermission} writableObjectPermission 
     * @param {module:api/UsersApi~usersPermissionsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectPermission}
     */
    usersPermissionsBulkPartialUpdate(writableObjectPermission, callback) {
      let postBody = writableObjectPermission;
      // verify the required parameter 'writableObjectPermission' is set
      if (writableObjectPermission === undefined || writableObjectPermission === null) {
        throw new Error("Missing the required parameter 'writableObjectPermission' when calling usersPermissionsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectPermission;
      return this.apiClient.callApi(
        '/users/permissions/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsBulkUpdate operation.
     * @callback module:api/UsersApi~usersPermissionsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableObjectPermission} writableObjectPermission 
     * @param {module:api/UsersApi~usersPermissionsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectPermission}
     */
    usersPermissionsBulkUpdate(writableObjectPermission, callback) {
      let postBody = writableObjectPermission;
      // verify the required parameter 'writableObjectPermission' is set
      if (writableObjectPermission === undefined || writableObjectPermission === null) {
        throw new Error("Missing the required parameter 'writableObjectPermission' when calling usersPermissionsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectPermission;
      return this.apiClient.callApi(
        '/users/permissions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsCreate operation.
     * @callback module:api/UsersApi~usersPermissionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableObjectPermission} writableObjectPermission 
     * @param {module:api/UsersApi~usersPermissionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectPermission}
     */
    usersPermissionsCreate(writableObjectPermission, callback) {
      let postBody = writableObjectPermission;
      // verify the required parameter 'writableObjectPermission' is set
      if (writableObjectPermission === undefined || writableObjectPermission === null) {
        throw new Error("Missing the required parameter 'writableObjectPermission' when calling usersPermissionsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectPermission;
      return this.apiClient.callApi(
        '/users/permissions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsDelete operation.
     * @callback module:api/UsersApi~usersPermissionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this permission.
     * @param {module:api/UsersApi~usersPermissionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersPermissionsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPermissionsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/permissions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsList operation.
     * @callback module:api/UsersApi~usersPermissionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [enabled] 
     * @param {String} [objectTypes] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [userId] 
     * @param {String} [user] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [objectTypesN] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [userIdN] 
     * @param {String} [userN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/UsersApi~usersPermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsList200Response}
     */
    usersPermissionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'enabled': opts['enabled'],
        'object_types': opts['objectTypes'],
        'description': opts['description'],
        'q': opts['q'],
        'user_id': opts['userId'],
        'user': opts['user'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'object_types__n': opts['objectTypesN'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'user_id__n': opts['userIdN'],
        'user__n': opts['userN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsList200Response;
      return this.apiClient.callApi(
        '/users/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsPartialUpdate operation.
     * @callback module:api/UsersApi~usersPermissionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this permission.
     * @param {module:model/WritableObjectPermission} writableObjectPermission 
     * @param {module:api/UsersApi~usersPermissionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectPermission}
     */
    usersPermissionsPartialUpdate(id, writableObjectPermission, callback) {
      let postBody = writableObjectPermission;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPermissionsPartialUpdate");
      }
      // verify the required parameter 'writableObjectPermission' is set
      if (writableObjectPermission === undefined || writableObjectPermission === null) {
        throw new Error("Missing the required parameter 'writableObjectPermission' when calling usersPermissionsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectPermission;
      return this.apiClient.callApi(
        '/users/permissions/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsRead operation.
     * @callback module:api/UsersApi~usersPermissionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this permission.
     * @param {module:api/UsersApi~usersPermissionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectPermission}
     */
    usersPermissionsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPermissionsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectPermission;
      return this.apiClient.callApi(
        '/users/permissions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsUpdate operation.
     * @callback module:api/UsersApi~usersPermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectPermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this permission.
     * @param {module:model/WritableObjectPermission} writableObjectPermission 
     * @param {module:api/UsersApi~usersPermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectPermission}
     */
    usersPermissionsUpdate(id, writableObjectPermission, callback) {
      let postBody = writableObjectPermission;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPermissionsUpdate");
      }
      // verify the required parameter 'writableObjectPermission' is set
      if (writableObjectPermission === undefined || writableObjectPermission === null) {
        throw new Error("Missing the required parameter 'writableObjectPermission' when calling usersPermissionsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ObjectPermission;
      return this.apiClient.callApi(
        '/users/permissions/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensBulkDelete operation.
     * @callback module:api/UsersApi~usersTokensBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/UsersApi~usersTokensBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersTokensBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/tokens/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensBulkPartialUpdate operation.
     * @callback module:api/UsersApi~usersTokensBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableToken} writableToken 
     * @param {module:api/UsersApi~usersTokensBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    usersTokensBulkPartialUpdate(writableToken, callback) {
      let postBody = writableToken;
      // verify the required parameter 'writableToken' is set
      if (writableToken === undefined || writableToken === null) {
        throw new Error("Missing the required parameter 'writableToken' when calling usersTokensBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/users/tokens/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensBulkUpdate operation.
     * @callback module:api/UsersApi~usersTokensBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableToken} writableToken 
     * @param {module:api/UsersApi~usersTokensBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    usersTokensBulkUpdate(writableToken, callback) {
      let postBody = writableToken;
      // verify the required parameter 'writableToken' is set
      if (writableToken === undefined || writableToken === null) {
        throw new Error("Missing the required parameter 'writableToken' when calling usersTokensBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/users/tokens/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensCreate operation.
     * @callback module:api/UsersApi~usersTokensCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableToken} writableToken 
     * @param {module:api/UsersApi~usersTokensCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    usersTokensCreate(writableToken, callback) {
      let postBody = writableToken;
      // verify the required parameter 'writableToken' is set
      if (writableToken === undefined || writableToken === null) {
        throw new Error("Missing the required parameter 'writableToken' when calling usersTokensCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/users/tokens/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensDelete operation.
     * @callback module:api/UsersApi~usersTokensDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this token.
     * @param {module:api/UsersApi~usersTokensDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersTokensDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTokensDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/tokens/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensList operation.
     * @callback module:api/UsersApi~usersTokensListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersTokensList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [key] 
     * @param {String} [writeEnabled] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [userId] 
     * @param {String} [user] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [expires] 
     * @param {String} [expiresGte] 
     * @param {String} [expiresLte] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [keyN] 
     * @param {String} [keyIc] 
     * @param {String} [keyNic] 
     * @param {String} [keyIew] 
     * @param {String} [keyNiew] 
     * @param {String} [keyIsw] 
     * @param {String} [keyNisw] 
     * @param {String} [keyIe] 
     * @param {String} [keyNie] 
     * @param {String} [keyEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [userIdN] 
     * @param {String} [userN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/UsersApi~usersTokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersTokensList200Response}
     */
    usersTokensList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'key': opts['key'],
        'write_enabled': opts['writeEnabled'],
        'description': opts['description'],
        'q': opts['q'],
        'user_id': opts['userId'],
        'user': opts['user'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'expires': opts['expires'],
        'expires__gte': opts['expiresGte'],
        'expires__lte': opts['expiresLte'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'key__n': opts['keyN'],
        'key__ic': opts['keyIc'],
        'key__nic': opts['keyNic'],
        'key__iew': opts['keyIew'],
        'key__niew': opts['keyNiew'],
        'key__isw': opts['keyIsw'],
        'key__nisw': opts['keyNisw'],
        'key__ie': opts['keyIe'],
        'key__nie': opts['keyNie'],
        'key__empty': opts['keyEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'user_id__n': opts['userIdN'],
        'user__n': opts['userN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersTokensList200Response;
      return this.apiClient.callApi(
        '/users/tokens/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensPartialUpdate operation.
     * @callback module:api/UsersApi~usersTokensPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this token.
     * @param {module:model/WritableToken} writableToken 
     * @param {module:api/UsersApi~usersTokensPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    usersTokensPartialUpdate(id, writableToken, callback) {
      let postBody = writableToken;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTokensPartialUpdate");
      }
      // verify the required parameter 'writableToken' is set
      if (writableToken === undefined || writableToken === null) {
        throw new Error("Missing the required parameter 'writableToken' when calling usersTokensPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/users/tokens/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensProvisionCreate operation.
     * @callback module:api/UsersApi~usersTokensProvisionCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Non-authenticated REST API endpoint via which a user may create a Token.
     * @param {module:api/UsersApi~usersTokensProvisionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersTokensProvisionCreate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/tokens/provision/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensRead operation.
     * @callback module:api/UsersApi~usersTokensReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this token.
     * @param {module:api/UsersApi~usersTokensReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    usersTokensRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTokensRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/users/tokens/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTokensUpdate operation.
     * @callback module:api/UsersApi~usersTokensUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this token.
     * @param {module:model/WritableToken} writableToken 
     * @param {module:api/UsersApi~usersTokensUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    usersTokensUpdate(id, writableToken, callback) {
      let postBody = writableToken;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersTokensUpdate");
      }
      // verify the required parameter 'writableToken' is set
      if (writableToken === undefined || writableToken === null) {
        throw new Error("Missing the required parameter 'writableToken' when calling usersTokensUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/users/tokens/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersBulkDelete operation.
     * @callback module:api/UsersApi~usersUsersBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/UsersApi~usersUsersBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUsersBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/users/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersBulkPartialUpdate operation.
     * @callback module:api/UsersApi~usersUsersBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableUser} writableUser 
     * @param {module:api/UsersApi~usersUsersBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUsersBulkPartialUpdate(writableUser, callback) {
      let postBody = writableUser;
      // verify the required parameter 'writableUser' is set
      if (writableUser === undefined || writableUser === null) {
        throw new Error("Missing the required parameter 'writableUser' when calling usersUsersBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/users/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersBulkUpdate operation.
     * @callback module:api/UsersApi~usersUsersBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableUser} writableUser 
     * @param {module:api/UsersApi~usersUsersBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUsersBulkUpdate(writableUser, callback) {
      let postBody = writableUser;
      // verify the required parameter 'writableUser' is set
      if (writableUser === undefined || writableUser === null) {
        throw new Error("Missing the required parameter 'writableUser' when calling usersUsersBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/users/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersCreate operation.
     * @callback module:api/UsersApi~usersUsersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableUser} writableUser 
     * @param {module:api/UsersApi~usersUsersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUsersCreate(writableUser, callback) {
      let postBody = writableUser;
      // verify the required parameter 'writableUser' is set
      if (writableUser === undefined || writableUser === null) {
        throw new Error("Missing the required parameter 'writableUser' when calling usersUsersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersDelete operation.
     * @callback module:api/UsersApi~usersUsersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:api/UsersApi~usersUsersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUsersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/users/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersList operation.
     * @callback module:api/UsersApi~usersUsersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersUsersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [username] 
     * @param {String} [firstName] 
     * @param {String} [lastName] 
     * @param {String} [email] 
     * @param {String} [isStaff] 
     * @param {String} [isActive] 
     * @param {String} [q] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [usernameN] 
     * @param {String} [usernameIc] 
     * @param {String} [usernameNic] 
     * @param {String} [usernameIew] 
     * @param {String} [usernameNiew] 
     * @param {String} [usernameIsw] 
     * @param {String} [usernameNisw] 
     * @param {String} [usernameIe] 
     * @param {String} [usernameNie] 
     * @param {String} [usernameEmpty] 
     * @param {String} [firstNameN] 
     * @param {String} [firstNameIc] 
     * @param {String} [firstNameNic] 
     * @param {String} [firstNameIew] 
     * @param {String} [firstNameNiew] 
     * @param {String} [firstNameIsw] 
     * @param {String} [firstNameNisw] 
     * @param {String} [firstNameIe] 
     * @param {String} [firstNameNie] 
     * @param {String} [firstNameEmpty] 
     * @param {String} [lastNameN] 
     * @param {String} [lastNameIc] 
     * @param {String} [lastNameNic] 
     * @param {String} [lastNameIew] 
     * @param {String} [lastNameNiew] 
     * @param {String} [lastNameIsw] 
     * @param {String} [lastNameNisw] 
     * @param {String} [lastNameIe] 
     * @param {String} [lastNameNie] 
     * @param {String} [lastNameEmpty] 
     * @param {String} [emailN] 
     * @param {String} [emailIc] 
     * @param {String} [emailNic] 
     * @param {String} [emailIew] 
     * @param {String} [emailNiew] 
     * @param {String} [emailIsw] 
     * @param {String} [emailNisw] 
     * @param {String} [emailIe] 
     * @param {String} [emailNie] 
     * @param {String} [emailEmpty] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/UsersApi~usersUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersUsersList200Response}
     */
    usersUsersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'username': opts['username'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'email': opts['email'],
        'is_staff': opts['isStaff'],
        'is_active': opts['isActive'],
        'q': opts['q'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'username__n': opts['usernameN'],
        'username__ic': opts['usernameIc'],
        'username__nic': opts['usernameNic'],
        'username__iew': opts['usernameIew'],
        'username__niew': opts['usernameNiew'],
        'username__isw': opts['usernameIsw'],
        'username__nisw': opts['usernameNisw'],
        'username__ie': opts['usernameIe'],
        'username__nie': opts['usernameNie'],
        'username__empty': opts['usernameEmpty'],
        'first_name__n': opts['firstNameN'],
        'first_name__ic': opts['firstNameIc'],
        'first_name__nic': opts['firstNameNic'],
        'first_name__iew': opts['firstNameIew'],
        'first_name__niew': opts['firstNameNiew'],
        'first_name__isw': opts['firstNameIsw'],
        'first_name__nisw': opts['firstNameNisw'],
        'first_name__ie': opts['firstNameIe'],
        'first_name__nie': opts['firstNameNie'],
        'first_name__empty': opts['firstNameEmpty'],
        'last_name__n': opts['lastNameN'],
        'last_name__ic': opts['lastNameIc'],
        'last_name__nic': opts['lastNameNic'],
        'last_name__iew': opts['lastNameIew'],
        'last_name__niew': opts['lastNameNiew'],
        'last_name__isw': opts['lastNameIsw'],
        'last_name__nisw': opts['lastNameNisw'],
        'last_name__ie': opts['lastNameIe'],
        'last_name__nie': opts['lastNameNie'],
        'last_name__empty': opts['lastNameEmpty'],
        'email__n': opts['emailN'],
        'email__ic': opts['emailIc'],
        'email__nic': opts['emailNic'],
        'email__iew': opts['emailIew'],
        'email__niew': opts['emailNiew'],
        'email__isw': opts['emailIsw'],
        'email__nisw': opts['emailNisw'],
        'email__ie': opts['emailIe'],
        'email__nie': opts['emailNie'],
        'email__empty': opts['emailEmpty'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersUsersList200Response;
      return this.apiClient.callApi(
        '/users/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersPartialUpdate operation.
     * @callback module:api/UsersApi~usersUsersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:model/WritableUser} writableUser 
     * @param {module:api/UsersApi~usersUsersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUsersPartialUpdate(id, writableUser, callback) {
      let postBody = writableUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersPartialUpdate");
      }
      // verify the required parameter 'writableUser' is set
      if (writableUser === undefined || writableUser === null) {
        throw new Error("Missing the required parameter 'writableUser' when calling usersUsersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/users/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersRead operation.
     * @callback module:api/UsersApi~usersUsersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:api/UsersApi~usersUsersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUsersRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/users/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUsersUpdate operation.
     * @callback module:api/UsersApi~usersUsersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this user.
     * @param {module:model/WritableUser} writableUser 
     * @param {module:api/UsersApi~usersUsersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUsersUpdate(id, writableUser, callback) {
      let postBody = writableUser;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersUsersUpdate");
      }
      // verify the required parameter 'writableUser' is set
      if (writableUser === undefined || writableUser === null) {
        throw new Error("Missing the required parameter 'writableUser' when calling usersUsersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/users/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
