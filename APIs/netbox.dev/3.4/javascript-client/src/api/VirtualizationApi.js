/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cluster from '../model/Cluster';
import ClusterGroup from '../model/ClusterGroup';
import ClusterType from '../model/ClusterType';
import VMInterface from '../model/VMInterface';
import VirtualMachineWithConfigContext from '../model/VirtualMachineWithConfigContext';
import VirtualizationClusterGroupsList200Response from '../model/VirtualizationClusterGroupsList200Response';
import VirtualizationClusterTypesList200Response from '../model/VirtualizationClusterTypesList200Response';
import VirtualizationClustersList200Response from '../model/VirtualizationClustersList200Response';
import VirtualizationInterfacesList200Response from '../model/VirtualizationInterfacesList200Response';
import VirtualizationVirtualMachinesList200Response from '../model/VirtualizationVirtualMachinesList200Response';
import WritableCluster from '../model/WritableCluster';
import WritableVMInterface from '../model/WritableVMInterface';
import WritableVirtualMachineWithConfigContext from '../model/WritableVirtualMachineWithConfigContext';

/**
* Virtualization service.
* @module api/VirtualizationApi
* @version 3.4
*/
export default class VirtualizationApi {

    /**
    * Constructs a new VirtualizationApi. 
    * @alias module:api/VirtualizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the virtualizationClusterGroupsBulkDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClusterGroupsBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsBulkPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsBulkPartialUpdate(clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsBulkUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsBulkUpdate(clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsCreate(clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClusterGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsList operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationClusterGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [contact] 
     * @param {String} [contactRole] 
     * @param {String} [contactGroup] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [contactN] 
     * @param {String} [contactRoleN] 
     * @param {String} [contactGroupN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationClusterGroupsList200Response}
     */
    virtualizationClusterGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'contact': opts['contact'],
        'contact_role': opts['contactRole'],
        'contact_group': opts['contactGroup'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'contact__n': opts['contactN'],
        'contact_role__n': opts['contactRoleN'],
        'contact_group__n': opts['contactGroupN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationClusterGroupsList200Response;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsPartialUpdate(id, clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsPartialUpdate");
      }
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsRead operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterGroupsUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster group.
     * @param {module:model/ClusterGroup} clusterGroup 
     * @param {module:api/VirtualizationApi~virtualizationClusterGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterGroup}
     */
    virtualizationClusterGroupsUpdate(id, clusterGroup, callback) {
      let postBody = clusterGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterGroupsUpdate");
      }
      // verify the required parameter 'clusterGroup' is set
      if (clusterGroup === undefined || clusterGroup === null) {
        throw new Error("Missing the required parameter 'clusterGroup' when calling virtualizationClusterGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterGroup;
      return this.apiClient.callApi(
        '/virtualization/cluster-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesBulkDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClusterTypesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesBulkPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesBulkPartialUpdate(clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesBulkUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesBulkUpdate(clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesCreate(clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClusterTypesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesList operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationClusterTypesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [slugEmpty] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationClusterTypesList200Response}
     */
    virtualizationClusterTypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'slug__empty': opts['slugEmpty'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationClusterTypesList200Response;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesPartialUpdate(id, clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesPartialUpdate");
      }
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClusterTypesUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClusterTypesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster type.
     * @param {module:model/ClusterType} clusterType 
     * @param {module:api/VirtualizationApi~virtualizationClusterTypesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterType}
     */
    virtualizationClusterTypesUpdate(id, clusterType, callback) {
      let postBody = clusterType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClusterTypesUpdate");
      }
      // verify the required parameter 'clusterType' is set
      if (clusterType === undefined || clusterType === null) {
        throw new Error("Missing the required parameter 'clusterType' when calling virtualizationClusterTypesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClusterType;
      return this.apiClient.callApi(
        '/virtualization/cluster-types/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersBulkDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VirtualizationApi~virtualizationClustersBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClustersBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersBulkPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersBulkPartialUpdate(writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersBulkUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersBulkUpdate(writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersCreate(writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:api/VirtualizationApi~virtualizationClustersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationClustersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersList operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationClustersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [contact] 
     * @param {String} [contactRole] 
     * @param {String} [contactGroup] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteGroupId] 
     * @param {String} [siteGroup] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [typeId] 
     * @param {String} [type] 
     * @param {String} [status] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [contactN] 
     * @param {String} [contactRoleN] 
     * @param {String} [contactGroupN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteGroupIdN] 
     * @param {String} [siteGroupN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [typeIdN] 
     * @param {String} [typeN] 
     * @param {String} [statusN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationClustersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationClustersList200Response}
     */
    virtualizationClustersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'contact': opts['contact'],
        'contact_role': opts['contactRole'],
        'contact_group': opts['contactGroup'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_group_id': opts['siteGroupId'],
        'site_group': opts['siteGroup'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'type_id': opts['typeId'],
        'type': opts['type'],
        'status': opts['status'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'contact__n': opts['contactN'],
        'contact_role__n': opts['contactRoleN'],
        'contact_group__n': opts['contactGroupN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_group_id__n': opts['siteGroupIdN'],
        'site_group__n': opts['siteGroupN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'type_id__n': opts['typeIdN'],
        'type__n': opts['typeN'],
        'status__n': opts['statusN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationClustersList200Response;
      return this.apiClient.callApi(
        '/virtualization/clusters/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersPartialUpdate(id, writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersPartialUpdate");
      }
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersRead operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:api/VirtualizationApi~virtualizationClustersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationClustersUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationClustersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cluster.
     * @param {module:model/WritableCluster} writableCluster 
     * @param {module:api/VirtualizationApi~virtualizationClustersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    virtualizationClustersUpdate(id, writableCluster, callback) {
      let postBody = writableCluster;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationClustersUpdate");
      }
      // verify the required parameter 'writableCluster' is set
      if (writableCluster === undefined || writableCluster === null) {
        throw new Error("Missing the required parameter 'writableCluster' when calling virtualizationClustersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/virtualization/clusters/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesBulkDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationInterfacesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesBulkPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVMInterface} writableVMInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMInterface}
     */
    virtualizationInterfacesBulkPartialUpdate(writableVMInterface, callback) {
      let postBody = writableVMInterface;
      // verify the required parameter 'writableVMInterface' is set
      if (writableVMInterface === undefined || writableVMInterface === null) {
        throw new Error("Missing the required parameter 'writableVMInterface' when calling virtualizationInterfacesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMInterface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesBulkUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVMInterface} writableVMInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMInterface}
     */
    virtualizationInterfacesBulkUpdate(writableVMInterface, callback) {
      let postBody = writableVMInterface;
      // verify the required parameter 'writableVMInterface' is set
      if (writableVMInterface === undefined || writableVMInterface === null) {
        throw new Error("Missing the required parameter 'writableVMInterface' when calling virtualizationInterfacesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMInterface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVMInterface} writableVMInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMInterface}
     */
    virtualizationInterfacesCreate(writableVMInterface, callback) {
      let postBody = writableVMInterface;
      // verify the required parameter 'writableVMInterface' is set
      if (writableVMInterface === undefined || writableVMInterface === null) {
        throw new Error("Missing the required parameter 'writableVMInterface' when calling virtualizationInterfacesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMInterface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/VirtualizationApi~virtualizationInterfacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationInterfacesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesList operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationInterfacesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [enabled] 
     * @param {String} [mtu] 
     * @param {String} [description] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [clusterId] 
     * @param {String} [cluster] 
     * @param {String} [virtualMachineId] 
     * @param {String} [virtualMachine] 
     * @param {String} [parentId] 
     * @param {String} [bridgeId] 
     * @param {String} [macAddress] 
     * @param {String} [vrfId] 
     * @param {String} [vrf] 
     * @param {String} [l2vpnId] 
     * @param {String} [l2vpn] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [mtuN] 
     * @param {String} [mtuLte] 
     * @param {String} [mtuLt] 
     * @param {String} [mtuGte] 
     * @param {String} [mtuGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [descriptionEmpty] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [clusterIdN] 
     * @param {String} [clusterN] 
     * @param {String} [virtualMachineIdN] 
     * @param {String} [virtualMachineN] 
     * @param {String} [parentIdN] 
     * @param {String} [bridgeIdN] 
     * @param {String} [macAddressN] 
     * @param {String} [macAddressIc] 
     * @param {String} [macAddressNic] 
     * @param {String} [macAddressIew] 
     * @param {String} [macAddressNiew] 
     * @param {String} [macAddressIsw] 
     * @param {String} [macAddressNisw] 
     * @param {String} [macAddressIe] 
     * @param {String} [macAddressNie] 
     * @param {String} [vrfIdN] 
     * @param {String} [vrfN] 
     * @param {String} [l2vpnIdN] 
     * @param {String} [l2vpnN] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationInterfacesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationInterfacesList200Response}
     */
    virtualizationInterfacesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'enabled': opts['enabled'],
        'mtu': opts['mtu'],
        'description': opts['description'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'cluster_id': opts['clusterId'],
        'cluster': opts['cluster'],
        'virtual_machine_id': opts['virtualMachineId'],
        'virtual_machine': opts['virtualMachine'],
        'parent_id': opts['parentId'],
        'bridge_id': opts['bridgeId'],
        'mac_address': opts['macAddress'],
        'vrf_id': opts['vrfId'],
        'vrf': opts['vrf'],
        'l2vpn_id': opts['l2vpnId'],
        'l2vpn': opts['l2vpn'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'mtu__n': opts['mtuN'],
        'mtu__lte': opts['mtuLte'],
        'mtu__lt': opts['mtuLt'],
        'mtu__gte': opts['mtuGte'],
        'mtu__gt': opts['mtuGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'description__empty': opts['descriptionEmpty'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'cluster_id__n': opts['clusterIdN'],
        'cluster__n': opts['clusterN'],
        'virtual_machine_id__n': opts['virtualMachineIdN'],
        'virtual_machine__n': opts['virtualMachineN'],
        'parent_id__n': opts['parentIdN'],
        'bridge_id__n': opts['bridgeIdN'],
        'mac_address__n': opts['macAddressN'],
        'mac_address__ic': opts['macAddressIc'],
        'mac_address__nic': opts['macAddressNic'],
        'mac_address__iew': opts['macAddressIew'],
        'mac_address__niew': opts['macAddressNiew'],
        'mac_address__isw': opts['macAddressIsw'],
        'mac_address__nisw': opts['macAddressNisw'],
        'mac_address__ie': opts['macAddressIe'],
        'mac_address__nie': opts['macAddressNie'],
        'vrf_id__n': opts['vrfIdN'],
        'vrf__n': opts['vrfN'],
        'l2vpn_id__n': opts['l2vpnIdN'],
        'l2vpn__n': opts['l2vpnN'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationInterfacesList200Response;
      return this.apiClient.callApi(
        '/virtualization/interfaces/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableVMInterface} writableVMInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMInterface}
     */
    virtualizationInterfacesPartialUpdate(id, writableVMInterface, callback) {
      let postBody = writableVMInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesPartialUpdate");
      }
      // verify the required parameter 'writableVMInterface' is set
      if (writableVMInterface === undefined || writableVMInterface === null) {
        throw new Error("Missing the required parameter 'writableVMInterface' when calling virtualizationInterfacesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMInterface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/VirtualizationApi~virtualizationInterfacesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMInterface}
     */
    virtualizationInterfacesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VMInterface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationInterfacesUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationInterfacesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableVMInterface} writableVMInterface 
     * @param {module:api/VirtualizationApi~virtualizationInterfacesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMInterface}
     */
    virtualizationInterfacesUpdate(id, writableVMInterface, callback) {
      let postBody = writableVMInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationInterfacesUpdate");
      }
      // verify the required parameter 'writableVMInterface' is set
      if (writableVMInterface === undefined || writableVMInterface === null) {
        throw new Error("Missing the required parameter 'writableVMInterface' when calling virtualizationInterfacesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMInterface;
      return this.apiClient.callApi(
        '/virtualization/interfaces/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesBulkDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesBulkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesBulkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationVirtualMachinesBulkDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesBulkPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesBulkPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVirtualMachineWithConfigContext} writableVirtualMachineWithConfigContext 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesBulkPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesBulkPartialUpdate(writableVirtualMachineWithConfigContext, callback) {
      let postBody = writableVirtualMachineWithConfigContext;
      // verify the required parameter 'writableVirtualMachineWithConfigContext' is set
      if (writableVirtualMachineWithConfigContext === undefined || writableVirtualMachineWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachineWithConfigContext' when calling virtualizationVirtualMachinesBulkPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesBulkUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesBulkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVirtualMachineWithConfigContext} writableVirtualMachineWithConfigContext 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesBulkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesBulkUpdate(writableVirtualMachineWithConfigContext, callback) {
      let postBody = writableVirtualMachineWithConfigContext;
      // verify the required parameter 'writableVirtualMachineWithConfigContext' is set
      if (writableVirtualMachineWithConfigContext === undefined || writableVirtualMachineWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachineWithConfigContext' when calling virtualizationVirtualMachinesBulkUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesCreate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVirtualMachineWithConfigContext} writableVirtualMachineWithConfigContext 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesCreate(writableVirtualMachineWithConfigContext, callback) {
      let postBody = writableVirtualMachineWithConfigContext;
      // verify the required parameter 'writableVirtualMachineWithConfigContext' is set
      if (writableVirtualMachineWithConfigContext === undefined || writableVirtualMachineWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachineWithConfigContext' when calling virtualizationVirtualMachinesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesDelete operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualizationVirtualMachinesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesList operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualizationVirtualMachinesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [cluster] 
     * @param {String} [vcpus] 
     * @param {String} [memory] 
     * @param {String} [disk] 
     * @param {String} [created] 
     * @param {String} [lastUpdated] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [contact] 
     * @param {String} [contactRole] 
     * @param {String} [contactGroup] 
     * @param {String} [localContextData] 
     * @param {String} [status] 
     * @param {String} [clusterGroupId] 
     * @param {String} [clusterGroup] 
     * @param {String} [clusterTypeId] 
     * @param {String} [clusterType] 
     * @param {String} [clusterId] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteGroupId] 
     * @param {String} [siteGroup] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [name] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [platformId] 
     * @param {String} [platform] 
     * @param {String} [macAddress] 
     * @param {String} [hasPrimaryIp] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [clusterN] 
     * @param {String} [vcpusN] 
     * @param {String} [vcpusLte] 
     * @param {String} [vcpusLt] 
     * @param {String} [vcpusGte] 
     * @param {String} [vcpusGt] 
     * @param {String} [memoryN] 
     * @param {String} [memoryLte] 
     * @param {String} [memoryLt] 
     * @param {String} [memoryGte] 
     * @param {String} [memoryGt] 
     * @param {String} [diskN] 
     * @param {String} [diskLte] 
     * @param {String} [diskLt] 
     * @param {String} [diskGte] 
     * @param {String} [diskGt] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [lastUpdatedN] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [lastUpdatedLt] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedGt] 
     * @param {String} [tagN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [contactN] 
     * @param {String} [contactRoleN] 
     * @param {String} [contactGroupN] 
     * @param {String} [statusN] 
     * @param {String} [clusterGroupIdN] 
     * @param {String} [clusterGroupN] 
     * @param {String} [clusterTypeIdN] 
     * @param {String} [clusterTypeN] 
     * @param {String} [clusterIdN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteGroupIdN] 
     * @param {String} [siteGroupN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [nameEmpty] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [platformIdN] 
     * @param {String} [platformN] 
     * @param {String} [macAddressN] 
     * @param {String} [macAddressIc] 
     * @param {String} [macAddressNic] 
     * @param {String} [macAddressIew] 
     * @param {String} [macAddressNiew] 
     * @param {String} [macAddressIsw] 
     * @param {String} [macAddressNisw] 
     * @param {String} [macAddressIe] 
     * @param {String} [macAddressNie] 
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualizationVirtualMachinesList200Response}
     */
    virtualizationVirtualMachinesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'cluster': opts['cluster'],
        'vcpus': opts['vcpus'],
        'memory': opts['memory'],
        'disk': opts['disk'],
        'created': opts['created'],
        'last_updated': opts['lastUpdated'],
        'q': opts['q'],
        'tag': opts['tag'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'contact': opts['contact'],
        'contact_role': opts['contactRole'],
        'contact_group': opts['contactGroup'],
        'local_context_data': opts['localContextData'],
        'status': opts['status'],
        'cluster_group_id': opts['clusterGroupId'],
        'cluster_group': opts['clusterGroup'],
        'cluster_type_id': opts['clusterTypeId'],
        'cluster_type': opts['clusterType'],
        'cluster_id': opts['clusterId'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_group_id': opts['siteGroupId'],
        'site_group': opts['siteGroup'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'name': opts['name'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'platform_id': opts['platformId'],
        'platform': opts['platform'],
        'mac_address': opts['macAddress'],
        'has_primary_ip': opts['hasPrimaryIp'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'cluster__n': opts['clusterN'],
        'vcpus__n': opts['vcpusN'],
        'vcpus__lte': opts['vcpusLte'],
        'vcpus__lt': opts['vcpusLt'],
        'vcpus__gte': opts['vcpusGte'],
        'vcpus__gt': opts['vcpusGt'],
        'memory__n': opts['memoryN'],
        'memory__lte': opts['memoryLte'],
        'memory__lt': opts['memoryLt'],
        'memory__gte': opts['memoryGte'],
        'memory__gt': opts['memoryGt'],
        'disk__n': opts['diskN'],
        'disk__lte': opts['diskLte'],
        'disk__lt': opts['diskLt'],
        'disk__gte': opts['diskGte'],
        'disk__gt': opts['diskGt'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'last_updated__n': opts['lastUpdatedN'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'last_updated__lt': opts['lastUpdatedLt'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__gt': opts['lastUpdatedGt'],
        'tag__n': opts['tagN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'contact__n': opts['contactN'],
        'contact_role__n': opts['contactRoleN'],
        'contact_group__n': opts['contactGroupN'],
        'status__n': opts['statusN'],
        'cluster_group_id__n': opts['clusterGroupIdN'],
        'cluster_group__n': opts['clusterGroupN'],
        'cluster_type_id__n': opts['clusterTypeIdN'],
        'cluster_type__n': opts['clusterTypeN'],
        'cluster_id__n': opts['clusterIdN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_group_id__n': opts['siteGroupIdN'],
        'site_group__n': opts['siteGroupN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'name__empty': opts['nameEmpty'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'platform_id__n': opts['platformIdN'],
        'platform__n': opts['platformN'],
        'mac_address__n': opts['macAddressN'],
        'mac_address__ic': opts['macAddressIc'],
        'mac_address__nic': opts['macAddressNic'],
        'mac_address__iew': opts['macAddressIew'],
        'mac_address__niew': opts['macAddressNiew'],
        'mac_address__isw': opts['macAddressIsw'],
        'mac_address__nisw': opts['macAddressNisw'],
        'mac_address__ie': opts['macAddressIe'],
        'mac_address__nie': opts['macAddressNie'],
        'ordering': opts['ordering'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualizationVirtualMachinesList200Response;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesPartialUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:model/WritableVirtualMachineWithConfigContext} writableVirtualMachineWithConfigContext 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesPartialUpdate(id, writableVirtualMachineWithConfigContext, callback) {
      let postBody = writableVirtualMachineWithConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesPartialUpdate");
      }
      // verify the required parameter 'writableVirtualMachineWithConfigContext' is set
      if (writableVirtualMachineWithConfigContext === undefined || writableVirtualMachineWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachineWithConfigContext' when calling virtualizationVirtualMachinesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesRead operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualizationVirtualMachinesUpdate operation.
     * @callback module:api/VirtualizationApi~virtualizationVirtualMachinesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual machine.
     * @param {module:model/WritableVirtualMachineWithConfigContext} writableVirtualMachineWithConfigContext 
     * @param {module:api/VirtualizationApi~virtualizationVirtualMachinesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineWithConfigContext}
     */
    virtualizationVirtualMachinesUpdate(id, writableVirtualMachineWithConfigContext, callback) {
      let postBody = writableVirtualMachineWithConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualizationVirtualMachinesUpdate");
      }
      // verify the required parameter 'writableVirtualMachineWithConfigContext' is set
      if (writableVirtualMachineWithConfigContext === undefined || writableVirtualMachineWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableVirtualMachineWithConfigContext' when calling virtualizationVirtualMachinesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachineWithConfigContext;
      return this.apiClient.callApi(
        '/virtualization/virtual-machines/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
