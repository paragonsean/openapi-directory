# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, created: datetime=None, description: str=None, display: str=None, id: int=None, last_updated: datetime=None, name: str=None, slug: str=None, tagged_items: int=None, url: str=None):
        """Tag - a model defined in OpenAPI

        :param color: The color of this Tag.
        :param created: The created of this Tag.
        :param description: The description of this Tag.
        :param display: The display of this Tag.
        :param id: The id of this Tag.
        :param last_updated: The last_updated of this Tag.
        :param name: The name of this Tag.
        :param slug: The slug of this Tag.
        :param tagged_items: The tagged_items of this Tag.
        :param url: The url of this Tag.
        """
        self.openapi_types = {
            'color': str,
            'created': datetime,
            'description': str,
            'display': str,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'slug': str,
            'tagged_items': int,
            'url': str
        }

        self.attribute_map = {
            'color': 'color',
            'created': 'created',
            'description': 'description',
            'display': 'display',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'slug': 'slug',
            'tagged_items': 'tagged_items',
            'url': 'url'
        }

        self._color = color
        self._created = created
        self._description = description
        self._display = display
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._slug = slug
        self._tagged_items = tagged_items
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Tag.


        :return: The color of this Tag.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Tag.


        :param color: The color of this Tag.
        :type color: str
        """
        if color is not None and len(color) > 6:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `6`")
        if color is not None and len(color) < 1:
            raise ValueError("Invalid value for `color`, length must be greater than or equal to `1`")
        if color is not None and not re.search(r'^[0-9a-f]{6}$', color):
            raise ValueError("Invalid value for `color`, must be a follow pattern or equal to `/^[0-9a-f]{6}$/`")

        self._color = color

    @property
    def created(self):
        """Gets the created of this Tag.


        :return: The created of this Tag.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Tag.


        :param created: The created of this Tag.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Tag.


        :return: The description of this Tag.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tag.


        :param description: The description of this Tag.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this Tag.


        :return: The display of this Tag.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Tag.


        :param display: The display of this Tag.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this Tag.


        :return: The id of this Tag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.


        :param id: The id of this Tag.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Tag.


        :return: The last_updated of this Tag.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Tag.


        :param last_updated: The last_updated of this Tag.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Tag.


        :return: The name of this Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.


        :param name: The name of this Tag.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Tag.


        :return: The slug of this Tag.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Tag.


        :param slug: The slug of this Tag.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 100:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `100`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")

        self._slug = slug

    @property
    def tagged_items(self):
        """Gets the tagged_items of this Tag.


        :return: The tagged_items of this Tag.
        :rtype: int
        """
        return self._tagged_items

    @tagged_items.setter
    def tagged_items(self, tagged_items):
        """Sets the tagged_items of this Tag.


        :param tagged_items: The tagged_items of this Tag.
        :type tagged_items: int
        """

        self._tagged_items = tagged_items

    @property
    def url(self):
        """Gets the url of this Tag.


        :return: The url of this Tag.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Tag.


        :param url: The url of this Tag.
        :type url: str
        """

        self._url = url
