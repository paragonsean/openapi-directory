# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_headers: str=None, body_template: str=None, ca_file_path: str=None, conditions: object=None, content_types: list[str]=None, created: datetime=None, display: str=None, enabled: bool=None, http_content_type: str=None, http_method: str=None, id: int=None, last_updated: datetime=None, name: str=None, payload_url: str=None, secret: str=None, ssl_verification: bool=None, type_create: bool=None, type_delete: bool=None, type_update: bool=None, url: str=None):
        """Webhook - a model defined in OpenAPI

        :param additional_headers: The additional_headers of this Webhook.
        :param body_template: The body_template of this Webhook.
        :param ca_file_path: The ca_file_path of this Webhook.
        :param conditions: The conditions of this Webhook.
        :param content_types: The content_types of this Webhook.
        :param created: The created of this Webhook.
        :param display: The display of this Webhook.
        :param enabled: The enabled of this Webhook.
        :param http_content_type: The http_content_type of this Webhook.
        :param http_method: The http_method of this Webhook.
        :param id: The id of this Webhook.
        :param last_updated: The last_updated of this Webhook.
        :param name: The name of this Webhook.
        :param payload_url: The payload_url of this Webhook.
        :param secret: The secret of this Webhook.
        :param ssl_verification: The ssl_verification of this Webhook.
        :param type_create: The type_create of this Webhook.
        :param type_delete: The type_delete of this Webhook.
        :param type_update: The type_update of this Webhook.
        :param url: The url of this Webhook.
        """
        self.openapi_types = {
            'additional_headers': str,
            'body_template': str,
            'ca_file_path': str,
            'conditions': object,
            'content_types': list[str],
            'created': datetime,
            'display': str,
            'enabled': bool,
            'http_content_type': str,
            'http_method': str,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'payload_url': str,
            'secret': str,
            'ssl_verification': bool,
            'type_create': bool,
            'type_delete': bool,
            'type_update': bool,
            'url': str
        }

        self.attribute_map = {
            'additional_headers': 'additional_headers',
            'body_template': 'body_template',
            'ca_file_path': 'ca_file_path',
            'conditions': 'conditions',
            'content_types': 'content_types',
            'created': 'created',
            'display': 'display',
            'enabled': 'enabled',
            'http_content_type': 'http_content_type',
            'http_method': 'http_method',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'payload_url': 'payload_url',
            'secret': 'secret',
            'ssl_verification': 'ssl_verification',
            'type_create': 'type_create',
            'type_delete': 'type_delete',
            'type_update': 'type_update',
            'url': 'url'
        }

        self._additional_headers = additional_headers
        self._body_template = body_template
        self._ca_file_path = ca_file_path
        self._conditions = conditions
        self._content_types = content_types
        self._created = created
        self._display = display
        self._enabled = enabled
        self._http_content_type = http_content_type
        self._http_method = http_method
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._payload_url = payload_url
        self._secret = secret
        self._ssl_verification = ssl_verification
        self._type_create = type_create
        self._type_delete = type_delete
        self._type_update = type_update
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_headers(self):
        """Gets the additional_headers of this Webhook.

        User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).

        :return: The additional_headers of this Webhook.
        :rtype: str
        """
        return self._additional_headers

    @additional_headers.setter
    def additional_headers(self, additional_headers):
        """Sets the additional_headers of this Webhook.

        User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).

        :param additional_headers: The additional_headers of this Webhook.
        :type additional_headers: str
        """

        self._additional_headers = additional_headers

    @property
    def body_template(self):
        """Gets the body_template of this Webhook.

        Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.

        :return: The body_template of this Webhook.
        :rtype: str
        """
        return self._body_template

    @body_template.setter
    def body_template(self, body_template):
        """Sets the body_template of this Webhook.

        Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.

        :param body_template: The body_template of this Webhook.
        :type body_template: str
        """

        self._body_template = body_template

    @property
    def ca_file_path(self):
        """Gets the ca_file_path of this Webhook.

        The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.

        :return: The ca_file_path of this Webhook.
        :rtype: str
        """
        return self._ca_file_path

    @ca_file_path.setter
    def ca_file_path(self, ca_file_path):
        """Sets the ca_file_path of this Webhook.

        The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.

        :param ca_file_path: The ca_file_path of this Webhook.
        :type ca_file_path: str
        """
        if ca_file_path is not None and len(ca_file_path) > 4096:
            raise ValueError("Invalid value for `ca_file_path`, length must be less than or equal to `4096`")

        self._ca_file_path = ca_file_path

    @property
    def conditions(self):
        """Gets the conditions of this Webhook.

        A set of conditions which determine whether the webhook will be generated.

        :return: The conditions of this Webhook.
        :rtype: object
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Webhook.

        A set of conditions which determine whether the webhook will be generated.

        :param conditions: The conditions of this Webhook.
        :type conditions: object
        """

        self._conditions = conditions

    @property
    def content_types(self):
        """Gets the content_types of this Webhook.


        :return: The content_types of this Webhook.
        :rtype: list[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this Webhook.


        :param content_types: The content_types of this Webhook.
        :type content_types: list[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")

        self._content_types = content_types

    @property
    def created(self):
        """Gets the created of this Webhook.


        :return: The created of this Webhook.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Webhook.


        :param created: The created of this Webhook.
        :type created: datetime
        """

        self._created = created

    @property
    def display(self):
        """Gets the display of this Webhook.


        :return: The display of this Webhook.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Webhook.


        :param display: The display of this Webhook.
        :type display: str
        """

        self._display = display

    @property
    def enabled(self):
        """Gets the enabled of this Webhook.


        :return: The enabled of this Webhook.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Webhook.


        :param enabled: The enabled of this Webhook.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def http_content_type(self):
        """Gets the http_content_type of this Webhook.

        The complete list of official content types is available <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">here</a>.

        :return: The http_content_type of this Webhook.
        :rtype: str
        """
        return self._http_content_type

    @http_content_type.setter
    def http_content_type(self, http_content_type):
        """Sets the http_content_type of this Webhook.

        The complete list of official content types is available <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">here</a>.

        :param http_content_type: The http_content_type of this Webhook.
        :type http_content_type: str
        """
        if http_content_type is not None and len(http_content_type) > 100:
            raise ValueError("Invalid value for `http_content_type`, length must be less than or equal to `100`")
        if http_content_type is not None and len(http_content_type) < 1:
            raise ValueError("Invalid value for `http_content_type`, length must be greater than or equal to `1`")

        self._http_content_type = http_content_type

    @property
    def http_method(self):
        """Gets the http_method of this Webhook.


        :return: The http_method of this Webhook.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Webhook.


        :param http_method: The http_method of this Webhook.
        :type http_method: str
        """
        allowed_values = ["GET", "POST", "PUT", "PATCH", "DELETE"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def id(self):
        """Gets the id of this Webhook.


        :return: The id of this Webhook.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.


        :param id: The id of this Webhook.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Webhook.


        :return: The last_updated of this Webhook.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Webhook.


        :param last_updated: The last_updated of this Webhook.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Webhook.


        :return: The name of this Webhook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Webhook.


        :param name: The name of this Webhook.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 150:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def payload_url(self):
        """Gets the payload_url of this Webhook.

        This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.

        :return: The payload_url of this Webhook.
        :rtype: str
        """
        return self._payload_url

    @payload_url.setter
    def payload_url(self, payload_url):
        """Sets the payload_url of this Webhook.

        This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.

        :param payload_url: The payload_url of this Webhook.
        :type payload_url: str
        """
        if payload_url is None:
            raise ValueError("Invalid value for `payload_url`, must not be `None`")
        if payload_url is not None and len(payload_url) > 500:
            raise ValueError("Invalid value for `payload_url`, length must be less than or equal to `500`")
        if payload_url is not None and len(payload_url) < 1:
            raise ValueError("Invalid value for `payload_url`, length must be greater than or equal to `1`")

        self._payload_url = payload_url

    @property
    def secret(self):
        """Gets the secret of this Webhook.

        When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.

        :return: The secret of this Webhook.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Webhook.

        When provided, the request will include a 'X-Hook-Signature' header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.

        :param secret: The secret of this Webhook.
        :type secret: str
        """
        if secret is not None and len(secret) > 255:
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `255`")

        self._secret = secret

    @property
    def ssl_verification(self):
        """Gets the ssl_verification of this Webhook.

        Enable SSL certificate verification. Disable with caution!

        :return: The ssl_verification of this Webhook.
        :rtype: bool
        """
        return self._ssl_verification

    @ssl_verification.setter
    def ssl_verification(self, ssl_verification):
        """Sets the ssl_verification of this Webhook.

        Enable SSL certificate verification. Disable with caution!

        :param ssl_verification: The ssl_verification of this Webhook.
        :type ssl_verification: bool
        """

        self._ssl_verification = ssl_verification

    @property
    def type_create(self):
        """Gets the type_create of this Webhook.

        Call this webhook when a matching object is created.

        :return: The type_create of this Webhook.
        :rtype: bool
        """
        return self._type_create

    @type_create.setter
    def type_create(self, type_create):
        """Sets the type_create of this Webhook.

        Call this webhook when a matching object is created.

        :param type_create: The type_create of this Webhook.
        :type type_create: bool
        """

        self._type_create = type_create

    @property
    def type_delete(self):
        """Gets the type_delete of this Webhook.

        Call this webhook when a matching object is deleted.

        :return: The type_delete of this Webhook.
        :rtype: bool
        """
        return self._type_delete

    @type_delete.setter
    def type_delete(self, type_delete):
        """Sets the type_delete of this Webhook.

        Call this webhook when a matching object is deleted.

        :param type_delete: The type_delete of this Webhook.
        :type type_delete: bool
        """

        self._type_delete = type_delete

    @property
    def type_update(self):
        """Gets the type_update of this Webhook.

        Call this webhook when a matching object is updated.

        :return: The type_update of this Webhook.
        :rtype: bool
        """
        return self._type_update

    @type_update.setter
    def type_update(self, type_update):
        """Sets the type_update of this Webhook.

        Call this webhook when a matching object is updated.

        :param type_update: The type_update of this Webhook.
        :type type_update: bool
        """

        self._type_update = type_update

    @property
    def url(self):
        """Gets the url of this Webhook.


        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.


        :param url: The url of this Webhook.
        :type url: str
        """

        self._url = url
