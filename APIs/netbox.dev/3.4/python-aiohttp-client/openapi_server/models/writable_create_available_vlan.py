# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class WritableCreateAvailableVLAN(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: object=None, description: str=None, name: str=None, role: int=None, site: int=None, status: str=None, tags: List[NestedTag]=None, tenant: int=None):
        """WritableCreateAvailableVLAN - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this WritableCreateAvailableVLAN.
        :param description: The description of this WritableCreateAvailableVLAN.
        :param name: The name of this WritableCreateAvailableVLAN.
        :param role: The role of this WritableCreateAvailableVLAN.
        :param site: The site of this WritableCreateAvailableVLAN.
        :param status: The status of this WritableCreateAvailableVLAN.
        :param tags: The tags of this WritableCreateAvailableVLAN.
        :param tenant: The tenant of this WritableCreateAvailableVLAN.
        """
        self.openapi_types = {
            'custom_fields': object,
            'description': str,
            'name': str,
            'role': int,
            'site': int,
            'status': str,
            'tags': List[NestedTag],
            'tenant': int
        }

        self.attribute_map = {
            'custom_fields': 'custom_fields',
            'description': 'description',
            'name': 'name',
            'role': 'role',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant'
        }

        self._custom_fields = custom_fields
        self._description = description
        self._name = name
        self._role = role
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableCreateAvailableVLAN':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableCreateAvailableVLAN of this WritableCreateAvailableVLAN.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableCreateAvailableVLAN.


        :return: The custom_fields of this WritableCreateAvailableVLAN.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableCreateAvailableVLAN.


        :param custom_fields: The custom_fields of this WritableCreateAvailableVLAN.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableCreateAvailableVLAN.


        :return: The description of this WritableCreateAvailableVLAN.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableCreateAvailableVLAN.


        :param description: The description of this WritableCreateAvailableVLAN.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this WritableCreateAvailableVLAN.


        :return: The name of this WritableCreateAvailableVLAN.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableCreateAvailableVLAN.


        :param name: The name of this WritableCreateAvailableVLAN.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def role(self):
        """Gets the role of this WritableCreateAvailableVLAN.


        :return: The role of this WritableCreateAvailableVLAN.
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritableCreateAvailableVLAN.


        :param role: The role of this WritableCreateAvailableVLAN.
        :type role: int
        """

        self._role = role

    @property
    def site(self):
        """Gets the site of this WritableCreateAvailableVLAN.


        :return: The site of this WritableCreateAvailableVLAN.
        :rtype: int
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritableCreateAvailableVLAN.


        :param site: The site of this WritableCreateAvailableVLAN.
        :type site: int
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this WritableCreateAvailableVLAN.


        :return: The status of this WritableCreateAvailableVLAN.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableCreateAvailableVLAN.


        :param status: The status of this WritableCreateAvailableVLAN.
        :type status: str
        """
        allowed_values = ["active", "reserved", "deprecated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableCreateAvailableVLAN.


        :return: The tags of this WritableCreateAvailableVLAN.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableCreateAvailableVLAN.


        :param tags: The tags of this WritableCreateAvailableVLAN.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableCreateAvailableVLAN.


        :return: The tenant of this WritableCreateAvailableVLAN.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableCreateAvailableVLAN.


        :param tenant: The tenant of this WritableCreateAvailableVLAN.
        :type tenant: int
        """

        self._tenant = tenant
