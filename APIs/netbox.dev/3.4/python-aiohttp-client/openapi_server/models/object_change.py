# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.nested_user import NestedUser
from openapi_server import util


class ObjectChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, changed_object: object=None, changed_object_id: int=None, changed_object_type: str=None, display: str=None, id: int=None, postchange_data: object=None, prechange_data: object=None, request_id: str=None, time: datetime=None, url: str=None, user: NestedUser=None, user_name: str=None):
        """ObjectChange - a model defined in OpenAPI

        :param action: The action of this ObjectChange.
        :param changed_object: The changed_object of this ObjectChange.
        :param changed_object_id: The changed_object_id of this ObjectChange.
        :param changed_object_type: The changed_object_type of this ObjectChange.
        :param display: The display of this ObjectChange.
        :param id: The id of this ObjectChange.
        :param postchange_data: The postchange_data of this ObjectChange.
        :param prechange_data: The prechange_data of this ObjectChange.
        :param request_id: The request_id of this ObjectChange.
        :param time: The time of this ObjectChange.
        :param url: The url of this ObjectChange.
        :param user: The user of this ObjectChange.
        :param user_name: The user_name of this ObjectChange.
        """
        self.openapi_types = {
            'action': Action,
            'changed_object': object,
            'changed_object_id': int,
            'changed_object_type': str,
            'display': str,
            'id': int,
            'postchange_data': object,
            'prechange_data': object,
            'request_id': str,
            'time': datetime,
            'url': str,
            'user': NestedUser,
            'user_name': str
        }

        self.attribute_map = {
            'action': 'action',
            'changed_object': 'changed_object',
            'changed_object_id': 'changed_object_id',
            'changed_object_type': 'changed_object_type',
            'display': 'display',
            'id': 'id',
            'postchange_data': 'postchange_data',
            'prechange_data': 'prechange_data',
            'request_id': 'request_id',
            'time': 'time',
            'url': 'url',
            'user': 'user',
            'user_name': 'user_name'
        }

        self._action = action
        self._changed_object = changed_object
        self._changed_object_id = changed_object_id
        self._changed_object_type = changed_object_type
        self._display = display
        self._id = id
        self._postchange_data = postchange_data
        self._prechange_data = prechange_data
        self._request_id = request_id
        self._time = time
        self._url = url
        self._user = user
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectChange of this ObjectChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ObjectChange.


        :return: The action of this ObjectChange.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ObjectChange.


        :param action: The action of this ObjectChange.
        :type action: Action
        """

        self._action = action

    @property
    def changed_object(self):
        """Gets the changed_object of this ObjectChange.

         Serialize a nested representation of the changed object. 

        :return: The changed_object of this ObjectChange.
        :rtype: object
        """
        return self._changed_object

    @changed_object.setter
    def changed_object(self, changed_object):
        """Sets the changed_object of this ObjectChange.

         Serialize a nested representation of the changed object. 

        :param changed_object: The changed_object of this ObjectChange.
        :type changed_object: object
        """

        self._changed_object = changed_object

    @property
    def changed_object_id(self):
        """Gets the changed_object_id of this ObjectChange.


        :return: The changed_object_id of this ObjectChange.
        :rtype: int
        """
        return self._changed_object_id

    @changed_object_id.setter
    def changed_object_id(self, changed_object_id):
        """Sets the changed_object_id of this ObjectChange.


        :param changed_object_id: The changed_object_id of this ObjectChange.
        :type changed_object_id: int
        """
        if changed_object_id is None:
            raise ValueError("Invalid value for `changed_object_id`, must not be `None`")
        if changed_object_id is not None and changed_object_id > -9223372036854775616:
            raise ValueError("Invalid value for `changed_object_id`, must be a value less than or equal to `-9223372036854775616`")
        if changed_object_id is not None and changed_object_id < 0:
            raise ValueError("Invalid value for `changed_object_id`, must be a value greater than or equal to `0`")

        self._changed_object_id = changed_object_id

    @property
    def changed_object_type(self):
        """Gets the changed_object_type of this ObjectChange.


        :return: The changed_object_type of this ObjectChange.
        :rtype: str
        """
        return self._changed_object_type

    @changed_object_type.setter
    def changed_object_type(self, changed_object_type):
        """Sets the changed_object_type of this ObjectChange.


        :param changed_object_type: The changed_object_type of this ObjectChange.
        :type changed_object_type: str
        """

        self._changed_object_type = changed_object_type

    @property
    def display(self):
        """Gets the display of this ObjectChange.


        :return: The display of this ObjectChange.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ObjectChange.


        :param display: The display of this ObjectChange.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this ObjectChange.


        :return: The id of this ObjectChange.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectChange.


        :param id: The id of this ObjectChange.
        :type id: int
        """

        self._id = id

    @property
    def postchange_data(self):
        """Gets the postchange_data of this ObjectChange.


        :return: The postchange_data of this ObjectChange.
        :rtype: object
        """
        return self._postchange_data

    @postchange_data.setter
    def postchange_data(self, postchange_data):
        """Sets the postchange_data of this ObjectChange.


        :param postchange_data: The postchange_data of this ObjectChange.
        :type postchange_data: object
        """

        self._postchange_data = postchange_data

    @property
    def prechange_data(self):
        """Gets the prechange_data of this ObjectChange.


        :return: The prechange_data of this ObjectChange.
        :rtype: object
        """
        return self._prechange_data

    @prechange_data.setter
    def prechange_data(self, prechange_data):
        """Sets the prechange_data of this ObjectChange.


        :param prechange_data: The prechange_data of this ObjectChange.
        :type prechange_data: object
        """

        self._prechange_data = prechange_data

    @property
    def request_id(self):
        """Gets the request_id of this ObjectChange.


        :return: The request_id of this ObjectChange.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ObjectChange.


        :param request_id: The request_id of this ObjectChange.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def time(self):
        """Gets the time of this ObjectChange.


        :return: The time of this ObjectChange.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ObjectChange.


        :param time: The time of this ObjectChange.
        :type time: datetime
        """

        self._time = time

    @property
    def url(self):
        """Gets the url of this ObjectChange.


        :return: The url of this ObjectChange.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ObjectChange.


        :param url: The url of this ObjectChange.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this ObjectChange.


        :return: The user of this ObjectChange.
        :rtype: NestedUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ObjectChange.


        :param user: The user of this ObjectChange.
        :type user: NestedUser
        """

        self._user = user

    @property
    def user_name(self):
        """Gets the user_name of this ObjectChange.


        :return: The user_name of this ObjectChange.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ObjectChange.


        :param user_name: The user_name of this ObjectChange.
        :type user_name: str
        """
        if user_name is not None and len(user_name) < 1:
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `1`")

        self._user_name = user_name
