# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_nested_module import ComponentNestedModule
from openapi_server.models.duplex import Duplex
from openapi_server.models.mode import Mode
from openapi_server.models.nested_cable import NestedCable
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_interface import NestedInterface
from openapi_server.models.nested_l2_vpn_termination import NestedL2VPNTermination
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.nested_vlan import NestedVLAN
from openapi_server.models.nested_vrf import NestedVRF
from openapi_server.models.nested_virtual_device_context import NestedVirtualDeviceContext
from openapi_server.models.nested_wireless_lan import NestedWirelessLAN
from openapi_server.models.nested_wireless_link import NestedWirelessLink
from openapi_server.models.poe_mode import PoeMode
from openapi_server.models.poe_type import PoeType
from openapi_server.models.rf_channel import RfChannel
from openapi_server.models.rf_role import RfRole
from openapi_server.models.type3 import Type3
from openapi_server import util


class Interface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occupied: bool=None, bridge: NestedInterface=None, cable: NestedCable=None, cable_end: str=None, connected_endpoints: List[str]=None, connected_endpoints_reachable: bool=None, connected_endpoints_type: str=None, count_fhrp_groups: int=None, count_ipaddresses: int=None, created: datetime=None, custom_fields: object=None, description: str=None, device: NestedDevice=None, display: str=None, duplex: Duplex=None, enabled: bool=None, id: int=None, l2vpn_termination: NestedL2VPNTermination=None, label: str=None, lag: NestedInterface=None, last_updated: datetime=None, link_peers: List[str]=None, link_peers_type: str=None, mac_address: str=None, mark_connected: bool=None, mgmt_only: bool=None, mode: Mode=None, module: ComponentNestedModule=None, mtu: int=None, name: str=None, parent: NestedInterface=None, poe_mode: PoeMode=None, poe_type: PoeType=None, rf_channel: RfChannel=None, rf_channel_frequency: float=None, rf_channel_width: float=None, rf_role: RfRole=None, speed: int=None, tagged_vlans: list[NestedVLAN]=None, tags: List[NestedTag]=None, tx_power: int=None, type: Type3=None, untagged_vlan: NestedVLAN=None, url: str=None, vdcs: list[NestedVirtualDeviceContext]=None, vrf: NestedVRF=None, wireless_lans: list[NestedWirelessLAN]=None, wireless_link: NestedWirelessLink=None, wwn: str=None):
        """Interface - a model defined in OpenAPI

        :param occupied: The occupied of this Interface.
        :param bridge: The bridge of this Interface.
        :param cable: The cable of this Interface.
        :param cable_end: The cable_end of this Interface.
        :param connected_endpoints: The connected_endpoints of this Interface.
        :param connected_endpoints_reachable: The connected_endpoints_reachable of this Interface.
        :param connected_endpoints_type: The connected_endpoints_type of this Interface.
        :param count_fhrp_groups: The count_fhrp_groups of this Interface.
        :param count_ipaddresses: The count_ipaddresses of this Interface.
        :param created: The created of this Interface.
        :param custom_fields: The custom_fields of this Interface.
        :param description: The description of this Interface.
        :param device: The device of this Interface.
        :param display: The display of this Interface.
        :param duplex: The duplex of this Interface.
        :param enabled: The enabled of this Interface.
        :param id: The id of this Interface.
        :param l2vpn_termination: The l2vpn_termination of this Interface.
        :param label: The label of this Interface.
        :param lag: The lag of this Interface.
        :param last_updated: The last_updated of this Interface.
        :param link_peers: The link_peers of this Interface.
        :param link_peers_type: The link_peers_type of this Interface.
        :param mac_address: The mac_address of this Interface.
        :param mark_connected: The mark_connected of this Interface.
        :param mgmt_only: The mgmt_only of this Interface.
        :param mode: The mode of this Interface.
        :param module: The module of this Interface.
        :param mtu: The mtu of this Interface.
        :param name: The name of this Interface.
        :param parent: The parent of this Interface.
        :param poe_mode: The poe_mode of this Interface.
        :param poe_type: The poe_type of this Interface.
        :param rf_channel: The rf_channel of this Interface.
        :param rf_channel_frequency: The rf_channel_frequency of this Interface.
        :param rf_channel_width: The rf_channel_width of this Interface.
        :param rf_role: The rf_role of this Interface.
        :param speed: The speed of this Interface.
        :param tagged_vlans: The tagged_vlans of this Interface.
        :param tags: The tags of this Interface.
        :param tx_power: The tx_power of this Interface.
        :param type: The type of this Interface.
        :param untagged_vlan: The untagged_vlan of this Interface.
        :param url: The url of this Interface.
        :param vdcs: The vdcs of this Interface.
        :param vrf: The vrf of this Interface.
        :param wireless_lans: The wireless_lans of this Interface.
        :param wireless_link: The wireless_link of this Interface.
        :param wwn: The wwn of this Interface.
        """
        self.openapi_types = {
            'occupied': bool,
            'bridge': NestedInterface,
            'cable': NestedCable,
            'cable_end': str,
            'connected_endpoints': List[str],
            'connected_endpoints_reachable': bool,
            'connected_endpoints_type': str,
            'count_fhrp_groups': int,
            'count_ipaddresses': int,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'device': NestedDevice,
            'display': str,
            'duplex': Duplex,
            'enabled': bool,
            'id': int,
            'l2vpn_termination': NestedL2VPNTermination,
            'label': str,
            'lag': NestedInterface,
            'last_updated': datetime,
            'link_peers': List[str],
            'link_peers_type': str,
            'mac_address': str,
            'mark_connected': bool,
            'mgmt_only': bool,
            'mode': Mode,
            'module': ComponentNestedModule,
            'mtu': int,
            'name': str,
            'parent': NestedInterface,
            'poe_mode': PoeMode,
            'poe_type': PoeType,
            'rf_channel': RfChannel,
            'rf_channel_frequency': float,
            'rf_channel_width': float,
            'rf_role': RfRole,
            'speed': int,
            'tagged_vlans': list[NestedVLAN],
            'tags': List[NestedTag],
            'tx_power': int,
            'type': Type3,
            'untagged_vlan': NestedVLAN,
            'url': str,
            'vdcs': list[NestedVirtualDeviceContext],
            'vrf': NestedVRF,
            'wireless_lans': list[NestedWirelessLAN],
            'wireless_link': NestedWirelessLink,
            'wwn': str
        }

        self.attribute_map = {
            'occupied': '_occupied',
            'bridge': 'bridge',
            'cable': 'cable',
            'cable_end': 'cable_end',
            'connected_endpoints': 'connected_endpoints',
            'connected_endpoints_reachable': 'connected_endpoints_reachable',
            'connected_endpoints_type': 'connected_endpoints_type',
            'count_fhrp_groups': 'count_fhrp_groups',
            'count_ipaddresses': 'count_ipaddresses',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device': 'device',
            'display': 'display',
            'duplex': 'duplex',
            'enabled': 'enabled',
            'id': 'id',
            'l2vpn_termination': 'l2vpn_termination',
            'label': 'label',
            'lag': 'lag',
            'last_updated': 'last_updated',
            'link_peers': 'link_peers',
            'link_peers_type': 'link_peers_type',
            'mac_address': 'mac_address',
            'mark_connected': 'mark_connected',
            'mgmt_only': 'mgmt_only',
            'mode': 'mode',
            'module': 'module',
            'mtu': 'mtu',
            'name': 'name',
            'parent': 'parent',
            'poe_mode': 'poe_mode',
            'poe_type': 'poe_type',
            'rf_channel': 'rf_channel',
            'rf_channel_frequency': 'rf_channel_frequency',
            'rf_channel_width': 'rf_channel_width',
            'rf_role': 'rf_role',
            'speed': 'speed',
            'tagged_vlans': 'tagged_vlans',
            'tags': 'tags',
            'tx_power': 'tx_power',
            'type': 'type',
            'untagged_vlan': 'untagged_vlan',
            'url': 'url',
            'vdcs': 'vdcs',
            'vrf': 'vrf',
            'wireless_lans': 'wireless_lans',
            'wireless_link': 'wireless_link',
            'wwn': 'wwn'
        }

        self._occupied = occupied
        self._bridge = bridge
        self._cable = cable
        self._cable_end = cable_end
        self._connected_endpoints = connected_endpoints
        self._connected_endpoints_reachable = connected_endpoints_reachable
        self._connected_endpoints_type = connected_endpoints_type
        self._count_fhrp_groups = count_fhrp_groups
        self._count_ipaddresses = count_ipaddresses
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device = device
        self._display = display
        self._duplex = duplex
        self._enabled = enabled
        self._id = id
        self._l2vpn_termination = l2vpn_termination
        self._label = label
        self._lag = lag
        self._last_updated = last_updated
        self._link_peers = link_peers
        self._link_peers_type = link_peers_type
        self._mac_address = mac_address
        self._mark_connected = mark_connected
        self._mgmt_only = mgmt_only
        self._mode = mode
        self._module = module
        self._mtu = mtu
        self._name = name
        self._parent = parent
        self._poe_mode = poe_mode
        self._poe_type = poe_type
        self._rf_channel = rf_channel
        self._rf_channel_frequency = rf_channel_frequency
        self._rf_channel_width = rf_channel_width
        self._rf_role = rf_role
        self._speed = speed
        self._tagged_vlans = tagged_vlans
        self._tags = tags
        self._tx_power = tx_power
        self._type = type
        self._untagged_vlan = untagged_vlan
        self._url = url
        self._vdcs = vdcs
        self._vrf = vrf
        self._wireless_lans = wireless_lans
        self._wireless_link = wireless_link
        self._wwn = wwn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interface of this Interface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occupied(self):
        """Gets the occupied of this Interface.


        :return: The occupied of this Interface.
        :rtype: bool
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this Interface.


        :param occupied: The occupied of this Interface.
        :type occupied: bool
        """

        self._occupied = occupied

    @property
    def bridge(self):
        """Gets the bridge of this Interface.


        :return: The bridge of this Interface.
        :rtype: NestedInterface
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """Sets the bridge of this Interface.


        :param bridge: The bridge of this Interface.
        :type bridge: NestedInterface
        """

        self._bridge = bridge

    @property
    def cable(self):
        """Gets the cable of this Interface.


        :return: The cable of this Interface.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this Interface.


        :param cable: The cable of this Interface.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def cable_end(self):
        """Gets the cable_end of this Interface.


        :return: The cable_end of this Interface.
        :rtype: str
        """
        return self._cable_end

    @cable_end.setter
    def cable_end(self, cable_end):
        """Sets the cable_end of this Interface.


        :param cable_end: The cable_end of this Interface.
        :type cable_end: str
        """
        if cable_end is not None and len(cable_end) < 1:
            raise ValueError("Invalid value for `cable_end`, length must be greater than or equal to `1`")

        self._cable_end = cable_end

    @property
    def connected_endpoints(self):
        """Gets the connected_endpoints of this Interface.

         Return the appropriate serializer for the type of connected object. 

        :return: The connected_endpoints of this Interface.
        :rtype: List[str]
        """
        return self._connected_endpoints

    @connected_endpoints.setter
    def connected_endpoints(self, connected_endpoints):
        """Sets the connected_endpoints of this Interface.

         Return the appropriate serializer for the type of connected object. 

        :param connected_endpoints: The connected_endpoints of this Interface.
        :type connected_endpoints: List[str]
        """

        self._connected_endpoints = connected_endpoints

    @property
    def connected_endpoints_reachable(self):
        """Gets the connected_endpoints_reachable of this Interface.


        :return: The connected_endpoints_reachable of this Interface.
        :rtype: bool
        """
        return self._connected_endpoints_reachable

    @connected_endpoints_reachable.setter
    def connected_endpoints_reachable(self, connected_endpoints_reachable):
        """Sets the connected_endpoints_reachable of this Interface.


        :param connected_endpoints_reachable: The connected_endpoints_reachable of this Interface.
        :type connected_endpoints_reachable: bool
        """

        self._connected_endpoints_reachable = connected_endpoints_reachable

    @property
    def connected_endpoints_type(self):
        """Gets the connected_endpoints_type of this Interface.


        :return: The connected_endpoints_type of this Interface.
        :rtype: str
        """
        return self._connected_endpoints_type

    @connected_endpoints_type.setter
    def connected_endpoints_type(self, connected_endpoints_type):
        """Sets the connected_endpoints_type of this Interface.


        :param connected_endpoints_type: The connected_endpoints_type of this Interface.
        :type connected_endpoints_type: str
        """

        self._connected_endpoints_type = connected_endpoints_type

    @property
    def count_fhrp_groups(self):
        """Gets the count_fhrp_groups of this Interface.


        :return: The count_fhrp_groups of this Interface.
        :rtype: int
        """
        return self._count_fhrp_groups

    @count_fhrp_groups.setter
    def count_fhrp_groups(self, count_fhrp_groups):
        """Sets the count_fhrp_groups of this Interface.


        :param count_fhrp_groups: The count_fhrp_groups of this Interface.
        :type count_fhrp_groups: int
        """

        self._count_fhrp_groups = count_fhrp_groups

    @property
    def count_ipaddresses(self):
        """Gets the count_ipaddresses of this Interface.


        :return: The count_ipaddresses of this Interface.
        :rtype: int
        """
        return self._count_ipaddresses

    @count_ipaddresses.setter
    def count_ipaddresses(self, count_ipaddresses):
        """Sets the count_ipaddresses of this Interface.


        :param count_ipaddresses: The count_ipaddresses of this Interface.
        :type count_ipaddresses: int
        """

        self._count_ipaddresses = count_ipaddresses

    @property
    def created(self):
        """Gets the created of this Interface.


        :return: The created of this Interface.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Interface.


        :param created: The created of this Interface.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Interface.


        :return: The custom_fields of this Interface.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Interface.


        :param custom_fields: The custom_fields of this Interface.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Interface.


        :return: The description of this Interface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Interface.


        :param description: The description of this Interface.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this Interface.


        :return: The device of this Interface.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Interface.


        :param device: The device of this Interface.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def display(self):
        """Gets the display of this Interface.


        :return: The display of this Interface.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Interface.


        :param display: The display of this Interface.
        :type display: str
        """

        self._display = display

    @property
    def duplex(self):
        """Gets the duplex of this Interface.


        :return: The duplex of this Interface.
        :rtype: Duplex
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """Sets the duplex of this Interface.


        :param duplex: The duplex of this Interface.
        :type duplex: Duplex
        """

        self._duplex = duplex

    @property
    def enabled(self):
        """Gets the enabled of this Interface.


        :return: The enabled of this Interface.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Interface.


        :param enabled: The enabled of this Interface.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Interface.


        :return: The id of this Interface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Interface.


        :param id: The id of this Interface.
        :type id: int
        """

        self._id = id

    @property
    def l2vpn_termination(self):
        """Gets the l2vpn_termination of this Interface.


        :return: The l2vpn_termination of this Interface.
        :rtype: NestedL2VPNTermination
        """
        return self._l2vpn_termination

    @l2vpn_termination.setter
    def l2vpn_termination(self, l2vpn_termination):
        """Sets the l2vpn_termination of this Interface.


        :param l2vpn_termination: The l2vpn_termination of this Interface.
        :type l2vpn_termination: NestedL2VPNTermination
        """

        self._l2vpn_termination = l2vpn_termination

    @property
    def label(self):
        """Gets the label of this Interface.

        Physical label

        :return: The label of this Interface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Interface.

        Physical label

        :param label: The label of this Interface.
        :type label: str
        """
        if label is not None and len(label) > 64:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")

        self._label = label

    @property
    def lag(self):
        """Gets the lag of this Interface.


        :return: The lag of this Interface.
        :rtype: NestedInterface
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this Interface.


        :param lag: The lag of this Interface.
        :type lag: NestedInterface
        """

        self._lag = lag

    @property
    def last_updated(self):
        """Gets the last_updated of this Interface.


        :return: The last_updated of this Interface.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Interface.


        :param last_updated: The last_updated of this Interface.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def link_peers(self):
        """Gets the link_peers of this Interface.

         Return the appropriate serializer for the link termination model. 

        :return: The link_peers of this Interface.
        :rtype: List[str]
        """
        return self._link_peers

    @link_peers.setter
    def link_peers(self, link_peers):
        """Sets the link_peers of this Interface.

         Return the appropriate serializer for the link termination model. 

        :param link_peers: The link_peers of this Interface.
        :type link_peers: List[str]
        """

        self._link_peers = link_peers

    @property
    def link_peers_type(self):
        """Gets the link_peers_type of this Interface.


        :return: The link_peers_type of this Interface.
        :rtype: str
        """
        return self._link_peers_type

    @link_peers_type.setter
    def link_peers_type(self, link_peers_type):
        """Sets the link_peers_type of this Interface.


        :param link_peers_type: The link_peers_type of this Interface.
        :type link_peers_type: str
        """

        self._link_peers_type = link_peers_type

    @property
    def mac_address(self):
        """Gets the mac_address of this Interface.


        :return: The mac_address of this Interface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Interface.


        :param mac_address: The mac_address of this Interface.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mark_connected(self):
        """Gets the mark_connected of this Interface.

        Treat as if a cable is connected

        :return: The mark_connected of this Interface.
        :rtype: bool
        """
        return self._mark_connected

    @mark_connected.setter
    def mark_connected(self, mark_connected):
        """Sets the mark_connected of this Interface.

        Treat as if a cable is connected

        :param mark_connected: The mark_connected of this Interface.
        :type mark_connected: bool
        """

        self._mark_connected = mark_connected

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this Interface.

        This interface is used only for out-of-band management

        :return: The mgmt_only of this Interface.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this Interface.

        This interface is used only for out-of-band management

        :param mgmt_only: The mgmt_only of this Interface.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def mode(self):
        """Gets the mode of this Interface.


        :return: The mode of this Interface.
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Interface.


        :param mode: The mode of this Interface.
        :type mode: Mode
        """

        self._mode = mode

    @property
    def module(self):
        """Gets the module of this Interface.


        :return: The module of this Interface.
        :rtype: ComponentNestedModule
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this Interface.


        :param module: The module of this Interface.
        :type module: ComponentNestedModule
        """

        self._module = module

    @property
    def mtu(self):
        """Gets the mtu of this Interface.


        :return: The mtu of this Interface.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this Interface.


        :param mtu: The mtu of this Interface.
        :type mtu: int
        """
        if mtu is not None and mtu > 65536:
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `65536`")
        if mtu is not None and mtu < 1:
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1`")

        self._mtu = mtu

    @property
    def name(self):
        """Gets the name of this Interface.


        :return: The name of this Interface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interface.


        :param name: The name of this Interface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Interface.


        :return: The parent of this Interface.
        :rtype: NestedInterface
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Interface.


        :param parent: The parent of this Interface.
        :type parent: NestedInterface
        """

        self._parent = parent

    @property
    def poe_mode(self):
        """Gets the poe_mode of this Interface.


        :return: The poe_mode of this Interface.
        :rtype: PoeMode
        """
        return self._poe_mode

    @poe_mode.setter
    def poe_mode(self, poe_mode):
        """Sets the poe_mode of this Interface.


        :param poe_mode: The poe_mode of this Interface.
        :type poe_mode: PoeMode
        """

        self._poe_mode = poe_mode

    @property
    def poe_type(self):
        """Gets the poe_type of this Interface.


        :return: The poe_type of this Interface.
        :rtype: PoeType
        """
        return self._poe_type

    @poe_type.setter
    def poe_type(self, poe_type):
        """Sets the poe_type of this Interface.


        :param poe_type: The poe_type of this Interface.
        :type poe_type: PoeType
        """

        self._poe_type = poe_type

    @property
    def rf_channel(self):
        """Gets the rf_channel of this Interface.


        :return: The rf_channel of this Interface.
        :rtype: RfChannel
        """
        return self._rf_channel

    @rf_channel.setter
    def rf_channel(self, rf_channel):
        """Sets the rf_channel of this Interface.


        :param rf_channel: The rf_channel of this Interface.
        :type rf_channel: RfChannel
        """

        self._rf_channel = rf_channel

    @property
    def rf_channel_frequency(self):
        """Gets the rf_channel_frequency of this Interface.


        :return: The rf_channel_frequency of this Interface.
        :rtype: float
        """
        return self._rf_channel_frequency

    @rf_channel_frequency.setter
    def rf_channel_frequency(self, rf_channel_frequency):
        """Sets the rf_channel_frequency of this Interface.


        :param rf_channel_frequency: The rf_channel_frequency of this Interface.
        :type rf_channel_frequency: float
        """

        self._rf_channel_frequency = rf_channel_frequency

    @property
    def rf_channel_width(self):
        """Gets the rf_channel_width of this Interface.


        :return: The rf_channel_width of this Interface.
        :rtype: float
        """
        return self._rf_channel_width

    @rf_channel_width.setter
    def rf_channel_width(self, rf_channel_width):
        """Sets the rf_channel_width of this Interface.


        :param rf_channel_width: The rf_channel_width of this Interface.
        :type rf_channel_width: float
        """

        self._rf_channel_width = rf_channel_width

    @property
    def rf_role(self):
        """Gets the rf_role of this Interface.


        :return: The rf_role of this Interface.
        :rtype: RfRole
        """
        return self._rf_role

    @rf_role.setter
    def rf_role(self, rf_role):
        """Sets the rf_role of this Interface.


        :param rf_role: The rf_role of this Interface.
        :type rf_role: RfRole
        """

        self._rf_role = rf_role

    @property
    def speed(self):
        """Gets the speed of this Interface.


        :return: The speed of this Interface.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Interface.


        :param speed: The speed of this Interface.
        :type speed: int
        """
        if speed is not None and speed > 2147483647:
            raise ValueError("Invalid value for `speed`, must be a value less than or equal to `2147483647`")
        if speed is not None and speed < 0:
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")

        self._speed = speed

    @property
    def tagged_vlans(self):
        """Gets the tagged_vlans of this Interface.


        :return: The tagged_vlans of this Interface.
        :rtype: list[NestedVLAN]
        """
        return self._tagged_vlans

    @tagged_vlans.setter
    def tagged_vlans(self, tagged_vlans):
        """Sets the tagged_vlans of this Interface.


        :param tagged_vlans: The tagged_vlans of this Interface.
        :type tagged_vlans: list[NestedVLAN]
        """

        self._tagged_vlans = tagged_vlans

    @property
    def tags(self):
        """Gets the tags of this Interface.


        :return: The tags of this Interface.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Interface.


        :param tags: The tags of this Interface.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tx_power(self):
        """Gets the tx_power of this Interface.


        :return: The tx_power of this Interface.
        :rtype: int
        """
        return self._tx_power

    @tx_power.setter
    def tx_power(self, tx_power):
        """Sets the tx_power of this Interface.


        :param tx_power: The tx_power of this Interface.
        :type tx_power: int
        """
        if tx_power is not None and tx_power > 127:
            raise ValueError("Invalid value for `tx_power`, must be a value less than or equal to `127`")
        if tx_power is not None and tx_power < 0:
            raise ValueError("Invalid value for `tx_power`, must be a value greater than or equal to `0`")

        self._tx_power = tx_power

    @property
    def type(self):
        """Gets the type of this Interface.


        :return: The type of this Interface.
        :rtype: Type3
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interface.


        :param type: The type of this Interface.
        :type type: Type3
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def untagged_vlan(self):
        """Gets the untagged_vlan of this Interface.


        :return: The untagged_vlan of this Interface.
        :rtype: NestedVLAN
        """
        return self._untagged_vlan

    @untagged_vlan.setter
    def untagged_vlan(self, untagged_vlan):
        """Sets the untagged_vlan of this Interface.


        :param untagged_vlan: The untagged_vlan of this Interface.
        :type untagged_vlan: NestedVLAN
        """

        self._untagged_vlan = untagged_vlan

    @property
    def url(self):
        """Gets the url of this Interface.


        :return: The url of this Interface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Interface.


        :param url: The url of this Interface.
        :type url: str
        """

        self._url = url

    @property
    def vdcs(self):
        """Gets the vdcs of this Interface.


        :return: The vdcs of this Interface.
        :rtype: list[NestedVirtualDeviceContext]
        """
        return self._vdcs

    @vdcs.setter
    def vdcs(self, vdcs):
        """Sets the vdcs of this Interface.


        :param vdcs: The vdcs of this Interface.
        :type vdcs: list[NestedVirtualDeviceContext]
        """

        self._vdcs = vdcs

    @property
    def vrf(self):
        """Gets the vrf of this Interface.


        :return: The vrf of this Interface.
        :rtype: NestedVRF
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this Interface.


        :param vrf: The vrf of this Interface.
        :type vrf: NestedVRF
        """

        self._vrf = vrf

    @property
    def wireless_lans(self):
        """Gets the wireless_lans of this Interface.


        :return: The wireless_lans of this Interface.
        :rtype: list[NestedWirelessLAN]
        """
        return self._wireless_lans

    @wireless_lans.setter
    def wireless_lans(self, wireless_lans):
        """Sets the wireless_lans of this Interface.


        :param wireless_lans: The wireless_lans of this Interface.
        :type wireless_lans: list[NestedWirelessLAN]
        """

        self._wireless_lans = wireless_lans

    @property
    def wireless_link(self):
        """Gets the wireless_link of this Interface.


        :return: The wireless_link of this Interface.
        :rtype: NestedWirelessLink
        """
        return self._wireless_link

    @wireless_link.setter
    def wireless_link(self, wireless_link):
        """Sets the wireless_link of this Interface.


        :param wireless_link: The wireless_link of this Interface.
        :type wireless_link: NestedWirelessLink
        """

        self._wireless_link = wireless_link

    @property
    def wwn(self):
        """Gets the wwn of this Interface.

        64-bit World Wide Name

        :return: The wwn of this Interface.
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this Interface.

        64-bit World Wide Name

        :param wwn: The wwn of this Interface.
        :type wwn: str
        """

        self._wwn = wwn
