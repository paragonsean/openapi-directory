# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kind import Kind
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class JournalEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_object: object=None, assigned_object_id: int=None, assigned_object_type: str=None, comments: str=None, created: datetime=None, created_by: int=None, custom_fields: object=None, display: str=None, id: int=None, kind: Kind=None, last_updated: datetime=None, tags: List[NestedTag]=None, url: str=None):
        """JournalEntry - a model defined in OpenAPI

        :param assigned_object: The assigned_object of this JournalEntry.
        :param assigned_object_id: The assigned_object_id of this JournalEntry.
        :param assigned_object_type: The assigned_object_type of this JournalEntry.
        :param comments: The comments of this JournalEntry.
        :param created: The created of this JournalEntry.
        :param created_by: The created_by of this JournalEntry.
        :param custom_fields: The custom_fields of this JournalEntry.
        :param display: The display of this JournalEntry.
        :param id: The id of this JournalEntry.
        :param kind: The kind of this JournalEntry.
        :param last_updated: The last_updated of this JournalEntry.
        :param tags: The tags of this JournalEntry.
        :param url: The url of this JournalEntry.
        """
        self.openapi_types = {
            'assigned_object': object,
            'assigned_object_id': int,
            'assigned_object_type': str,
            'comments': str,
            'created': datetime,
            'created_by': int,
            'custom_fields': object,
            'display': str,
            'id': int,
            'kind': Kind,
            'last_updated': datetime,
            'tags': List[NestedTag],
            'url': str
        }

        self.attribute_map = {
            'assigned_object': 'assigned_object',
            'assigned_object_id': 'assigned_object_id',
            'assigned_object_type': 'assigned_object_type',
            'comments': 'comments',
            'created': 'created',
            'created_by': 'created_by',
            'custom_fields': 'custom_fields',
            'display': 'display',
            'id': 'id',
            'kind': 'kind',
            'last_updated': 'last_updated',
            'tags': 'tags',
            'url': 'url'
        }

        self._assigned_object = assigned_object
        self._assigned_object_id = assigned_object_id
        self._assigned_object_type = assigned_object_type
        self._comments = comments
        self._created = created
        self._created_by = created_by
        self._custom_fields = custom_fields
        self._display = display
        self._id = id
        self._kind = kind
        self._last_updated = last_updated
        self._tags = tags
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JournalEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JournalEntry of this JournalEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_object(self):
        """Gets the assigned_object of this JournalEntry.


        :return: The assigned_object of this JournalEntry.
        :rtype: object
        """
        return self._assigned_object

    @assigned_object.setter
    def assigned_object(self, assigned_object):
        """Sets the assigned_object of this JournalEntry.


        :param assigned_object: The assigned_object of this JournalEntry.
        :type assigned_object: object
        """

        self._assigned_object = assigned_object

    @property
    def assigned_object_id(self):
        """Gets the assigned_object_id of this JournalEntry.


        :return: The assigned_object_id of this JournalEntry.
        :rtype: int
        """
        return self._assigned_object_id

    @assigned_object_id.setter
    def assigned_object_id(self, assigned_object_id):
        """Sets the assigned_object_id of this JournalEntry.


        :param assigned_object_id: The assigned_object_id of this JournalEntry.
        :type assigned_object_id: int
        """
        if assigned_object_id is None:
            raise ValueError("Invalid value for `assigned_object_id`, must not be `None`")
        if assigned_object_id is not None and assigned_object_id > -9223372036854775616:
            raise ValueError("Invalid value for `assigned_object_id`, must be a value less than or equal to `-9223372036854775616`")
        if assigned_object_id is not None and assigned_object_id < 0:
            raise ValueError("Invalid value for `assigned_object_id`, must be a value greater than or equal to `0`")

        self._assigned_object_id = assigned_object_id

    @property
    def assigned_object_type(self):
        """Gets the assigned_object_type of this JournalEntry.


        :return: The assigned_object_type of this JournalEntry.
        :rtype: str
        """
        return self._assigned_object_type

    @assigned_object_type.setter
    def assigned_object_type(self, assigned_object_type):
        """Sets the assigned_object_type of this JournalEntry.


        :param assigned_object_type: The assigned_object_type of this JournalEntry.
        :type assigned_object_type: str
        """
        if assigned_object_type is None:
            raise ValueError("Invalid value for `assigned_object_type`, must not be `None`")

        self._assigned_object_type = assigned_object_type

    @property
    def comments(self):
        """Gets the comments of this JournalEntry.


        :return: The comments of this JournalEntry.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this JournalEntry.


        :param comments: The comments of this JournalEntry.
        :type comments: str
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")
        if comments is not None and len(comments) < 1:
            raise ValueError("Invalid value for `comments`, length must be greater than or equal to `1`")

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this JournalEntry.


        :return: The created of this JournalEntry.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JournalEntry.


        :param created: The created of this JournalEntry.
        :type created: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this JournalEntry.


        :return: The created_by of this JournalEntry.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this JournalEntry.


        :param created_by: The created_by of this JournalEntry.
        :type created_by: int
        """

        self._created_by = created_by

    @property
    def custom_fields(self):
        """Gets the custom_fields of this JournalEntry.


        :return: The custom_fields of this JournalEntry.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this JournalEntry.


        :param custom_fields: The custom_fields of this JournalEntry.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def display(self):
        """Gets the display of this JournalEntry.


        :return: The display of this JournalEntry.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this JournalEntry.


        :param display: The display of this JournalEntry.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this JournalEntry.


        :return: The id of this JournalEntry.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalEntry.


        :param id: The id of this JournalEntry.
        :type id: int
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this JournalEntry.


        :return: The kind of this JournalEntry.
        :rtype: Kind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this JournalEntry.


        :param kind: The kind of this JournalEntry.
        :type kind: Kind
        """

        self._kind = kind

    @property
    def last_updated(self):
        """Gets the last_updated of this JournalEntry.


        :return: The last_updated of this JournalEntry.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this JournalEntry.


        :param last_updated: The last_updated of this JournalEntry.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def tags(self):
        """Gets the tags of this JournalEntry.


        :return: The tags of this JournalEntry.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JournalEntry.


        :param tags: The tags of this JournalEntry.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def url(self):
        """Gets the url of this JournalEntry.


        :return: The url of this JournalEntry.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JournalEntry.


        :param url: The url of this JournalEntry.
        :type url: str
        """

        self._url = url
