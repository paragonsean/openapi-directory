# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableObjectPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[str]=None, constraints: object=None, description: str=None, display: str=None, enabled: bool=None, groups: list[int]=None, id: int=None, name: str=None, object_types: list[str]=None, url: str=None, users: list[int]=None):
        """WritableObjectPermission - a model defined in OpenAPI

        :param actions: The actions of this WritableObjectPermission.
        :param constraints: The constraints of this WritableObjectPermission.
        :param description: The description of this WritableObjectPermission.
        :param display: The display of this WritableObjectPermission.
        :param enabled: The enabled of this WritableObjectPermission.
        :param groups: The groups of this WritableObjectPermission.
        :param id: The id of this WritableObjectPermission.
        :param name: The name of this WritableObjectPermission.
        :param object_types: The object_types of this WritableObjectPermission.
        :param url: The url of this WritableObjectPermission.
        :param users: The users of this WritableObjectPermission.
        """
        self.openapi_types = {
            'actions': List[str],
            'constraints': object,
            'description': str,
            'display': str,
            'enabled': bool,
            'groups': list[int],
            'id': int,
            'name': str,
            'object_types': list[str],
            'url': str,
            'users': list[int]
        }

        self.attribute_map = {
            'actions': 'actions',
            'constraints': 'constraints',
            'description': 'description',
            'display': 'display',
            'enabled': 'enabled',
            'groups': 'groups',
            'id': 'id',
            'name': 'name',
            'object_types': 'object_types',
            'url': 'url',
            'users': 'users'
        }

        self._actions = actions
        self._constraints = constraints
        self._description = description
        self._display = display
        self._enabled = enabled
        self._groups = groups
        self._id = id
        self._name = name
        self._object_types = object_types
        self._url = url
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableObjectPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableObjectPermission of this WritableObjectPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this WritableObjectPermission.

        The list of actions granted by this permission

        :return: The actions of this WritableObjectPermission.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this WritableObjectPermission.

        The list of actions granted by this permission

        :param actions: The actions of this WritableObjectPermission.
        :type actions: List[str]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def constraints(self):
        """Gets the constraints of this WritableObjectPermission.

        Queryset filter matching the applicable objects of the selected type(s)

        :return: The constraints of this WritableObjectPermission.
        :rtype: object
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this WritableObjectPermission.

        Queryset filter matching the applicable objects of the selected type(s)

        :param constraints: The constraints of this WritableObjectPermission.
        :type constraints: object
        """

        self._constraints = constraints

    @property
    def description(self):
        """Gets the description of this WritableObjectPermission.


        :return: The description of this WritableObjectPermission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableObjectPermission.


        :param description: The description of this WritableObjectPermission.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this WritableObjectPermission.


        :return: The display of this WritableObjectPermission.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableObjectPermission.


        :param display: The display of this WritableObjectPermission.
        :type display: str
        """

        self._display = display

    @property
    def enabled(self):
        """Gets the enabled of this WritableObjectPermission.


        :return: The enabled of this WritableObjectPermission.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WritableObjectPermission.


        :param enabled: The enabled of this WritableObjectPermission.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def groups(self):
        """Gets the groups of this WritableObjectPermission.


        :return: The groups of this WritableObjectPermission.
        :rtype: list[int]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this WritableObjectPermission.


        :param groups: The groups of this WritableObjectPermission.
        :type groups: list[int]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this WritableObjectPermission.


        :return: The id of this WritableObjectPermission.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableObjectPermission.


        :param id: The id of this WritableObjectPermission.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WritableObjectPermission.


        :return: The name of this WritableObjectPermission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableObjectPermission.


        :param name: The name of this WritableObjectPermission.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def object_types(self):
        """Gets the object_types of this WritableObjectPermission.


        :return: The object_types of this WritableObjectPermission.
        :rtype: list[str]
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types):
        """Sets the object_types of this WritableObjectPermission.


        :param object_types: The object_types of this WritableObjectPermission.
        :type object_types: list[str]
        """
        if object_types is None:
            raise ValueError("Invalid value for `object_types`, must not be `None`")

        self._object_types = object_types

    @property
    def url(self):
        """Gets the url of this WritableObjectPermission.


        :return: The url of this WritableObjectPermission.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableObjectPermission.


        :param url: The url of this WritableObjectPermission.
        :type url: str
        """

        self._url = url

    @property
    def users(self):
        """Gets the users of this WritableObjectPermission.


        :return: The users of this WritableObjectPermission.
        :rtype: list[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this WritableObjectPermission.


        :param users: The users of this WritableObjectPermission.
        :type users: list[int]
        """

        self._users = users
