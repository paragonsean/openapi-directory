# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_provider_network import NestedProviderNetwork
from openapi_server.models.nested_site import NestedSite
from openapi_server import util


class CircuitCircuitTermination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display: str=None, id: int=None, port_speed: int=None, provider_network: NestedProviderNetwork=None, site: NestedSite=None, upstream_speed: int=None, url: str=None, xconnect_id: str=None):
        """CircuitCircuitTermination - a model defined in OpenAPI

        :param description: The description of this CircuitCircuitTermination.
        :param display: The display of this CircuitCircuitTermination.
        :param id: The id of this CircuitCircuitTermination.
        :param port_speed: The port_speed of this CircuitCircuitTermination.
        :param provider_network: The provider_network of this CircuitCircuitTermination.
        :param site: The site of this CircuitCircuitTermination.
        :param upstream_speed: The upstream_speed of this CircuitCircuitTermination.
        :param url: The url of this CircuitCircuitTermination.
        :param xconnect_id: The xconnect_id of this CircuitCircuitTermination.
        """
        self.openapi_types = {
            'description': str,
            'display': str,
            'id': int,
            'port_speed': int,
            'provider_network': NestedProviderNetwork,
            'site': NestedSite,
            'upstream_speed': int,
            'url': str,
            'xconnect_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'display': 'display',
            'id': 'id',
            'port_speed': 'port_speed',
            'provider_network': 'provider_network',
            'site': 'site',
            'upstream_speed': 'upstream_speed',
            'url': 'url',
            'xconnect_id': 'xconnect_id'
        }

        self._description = description
        self._display = display
        self._id = id
        self._port_speed = port_speed
        self._provider_network = provider_network
        self._site = site
        self._upstream_speed = upstream_speed
        self._url = url
        self._xconnect_id = xconnect_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CircuitCircuitTermination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CircuitCircuitTermination of this CircuitCircuitTermination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CircuitCircuitTermination.


        :return: The description of this CircuitCircuitTermination.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CircuitCircuitTermination.


        :param description: The description of this CircuitCircuitTermination.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this CircuitCircuitTermination.


        :return: The display of this CircuitCircuitTermination.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CircuitCircuitTermination.


        :param display: The display of this CircuitCircuitTermination.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this CircuitCircuitTermination.


        :return: The id of this CircuitCircuitTermination.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CircuitCircuitTermination.


        :param id: The id of this CircuitCircuitTermination.
        :type id: int
        """

        self._id = id

    @property
    def port_speed(self):
        """Gets the port_speed of this CircuitCircuitTermination.


        :return: The port_speed of this CircuitCircuitTermination.
        :rtype: int
        """
        return self._port_speed

    @port_speed.setter
    def port_speed(self, port_speed):
        """Sets the port_speed of this CircuitCircuitTermination.


        :param port_speed: The port_speed of this CircuitCircuitTermination.
        :type port_speed: int
        """
        if port_speed is not None and port_speed > 2147483647:
            raise ValueError("Invalid value for `port_speed`, must be a value less than or equal to `2147483647`")
        if port_speed is not None and port_speed < 0:
            raise ValueError("Invalid value for `port_speed`, must be a value greater than or equal to `0`")

        self._port_speed = port_speed

    @property
    def provider_network(self):
        """Gets the provider_network of this CircuitCircuitTermination.


        :return: The provider_network of this CircuitCircuitTermination.
        :rtype: NestedProviderNetwork
        """
        return self._provider_network

    @provider_network.setter
    def provider_network(self, provider_network):
        """Sets the provider_network of this CircuitCircuitTermination.


        :param provider_network: The provider_network of this CircuitCircuitTermination.
        :type provider_network: NestedProviderNetwork
        """
        if provider_network is None:
            raise ValueError("Invalid value for `provider_network`, must not be `None`")

        self._provider_network = provider_network

    @property
    def site(self):
        """Gets the site of this CircuitCircuitTermination.


        :return: The site of this CircuitCircuitTermination.
        :rtype: NestedSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this CircuitCircuitTermination.


        :param site: The site of this CircuitCircuitTermination.
        :type site: NestedSite
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")

        self._site = site

    @property
    def upstream_speed(self):
        """Gets the upstream_speed of this CircuitCircuitTermination.

        Upstream speed, if different from port speed

        :return: The upstream_speed of this CircuitCircuitTermination.
        :rtype: int
        """
        return self._upstream_speed

    @upstream_speed.setter
    def upstream_speed(self, upstream_speed):
        """Sets the upstream_speed of this CircuitCircuitTermination.

        Upstream speed, if different from port speed

        :param upstream_speed: The upstream_speed of this CircuitCircuitTermination.
        :type upstream_speed: int
        """
        if upstream_speed is not None and upstream_speed > 2147483647:
            raise ValueError("Invalid value for `upstream_speed`, must be a value less than or equal to `2147483647`")
        if upstream_speed is not None and upstream_speed < 0:
            raise ValueError("Invalid value for `upstream_speed`, must be a value greater than or equal to `0`")

        self._upstream_speed = upstream_speed

    @property
    def url(self):
        """Gets the url of this CircuitCircuitTermination.


        :return: The url of this CircuitCircuitTermination.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CircuitCircuitTermination.


        :param url: The url of this CircuitCircuitTermination.
        :type url: str
        """

        self._url = url

    @property
    def xconnect_id(self):
        """Gets the xconnect_id of this CircuitCircuitTermination.


        :return: The xconnect_id of this CircuitCircuitTermination.
        :rtype: str
        """
        return self._xconnect_id

    @xconnect_id.setter
    def xconnect_id(self, xconnect_id):
        """Sets the xconnect_id of this CircuitCircuitTermination.


        :param xconnect_id: The xconnect_id of this CircuitCircuitTermination.
        :type xconnect_id: str
        """
        if xconnect_id is not None and len(xconnect_id) > 50:
            raise ValueError("Invalid value for `xconnect_id`, length must be less than or equal to `50`")

        self._xconnect_id = xconnect_id
