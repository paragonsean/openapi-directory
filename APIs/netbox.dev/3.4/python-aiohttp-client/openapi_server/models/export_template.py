# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, as_attachment: bool=None, content_types: list[str]=None, created: datetime=None, description: str=None, display: str=None, file_extension: str=None, id: int=None, last_updated: datetime=None, mime_type: str=None, name: str=None, template_code: str=None, url: str=None):
        """ExportTemplate - a model defined in OpenAPI

        :param as_attachment: The as_attachment of this ExportTemplate.
        :param content_types: The content_types of this ExportTemplate.
        :param created: The created of this ExportTemplate.
        :param description: The description of this ExportTemplate.
        :param display: The display of this ExportTemplate.
        :param file_extension: The file_extension of this ExportTemplate.
        :param id: The id of this ExportTemplate.
        :param last_updated: The last_updated of this ExportTemplate.
        :param mime_type: The mime_type of this ExportTemplate.
        :param name: The name of this ExportTemplate.
        :param template_code: The template_code of this ExportTemplate.
        :param url: The url of this ExportTemplate.
        """
        self.openapi_types = {
            'as_attachment': bool,
            'content_types': list[str],
            'created': datetime,
            'description': str,
            'display': str,
            'file_extension': str,
            'id': int,
            'last_updated': datetime,
            'mime_type': str,
            'name': str,
            'template_code': str,
            'url': str
        }

        self.attribute_map = {
            'as_attachment': 'as_attachment',
            'content_types': 'content_types',
            'created': 'created',
            'description': 'description',
            'display': 'display',
            'file_extension': 'file_extension',
            'id': 'id',
            'last_updated': 'last_updated',
            'mime_type': 'mime_type',
            'name': 'name',
            'template_code': 'template_code',
            'url': 'url'
        }

        self._as_attachment = as_attachment
        self._content_types = content_types
        self._created = created
        self._description = description
        self._display = display
        self._file_extension = file_extension
        self._id = id
        self._last_updated = last_updated
        self._mime_type = mime_type
        self._name = name
        self._template_code = template_code
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportTemplate of this ExportTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def as_attachment(self):
        """Gets the as_attachment of this ExportTemplate.

        Download file as attachment

        :return: The as_attachment of this ExportTemplate.
        :rtype: bool
        """
        return self._as_attachment

    @as_attachment.setter
    def as_attachment(self, as_attachment):
        """Sets the as_attachment of this ExportTemplate.

        Download file as attachment

        :param as_attachment: The as_attachment of this ExportTemplate.
        :type as_attachment: bool
        """

        self._as_attachment = as_attachment

    @property
    def content_types(self):
        """Gets the content_types of this ExportTemplate.


        :return: The content_types of this ExportTemplate.
        :rtype: list[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this ExportTemplate.


        :param content_types: The content_types of this ExportTemplate.
        :type content_types: list[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")

        self._content_types = content_types

    @property
    def created(self):
        """Gets the created of this ExportTemplate.


        :return: The created of this ExportTemplate.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ExportTemplate.


        :param created: The created of this ExportTemplate.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this ExportTemplate.


        :return: The description of this ExportTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExportTemplate.


        :param description: The description of this ExportTemplate.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this ExportTemplate.


        :return: The display of this ExportTemplate.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ExportTemplate.


        :param display: The display of this ExportTemplate.
        :type display: str
        """

        self._display = display

    @property
    def file_extension(self):
        """Gets the file_extension of this ExportTemplate.

        Extension to append to the rendered filename

        :return: The file_extension of this ExportTemplate.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this ExportTemplate.

        Extension to append to the rendered filename

        :param file_extension: The file_extension of this ExportTemplate.
        :type file_extension: str
        """
        if file_extension is not None and len(file_extension) > 15:
            raise ValueError("Invalid value for `file_extension`, length must be less than or equal to `15`")

        self._file_extension = file_extension

    @property
    def id(self):
        """Gets the id of this ExportTemplate.


        :return: The id of this ExportTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportTemplate.


        :param id: The id of this ExportTemplate.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ExportTemplate.


        :return: The last_updated of this ExportTemplate.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ExportTemplate.


        :param last_updated: The last_updated of this ExportTemplate.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def mime_type(self):
        """Gets the mime_type of this ExportTemplate.

        Defaults to <code>text/plain</code>

        :return: The mime_type of this ExportTemplate.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ExportTemplate.

        Defaults to <code>text/plain</code>

        :param mime_type: The mime_type of this ExportTemplate.
        :type mime_type: str
        """
        if mime_type is not None and len(mime_type) > 50:
            raise ValueError("Invalid value for `mime_type`, length must be less than or equal to `50`")

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this ExportTemplate.


        :return: The name of this ExportTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExportTemplate.


        :param name: The name of this ExportTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def template_code(self):
        """Gets the template_code of this ExportTemplate.

        Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.

        :return: The template_code of this ExportTemplate.
        :rtype: str
        """
        return self._template_code

    @template_code.setter
    def template_code(self, template_code):
        """Sets the template_code of this ExportTemplate.

        Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.

        :param template_code: The template_code of this ExportTemplate.
        :type template_code: str
        """
        if template_code is None:
            raise ValueError("Invalid value for `template_code`, must not be `None`")
        if template_code is not None and len(template_code) < 1:
            raise ValueError("Invalid value for `template_code`, length must be greater than or equal to `1`")

        self._template_code = template_code

    @property
    def url(self):
        """Gets the url of this ExportTemplate.


        :return: The url of this ExportTemplate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExportTemplate.


        :param url: The url of this ExportTemplate.
        :type url: str
        """

        self._url = url
