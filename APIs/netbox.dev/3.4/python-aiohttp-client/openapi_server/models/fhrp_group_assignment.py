# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_fhrp_group import NestedFHRPGroup
from openapi_server import util


class FHRPGroupAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, display: str=None, group: NestedFHRPGroup=None, id: int=None, interface: object=None, interface_id: int=None, interface_type: str=None, last_updated: datetime=None, priority: int=None, url: str=None):
        """FHRPGroupAssignment - a model defined in OpenAPI

        :param created: The created of this FHRPGroupAssignment.
        :param display: The display of this FHRPGroupAssignment.
        :param group: The group of this FHRPGroupAssignment.
        :param id: The id of this FHRPGroupAssignment.
        :param interface: The interface of this FHRPGroupAssignment.
        :param interface_id: The interface_id of this FHRPGroupAssignment.
        :param interface_type: The interface_type of this FHRPGroupAssignment.
        :param last_updated: The last_updated of this FHRPGroupAssignment.
        :param priority: The priority of this FHRPGroupAssignment.
        :param url: The url of this FHRPGroupAssignment.
        """
        self.openapi_types = {
            'created': datetime,
            'display': str,
            'group': NestedFHRPGroup,
            'id': int,
            'interface': object,
            'interface_id': int,
            'interface_type': str,
            'last_updated': datetime,
            'priority': int,
            'url': str
        }

        self.attribute_map = {
            'created': 'created',
            'display': 'display',
            'group': 'group',
            'id': 'id',
            'interface': 'interface',
            'interface_id': 'interface_id',
            'interface_type': 'interface_type',
            'last_updated': 'last_updated',
            'priority': 'priority',
            'url': 'url'
        }

        self._created = created
        self._display = display
        self._group = group
        self._id = id
        self._interface = interface
        self._interface_id = interface_id
        self._interface_type = interface_type
        self._last_updated = last_updated
        self._priority = priority
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FHRPGroupAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FHRPGroupAssignment of this FHRPGroupAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this FHRPGroupAssignment.


        :return: The created of this FHRPGroupAssignment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FHRPGroupAssignment.


        :param created: The created of this FHRPGroupAssignment.
        :type created: datetime
        """

        self._created = created

    @property
    def display(self):
        """Gets the display of this FHRPGroupAssignment.


        :return: The display of this FHRPGroupAssignment.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this FHRPGroupAssignment.


        :param display: The display of this FHRPGroupAssignment.
        :type display: str
        """

        self._display = display

    @property
    def group(self):
        """Gets the group of this FHRPGroupAssignment.


        :return: The group of this FHRPGroupAssignment.
        :rtype: NestedFHRPGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this FHRPGroupAssignment.


        :param group: The group of this FHRPGroupAssignment.
        :type group: NestedFHRPGroup
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def id(self):
        """Gets the id of this FHRPGroupAssignment.


        :return: The id of this FHRPGroupAssignment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FHRPGroupAssignment.


        :param id: The id of this FHRPGroupAssignment.
        :type id: int
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this FHRPGroupAssignment.


        :return: The interface of this FHRPGroupAssignment.
        :rtype: object
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this FHRPGroupAssignment.


        :param interface: The interface of this FHRPGroupAssignment.
        :type interface: object
        """

        self._interface = interface

    @property
    def interface_id(self):
        """Gets the interface_id of this FHRPGroupAssignment.


        :return: The interface_id of this FHRPGroupAssignment.
        :rtype: int
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this FHRPGroupAssignment.


        :param interface_id: The interface_id of this FHRPGroupAssignment.
        :type interface_id: int
        """
        if interface_id is None:
            raise ValueError("Invalid value for `interface_id`, must not be `None`")
        if interface_id is not None and interface_id > -9223372036854775616:
            raise ValueError("Invalid value for `interface_id`, must be a value less than or equal to `-9223372036854775616`")
        if interface_id is not None and interface_id < 0:
            raise ValueError("Invalid value for `interface_id`, must be a value greater than or equal to `0`")

        self._interface_id = interface_id

    @property
    def interface_type(self):
        """Gets the interface_type of this FHRPGroupAssignment.


        :return: The interface_type of this FHRPGroupAssignment.
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this FHRPGroupAssignment.


        :param interface_type: The interface_type of this FHRPGroupAssignment.
        :type interface_type: str
        """
        if interface_type is None:
            raise ValueError("Invalid value for `interface_type`, must not be `None`")

        self._interface_type = interface_type

    @property
    def last_updated(self):
        """Gets the last_updated of this FHRPGroupAssignment.


        :return: The last_updated of this FHRPGroupAssignment.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this FHRPGroupAssignment.


        :param last_updated: The last_updated of this FHRPGroupAssignment.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def priority(self):
        """Gets the priority of this FHRPGroupAssignment.


        :return: The priority of this FHRPGroupAssignment.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this FHRPGroupAssignment.


        :param priority: The priority of this FHRPGroupAssignment.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")
        if priority is not None and priority > 255:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `255`")
        if priority is not None and priority < 0:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")

        self._priority = priority

    @property
    def url(self):
        """Gets the url of this FHRPGroupAssignment.


        :return: The url of this FHRPGroupAssignment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FHRPGroupAssignment.


        :param url: The url of this FHRPGroupAssignment.
        :type url: str
        """

        self._url = url
