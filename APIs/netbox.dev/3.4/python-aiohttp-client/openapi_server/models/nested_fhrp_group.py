# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NestedFHRPGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: str=None, group_id: int=None, id: int=None, protocol: str=None, url: str=None):
        """NestedFHRPGroup - a model defined in OpenAPI

        :param display: The display of this NestedFHRPGroup.
        :param group_id: The group_id of this NestedFHRPGroup.
        :param id: The id of this NestedFHRPGroup.
        :param protocol: The protocol of this NestedFHRPGroup.
        :param url: The url of this NestedFHRPGroup.
        """
        self.openapi_types = {
            'display': str,
            'group_id': int,
            'id': int,
            'protocol': str,
            'url': str
        }

        self.attribute_map = {
            'display': 'display',
            'group_id': 'group_id',
            'id': 'id',
            'protocol': 'protocol',
            'url': 'url'
        }

        self._display = display
        self._group_id = group_id
        self._id = id
        self._protocol = protocol
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedFHRPGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedFHRPGroup of this NestedFHRPGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this NestedFHRPGroup.


        :return: The display of this NestedFHRPGroup.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this NestedFHRPGroup.


        :param display: The display of this NestedFHRPGroup.
        :type display: str
        """

        self._display = display

    @property
    def group_id(self):
        """Gets the group_id of this NestedFHRPGroup.


        :return: The group_id of this NestedFHRPGroup.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NestedFHRPGroup.


        :param group_id: The group_id of this NestedFHRPGroup.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")
        if group_id is not None and group_id > 32767:
            raise ValueError("Invalid value for `group_id`, must be a value less than or equal to `32767`")
        if group_id is not None and group_id < 0:
            raise ValueError("Invalid value for `group_id`, must be a value greater than or equal to `0`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this NestedFHRPGroup.


        :return: The id of this NestedFHRPGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedFHRPGroup.


        :param id: The id of this NestedFHRPGroup.
        :type id: int
        """

        self._id = id

    @property
    def protocol(self):
        """Gets the protocol of this NestedFHRPGroup.


        :return: The protocol of this NestedFHRPGroup.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NestedFHRPGroup.


        :param protocol: The protocol of this NestedFHRPGroup.
        :type protocol: str
        """
        allowed_values = ["vrrp2", "vrrp3", "carp", "clusterxl", "hsrp", "glbp", "other"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def url(self):
        """Gets the url of this NestedFHRPGroup.


        :return: The url of this NestedFHRPGroup.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NestedFHRPGroup.


        :param url: The url of this NestedFHRPGroup.
        :type url: str
        """

        self._url = url
