# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_logic import FilterLogic
from openapi_server.models.type1 import Type1
from openapi_server.models.ui_visibility import UiVisibility
import re
from openapi_server import util


class CustomField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choices: List[str]=None, content_types: list[str]=None, created: datetime=None, data_type: str=None, default: object=None, description: str=None, display: str=None, filter_logic: FilterLogic=None, group_name: str=None, id: int=None, label: str=None, last_updated: datetime=None, name: str=None, object_type: str=None, required: bool=None, search_weight: int=None, type: Type1=None, ui_visibility: UiVisibility=None, url: str=None, validation_maximum: int=None, validation_minimum: int=None, validation_regex: str=None, weight: int=None):
        """CustomField - a model defined in OpenAPI

        :param choices: The choices of this CustomField.
        :param content_types: The content_types of this CustomField.
        :param created: The created of this CustomField.
        :param data_type: The data_type of this CustomField.
        :param default: The default of this CustomField.
        :param description: The description of this CustomField.
        :param display: The display of this CustomField.
        :param filter_logic: The filter_logic of this CustomField.
        :param group_name: The group_name of this CustomField.
        :param id: The id of this CustomField.
        :param label: The label of this CustomField.
        :param last_updated: The last_updated of this CustomField.
        :param name: The name of this CustomField.
        :param object_type: The object_type of this CustomField.
        :param required: The required of this CustomField.
        :param search_weight: The search_weight of this CustomField.
        :param type: The type of this CustomField.
        :param ui_visibility: The ui_visibility of this CustomField.
        :param url: The url of this CustomField.
        :param validation_maximum: The validation_maximum of this CustomField.
        :param validation_minimum: The validation_minimum of this CustomField.
        :param validation_regex: The validation_regex of this CustomField.
        :param weight: The weight of this CustomField.
        """
        self.openapi_types = {
            'choices': List[str],
            'content_types': list[str],
            'created': datetime,
            'data_type': str,
            'default': object,
            'description': str,
            'display': str,
            'filter_logic': FilterLogic,
            'group_name': str,
            'id': int,
            'label': str,
            'last_updated': datetime,
            'name': str,
            'object_type': str,
            'required': bool,
            'search_weight': int,
            'type': Type1,
            'ui_visibility': UiVisibility,
            'url': str,
            'validation_maximum': int,
            'validation_minimum': int,
            'validation_regex': str,
            'weight': int
        }

        self.attribute_map = {
            'choices': 'choices',
            'content_types': 'content_types',
            'created': 'created',
            'data_type': 'data_type',
            'default': 'default',
            'description': 'description',
            'display': 'display',
            'filter_logic': 'filter_logic',
            'group_name': 'group_name',
            'id': 'id',
            'label': 'label',
            'last_updated': 'last_updated',
            'name': 'name',
            'object_type': 'object_type',
            'required': 'required',
            'search_weight': 'search_weight',
            'type': 'type',
            'ui_visibility': 'ui_visibility',
            'url': 'url',
            'validation_maximum': 'validation_maximum',
            'validation_minimum': 'validation_minimum',
            'validation_regex': 'validation_regex',
            'weight': 'weight'
        }

        self._choices = choices
        self._content_types = content_types
        self._created = created
        self._data_type = data_type
        self._default = default
        self._description = description
        self._display = display
        self._filter_logic = filter_logic
        self._group_name = group_name
        self._id = id
        self._label = label
        self._last_updated = last_updated
        self._name = name
        self._object_type = object_type
        self._required = required
        self._search_weight = search_weight
        self._type = type
        self._ui_visibility = ui_visibility
        self._url = url
        self._validation_maximum = validation_maximum
        self._validation_minimum = validation_minimum
        self._validation_regex = validation_regex
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomField of this CustomField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choices(self):
        """Gets the choices of this CustomField.

        Comma-separated list of available choices (for selection fields)

        :return: The choices of this CustomField.
        :rtype: List[str]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this CustomField.

        Comma-separated list of available choices (for selection fields)

        :param choices: The choices of this CustomField.
        :type choices: List[str]
        """

        self._choices = choices

    @property
    def content_types(self):
        """Gets the content_types of this CustomField.


        :return: The content_types of this CustomField.
        :rtype: list[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this CustomField.


        :param content_types: The content_types of this CustomField.
        :type content_types: list[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")

        self._content_types = content_types

    @property
    def created(self):
        """Gets the created of this CustomField.


        :return: The created of this CustomField.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CustomField.


        :param created: The created of this CustomField.
        :type created: datetime
        """

        self._created = created

    @property
    def data_type(self):
        """Gets the data_type of this CustomField.


        :return: The data_type of this CustomField.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this CustomField.


        :param data_type: The data_type of this CustomField.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def default(self):
        """Gets the default of this CustomField.

        Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").

        :return: The default of this CustomField.
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CustomField.

        Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").

        :param default: The default of this CustomField.
        :type default: object
        """

        self._default = default

    @property
    def description(self):
        """Gets the description of this CustomField.


        :return: The description of this CustomField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomField.


        :param description: The description of this CustomField.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this CustomField.


        :return: The display of this CustomField.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CustomField.


        :param display: The display of this CustomField.
        :type display: str
        """

        self._display = display

    @property
    def filter_logic(self):
        """Gets the filter_logic of this CustomField.


        :return: The filter_logic of this CustomField.
        :rtype: FilterLogic
        """
        return self._filter_logic

    @filter_logic.setter
    def filter_logic(self, filter_logic):
        """Sets the filter_logic of this CustomField.


        :param filter_logic: The filter_logic of this CustomField.
        :type filter_logic: FilterLogic
        """

        self._filter_logic = filter_logic

    @property
    def group_name(self):
        """Gets the group_name of this CustomField.

        Custom fields within the same group will be displayed together

        :return: The group_name of this CustomField.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CustomField.

        Custom fields within the same group will be displayed together

        :param group_name: The group_name of this CustomField.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 50:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `50`")

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this CustomField.


        :return: The id of this CustomField.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomField.


        :param id: The id of this CustomField.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this CustomField.

        Name of the field as displayed to users (if not provided, the field's name will be used)

        :return: The label of this CustomField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomField.

        Name of the field as displayed to users (if not provided, the field's name will be used)

        :param label: The label of this CustomField.
        :type label: str
        """
        if label is not None and len(label) > 50:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `50`")

        self._label = label

    @property
    def last_updated(self):
        """Gets the last_updated of this CustomField.


        :return: The last_updated of this CustomField.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CustomField.


        :param last_updated: The last_updated of this CustomField.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this CustomField.

        Internal field name

        :return: The name of this CustomField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomField.

        Internal field name

        :param name: The name of this CustomField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-z0-9_]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-z0-9_]+$/`")

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this CustomField.


        :return: The object_type of this CustomField.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this CustomField.


        :param object_type: The object_type of this CustomField.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def required(self):
        """Gets the required of this CustomField.

        If true, this field is required when creating new objects or editing an existing object.

        :return: The required of this CustomField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CustomField.

        If true, this field is required when creating new objects or editing an existing object.

        :param required: The required of this CustomField.
        :type required: bool
        """

        self._required = required

    @property
    def search_weight(self):
        """Gets the search_weight of this CustomField.

        Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.

        :return: The search_weight of this CustomField.
        :rtype: int
        """
        return self._search_weight

    @search_weight.setter
    def search_weight(self, search_weight):
        """Sets the search_weight of this CustomField.

        Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.

        :param search_weight: The search_weight of this CustomField.
        :type search_weight: int
        """
        if search_weight is not None and search_weight > 32767:
            raise ValueError("Invalid value for `search_weight`, must be a value less than or equal to `32767`")
        if search_weight is not None and search_weight < 0:
            raise ValueError("Invalid value for `search_weight`, must be a value greater than or equal to `0`")

        self._search_weight = search_weight

    @property
    def type(self):
        """Gets the type of this CustomField.


        :return: The type of this CustomField.
        :rtype: Type1
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomField.


        :param type: The type of this CustomField.
        :type type: Type1
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def ui_visibility(self):
        """Gets the ui_visibility of this CustomField.


        :return: The ui_visibility of this CustomField.
        :rtype: UiVisibility
        """
        return self._ui_visibility

    @ui_visibility.setter
    def ui_visibility(self, ui_visibility):
        """Sets the ui_visibility of this CustomField.


        :param ui_visibility: The ui_visibility of this CustomField.
        :type ui_visibility: UiVisibility
        """

        self._ui_visibility = ui_visibility

    @property
    def url(self):
        """Gets the url of this CustomField.


        :return: The url of this CustomField.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CustomField.


        :param url: The url of this CustomField.
        :type url: str
        """

        self._url = url

    @property
    def validation_maximum(self):
        """Gets the validation_maximum of this CustomField.

        Maximum allowed value (for numeric fields)

        :return: The validation_maximum of this CustomField.
        :rtype: int
        """
        return self._validation_maximum

    @validation_maximum.setter
    def validation_maximum(self, validation_maximum):
        """Sets the validation_maximum of this CustomField.

        Maximum allowed value (for numeric fields)

        :param validation_maximum: The validation_maximum of this CustomField.
        :type validation_maximum: int
        """
        if validation_maximum is not None and validation_maximum > 2147483647:
            raise ValueError("Invalid value for `validation_maximum`, must be a value less than or equal to `2147483647`")
        if validation_maximum is not None and validation_maximum < -2147483648:
            raise ValueError("Invalid value for `validation_maximum`, must be a value greater than or equal to `-2147483648`")

        self._validation_maximum = validation_maximum

    @property
    def validation_minimum(self):
        """Gets the validation_minimum of this CustomField.

        Minimum allowed value (for numeric fields)

        :return: The validation_minimum of this CustomField.
        :rtype: int
        """
        return self._validation_minimum

    @validation_minimum.setter
    def validation_minimum(self, validation_minimum):
        """Sets the validation_minimum of this CustomField.

        Minimum allowed value (for numeric fields)

        :param validation_minimum: The validation_minimum of this CustomField.
        :type validation_minimum: int
        """
        if validation_minimum is not None and validation_minimum > 2147483647:
            raise ValueError("Invalid value for `validation_minimum`, must be a value less than or equal to `2147483647`")
        if validation_minimum is not None and validation_minimum < -2147483648:
            raise ValueError("Invalid value for `validation_minimum`, must be a value greater than or equal to `-2147483648`")

        self._validation_minimum = validation_minimum

    @property
    def validation_regex(self):
        """Gets the validation_regex of this CustomField.

        Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.

        :return: The validation_regex of this CustomField.
        :rtype: str
        """
        return self._validation_regex

    @validation_regex.setter
    def validation_regex(self, validation_regex):
        """Sets the validation_regex of this CustomField.

        Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.

        :param validation_regex: The validation_regex of this CustomField.
        :type validation_regex: str
        """
        if validation_regex is not None and len(validation_regex) > 500:
            raise ValueError("Invalid value for `validation_regex`, length must be less than or equal to `500`")

        self._validation_regex = validation_regex

    @property
    def weight(self):
        """Gets the weight of this CustomField.

        Fields with higher weights appear lower in a form.

        :return: The weight of this CustomField.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CustomField.

        Fields with higher weights appear lower in a form.

        :param weight: The weight of this CustomField.
        :type weight: int
        """
        if weight is not None and weight > 32767:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
