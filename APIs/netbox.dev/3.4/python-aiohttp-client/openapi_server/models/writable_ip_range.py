# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class WritableIPRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: int=None, comments: str=None, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, end_address: str=None, family: str=None, id: int=None, last_updated: datetime=None, role: int=None, size: int=None, start_address: str=None, status: str=None, tags: List[NestedTag]=None, tenant: int=None, url: str=None, vrf: int=None):
        """WritableIPRange - a model defined in OpenAPI

        :param children: The children of this WritableIPRange.
        :param comments: The comments of this WritableIPRange.
        :param created: The created of this WritableIPRange.
        :param custom_fields: The custom_fields of this WritableIPRange.
        :param description: The description of this WritableIPRange.
        :param display: The display of this WritableIPRange.
        :param end_address: The end_address of this WritableIPRange.
        :param family: The family of this WritableIPRange.
        :param id: The id of this WritableIPRange.
        :param last_updated: The last_updated of this WritableIPRange.
        :param role: The role of this WritableIPRange.
        :param size: The size of this WritableIPRange.
        :param start_address: The start_address of this WritableIPRange.
        :param status: The status of this WritableIPRange.
        :param tags: The tags of this WritableIPRange.
        :param tenant: The tenant of this WritableIPRange.
        :param url: The url of this WritableIPRange.
        :param vrf: The vrf of this WritableIPRange.
        """
        self.openapi_types = {
            'children': int,
            'comments': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'end_address': str,
            'family': str,
            'id': int,
            'last_updated': datetime,
            'role': int,
            'size': int,
            'start_address': str,
            'status': str,
            'tags': List[NestedTag],
            'tenant': int,
            'url': str,
            'vrf': int
        }

        self.attribute_map = {
            'children': 'children',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'end_address': 'end_address',
            'family': 'family',
            'id': 'id',
            'last_updated': 'last_updated',
            'role': 'role',
            'size': 'size',
            'start_address': 'start_address',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'url': 'url',
            'vrf': 'vrf'
        }

        self._children = children
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._end_address = end_address
        self._family = family
        self._id = id
        self._last_updated = last_updated
        self._role = role
        self._size = size
        self._start_address = start_address
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._url = url
        self._vrf = vrf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableIPRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableIPRange of this WritableIPRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this WritableIPRange.


        :return: The children of this WritableIPRange.
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this WritableIPRange.


        :param children: The children of this WritableIPRange.
        :type children: int
        """

        self._children = children

    @property
    def comments(self):
        """Gets the comments of this WritableIPRange.


        :return: The comments of this WritableIPRange.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableIPRange.


        :param comments: The comments of this WritableIPRange.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this WritableIPRange.


        :return: The created of this WritableIPRange.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableIPRange.


        :param created: The created of this WritableIPRange.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableIPRange.


        :return: The custom_fields of this WritableIPRange.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableIPRange.


        :param custom_fields: The custom_fields of this WritableIPRange.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableIPRange.


        :return: The description of this WritableIPRange.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableIPRange.


        :param description: The description of this WritableIPRange.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this WritableIPRange.


        :return: The display of this WritableIPRange.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableIPRange.


        :param display: The display of this WritableIPRange.
        :type display: str
        """

        self._display = display

    @property
    def end_address(self):
        """Gets the end_address of this WritableIPRange.

        IPv4 or IPv6 address (with mask)

        :return: The end_address of this WritableIPRange.
        :rtype: str
        """
        return self._end_address

    @end_address.setter
    def end_address(self, end_address):
        """Sets the end_address of this WritableIPRange.

        IPv4 or IPv6 address (with mask)

        :param end_address: The end_address of this WritableIPRange.
        :type end_address: str
        """
        if end_address is None:
            raise ValueError("Invalid value for `end_address`, must not be `None`")

        self._end_address = end_address

    @property
    def family(self):
        """Gets the family of this WritableIPRange.


        :return: The family of this WritableIPRange.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this WritableIPRange.


        :param family: The family of this WritableIPRange.
        :type family: str
        """

        self._family = family

    @property
    def id(self):
        """Gets the id of this WritableIPRange.


        :return: The id of this WritableIPRange.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableIPRange.


        :param id: The id of this WritableIPRange.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableIPRange.


        :return: The last_updated of this WritableIPRange.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableIPRange.


        :param last_updated: The last_updated of this WritableIPRange.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def role(self):
        """Gets the role of this WritableIPRange.

        The primary function of this range

        :return: The role of this WritableIPRange.
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritableIPRange.

        The primary function of this range

        :param role: The role of this WritableIPRange.
        :type role: int
        """

        self._role = role

    @property
    def size(self):
        """Gets the size of this WritableIPRange.


        :return: The size of this WritableIPRange.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this WritableIPRange.


        :param size: The size of this WritableIPRange.
        :type size: int
        """

        self._size = size

    @property
    def start_address(self):
        """Gets the start_address of this WritableIPRange.

        IPv4 or IPv6 address (with mask)

        :return: The start_address of this WritableIPRange.
        :rtype: str
        """
        return self._start_address

    @start_address.setter
    def start_address(self, start_address):
        """Sets the start_address of this WritableIPRange.

        IPv4 or IPv6 address (with mask)

        :param start_address: The start_address of this WritableIPRange.
        :type start_address: str
        """
        if start_address is None:
            raise ValueError("Invalid value for `start_address`, must not be `None`")

        self._start_address = start_address

    @property
    def status(self):
        """Gets the status of this WritableIPRange.

        Operational status of this range

        :return: The status of this WritableIPRange.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableIPRange.

        Operational status of this range

        :param status: The status of this WritableIPRange.
        :type status: str
        """
        allowed_values = ["active", "reserved", "deprecated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableIPRange.


        :return: The tags of this WritableIPRange.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableIPRange.


        :param tags: The tags of this WritableIPRange.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableIPRange.


        :return: The tenant of this WritableIPRange.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableIPRange.


        :param tenant: The tenant of this WritableIPRange.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def url(self):
        """Gets the url of this WritableIPRange.


        :return: The url of this WritableIPRange.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableIPRange.


        :param url: The url of this WritableIPRange.
        :type url: str
        """

        self._url = url

    @property
    def vrf(self):
        """Gets the vrf of this WritableIPRange.


        :return: The vrf of this WritableIPRange.
        :rtype: int
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this WritableIPRange.


        :param vrf: The vrf of this WritableIPRange.
        :type vrf: int
        """

        self._vrf = vrf
