# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Type7(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, value: str=None):
        """Type7 - a model defined in OpenAPI

        :param label: The label of this Type7.
        :param value: The value of this Type7.
        """
        self.openapi_types = {
            'label': str,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value'
        }

        self._label = label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type7':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type_7 of this Type7.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this Type7.


        :return: The label of this Type7.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Type7.


        :param label: The label of this Type7.
        :type label: str
        """
        allowed_values = ["C6", "C8", "C14", "C16", "C20", "C22", "P+N+E 4H", "P+N+E 6H", "P+N+E 9H", "2P+E 4H", "2P+E 6H", "2P+E 9H", "3P+E 4H", "3P+E 6H", "3P+E 9H", "3P+N+E 4H", "3P+N+E 6H", "3P+N+E 9H", "NEMA 1-15P", "NEMA 5-15P", "NEMA 5-20P", "NEMA 5-30P", "NEMA 5-50P", "NEMA 6-15P", "NEMA 6-20P", "NEMA 6-30P", "NEMA 6-50P", "NEMA 10-30P", "NEMA 10-50P", "NEMA 14-20P", "NEMA 14-30P", "NEMA 14-50P", "NEMA 14-60P", "NEMA 15-15P", "NEMA 15-20P", "NEMA 15-30P", "NEMA 15-50P", "NEMA 15-60P", "NEMA L1-15P", "NEMA L5-15P", "NEMA L5-20P", "NEMA L5-30P", "NEMA L5-50P", "NEMA L6-15P", "NEMA L6-20P", "NEMA L6-30P", "NEMA L6-50P", "NEMA L10-30P", "NEMA L14-20P", "NEMA L14-30P", "NEMA L14-50P", "NEMA L14-60P", "NEMA L15-20P", "NEMA L15-30P", "NEMA L15-50P", "NEMA L15-60P", "NEMA L21-20P", "NEMA L21-30P", "NEMA L22-30P", "CS6361C", "CS6365C", "CS8165C", "CS8265C", "CS8365C", "CS8465C", "ITA Type C (CEE 7/16)", "ITA Type E (CEE 7/6)", "ITA Type F (CEE 7/4)", "ITA Type E/F (CEE 7/7)", "ITA Type G (BS 1363)", "ITA Type H", "ITA Type I", "ITA Type J", "ITA Type K", "ITA Type L (CEI 23-50)", "ITA Type M (BS 546)", "ITA Type N", "ITA Type O", "USB Type A", "USB Type B", "USB Type C", "USB Mini A", "USB Mini B", "USB Micro A", "USB Micro B", "USB Micro AB", "USB 3.0 Type B", "USB 3.0 Micro B", "DC Terminal", "Saf-D-Grid", "Neutrik powerCON (20A)", "Neutrik powerCON (32A)", "Neutrik powerCON TRUE1", "Neutrik powerCON TRUE1 TOP", "Ubiquiti SmartPower", "Hardwired", "Other"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def value(self):
        """Gets the value of this Type7.


        :return: The value of this Type7.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Type7.


        :param value: The value of this Type7.
        :type value: str
        """
        allowed_values = ["iec-60320-c6", "iec-60320-c8", "iec-60320-c14", "iec-60320-c16", "iec-60320-c20", "iec-60320-c22", "iec-60309-p-n-e-4h", "iec-60309-p-n-e-6h", "iec-60309-p-n-e-9h", "iec-60309-2p-e-4h", "iec-60309-2p-e-6h", "iec-60309-2p-e-9h", "iec-60309-3p-e-4h", "iec-60309-3p-e-6h", "iec-60309-3p-e-9h", "iec-60309-3p-n-e-4h", "iec-60309-3p-n-e-6h", "iec-60309-3p-n-e-9h", "nema-1-15p", "nema-5-15p", "nema-5-20p", "nema-5-30p", "nema-5-50p", "nema-6-15p", "nema-6-20p", "nema-6-30p", "nema-6-50p", "nema-10-30p", "nema-10-50p", "nema-14-20p", "nema-14-30p", "nema-14-50p", "nema-14-60p", "nema-15-15p", "nema-15-20p", "nema-15-30p", "nema-15-50p", "nema-15-60p", "nema-l1-15p", "nema-l5-15p", "nema-l5-20p", "nema-l5-30p", "nema-l5-50p", "nema-l6-15p", "nema-l6-20p", "nema-l6-30p", "nema-l6-50p", "nema-l10-30p", "nema-l14-20p", "nema-l14-30p", "nema-l14-50p", "nema-l14-60p", "nema-l15-20p", "nema-l15-30p", "nema-l15-50p", "nema-l15-60p", "nema-l21-20p", "nema-l21-30p", "nema-l22-30p", "cs6361c", "cs6365c", "cs8165c", "cs8265c", "cs8365c", "cs8465c", "ita-c", "ita-e", "ita-f", "ita-ef", "ita-g", "ita-h", "ita-i", "ita-j", "ita-k", "ita-l", "ita-m", "ita-n", "ita-o", "usb-a", "usb-b", "usb-c", "usb-mini-a", "usb-mini-b", "usb-micro-a", "usb-micro-b", "usb-micro-ab", "usb-3-b", "usb-3-micro-b", "dc-terminal", "saf-d-grid", "neutrik-powercon-20", "neutrik-powercon-32", "neutrik-powercon-true1", "neutrik-powercon-true1-top", "ubiquiti-smartpower", "hardwired", "other"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
