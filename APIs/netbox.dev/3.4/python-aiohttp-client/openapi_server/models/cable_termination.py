# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CableTermination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cable: int=None, cable_end: str=None, display: str=None, id: int=None, termination: object=None, termination_id: int=None, termination_type: str=None, url: str=None):
        """CableTermination - a model defined in OpenAPI

        :param cable: The cable of this CableTermination.
        :param cable_end: The cable_end of this CableTermination.
        :param display: The display of this CableTermination.
        :param id: The id of this CableTermination.
        :param termination: The termination of this CableTermination.
        :param termination_id: The termination_id of this CableTermination.
        :param termination_type: The termination_type of this CableTermination.
        :param url: The url of this CableTermination.
        """
        self.openapi_types = {
            'cable': int,
            'cable_end': str,
            'display': str,
            'id': int,
            'termination': object,
            'termination_id': int,
            'termination_type': str,
            'url': str
        }

        self.attribute_map = {
            'cable': 'cable',
            'cable_end': 'cable_end',
            'display': 'display',
            'id': 'id',
            'termination': 'termination',
            'termination_id': 'termination_id',
            'termination_type': 'termination_type',
            'url': 'url'
        }

        self._cable = cable
        self._cable_end = cable_end
        self._display = display
        self._id = id
        self._termination = termination
        self._termination_id = termination_id
        self._termination_type = termination_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CableTermination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CableTermination of this CableTermination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cable(self):
        """Gets the cable of this CableTermination.


        :return: The cable of this CableTermination.
        :rtype: int
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this CableTermination.


        :param cable: The cable of this CableTermination.
        :type cable: int
        """
        if cable is None:
            raise ValueError("Invalid value for `cable`, must not be `None`")

        self._cable = cable

    @property
    def cable_end(self):
        """Gets the cable_end of this CableTermination.


        :return: The cable_end of this CableTermination.
        :rtype: str
        """
        return self._cable_end

    @cable_end.setter
    def cable_end(self, cable_end):
        """Sets the cable_end of this CableTermination.


        :param cable_end: The cable_end of this CableTermination.
        :type cable_end: str
        """
        allowed_values = ["A", "B"]  # noqa: E501
        if cable_end not in allowed_values:
            raise ValueError(
                "Invalid value for `cable_end` ({0}), must be one of {1}"
                .format(cable_end, allowed_values)
            )

        self._cable_end = cable_end

    @property
    def display(self):
        """Gets the display of this CableTermination.


        :return: The display of this CableTermination.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CableTermination.


        :param display: The display of this CableTermination.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this CableTermination.


        :return: The id of this CableTermination.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CableTermination.


        :param id: The id of this CableTermination.
        :type id: int
        """

        self._id = id

    @property
    def termination(self):
        """Gets the termination of this CableTermination.


        :return: The termination of this CableTermination.
        :rtype: object
        """
        return self._termination

    @termination.setter
    def termination(self, termination):
        """Sets the termination of this CableTermination.


        :param termination: The termination of this CableTermination.
        :type termination: object
        """

        self._termination = termination

    @property
    def termination_id(self):
        """Gets the termination_id of this CableTermination.


        :return: The termination_id of this CableTermination.
        :rtype: int
        """
        return self._termination_id

    @termination_id.setter
    def termination_id(self, termination_id):
        """Sets the termination_id of this CableTermination.


        :param termination_id: The termination_id of this CableTermination.
        :type termination_id: int
        """
        if termination_id is None:
            raise ValueError("Invalid value for `termination_id`, must not be `None`")
        if termination_id is not None and termination_id > -9223372036854775616:
            raise ValueError("Invalid value for `termination_id`, must be a value less than or equal to `-9223372036854775616`")
        if termination_id is not None and termination_id < 0:
            raise ValueError("Invalid value for `termination_id`, must be a value greater than or equal to `0`")

        self._termination_id = termination_id

    @property
    def termination_type(self):
        """Gets the termination_type of this CableTermination.


        :return: The termination_type of this CableTermination.
        :rtype: str
        """
        return self._termination_type

    @termination_type.setter
    def termination_type(self, termination_type):
        """Sets the termination_type of this CableTermination.


        :param termination_type: The termination_type of this CableTermination.
        :type termination_type: str
        """
        if termination_type is None:
            raise ValueError("Invalid value for `termination_type`, must not be `None`")

        self._termination_type = termination_type

    @property
    def url(self):
        """Gets the url of this CableTermination.


        :return: The url of this CableTermination.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CableTermination.


        :param url: The url of this CableTermination.
        :type url: str
        """

        self._url = url
