# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SavedFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_types: list[str]=None, created: datetime=None, description: str=None, display: str=None, enabled: bool=None, id: int=None, last_updated: datetime=None, name: str=None, parameters: object=None, shared: bool=None, slug: str=None, url: str=None, user: int=None, weight: int=None):
        """SavedFilter - a model defined in OpenAPI

        :param content_types: The content_types of this SavedFilter.
        :param created: The created of this SavedFilter.
        :param description: The description of this SavedFilter.
        :param display: The display of this SavedFilter.
        :param enabled: The enabled of this SavedFilter.
        :param id: The id of this SavedFilter.
        :param last_updated: The last_updated of this SavedFilter.
        :param name: The name of this SavedFilter.
        :param parameters: The parameters of this SavedFilter.
        :param shared: The shared of this SavedFilter.
        :param slug: The slug of this SavedFilter.
        :param url: The url of this SavedFilter.
        :param user: The user of this SavedFilter.
        :param weight: The weight of this SavedFilter.
        """
        self.openapi_types = {
            'content_types': list[str],
            'created': datetime,
            'description': str,
            'display': str,
            'enabled': bool,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'parameters': object,
            'shared': bool,
            'slug': str,
            'url': str,
            'user': int,
            'weight': int
        }

        self.attribute_map = {
            'content_types': 'content_types',
            'created': 'created',
            'description': 'description',
            'display': 'display',
            'enabled': 'enabled',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'parameters': 'parameters',
            'shared': 'shared',
            'slug': 'slug',
            'url': 'url',
            'user': 'user',
            'weight': 'weight'
        }

        self._content_types = content_types
        self._created = created
        self._description = description
        self._display = display
        self._enabled = enabled
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._parameters = parameters
        self._shared = shared
        self._slug = slug
        self._url = url
        self._user = user
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavedFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavedFilter of this SavedFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_types(self):
        """Gets the content_types of this SavedFilter.


        :return: The content_types of this SavedFilter.
        :rtype: list[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this SavedFilter.


        :param content_types: The content_types of this SavedFilter.
        :type content_types: list[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")

        self._content_types = content_types

    @property
    def created(self):
        """Gets the created of this SavedFilter.


        :return: The created of this SavedFilter.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SavedFilter.


        :param created: The created of this SavedFilter.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this SavedFilter.


        :return: The description of this SavedFilter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SavedFilter.


        :param description: The description of this SavedFilter.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this SavedFilter.


        :return: The display of this SavedFilter.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this SavedFilter.


        :param display: The display of this SavedFilter.
        :type display: str
        """

        self._display = display

    @property
    def enabled(self):
        """Gets the enabled of this SavedFilter.


        :return: The enabled of this SavedFilter.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SavedFilter.


        :param enabled: The enabled of this SavedFilter.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this SavedFilter.


        :return: The id of this SavedFilter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavedFilter.


        :param id: The id of this SavedFilter.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this SavedFilter.


        :return: The last_updated of this SavedFilter.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this SavedFilter.


        :param last_updated: The last_updated of this SavedFilter.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this SavedFilter.


        :return: The name of this SavedFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedFilter.


        :param name: The name of this SavedFilter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this SavedFilter.


        :return: The parameters of this SavedFilter.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SavedFilter.


        :param parameters: The parameters of this SavedFilter.
        :type parameters: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def shared(self):
        """Gets the shared of this SavedFilter.


        :return: The shared of this SavedFilter.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this SavedFilter.


        :param shared: The shared of this SavedFilter.
        :type shared: bool
        """

        self._shared = shared

    @property
    def slug(self):
        """Gets the slug of this SavedFilter.


        :return: The slug of this SavedFilter.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SavedFilter.


        :param slug: The slug of this SavedFilter.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 100:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `100`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def url(self):
        """Gets the url of this SavedFilter.


        :return: The url of this SavedFilter.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SavedFilter.


        :param url: The url of this SavedFilter.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this SavedFilter.


        :return: The user of this SavedFilter.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SavedFilter.


        :param user: The user of this SavedFilter.
        :type user: int
        """

        self._user = user

    @property
    def weight(self):
        """Gets the weight of this SavedFilter.


        :return: The weight of this SavedFilter.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SavedFilter.


        :param weight: The weight of this SavedFilter.
        :type weight: int
        """
        if weight is not None and weight > 32767:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
