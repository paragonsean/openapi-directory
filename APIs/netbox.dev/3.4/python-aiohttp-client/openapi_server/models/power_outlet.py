# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.component_nested_module import ComponentNestedModule
from openapi_server.models.feed_leg import FeedLeg
from openapi_server.models.nested_cable import NestedCable
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_power_port import NestedPowerPort
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.type6 import Type6
from openapi_server import util


class PowerOutlet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occupied: bool=None, cable: NestedCable=None, cable_end: str=None, connected_endpoints: List[str]=None, connected_endpoints_reachable: bool=None, connected_endpoints_type: str=None, created: datetime=None, custom_fields: object=None, description: str=None, device: NestedDevice=None, display: str=None, feed_leg: FeedLeg=None, id: int=None, label: str=None, last_updated: datetime=None, link_peers: List[str]=None, link_peers_type: str=None, mark_connected: bool=None, module: ComponentNestedModule=None, name: str=None, power_port: NestedPowerPort=None, tags: List[NestedTag]=None, type: Type6=None, url: str=None):
        """PowerOutlet - a model defined in OpenAPI

        :param occupied: The occupied of this PowerOutlet.
        :param cable: The cable of this PowerOutlet.
        :param cable_end: The cable_end of this PowerOutlet.
        :param connected_endpoints: The connected_endpoints of this PowerOutlet.
        :param connected_endpoints_reachable: The connected_endpoints_reachable of this PowerOutlet.
        :param connected_endpoints_type: The connected_endpoints_type of this PowerOutlet.
        :param created: The created of this PowerOutlet.
        :param custom_fields: The custom_fields of this PowerOutlet.
        :param description: The description of this PowerOutlet.
        :param device: The device of this PowerOutlet.
        :param display: The display of this PowerOutlet.
        :param feed_leg: The feed_leg of this PowerOutlet.
        :param id: The id of this PowerOutlet.
        :param label: The label of this PowerOutlet.
        :param last_updated: The last_updated of this PowerOutlet.
        :param link_peers: The link_peers of this PowerOutlet.
        :param link_peers_type: The link_peers_type of this PowerOutlet.
        :param mark_connected: The mark_connected of this PowerOutlet.
        :param module: The module of this PowerOutlet.
        :param name: The name of this PowerOutlet.
        :param power_port: The power_port of this PowerOutlet.
        :param tags: The tags of this PowerOutlet.
        :param type: The type of this PowerOutlet.
        :param url: The url of this PowerOutlet.
        """
        self.openapi_types = {
            'occupied': bool,
            'cable': NestedCable,
            'cable_end': str,
            'connected_endpoints': List[str],
            'connected_endpoints_reachable': bool,
            'connected_endpoints_type': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'device': NestedDevice,
            'display': str,
            'feed_leg': FeedLeg,
            'id': int,
            'label': str,
            'last_updated': datetime,
            'link_peers': List[str],
            'link_peers_type': str,
            'mark_connected': bool,
            'module': ComponentNestedModule,
            'name': str,
            'power_port': NestedPowerPort,
            'tags': List[NestedTag],
            'type': Type6,
            'url': str
        }

        self.attribute_map = {
            'occupied': '_occupied',
            'cable': 'cable',
            'cable_end': 'cable_end',
            'connected_endpoints': 'connected_endpoints',
            'connected_endpoints_reachable': 'connected_endpoints_reachable',
            'connected_endpoints_type': 'connected_endpoints_type',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device': 'device',
            'display': 'display',
            'feed_leg': 'feed_leg',
            'id': 'id',
            'label': 'label',
            'last_updated': 'last_updated',
            'link_peers': 'link_peers',
            'link_peers_type': 'link_peers_type',
            'mark_connected': 'mark_connected',
            'module': 'module',
            'name': 'name',
            'power_port': 'power_port',
            'tags': 'tags',
            'type': 'type',
            'url': 'url'
        }

        self._occupied = occupied
        self._cable = cable
        self._cable_end = cable_end
        self._connected_endpoints = connected_endpoints
        self._connected_endpoints_reachable = connected_endpoints_reachable
        self._connected_endpoints_type = connected_endpoints_type
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device = device
        self._display = display
        self._feed_leg = feed_leg
        self._id = id
        self._label = label
        self._last_updated = last_updated
        self._link_peers = link_peers
        self._link_peers_type = link_peers_type
        self._mark_connected = mark_connected
        self._module = module
        self._name = name
        self._power_port = power_port
        self._tags = tags
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PowerOutlet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PowerOutlet of this PowerOutlet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occupied(self):
        """Gets the occupied of this PowerOutlet.


        :return: The occupied of this PowerOutlet.
        :rtype: bool
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this PowerOutlet.


        :param occupied: The occupied of this PowerOutlet.
        :type occupied: bool
        """

        self._occupied = occupied

    @property
    def cable(self):
        """Gets the cable of this PowerOutlet.


        :return: The cable of this PowerOutlet.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this PowerOutlet.


        :param cable: The cable of this PowerOutlet.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def cable_end(self):
        """Gets the cable_end of this PowerOutlet.


        :return: The cable_end of this PowerOutlet.
        :rtype: str
        """
        return self._cable_end

    @cable_end.setter
    def cable_end(self, cable_end):
        """Sets the cable_end of this PowerOutlet.


        :param cable_end: The cable_end of this PowerOutlet.
        :type cable_end: str
        """
        if cable_end is not None and len(cable_end) < 1:
            raise ValueError("Invalid value for `cable_end`, length must be greater than or equal to `1`")

        self._cable_end = cable_end

    @property
    def connected_endpoints(self):
        """Gets the connected_endpoints of this PowerOutlet.

         Return the appropriate serializer for the type of connected object. 

        :return: The connected_endpoints of this PowerOutlet.
        :rtype: List[str]
        """
        return self._connected_endpoints

    @connected_endpoints.setter
    def connected_endpoints(self, connected_endpoints):
        """Sets the connected_endpoints of this PowerOutlet.

         Return the appropriate serializer for the type of connected object. 

        :param connected_endpoints: The connected_endpoints of this PowerOutlet.
        :type connected_endpoints: List[str]
        """

        self._connected_endpoints = connected_endpoints

    @property
    def connected_endpoints_reachable(self):
        """Gets the connected_endpoints_reachable of this PowerOutlet.


        :return: The connected_endpoints_reachable of this PowerOutlet.
        :rtype: bool
        """
        return self._connected_endpoints_reachable

    @connected_endpoints_reachable.setter
    def connected_endpoints_reachable(self, connected_endpoints_reachable):
        """Sets the connected_endpoints_reachable of this PowerOutlet.


        :param connected_endpoints_reachable: The connected_endpoints_reachable of this PowerOutlet.
        :type connected_endpoints_reachable: bool
        """

        self._connected_endpoints_reachable = connected_endpoints_reachable

    @property
    def connected_endpoints_type(self):
        """Gets the connected_endpoints_type of this PowerOutlet.


        :return: The connected_endpoints_type of this PowerOutlet.
        :rtype: str
        """
        return self._connected_endpoints_type

    @connected_endpoints_type.setter
    def connected_endpoints_type(self, connected_endpoints_type):
        """Sets the connected_endpoints_type of this PowerOutlet.


        :param connected_endpoints_type: The connected_endpoints_type of this PowerOutlet.
        :type connected_endpoints_type: str
        """

        self._connected_endpoints_type = connected_endpoints_type

    @property
    def created(self):
        """Gets the created of this PowerOutlet.


        :return: The created of this PowerOutlet.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PowerOutlet.


        :param created: The created of this PowerOutlet.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PowerOutlet.


        :return: The custom_fields of this PowerOutlet.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PowerOutlet.


        :param custom_fields: The custom_fields of this PowerOutlet.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this PowerOutlet.


        :return: The description of this PowerOutlet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PowerOutlet.


        :param description: The description of this PowerOutlet.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this PowerOutlet.


        :return: The device of this PowerOutlet.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PowerOutlet.


        :param device: The device of this PowerOutlet.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def display(self):
        """Gets the display of this PowerOutlet.


        :return: The display of this PowerOutlet.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this PowerOutlet.


        :param display: The display of this PowerOutlet.
        :type display: str
        """

        self._display = display

    @property
    def feed_leg(self):
        """Gets the feed_leg of this PowerOutlet.


        :return: The feed_leg of this PowerOutlet.
        :rtype: FeedLeg
        """
        return self._feed_leg

    @feed_leg.setter
    def feed_leg(self, feed_leg):
        """Sets the feed_leg of this PowerOutlet.


        :param feed_leg: The feed_leg of this PowerOutlet.
        :type feed_leg: FeedLeg
        """

        self._feed_leg = feed_leg

    @property
    def id(self):
        """Gets the id of this PowerOutlet.


        :return: The id of this PowerOutlet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PowerOutlet.


        :param id: The id of this PowerOutlet.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this PowerOutlet.

        Physical label

        :return: The label of this PowerOutlet.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PowerOutlet.

        Physical label

        :param label: The label of this PowerOutlet.
        :type label: str
        """
        if label is not None and len(label) > 64:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")

        self._label = label

    @property
    def last_updated(self):
        """Gets the last_updated of this PowerOutlet.


        :return: The last_updated of this PowerOutlet.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PowerOutlet.


        :param last_updated: The last_updated of this PowerOutlet.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def link_peers(self):
        """Gets the link_peers of this PowerOutlet.

         Return the appropriate serializer for the link termination model. 

        :return: The link_peers of this PowerOutlet.
        :rtype: List[str]
        """
        return self._link_peers

    @link_peers.setter
    def link_peers(self, link_peers):
        """Sets the link_peers of this PowerOutlet.

         Return the appropriate serializer for the link termination model. 

        :param link_peers: The link_peers of this PowerOutlet.
        :type link_peers: List[str]
        """

        self._link_peers = link_peers

    @property
    def link_peers_type(self):
        """Gets the link_peers_type of this PowerOutlet.


        :return: The link_peers_type of this PowerOutlet.
        :rtype: str
        """
        return self._link_peers_type

    @link_peers_type.setter
    def link_peers_type(self, link_peers_type):
        """Sets the link_peers_type of this PowerOutlet.


        :param link_peers_type: The link_peers_type of this PowerOutlet.
        :type link_peers_type: str
        """

        self._link_peers_type = link_peers_type

    @property
    def mark_connected(self):
        """Gets the mark_connected of this PowerOutlet.

        Treat as if a cable is connected

        :return: The mark_connected of this PowerOutlet.
        :rtype: bool
        """
        return self._mark_connected

    @mark_connected.setter
    def mark_connected(self, mark_connected):
        """Sets the mark_connected of this PowerOutlet.

        Treat as if a cable is connected

        :param mark_connected: The mark_connected of this PowerOutlet.
        :type mark_connected: bool
        """

        self._mark_connected = mark_connected

    @property
    def module(self):
        """Gets the module of this PowerOutlet.


        :return: The module of this PowerOutlet.
        :rtype: ComponentNestedModule
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this PowerOutlet.


        :param module: The module of this PowerOutlet.
        :type module: ComponentNestedModule
        """

        self._module = module

    @property
    def name(self):
        """Gets the name of this PowerOutlet.


        :return: The name of this PowerOutlet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PowerOutlet.


        :param name: The name of this PowerOutlet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def power_port(self):
        """Gets the power_port of this PowerOutlet.


        :return: The power_port of this PowerOutlet.
        :rtype: NestedPowerPort
        """
        return self._power_port

    @power_port.setter
    def power_port(self, power_port):
        """Sets the power_port of this PowerOutlet.


        :param power_port: The power_port of this PowerOutlet.
        :type power_port: NestedPowerPort
        """

        self._power_port = power_port

    @property
    def tags(self):
        """Gets the tags of this PowerOutlet.


        :return: The tags of this PowerOutlet.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PowerOutlet.


        :param tags: The tags of this PowerOutlet.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this PowerOutlet.


        :return: The type of this PowerOutlet.
        :rtype: Type6
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PowerOutlet.


        :param type: The type of this PowerOutlet.
        :type type: Type6
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this PowerOutlet.


        :return: The url of this PowerOutlet.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PowerOutlet.


        :param url: The url of this PowerOutlet.
        :type url: str
        """

        self._url = url
