# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Type2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, value: str=None):
        """Type2 - a model defined in OpenAPI

        :param label: The label of this Type2.
        :param value: The value of this Type2.
        """
        self.openapi_types = {
            'label': str,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value'
        }

        self._label = label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type_2 of this Type2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this Type2.


        :return: The label of this Type2.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Type2.


        :param label: The label of this Type2.
        :type label: str
        """
        allowed_values = ["8P8C", "8P6C", "8P4C", "8P2C", "6P6C", "6P4C", "6P2C", "4P4C", "4P2C", "GG45", "TERA 4P", "TERA 2P", "TERA 1P", "110 Punch", "BNC", "F Connector", "N Connector", "MRJ21", "FC", "LC", "LC/PC", "LC/UPC", "LC/APC", "LSH", "LSH/PC", "LSH/UPC", "LSH/APC", "MPO", "MTRJ", "SC", "SC/PC", "SC/UPC", "SC/APC", "ST", "CS", "SN", "SMA 905", "SMA 906", "URM-P2", "URM-P4", "URM-P8", "Splice", "Other"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def value(self):
        """Gets the value of this Type2.


        :return: The value of this Type2.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Type2.


        :param value: The value of this Type2.
        :type value: str
        """
        allowed_values = ["8p8c", "8p6c", "8p4c", "8p2c", "6p6c", "6p4c", "6p2c", "4p4c", "4p2c", "gg45", "tera-4p", "tera-2p", "tera-1p", "110-punch", "bnc", "f", "n", "mrj21", "fc", "lc", "lc-pc", "lc-upc", "lc-apc", "lsh", "lsh-pc", "lsh-upc", "lsh-apc", "mpo", "mtrj", "sc", "sc-pc", "sc-upc", "sc-apc", "st", "cs", "sn", "sma-905", "sma-906", "urm-p2", "urm-p4", "urm-p8", "splice", "other"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
