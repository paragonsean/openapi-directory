# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device import NestedDevice
from openapi_server import util


class NestedVirtualChassis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: str=None, id: int=None, master: NestedDevice=None, member_count: int=None, name: str=None, url: str=None):
        """NestedVirtualChassis - a model defined in OpenAPI

        :param display: The display of this NestedVirtualChassis.
        :param id: The id of this NestedVirtualChassis.
        :param master: The master of this NestedVirtualChassis.
        :param member_count: The member_count of this NestedVirtualChassis.
        :param name: The name of this NestedVirtualChassis.
        :param url: The url of this NestedVirtualChassis.
        """
        self.openapi_types = {
            'display': str,
            'id': int,
            'master': NestedDevice,
            'member_count': int,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'display': 'display',
            'id': 'id',
            'master': 'master',
            'member_count': 'member_count',
            'name': 'name',
            'url': 'url'
        }

        self._display = display
        self._id = id
        self._master = master
        self._member_count = member_count
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedVirtualChassis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedVirtualChassis of this NestedVirtualChassis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this NestedVirtualChassis.


        :return: The display of this NestedVirtualChassis.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this NestedVirtualChassis.


        :param display: The display of this NestedVirtualChassis.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this NestedVirtualChassis.


        :return: The id of this NestedVirtualChassis.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedVirtualChassis.


        :param id: The id of this NestedVirtualChassis.
        :type id: int
        """

        self._id = id

    @property
    def master(self):
        """Gets the master of this NestedVirtualChassis.


        :return: The master of this NestedVirtualChassis.
        :rtype: NestedDevice
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this NestedVirtualChassis.


        :param master: The master of this NestedVirtualChassis.
        :type master: NestedDevice
        """
        if master is None:
            raise ValueError("Invalid value for `master`, must not be `None`")

        self._master = master

    @property
    def member_count(self):
        """Gets the member_count of this NestedVirtualChassis.


        :return: The member_count of this NestedVirtualChassis.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this NestedVirtualChassis.


        :param member_count: The member_count of this NestedVirtualChassis.
        :type member_count: int
        """

        self._member_count = member_count

    @property
    def name(self):
        """Gets the name of this NestedVirtualChassis.


        :return: The name of this NestedVirtualChassis.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NestedVirtualChassis.


        :param name: The name of this NestedVirtualChassis.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this NestedVirtualChassis.


        :return: The url of this NestedVirtualChassis.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NestedVirtualChassis.


        :param url: The url of this NestedVirtualChassis.
        :type url: str
        """

        self._url = url
