# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenericObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object: object=None, object_id: int=None, object_type: str=None):
        """GenericObject - a model defined in OpenAPI

        :param object: The object of this GenericObject.
        :param object_id: The object_id of this GenericObject.
        :param object_type: The object_type of this GenericObject.
        """
        self.openapi_types = {
            'object': object,
            'object_id': int,
            'object_type': str
        }

        self.attribute_map = {
            'object': 'object',
            'object_id': 'object_id',
            'object_type': 'object_type'
        }

        self._object = object
        self._object_id = object_id
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericObject of this GenericObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object(self):
        """Gets the object of this GenericObject.


        :return: The object of this GenericObject.
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this GenericObject.


        :param object: The object of this GenericObject.
        :type object: object
        """

        self._object = object

    @property
    def object_id(self):
        """Gets the object_id of this GenericObject.


        :return: The object_id of this GenericObject.
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this GenericObject.


        :param object_id: The object_id of this GenericObject.
        :type object_id: int
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this GenericObject.


        :return: The object_type of this GenericObject.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this GenericObject.


        :param object_type: The object_type of this GenericObject.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
