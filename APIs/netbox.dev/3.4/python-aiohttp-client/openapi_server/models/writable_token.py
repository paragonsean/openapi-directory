# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_ips: List[object]=[], created: datetime=None, description: str=None, display: str=None, expires: datetime=None, id: int=None, key: str=None, last_used: datetime=None, url: str=None, user: int=None, write_enabled: bool=None):
        """WritableToken - a model defined in OpenAPI

        :param allowed_ips: The allowed_ips of this WritableToken.
        :param created: The created of this WritableToken.
        :param description: The description of this WritableToken.
        :param display: The display of this WritableToken.
        :param expires: The expires of this WritableToken.
        :param id: The id of this WritableToken.
        :param key: The key of this WritableToken.
        :param last_used: The last_used of this WritableToken.
        :param url: The url of this WritableToken.
        :param user: The user of this WritableToken.
        :param write_enabled: The write_enabled of this WritableToken.
        """
        self.openapi_types = {
            'allowed_ips': List[object],
            'created': datetime,
            'description': str,
            'display': str,
            'expires': datetime,
            'id': int,
            'key': str,
            'last_used': datetime,
            'url': str,
            'user': int,
            'write_enabled': bool
        }

        self.attribute_map = {
            'allowed_ips': 'allowed_ips',
            'created': 'created',
            'description': 'description',
            'display': 'display',
            'expires': 'expires',
            'id': 'id',
            'key': 'key',
            'last_used': 'last_used',
            'url': 'url',
            'user': 'user',
            'write_enabled': 'write_enabled'
        }

        self._allowed_ips = allowed_ips
        self._created = created
        self._description = description
        self._display = display
        self._expires = expires
        self._id = id
        self._key = key
        self._last_used = last_used
        self._url = url
        self._user = user
        self._write_enabled = write_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableToken of this WritableToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_ips(self):
        """Gets the allowed_ips of this WritableToken.


        :return: The allowed_ips of this WritableToken.
        :rtype: List[object]
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips):
        """Sets the allowed_ips of this WritableToken.


        :param allowed_ips: The allowed_ips of this WritableToken.
        :type allowed_ips: List[object]
        """

        self._allowed_ips = allowed_ips

    @property
    def created(self):
        """Gets the created of this WritableToken.


        :return: The created of this WritableToken.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableToken.


        :param created: The created of this WritableToken.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this WritableToken.


        :return: The description of this WritableToken.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableToken.


        :param description: The description of this WritableToken.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this WritableToken.


        :return: The display of this WritableToken.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableToken.


        :param display: The display of this WritableToken.
        :type display: str
        """

        self._display = display

    @property
    def expires(self):
        """Gets the expires of this WritableToken.


        :return: The expires of this WritableToken.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this WritableToken.


        :param expires: The expires of this WritableToken.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def id(self):
        """Gets the id of this WritableToken.


        :return: The id of this WritableToken.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableToken.


        :param id: The id of this WritableToken.
        :type id: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this WritableToken.


        :return: The key of this WritableToken.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WritableToken.


        :param key: The key of this WritableToken.
        :type key: str
        """
        if key is not None and len(key) > 40:
            raise ValueError("Invalid value for `key`, length must be less than or equal to `40`")
        if key is not None and len(key) < 40:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `40`")

        self._key = key

    @property
    def last_used(self):
        """Gets the last_used of this WritableToken.


        :return: The last_used of this WritableToken.
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this WritableToken.


        :param last_used: The last_used of this WritableToken.
        :type last_used: datetime
        """

        self._last_used = last_used

    @property
    def url(self):
        """Gets the url of this WritableToken.


        :return: The url of this WritableToken.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableToken.


        :param url: The url of this WritableToken.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this WritableToken.


        :return: The user of this WritableToken.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WritableToken.


        :param user: The user of this WritableToken.
        :type user: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def write_enabled(self):
        """Gets the write_enabled of this WritableToken.

        Permit create/update/delete operations using this key

        :return: The write_enabled of this WritableToken.
        :rtype: bool
        """
        return self._write_enabled

    @write_enabled.setter
    def write_enabled(self, write_enabled):
        """Sets the write_enabled of this WritableToken.

        Permit create/update/delete operations using this key

        :param write_enabled: The write_enabled of this WritableToken.
        :type write_enabled: bool
        """

        self._write_enabled = write_enabled
