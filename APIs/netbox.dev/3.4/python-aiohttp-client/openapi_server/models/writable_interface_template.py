# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableInterfaceTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, device_type: int=None, display: str=None, id: int=None, label: str=None, last_updated: datetime=None, mgmt_only: bool=None, module_type: int=None, name: str=None, poe_mode: str=None, poe_type: str=None, type: str=None, url: str=None):
        """WritableInterfaceTemplate - a model defined in OpenAPI

        :param created: The created of this WritableInterfaceTemplate.
        :param description: The description of this WritableInterfaceTemplate.
        :param device_type: The device_type of this WritableInterfaceTemplate.
        :param display: The display of this WritableInterfaceTemplate.
        :param id: The id of this WritableInterfaceTemplate.
        :param label: The label of this WritableInterfaceTemplate.
        :param last_updated: The last_updated of this WritableInterfaceTemplate.
        :param mgmt_only: The mgmt_only of this WritableInterfaceTemplate.
        :param module_type: The module_type of this WritableInterfaceTemplate.
        :param name: The name of this WritableInterfaceTemplate.
        :param poe_mode: The poe_mode of this WritableInterfaceTemplate.
        :param poe_type: The poe_type of this WritableInterfaceTemplate.
        :param type: The type of this WritableInterfaceTemplate.
        :param url: The url of this WritableInterfaceTemplate.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'device_type': int,
            'display': str,
            'id': int,
            'label': str,
            'last_updated': datetime,
            'mgmt_only': bool,
            'module_type': int,
            'name': str,
            'poe_mode': str,
            'poe_type': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'device_type': 'device_type',
            'display': 'display',
            'id': 'id',
            'label': 'label',
            'last_updated': 'last_updated',
            'mgmt_only': 'mgmt_only',
            'module_type': 'module_type',
            'name': 'name',
            'poe_mode': 'poe_mode',
            'poe_type': 'poe_type',
            'type': 'type',
            'url': 'url'
        }

        self._created = created
        self._description = description
        self._device_type = device_type
        self._display = display
        self._id = id
        self._label = label
        self._last_updated = last_updated
        self._mgmt_only = mgmt_only
        self._module_type = module_type
        self._name = name
        self._poe_mode = poe_mode
        self._poe_type = poe_type
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableInterfaceTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableInterfaceTemplate of this WritableInterfaceTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this WritableInterfaceTemplate.


        :return: The created of this WritableInterfaceTemplate.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableInterfaceTemplate.


        :param created: The created of this WritableInterfaceTemplate.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this WritableInterfaceTemplate.


        :return: The description of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableInterfaceTemplate.


        :param description: The description of this WritableInterfaceTemplate.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_type(self):
        """Gets the device_type of this WritableInterfaceTemplate.


        :return: The device_type of this WritableInterfaceTemplate.
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WritableInterfaceTemplate.


        :param device_type: The device_type of this WritableInterfaceTemplate.
        :type device_type: int
        """

        self._device_type = device_type

    @property
    def display(self):
        """Gets the display of this WritableInterfaceTemplate.


        :return: The display of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableInterfaceTemplate.


        :param display: The display of this WritableInterfaceTemplate.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this WritableInterfaceTemplate.


        :return: The id of this WritableInterfaceTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableInterfaceTemplate.


        :param id: The id of this WritableInterfaceTemplate.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this WritableInterfaceTemplate.

        Physical label

        :return: The label of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WritableInterfaceTemplate.

        Physical label

        :param label: The label of this WritableInterfaceTemplate.
        :type label: str
        """
        if label is not None and len(label) > 64:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")

        self._label = label

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableInterfaceTemplate.


        :return: The last_updated of this WritableInterfaceTemplate.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableInterfaceTemplate.


        :param last_updated: The last_updated of this WritableInterfaceTemplate.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this WritableInterfaceTemplate.


        :return: The mgmt_only of this WritableInterfaceTemplate.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this WritableInterfaceTemplate.


        :param mgmt_only: The mgmt_only of this WritableInterfaceTemplate.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def module_type(self):
        """Gets the module_type of this WritableInterfaceTemplate.


        :return: The module_type of this WritableInterfaceTemplate.
        :rtype: int
        """
        return self._module_type

    @module_type.setter
    def module_type(self, module_type):
        """Sets the module_type of this WritableInterfaceTemplate.


        :param module_type: The module_type of this WritableInterfaceTemplate.
        :type module_type: int
        """

        self._module_type = module_type

    @property
    def name(self):
        """Gets the name of this WritableInterfaceTemplate.

         {module} is accepted as a substitution for the module bay position when attached to a module type. 

        :return: The name of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableInterfaceTemplate.

         {module} is accepted as a substitution for the module bay position when attached to a module type. 

        :param name: The name of this WritableInterfaceTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def poe_mode(self):
        """Gets the poe_mode of this WritableInterfaceTemplate.


        :return: The poe_mode of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._poe_mode

    @poe_mode.setter
    def poe_mode(self, poe_mode):
        """Sets the poe_mode of this WritableInterfaceTemplate.


        :param poe_mode: The poe_mode of this WritableInterfaceTemplate.
        :type poe_mode: str
        """
        allowed_values = ["pd", "pse"]  # noqa: E501
        if poe_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `poe_mode` ({0}), must be one of {1}"
                .format(poe_mode, allowed_values)
            )

        self._poe_mode = poe_mode

    @property
    def poe_type(self):
        """Gets the poe_type of this WritableInterfaceTemplate.


        :return: The poe_type of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._poe_type

    @poe_type.setter
    def poe_type(self, poe_type):
        """Sets the poe_type of this WritableInterfaceTemplate.


        :param poe_type: The poe_type of this WritableInterfaceTemplate.
        :type poe_type: str
        """
        allowed_values = ["type1-ieee802.3af", "type2-ieee802.3at", "type2-ieee802.3az", "type3-ieee802.3bt", "type4-ieee802.3bt", "passive-24v-2pair", "passive-24v-4pair", "passive-48v-2pair", "passive-48v-4pair"]  # noqa: E501
        if poe_type not in allowed_values:
            raise ValueError(
                "Invalid value for `poe_type` ({0}), must be one of {1}"
                .format(poe_type, allowed_values)
            )

        self._poe_type = poe_type

    @property
    def type(self):
        """Gets the type of this WritableInterfaceTemplate.


        :return: The type of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableInterfaceTemplate.


        :param type: The type of this WritableInterfaceTemplate.
        :type type: str
        """
        allowed_values = ["virtual", "bridge", "lag", "100base-fx", "100base-lfx", "100base-tx", "100base-t1", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "50gbase-x-sfp56", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cpak", "100gbase-x-qsfp28", "200gbase-x-qsfp56", "400gbase-x-qsfpdd", "400gbase-x-osfp", "800gbase-x-qsfpdd", "800gbase-x-osfp", "1000base-kx", "10gbase-kr", "10gbase-kx4", "25gbase-kr", "40gbase-kr4", "50gbase-kr", "100gbase-kp4", "100gbase-kr2", "100gbase-kr4", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "ieee802.11ay", "ieee802.15.1", "other-wireless", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "64gfc-qsfpp", "128gfc-qsfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "xdsl", "docsis", "gpon", "xg-pon", "xgs-pon", "ng-pon2", "epon", "10g-epon", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "cisco-stackwise-80", "cisco-stackwise-160", "cisco-stackwise-320", "cisco-stackwise-480", "cisco-stackwise-1t", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this WritableInterfaceTemplate.


        :return: The url of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableInterfaceTemplate.


        :param url: The url of this WritableInterfaceTemplate.
        :type url: str
        """

        self._url = url
