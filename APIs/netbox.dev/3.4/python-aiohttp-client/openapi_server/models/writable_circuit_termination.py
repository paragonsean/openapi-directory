# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cable import NestedCable
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class WritableCircuitTermination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occupied: bool=None, cable: NestedCable=None, cable_end: str=None, circuit: int=None, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, id: int=None, last_updated: datetime=None, link_peers: List[str]=None, link_peers_type: str=None, mark_connected: bool=None, port_speed: int=None, pp_info: str=None, provider_network: int=None, site: int=None, tags: List[NestedTag]=None, term_side: str=None, upstream_speed: int=None, url: str=None, xconnect_id: str=None):
        """WritableCircuitTermination - a model defined in OpenAPI

        :param occupied: The occupied of this WritableCircuitTermination.
        :param cable: The cable of this WritableCircuitTermination.
        :param cable_end: The cable_end of this WritableCircuitTermination.
        :param circuit: The circuit of this WritableCircuitTermination.
        :param created: The created of this WritableCircuitTermination.
        :param custom_fields: The custom_fields of this WritableCircuitTermination.
        :param description: The description of this WritableCircuitTermination.
        :param display: The display of this WritableCircuitTermination.
        :param id: The id of this WritableCircuitTermination.
        :param last_updated: The last_updated of this WritableCircuitTermination.
        :param link_peers: The link_peers of this WritableCircuitTermination.
        :param link_peers_type: The link_peers_type of this WritableCircuitTermination.
        :param mark_connected: The mark_connected of this WritableCircuitTermination.
        :param port_speed: The port_speed of this WritableCircuitTermination.
        :param pp_info: The pp_info of this WritableCircuitTermination.
        :param provider_network: The provider_network of this WritableCircuitTermination.
        :param site: The site of this WritableCircuitTermination.
        :param tags: The tags of this WritableCircuitTermination.
        :param term_side: The term_side of this WritableCircuitTermination.
        :param upstream_speed: The upstream_speed of this WritableCircuitTermination.
        :param url: The url of this WritableCircuitTermination.
        :param xconnect_id: The xconnect_id of this WritableCircuitTermination.
        """
        self.openapi_types = {
            'occupied': bool,
            'cable': NestedCable,
            'cable_end': str,
            'circuit': int,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'id': int,
            'last_updated': datetime,
            'link_peers': List[str],
            'link_peers_type': str,
            'mark_connected': bool,
            'port_speed': int,
            'pp_info': str,
            'provider_network': int,
            'site': int,
            'tags': List[NestedTag],
            'term_side': str,
            'upstream_speed': int,
            'url': str,
            'xconnect_id': str
        }

        self.attribute_map = {
            'occupied': '_occupied',
            'cable': 'cable',
            'cable_end': 'cable_end',
            'circuit': 'circuit',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'id': 'id',
            'last_updated': 'last_updated',
            'link_peers': 'link_peers',
            'link_peers_type': 'link_peers_type',
            'mark_connected': 'mark_connected',
            'port_speed': 'port_speed',
            'pp_info': 'pp_info',
            'provider_network': 'provider_network',
            'site': 'site',
            'tags': 'tags',
            'term_side': 'term_side',
            'upstream_speed': 'upstream_speed',
            'url': 'url',
            'xconnect_id': 'xconnect_id'
        }

        self._occupied = occupied
        self._cable = cable
        self._cable_end = cable_end
        self._circuit = circuit
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._id = id
        self._last_updated = last_updated
        self._link_peers = link_peers
        self._link_peers_type = link_peers_type
        self._mark_connected = mark_connected
        self._port_speed = port_speed
        self._pp_info = pp_info
        self._provider_network = provider_network
        self._site = site
        self._tags = tags
        self._term_side = term_side
        self._upstream_speed = upstream_speed
        self._url = url
        self._xconnect_id = xconnect_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableCircuitTermination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableCircuitTermination of this WritableCircuitTermination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occupied(self):
        """Gets the occupied of this WritableCircuitTermination.


        :return: The occupied of this WritableCircuitTermination.
        :rtype: bool
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this WritableCircuitTermination.


        :param occupied: The occupied of this WritableCircuitTermination.
        :type occupied: bool
        """

        self._occupied = occupied

    @property
    def cable(self):
        """Gets the cable of this WritableCircuitTermination.


        :return: The cable of this WritableCircuitTermination.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this WritableCircuitTermination.


        :param cable: The cable of this WritableCircuitTermination.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def cable_end(self):
        """Gets the cable_end of this WritableCircuitTermination.


        :return: The cable_end of this WritableCircuitTermination.
        :rtype: str
        """
        return self._cable_end

    @cable_end.setter
    def cable_end(self, cable_end):
        """Sets the cable_end of this WritableCircuitTermination.


        :param cable_end: The cable_end of this WritableCircuitTermination.
        :type cable_end: str
        """
        if cable_end is not None and len(cable_end) < 1:
            raise ValueError("Invalid value for `cable_end`, length must be greater than or equal to `1`")

        self._cable_end = cable_end

    @property
    def circuit(self):
        """Gets the circuit of this WritableCircuitTermination.


        :return: The circuit of this WritableCircuitTermination.
        :rtype: int
        """
        return self._circuit

    @circuit.setter
    def circuit(self, circuit):
        """Sets the circuit of this WritableCircuitTermination.


        :param circuit: The circuit of this WritableCircuitTermination.
        :type circuit: int
        """
        if circuit is None:
            raise ValueError("Invalid value for `circuit`, must not be `None`")

        self._circuit = circuit

    @property
    def created(self):
        """Gets the created of this WritableCircuitTermination.


        :return: The created of this WritableCircuitTermination.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableCircuitTermination.


        :param created: The created of this WritableCircuitTermination.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableCircuitTermination.


        :return: The custom_fields of this WritableCircuitTermination.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableCircuitTermination.


        :param custom_fields: The custom_fields of this WritableCircuitTermination.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableCircuitTermination.


        :return: The description of this WritableCircuitTermination.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableCircuitTermination.


        :param description: The description of this WritableCircuitTermination.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this WritableCircuitTermination.


        :return: The display of this WritableCircuitTermination.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableCircuitTermination.


        :param display: The display of this WritableCircuitTermination.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this WritableCircuitTermination.


        :return: The id of this WritableCircuitTermination.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableCircuitTermination.


        :param id: The id of this WritableCircuitTermination.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableCircuitTermination.


        :return: The last_updated of this WritableCircuitTermination.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableCircuitTermination.


        :param last_updated: The last_updated of this WritableCircuitTermination.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def link_peers(self):
        """Gets the link_peers of this WritableCircuitTermination.

         Return the appropriate serializer for the link termination model. 

        :return: The link_peers of this WritableCircuitTermination.
        :rtype: List[str]
        """
        return self._link_peers

    @link_peers.setter
    def link_peers(self, link_peers):
        """Sets the link_peers of this WritableCircuitTermination.

         Return the appropriate serializer for the link termination model. 

        :param link_peers: The link_peers of this WritableCircuitTermination.
        :type link_peers: List[str]
        """

        self._link_peers = link_peers

    @property
    def link_peers_type(self):
        """Gets the link_peers_type of this WritableCircuitTermination.


        :return: The link_peers_type of this WritableCircuitTermination.
        :rtype: str
        """
        return self._link_peers_type

    @link_peers_type.setter
    def link_peers_type(self, link_peers_type):
        """Sets the link_peers_type of this WritableCircuitTermination.


        :param link_peers_type: The link_peers_type of this WritableCircuitTermination.
        :type link_peers_type: str
        """

        self._link_peers_type = link_peers_type

    @property
    def mark_connected(self):
        """Gets the mark_connected of this WritableCircuitTermination.

        Treat as if a cable is connected

        :return: The mark_connected of this WritableCircuitTermination.
        :rtype: bool
        """
        return self._mark_connected

    @mark_connected.setter
    def mark_connected(self, mark_connected):
        """Sets the mark_connected of this WritableCircuitTermination.

        Treat as if a cable is connected

        :param mark_connected: The mark_connected of this WritableCircuitTermination.
        :type mark_connected: bool
        """

        self._mark_connected = mark_connected

    @property
    def port_speed(self):
        """Gets the port_speed of this WritableCircuitTermination.


        :return: The port_speed of this WritableCircuitTermination.
        :rtype: int
        """
        return self._port_speed

    @port_speed.setter
    def port_speed(self, port_speed):
        """Sets the port_speed of this WritableCircuitTermination.


        :param port_speed: The port_speed of this WritableCircuitTermination.
        :type port_speed: int
        """
        if port_speed is not None and port_speed > 2147483647:
            raise ValueError("Invalid value for `port_speed`, must be a value less than or equal to `2147483647`")
        if port_speed is not None and port_speed < 0:
            raise ValueError("Invalid value for `port_speed`, must be a value greater than or equal to `0`")

        self._port_speed = port_speed

    @property
    def pp_info(self):
        """Gets the pp_info of this WritableCircuitTermination.


        :return: The pp_info of this WritableCircuitTermination.
        :rtype: str
        """
        return self._pp_info

    @pp_info.setter
    def pp_info(self, pp_info):
        """Sets the pp_info of this WritableCircuitTermination.


        :param pp_info: The pp_info of this WritableCircuitTermination.
        :type pp_info: str
        """
        if pp_info is not None and len(pp_info) > 100:
            raise ValueError("Invalid value for `pp_info`, length must be less than or equal to `100`")

        self._pp_info = pp_info

    @property
    def provider_network(self):
        """Gets the provider_network of this WritableCircuitTermination.


        :return: The provider_network of this WritableCircuitTermination.
        :rtype: int
        """
        return self._provider_network

    @provider_network.setter
    def provider_network(self, provider_network):
        """Sets the provider_network of this WritableCircuitTermination.


        :param provider_network: The provider_network of this WritableCircuitTermination.
        :type provider_network: int
        """

        self._provider_network = provider_network

    @property
    def site(self):
        """Gets the site of this WritableCircuitTermination.


        :return: The site of this WritableCircuitTermination.
        :rtype: int
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritableCircuitTermination.


        :param site: The site of this WritableCircuitTermination.
        :type site: int
        """

        self._site = site

    @property
    def tags(self):
        """Gets the tags of this WritableCircuitTermination.


        :return: The tags of this WritableCircuitTermination.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableCircuitTermination.


        :param tags: The tags of this WritableCircuitTermination.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def term_side(self):
        """Gets the term_side of this WritableCircuitTermination.


        :return: The term_side of this WritableCircuitTermination.
        :rtype: str
        """
        return self._term_side

    @term_side.setter
    def term_side(self, term_side):
        """Sets the term_side of this WritableCircuitTermination.


        :param term_side: The term_side of this WritableCircuitTermination.
        :type term_side: str
        """
        allowed_values = ["A", "Z"]  # noqa: E501
        if term_side not in allowed_values:
            raise ValueError(
                "Invalid value for `term_side` ({0}), must be one of {1}"
                .format(term_side, allowed_values)
            )

        self._term_side = term_side

    @property
    def upstream_speed(self):
        """Gets the upstream_speed of this WritableCircuitTermination.

        Upstream speed, if different from port speed

        :return: The upstream_speed of this WritableCircuitTermination.
        :rtype: int
        """
        return self._upstream_speed

    @upstream_speed.setter
    def upstream_speed(self, upstream_speed):
        """Sets the upstream_speed of this WritableCircuitTermination.

        Upstream speed, if different from port speed

        :param upstream_speed: The upstream_speed of this WritableCircuitTermination.
        :type upstream_speed: int
        """
        if upstream_speed is not None and upstream_speed > 2147483647:
            raise ValueError("Invalid value for `upstream_speed`, must be a value less than or equal to `2147483647`")
        if upstream_speed is not None and upstream_speed < 0:
            raise ValueError("Invalid value for `upstream_speed`, must be a value greater than or equal to `0`")

        self._upstream_speed = upstream_speed

    @property
    def url(self):
        """Gets the url of this WritableCircuitTermination.


        :return: The url of this WritableCircuitTermination.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableCircuitTermination.


        :param url: The url of this WritableCircuitTermination.
        :type url: str
        """

        self._url = url

    @property
    def xconnect_id(self):
        """Gets the xconnect_id of this WritableCircuitTermination.


        :return: The xconnect_id of this WritableCircuitTermination.
        :rtype: str
        """
        return self._xconnect_id

    @xconnect_id.setter
    def xconnect_id(self, xconnect_id):
        """Sets the xconnect_id of this WritableCircuitTermination.


        :param xconnect_id: The xconnect_id of this WritableCircuitTermination.
        :type xconnect_id: str
        """
        if xconnect_id is not None and len(xconnect_id) > 50:
            raise ValueError("Invalid value for `xconnect_id`, length must be less than or equal to `50`")

        self._xconnect_id = xconnect_id
