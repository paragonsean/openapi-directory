# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generic_object import GenericObject
from openapi_server.models.length_unit import LengthUnit
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server.models.status import Status
import re
from openapi_server import util


class Cable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a_terminations: List[GenericObject]=None, b_terminations: List[GenericObject]=None, color: str=None, comments: str=None, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, id: int=None, label: str=None, last_updated: datetime=None, length: float=None, length_unit: LengthUnit=None, status: Status=None, tags: List[NestedTag]=None, tenant: NestedTenant=None, type: str=None, url: str=None):
        """Cable - a model defined in OpenAPI

        :param a_terminations: The a_terminations of this Cable.
        :param b_terminations: The b_terminations of this Cable.
        :param color: The color of this Cable.
        :param comments: The comments of this Cable.
        :param created: The created of this Cable.
        :param custom_fields: The custom_fields of this Cable.
        :param description: The description of this Cable.
        :param display: The display of this Cable.
        :param id: The id of this Cable.
        :param label: The label of this Cable.
        :param last_updated: The last_updated of this Cable.
        :param length: The length of this Cable.
        :param length_unit: The length_unit of this Cable.
        :param status: The status of this Cable.
        :param tags: The tags of this Cable.
        :param tenant: The tenant of this Cable.
        :param type: The type of this Cable.
        :param url: The url of this Cable.
        """
        self.openapi_types = {
            'a_terminations': List[GenericObject],
            'b_terminations': List[GenericObject],
            'color': str,
            'comments': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'id': int,
            'label': str,
            'last_updated': datetime,
            'length': float,
            'length_unit': LengthUnit,
            'status': Status,
            'tags': List[NestedTag],
            'tenant': NestedTenant,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'a_terminations': 'a_terminations',
            'b_terminations': 'b_terminations',
            'color': 'color',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'id': 'id',
            'label': 'label',
            'last_updated': 'last_updated',
            'length': 'length',
            'length_unit': 'length_unit',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'type': 'type',
            'url': 'url'
        }

        self._a_terminations = a_terminations
        self._b_terminations = b_terminations
        self._color = color
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._id = id
        self._label = label
        self._last_updated = last_updated
        self._length = length
        self._length_unit = length_unit
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cable of this Cable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a_terminations(self):
        """Gets the a_terminations of this Cable.


        :return: The a_terminations of this Cable.
        :rtype: List[GenericObject]
        """
        return self._a_terminations

    @a_terminations.setter
    def a_terminations(self, a_terminations):
        """Sets the a_terminations of this Cable.


        :param a_terminations: The a_terminations of this Cable.
        :type a_terminations: List[GenericObject]
        """

        self._a_terminations = a_terminations

    @property
    def b_terminations(self):
        """Gets the b_terminations of this Cable.


        :return: The b_terminations of this Cable.
        :rtype: List[GenericObject]
        """
        return self._b_terminations

    @b_terminations.setter
    def b_terminations(self, b_terminations):
        """Sets the b_terminations of this Cable.


        :param b_terminations: The b_terminations of this Cable.
        :type b_terminations: List[GenericObject]
        """

        self._b_terminations = b_terminations

    @property
    def color(self):
        """Gets the color of this Cable.


        :return: The color of this Cable.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Cable.


        :param color: The color of this Cable.
        :type color: str
        """
        if color is not None and len(color) > 6:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `6`")
        if color is not None and not re.search(r'^[0-9a-f]{6}$', color):
            raise ValueError("Invalid value for `color`, must be a follow pattern or equal to `/^[0-9a-f]{6}$/`")

        self._color = color

    @property
    def comments(self):
        """Gets the comments of this Cable.


        :return: The comments of this Cable.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Cable.


        :param comments: The comments of this Cable.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this Cable.


        :return: The created of this Cable.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Cable.


        :param created: The created of this Cable.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Cable.


        :return: The custom_fields of this Cable.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Cable.


        :param custom_fields: The custom_fields of this Cable.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Cable.


        :return: The description of this Cable.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cable.


        :param description: The description of this Cable.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this Cable.


        :return: The display of this Cable.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Cable.


        :param display: The display of this Cable.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this Cable.


        :return: The id of this Cable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cable.


        :param id: The id of this Cable.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Cable.


        :return: The label of this Cable.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Cable.


        :param label: The label of this Cable.
        :type label: str
        """
        if label is not None and len(label) > 100:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `100`")

        self._label = label

    @property
    def last_updated(self):
        """Gets the last_updated of this Cable.


        :return: The last_updated of this Cable.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Cable.


        :param last_updated: The last_updated of this Cable.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def length(self):
        """Gets the length of this Cable.


        :return: The length of this Cable.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Cable.


        :param length: The length of this Cable.
        :type length: float
        """

        self._length = length

    @property
    def length_unit(self):
        """Gets the length_unit of this Cable.


        :return: The length_unit of this Cable.
        :rtype: LengthUnit
        """
        return self._length_unit

    @length_unit.setter
    def length_unit(self, length_unit):
        """Sets the length_unit of this Cable.


        :param length_unit: The length_unit of this Cable.
        :type length_unit: LengthUnit
        """

        self._length_unit = length_unit

    @property
    def status(self):
        """Gets the status of this Cable.


        :return: The status of this Cable.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cable.


        :param status: The status of this Cable.
        :type status: Status
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Cable.


        :return: The tags of this Cable.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Cable.


        :param tags: The tags of this Cable.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this Cable.


        :return: The tenant of this Cable.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Cable.


        :param tenant: The tenant of this Cable.
        :type tenant: NestedTenant
        """

        self._tenant = tenant

    @property
    def type(self):
        """Gets the type of this Cable.


        :return: The type of this Cable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Cable.


        :param type: The type of this Cable.
        :type type: str
        """
        allowed_values = ["cat3", "cat5", "cat5e", "cat6", "cat6a", "cat7", "cat7a", "cat8", "dac-active", "dac-passive", "mrj21-trunk", "coaxial", "mmf", "mmf-om1", "mmf-om2", "mmf-om3", "mmf-om4", "mmf-om5", "smf", "smf-os1", "smf-os2", "aoc", "power"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Cable.


        :return: The url of this Cable.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Cable.


        :param url: The url of this Cable.
        :type url: str
        """

        self._url = url
