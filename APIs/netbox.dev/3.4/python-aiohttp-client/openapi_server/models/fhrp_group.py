# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_ip_address import NestedIPAddress
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class FHRPGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_key: str=None, auth_type: str=None, comments: str=None, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, group_id: int=None, id: int=None, ip_addresses: List[NestedIPAddress]=None, last_updated: datetime=None, name: str=None, protocol: str=None, tags: List[NestedTag]=None, url: str=None):
        """FHRPGroup - a model defined in OpenAPI

        :param auth_key: The auth_key of this FHRPGroup.
        :param auth_type: The auth_type of this FHRPGroup.
        :param comments: The comments of this FHRPGroup.
        :param created: The created of this FHRPGroup.
        :param custom_fields: The custom_fields of this FHRPGroup.
        :param description: The description of this FHRPGroup.
        :param display: The display of this FHRPGroup.
        :param group_id: The group_id of this FHRPGroup.
        :param id: The id of this FHRPGroup.
        :param ip_addresses: The ip_addresses of this FHRPGroup.
        :param last_updated: The last_updated of this FHRPGroup.
        :param name: The name of this FHRPGroup.
        :param protocol: The protocol of this FHRPGroup.
        :param tags: The tags of this FHRPGroup.
        :param url: The url of this FHRPGroup.
        """
        self.openapi_types = {
            'auth_key': str,
            'auth_type': str,
            'comments': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'group_id': int,
            'id': int,
            'ip_addresses': List[NestedIPAddress],
            'last_updated': datetime,
            'name': str,
            'protocol': str,
            'tags': List[NestedTag],
            'url': str
        }

        self.attribute_map = {
            'auth_key': 'auth_key',
            'auth_type': 'auth_type',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'group_id': 'group_id',
            'id': 'id',
            'ip_addresses': 'ip_addresses',
            'last_updated': 'last_updated',
            'name': 'name',
            'protocol': 'protocol',
            'tags': 'tags',
            'url': 'url'
        }

        self._auth_key = auth_key
        self._auth_type = auth_type
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._group_id = group_id
        self._id = id
        self._ip_addresses = ip_addresses
        self._last_updated = last_updated
        self._name = name
        self._protocol = protocol
        self._tags = tags
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FHRPGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FHRPGroup of this FHRPGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_key(self):
        """Gets the auth_key of this FHRPGroup.


        :return: The auth_key of this FHRPGroup.
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this FHRPGroup.


        :param auth_key: The auth_key of this FHRPGroup.
        :type auth_key: str
        """
        if auth_key is not None and len(auth_key) > 255:
            raise ValueError("Invalid value for `auth_key`, length must be less than or equal to `255`")

        self._auth_key = auth_key

    @property
    def auth_type(self):
        """Gets the auth_type of this FHRPGroup.


        :return: The auth_type of this FHRPGroup.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this FHRPGroup.


        :param auth_type: The auth_type of this FHRPGroup.
        :type auth_type: str
        """
        allowed_values = ["plaintext", "md5"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def comments(self):
        """Gets the comments of this FHRPGroup.


        :return: The comments of this FHRPGroup.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FHRPGroup.


        :param comments: The comments of this FHRPGroup.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this FHRPGroup.


        :return: The created of this FHRPGroup.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FHRPGroup.


        :param created: The created of this FHRPGroup.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this FHRPGroup.


        :return: The custom_fields of this FHRPGroup.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this FHRPGroup.


        :param custom_fields: The custom_fields of this FHRPGroup.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this FHRPGroup.


        :return: The description of this FHRPGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FHRPGroup.


        :param description: The description of this FHRPGroup.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this FHRPGroup.


        :return: The display of this FHRPGroup.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this FHRPGroup.


        :param display: The display of this FHRPGroup.
        :type display: str
        """

        self._display = display

    @property
    def group_id(self):
        """Gets the group_id of this FHRPGroup.


        :return: The group_id of this FHRPGroup.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this FHRPGroup.


        :param group_id: The group_id of this FHRPGroup.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")
        if group_id is not None and group_id > 32767:
            raise ValueError("Invalid value for `group_id`, must be a value less than or equal to `32767`")
        if group_id is not None and group_id < 0:
            raise ValueError("Invalid value for `group_id`, must be a value greater than or equal to `0`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this FHRPGroup.


        :return: The id of this FHRPGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FHRPGroup.


        :param id: The id of this FHRPGroup.
        :type id: int
        """

        self._id = id

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this FHRPGroup.


        :return: The ip_addresses of this FHRPGroup.
        :rtype: List[NestedIPAddress]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this FHRPGroup.


        :param ip_addresses: The ip_addresses of this FHRPGroup.
        :type ip_addresses: List[NestedIPAddress]
        """

        self._ip_addresses = ip_addresses

    @property
    def last_updated(self):
        """Gets the last_updated of this FHRPGroup.


        :return: The last_updated of this FHRPGroup.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this FHRPGroup.


        :param last_updated: The last_updated of this FHRPGroup.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this FHRPGroup.


        :return: The name of this FHRPGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FHRPGroup.


        :param name: The name of this FHRPGroup.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this FHRPGroup.


        :return: The protocol of this FHRPGroup.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this FHRPGroup.


        :param protocol: The protocol of this FHRPGroup.
        :type protocol: str
        """
        allowed_values = ["vrrp2", "vrrp3", "carp", "clusterxl", "hsrp", "glbp", "other"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def tags(self):
        """Gets the tags of this FHRPGroup.


        :return: The tags of this FHRPGroup.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FHRPGroup.


        :param tags: The tags of this FHRPGroup.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def url(self):
        """Gets the url of this FHRPGroup.


        :return: The url of this FHRPGroup.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FHRPGroup.


        :param url: The url of this FHRPGroup.
        :type url: str
        """

        self._url = url
