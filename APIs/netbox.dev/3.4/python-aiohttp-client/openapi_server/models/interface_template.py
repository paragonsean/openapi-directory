# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device_type import NestedDeviceType
from openapi_server.models.nested_module_type import NestedModuleType
from openapi_server.models.poe_mode import PoeMode
from openapi_server.models.poe_type import PoeType
from openapi_server.models.type3 import Type3
from openapi_server import util


class InterfaceTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, device_type: NestedDeviceType=None, display: str=None, id: int=None, label: str=None, last_updated: datetime=None, mgmt_only: bool=None, module_type: NestedModuleType=None, name: str=None, poe_mode: PoeMode=None, poe_type: PoeType=None, type: Type3=None, url: str=None):
        """InterfaceTemplate - a model defined in OpenAPI

        :param created: The created of this InterfaceTemplate.
        :param description: The description of this InterfaceTemplate.
        :param device_type: The device_type of this InterfaceTemplate.
        :param display: The display of this InterfaceTemplate.
        :param id: The id of this InterfaceTemplate.
        :param label: The label of this InterfaceTemplate.
        :param last_updated: The last_updated of this InterfaceTemplate.
        :param mgmt_only: The mgmt_only of this InterfaceTemplate.
        :param module_type: The module_type of this InterfaceTemplate.
        :param name: The name of this InterfaceTemplate.
        :param poe_mode: The poe_mode of this InterfaceTemplate.
        :param poe_type: The poe_type of this InterfaceTemplate.
        :param type: The type of this InterfaceTemplate.
        :param url: The url of this InterfaceTemplate.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'device_type': NestedDeviceType,
            'display': str,
            'id': int,
            'label': str,
            'last_updated': datetime,
            'mgmt_only': bool,
            'module_type': NestedModuleType,
            'name': str,
            'poe_mode': PoeMode,
            'poe_type': PoeType,
            'type': Type3,
            'url': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'device_type': 'device_type',
            'display': 'display',
            'id': 'id',
            'label': 'label',
            'last_updated': 'last_updated',
            'mgmt_only': 'mgmt_only',
            'module_type': 'module_type',
            'name': 'name',
            'poe_mode': 'poe_mode',
            'poe_type': 'poe_type',
            'type': 'type',
            'url': 'url'
        }

        self._created = created
        self._description = description
        self._device_type = device_type
        self._display = display
        self._id = id
        self._label = label
        self._last_updated = last_updated
        self._mgmt_only = mgmt_only
        self._module_type = module_type
        self._name = name
        self._poe_mode = poe_mode
        self._poe_type = poe_type
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterfaceTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterfaceTemplate of this InterfaceTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this InterfaceTemplate.


        :return: The created of this InterfaceTemplate.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InterfaceTemplate.


        :param created: The created of this InterfaceTemplate.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this InterfaceTemplate.


        :return: The description of this InterfaceTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InterfaceTemplate.


        :param description: The description of this InterfaceTemplate.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_type(self):
        """Gets the device_type of this InterfaceTemplate.


        :return: The device_type of this InterfaceTemplate.
        :rtype: NestedDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this InterfaceTemplate.


        :param device_type: The device_type of this InterfaceTemplate.
        :type device_type: NestedDeviceType
        """

        self._device_type = device_type

    @property
    def display(self):
        """Gets the display of this InterfaceTemplate.


        :return: The display of this InterfaceTemplate.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this InterfaceTemplate.


        :param display: The display of this InterfaceTemplate.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this InterfaceTemplate.


        :return: The id of this InterfaceTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InterfaceTemplate.


        :param id: The id of this InterfaceTemplate.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this InterfaceTemplate.

        Physical label

        :return: The label of this InterfaceTemplate.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InterfaceTemplate.

        Physical label

        :param label: The label of this InterfaceTemplate.
        :type label: str
        """
        if label is not None and len(label) > 64:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")

        self._label = label

    @property
    def last_updated(self):
        """Gets the last_updated of this InterfaceTemplate.


        :return: The last_updated of this InterfaceTemplate.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this InterfaceTemplate.


        :param last_updated: The last_updated of this InterfaceTemplate.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this InterfaceTemplate.


        :return: The mgmt_only of this InterfaceTemplate.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this InterfaceTemplate.


        :param mgmt_only: The mgmt_only of this InterfaceTemplate.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def module_type(self):
        """Gets the module_type of this InterfaceTemplate.


        :return: The module_type of this InterfaceTemplate.
        :rtype: NestedModuleType
        """
        return self._module_type

    @module_type.setter
    def module_type(self, module_type):
        """Sets the module_type of this InterfaceTemplate.


        :param module_type: The module_type of this InterfaceTemplate.
        :type module_type: NestedModuleType
        """

        self._module_type = module_type

    @property
    def name(self):
        """Gets the name of this InterfaceTemplate.

         {module} is accepted as a substitution for the module bay position when attached to a module type. 

        :return: The name of this InterfaceTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterfaceTemplate.

         {module} is accepted as a substitution for the module bay position when attached to a module type. 

        :param name: The name of this InterfaceTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def poe_mode(self):
        """Gets the poe_mode of this InterfaceTemplate.


        :return: The poe_mode of this InterfaceTemplate.
        :rtype: PoeMode
        """
        return self._poe_mode

    @poe_mode.setter
    def poe_mode(self, poe_mode):
        """Sets the poe_mode of this InterfaceTemplate.


        :param poe_mode: The poe_mode of this InterfaceTemplate.
        :type poe_mode: PoeMode
        """

        self._poe_mode = poe_mode

    @property
    def poe_type(self):
        """Gets the poe_type of this InterfaceTemplate.


        :return: The poe_type of this InterfaceTemplate.
        :rtype: PoeType
        """
        return self._poe_type

    @poe_type.setter
    def poe_type(self, poe_type):
        """Sets the poe_type of this InterfaceTemplate.


        :param poe_type: The poe_type of this InterfaceTemplate.
        :type poe_type: PoeType
        """

        self._poe_type = poe_type

    @property
    def type(self):
        """Gets the type of this InterfaceTemplate.


        :return: The type of this InterfaceTemplate.
        :rtype: Type3
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InterfaceTemplate.


        :param type: The type of this InterfaceTemplate.
        :type type: Type3
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this InterfaceTemplate.


        :return: The url of this InterfaceTemplate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InterfaceTemplate.


        :param url: The url of this InterfaceTemplate.
        :type url: str
        """

        self._url = url
