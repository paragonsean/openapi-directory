# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mode import Mode
from openapi_server.models.nested_l2_vpn_termination import NestedL2VPNTermination
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.nested_vlan import NestedVLAN
from openapi_server.models.nested_vm_interface import NestedVMInterface
from openapi_server.models.nested_vrf import NestedVRF
from openapi_server.models.nested_virtual_machine import NestedVirtualMachine
from openapi_server import util


class VMInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge: NestedVMInterface=None, count_fhrp_groups: int=None, count_ipaddresses: int=None, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, enabled: bool=None, id: int=None, l2vpn_termination: NestedL2VPNTermination=None, last_updated: datetime=None, mac_address: str=None, mode: Mode=None, mtu: int=None, name: str=None, parent: NestedVMInterface=None, tagged_vlans: list[NestedVLAN]=None, tags: List[NestedTag]=None, untagged_vlan: NestedVLAN=None, url: str=None, virtual_machine: NestedVirtualMachine=None, vrf: NestedVRF=None):
        """VMInterface - a model defined in OpenAPI

        :param bridge: The bridge of this VMInterface.
        :param count_fhrp_groups: The count_fhrp_groups of this VMInterface.
        :param count_ipaddresses: The count_ipaddresses of this VMInterface.
        :param created: The created of this VMInterface.
        :param custom_fields: The custom_fields of this VMInterface.
        :param description: The description of this VMInterface.
        :param display: The display of this VMInterface.
        :param enabled: The enabled of this VMInterface.
        :param id: The id of this VMInterface.
        :param l2vpn_termination: The l2vpn_termination of this VMInterface.
        :param last_updated: The last_updated of this VMInterface.
        :param mac_address: The mac_address of this VMInterface.
        :param mode: The mode of this VMInterface.
        :param mtu: The mtu of this VMInterface.
        :param name: The name of this VMInterface.
        :param parent: The parent of this VMInterface.
        :param tagged_vlans: The tagged_vlans of this VMInterface.
        :param tags: The tags of this VMInterface.
        :param untagged_vlan: The untagged_vlan of this VMInterface.
        :param url: The url of this VMInterface.
        :param virtual_machine: The virtual_machine of this VMInterface.
        :param vrf: The vrf of this VMInterface.
        """
        self.openapi_types = {
            'bridge': NestedVMInterface,
            'count_fhrp_groups': int,
            'count_ipaddresses': int,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'enabled': bool,
            'id': int,
            'l2vpn_termination': NestedL2VPNTermination,
            'last_updated': datetime,
            'mac_address': str,
            'mode': Mode,
            'mtu': int,
            'name': str,
            'parent': NestedVMInterface,
            'tagged_vlans': list[NestedVLAN],
            'tags': List[NestedTag],
            'untagged_vlan': NestedVLAN,
            'url': str,
            'virtual_machine': NestedVirtualMachine,
            'vrf': NestedVRF
        }

        self.attribute_map = {
            'bridge': 'bridge',
            'count_fhrp_groups': 'count_fhrp_groups',
            'count_ipaddresses': 'count_ipaddresses',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'enabled': 'enabled',
            'id': 'id',
            'l2vpn_termination': 'l2vpn_termination',
            'last_updated': 'last_updated',
            'mac_address': 'mac_address',
            'mode': 'mode',
            'mtu': 'mtu',
            'name': 'name',
            'parent': 'parent',
            'tagged_vlans': 'tagged_vlans',
            'tags': 'tags',
            'untagged_vlan': 'untagged_vlan',
            'url': 'url',
            'virtual_machine': 'virtual_machine',
            'vrf': 'vrf'
        }

        self._bridge = bridge
        self._count_fhrp_groups = count_fhrp_groups
        self._count_ipaddresses = count_ipaddresses
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._enabled = enabled
        self._id = id
        self._l2vpn_termination = l2vpn_termination
        self._last_updated = last_updated
        self._mac_address = mac_address
        self._mode = mode
        self._mtu = mtu
        self._name = name
        self._parent = parent
        self._tagged_vlans = tagged_vlans
        self._tags = tags
        self._untagged_vlan = untagged_vlan
        self._url = url
        self._virtual_machine = virtual_machine
        self._vrf = vrf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VMInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VMInterface of this VMInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge(self):
        """Gets the bridge of this VMInterface.


        :return: The bridge of this VMInterface.
        :rtype: NestedVMInterface
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """Sets the bridge of this VMInterface.


        :param bridge: The bridge of this VMInterface.
        :type bridge: NestedVMInterface
        """

        self._bridge = bridge

    @property
    def count_fhrp_groups(self):
        """Gets the count_fhrp_groups of this VMInterface.


        :return: The count_fhrp_groups of this VMInterface.
        :rtype: int
        """
        return self._count_fhrp_groups

    @count_fhrp_groups.setter
    def count_fhrp_groups(self, count_fhrp_groups):
        """Sets the count_fhrp_groups of this VMInterface.


        :param count_fhrp_groups: The count_fhrp_groups of this VMInterface.
        :type count_fhrp_groups: int
        """

        self._count_fhrp_groups = count_fhrp_groups

    @property
    def count_ipaddresses(self):
        """Gets the count_ipaddresses of this VMInterface.


        :return: The count_ipaddresses of this VMInterface.
        :rtype: int
        """
        return self._count_ipaddresses

    @count_ipaddresses.setter
    def count_ipaddresses(self, count_ipaddresses):
        """Sets the count_ipaddresses of this VMInterface.


        :param count_ipaddresses: The count_ipaddresses of this VMInterface.
        :type count_ipaddresses: int
        """

        self._count_ipaddresses = count_ipaddresses

    @property
    def created(self):
        """Gets the created of this VMInterface.


        :return: The created of this VMInterface.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VMInterface.


        :param created: The created of this VMInterface.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this VMInterface.


        :return: The custom_fields of this VMInterface.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this VMInterface.


        :param custom_fields: The custom_fields of this VMInterface.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this VMInterface.


        :return: The description of this VMInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VMInterface.


        :param description: The description of this VMInterface.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this VMInterface.


        :return: The display of this VMInterface.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this VMInterface.


        :param display: The display of this VMInterface.
        :type display: str
        """

        self._display = display

    @property
    def enabled(self):
        """Gets the enabled of this VMInterface.


        :return: The enabled of this VMInterface.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VMInterface.


        :param enabled: The enabled of this VMInterface.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this VMInterface.


        :return: The id of this VMInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VMInterface.


        :param id: The id of this VMInterface.
        :type id: int
        """

        self._id = id

    @property
    def l2vpn_termination(self):
        """Gets the l2vpn_termination of this VMInterface.


        :return: The l2vpn_termination of this VMInterface.
        :rtype: NestedL2VPNTermination
        """
        return self._l2vpn_termination

    @l2vpn_termination.setter
    def l2vpn_termination(self, l2vpn_termination):
        """Sets the l2vpn_termination of this VMInterface.


        :param l2vpn_termination: The l2vpn_termination of this VMInterface.
        :type l2vpn_termination: NestedL2VPNTermination
        """

        self._l2vpn_termination = l2vpn_termination

    @property
    def last_updated(self):
        """Gets the last_updated of this VMInterface.


        :return: The last_updated of this VMInterface.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VMInterface.


        :param last_updated: The last_updated of this VMInterface.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def mac_address(self):
        """Gets the mac_address of this VMInterface.


        :return: The mac_address of this VMInterface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VMInterface.


        :param mac_address: The mac_address of this VMInterface.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mode(self):
        """Gets the mode of this VMInterface.


        :return: The mode of this VMInterface.
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this VMInterface.


        :param mode: The mode of this VMInterface.
        :type mode: Mode
        """

        self._mode = mode

    @property
    def mtu(self):
        """Gets the mtu of this VMInterface.


        :return: The mtu of this VMInterface.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this VMInterface.


        :param mtu: The mtu of this VMInterface.
        :type mtu: int
        """
        if mtu is not None and mtu > 65536:
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `65536`")
        if mtu is not None and mtu < 1:
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1`")

        self._mtu = mtu

    @property
    def name(self):
        """Gets the name of this VMInterface.


        :return: The name of this VMInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VMInterface.


        :param name: The name of this VMInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this VMInterface.


        :return: The parent of this VMInterface.
        :rtype: NestedVMInterface
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this VMInterface.


        :param parent: The parent of this VMInterface.
        :type parent: NestedVMInterface
        """

        self._parent = parent

    @property
    def tagged_vlans(self):
        """Gets the tagged_vlans of this VMInterface.


        :return: The tagged_vlans of this VMInterface.
        :rtype: list[NestedVLAN]
        """
        return self._tagged_vlans

    @tagged_vlans.setter
    def tagged_vlans(self, tagged_vlans):
        """Sets the tagged_vlans of this VMInterface.


        :param tagged_vlans: The tagged_vlans of this VMInterface.
        :type tagged_vlans: list[NestedVLAN]
        """

        self._tagged_vlans = tagged_vlans

    @property
    def tags(self):
        """Gets the tags of this VMInterface.


        :return: The tags of this VMInterface.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VMInterface.


        :param tags: The tags of this VMInterface.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def untagged_vlan(self):
        """Gets the untagged_vlan of this VMInterface.


        :return: The untagged_vlan of this VMInterface.
        :rtype: NestedVLAN
        """
        return self._untagged_vlan

    @untagged_vlan.setter
    def untagged_vlan(self, untagged_vlan):
        """Sets the untagged_vlan of this VMInterface.


        :param untagged_vlan: The untagged_vlan of this VMInterface.
        :type untagged_vlan: NestedVLAN
        """

        self._untagged_vlan = untagged_vlan

    @property
    def url(self):
        """Gets the url of this VMInterface.


        :return: The url of this VMInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VMInterface.


        :param url: The url of this VMInterface.
        :type url: str
        """

        self._url = url

    @property
    def virtual_machine(self):
        """Gets the virtual_machine of this VMInterface.


        :return: The virtual_machine of this VMInterface.
        :rtype: NestedVirtualMachine
        """
        return self._virtual_machine

    @virtual_machine.setter
    def virtual_machine(self, virtual_machine):
        """Sets the virtual_machine of this VMInterface.


        :param virtual_machine: The virtual_machine of this VMInterface.
        :type virtual_machine: NestedVirtualMachine
        """
        if virtual_machine is None:
            raise ValueError("Invalid value for `virtual_machine`, must not be `None`")

        self._virtual_machine = virtual_machine

    @property
    def vrf(self):
        """Gets the vrf of this VMInterface.


        :return: The vrf of this VMInterface.
        :rtype: NestedVRF
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this VMInterface.


        :param vrf: The vrf of this VMInterface.
        :type vrf: NestedVRF
        """

        self._vrf = vrf
