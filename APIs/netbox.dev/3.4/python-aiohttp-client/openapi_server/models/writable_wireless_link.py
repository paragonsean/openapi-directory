# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class WritableWirelessLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_cipher: str=None, auth_psk: str=None, auth_type: str=None, comments: str=None, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, id: int=None, interface_a: int=None, interface_b: int=None, last_updated: datetime=None, ssid: str=None, status: str=None, tags: List[NestedTag]=None, tenant: int=None, url: str=None):
        """WritableWirelessLink - a model defined in OpenAPI

        :param auth_cipher: The auth_cipher of this WritableWirelessLink.
        :param auth_psk: The auth_psk of this WritableWirelessLink.
        :param auth_type: The auth_type of this WritableWirelessLink.
        :param comments: The comments of this WritableWirelessLink.
        :param created: The created of this WritableWirelessLink.
        :param custom_fields: The custom_fields of this WritableWirelessLink.
        :param description: The description of this WritableWirelessLink.
        :param display: The display of this WritableWirelessLink.
        :param id: The id of this WritableWirelessLink.
        :param interface_a: The interface_a of this WritableWirelessLink.
        :param interface_b: The interface_b of this WritableWirelessLink.
        :param last_updated: The last_updated of this WritableWirelessLink.
        :param ssid: The ssid of this WritableWirelessLink.
        :param status: The status of this WritableWirelessLink.
        :param tags: The tags of this WritableWirelessLink.
        :param tenant: The tenant of this WritableWirelessLink.
        :param url: The url of this WritableWirelessLink.
        """
        self.openapi_types = {
            'auth_cipher': str,
            'auth_psk': str,
            'auth_type': str,
            'comments': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'id': int,
            'interface_a': int,
            'interface_b': int,
            'last_updated': datetime,
            'ssid': str,
            'status': str,
            'tags': List[NestedTag],
            'tenant': int,
            'url': str
        }

        self.attribute_map = {
            'auth_cipher': 'auth_cipher',
            'auth_psk': 'auth_psk',
            'auth_type': 'auth_type',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'id': 'id',
            'interface_a': 'interface_a',
            'interface_b': 'interface_b',
            'last_updated': 'last_updated',
            'ssid': 'ssid',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'url': 'url'
        }

        self._auth_cipher = auth_cipher
        self._auth_psk = auth_psk
        self._auth_type = auth_type
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._id = id
        self._interface_a = interface_a
        self._interface_b = interface_b
        self._last_updated = last_updated
        self._ssid = ssid
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableWirelessLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableWirelessLink of this WritableWirelessLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_cipher(self):
        """Gets the auth_cipher of this WritableWirelessLink.


        :return: The auth_cipher of this WritableWirelessLink.
        :rtype: str
        """
        return self._auth_cipher

    @auth_cipher.setter
    def auth_cipher(self, auth_cipher):
        """Sets the auth_cipher of this WritableWirelessLink.


        :param auth_cipher: The auth_cipher of this WritableWirelessLink.
        :type auth_cipher: str
        """
        allowed_values = ["auto", "tkip", "aes"]  # noqa: E501
        if auth_cipher not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_cipher` ({0}), must be one of {1}"
                .format(auth_cipher, allowed_values)
            )

        self._auth_cipher = auth_cipher

    @property
    def auth_psk(self):
        """Gets the auth_psk of this WritableWirelessLink.


        :return: The auth_psk of this WritableWirelessLink.
        :rtype: str
        """
        return self._auth_psk

    @auth_psk.setter
    def auth_psk(self, auth_psk):
        """Sets the auth_psk of this WritableWirelessLink.


        :param auth_psk: The auth_psk of this WritableWirelessLink.
        :type auth_psk: str
        """
        if auth_psk is not None and len(auth_psk) > 64:
            raise ValueError("Invalid value for `auth_psk`, length must be less than or equal to `64`")

        self._auth_psk = auth_psk

    @property
    def auth_type(self):
        """Gets the auth_type of this WritableWirelessLink.


        :return: The auth_type of this WritableWirelessLink.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this WritableWirelessLink.


        :param auth_type: The auth_type of this WritableWirelessLink.
        :type auth_type: str
        """
        allowed_values = ["open", "wep", "wpa-personal", "wpa-enterprise"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def comments(self):
        """Gets the comments of this WritableWirelessLink.


        :return: The comments of this WritableWirelessLink.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableWirelessLink.


        :param comments: The comments of this WritableWirelessLink.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this WritableWirelessLink.


        :return: The created of this WritableWirelessLink.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableWirelessLink.


        :param created: The created of this WritableWirelessLink.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableWirelessLink.


        :return: The custom_fields of this WritableWirelessLink.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableWirelessLink.


        :param custom_fields: The custom_fields of this WritableWirelessLink.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableWirelessLink.


        :return: The description of this WritableWirelessLink.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableWirelessLink.


        :param description: The description of this WritableWirelessLink.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this WritableWirelessLink.


        :return: The display of this WritableWirelessLink.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableWirelessLink.


        :param display: The display of this WritableWirelessLink.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this WritableWirelessLink.


        :return: The id of this WritableWirelessLink.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableWirelessLink.


        :param id: The id of this WritableWirelessLink.
        :type id: int
        """

        self._id = id

    @property
    def interface_a(self):
        """Gets the interface_a of this WritableWirelessLink.


        :return: The interface_a of this WritableWirelessLink.
        :rtype: int
        """
        return self._interface_a

    @interface_a.setter
    def interface_a(self, interface_a):
        """Sets the interface_a of this WritableWirelessLink.


        :param interface_a: The interface_a of this WritableWirelessLink.
        :type interface_a: int
        """
        if interface_a is None:
            raise ValueError("Invalid value for `interface_a`, must not be `None`")

        self._interface_a = interface_a

    @property
    def interface_b(self):
        """Gets the interface_b of this WritableWirelessLink.


        :return: The interface_b of this WritableWirelessLink.
        :rtype: int
        """
        return self._interface_b

    @interface_b.setter
    def interface_b(self, interface_b):
        """Sets the interface_b of this WritableWirelessLink.


        :param interface_b: The interface_b of this WritableWirelessLink.
        :type interface_b: int
        """
        if interface_b is None:
            raise ValueError("Invalid value for `interface_b`, must not be `None`")

        self._interface_b = interface_b

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableWirelessLink.


        :return: The last_updated of this WritableWirelessLink.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableWirelessLink.


        :param last_updated: The last_updated of this WritableWirelessLink.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def ssid(self):
        """Gets the ssid of this WritableWirelessLink.


        :return: The ssid of this WritableWirelessLink.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this WritableWirelessLink.


        :param ssid: The ssid of this WritableWirelessLink.
        :type ssid: str
        """
        if ssid is not None and len(ssid) > 32:
            raise ValueError("Invalid value for `ssid`, length must be less than or equal to `32`")

        self._ssid = ssid

    @property
    def status(self):
        """Gets the status of this WritableWirelessLink.


        :return: The status of this WritableWirelessLink.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableWirelessLink.


        :param status: The status of this WritableWirelessLink.
        :type status: str
        """
        allowed_values = ["connected", "planned", "decommissioning"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableWirelessLink.


        :return: The tags of this WritableWirelessLink.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableWirelessLink.


        :param tags: The tags of this WritableWirelessLink.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableWirelessLink.


        :return: The tenant of this WritableWirelessLink.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableWirelessLink.


        :param tenant: The tenant of this WritableWirelessLink.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def url(self):
        """Gets the url of this WritableWirelessLink.


        :return: The url of this WritableWirelessLink.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableWirelessLink.


        :param url: The url of this WritableWirelessLink.
        :type url: str
        """

        self._url = url
