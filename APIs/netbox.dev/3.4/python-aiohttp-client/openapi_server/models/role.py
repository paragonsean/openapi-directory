# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_tag import NestedTag
import re
from openapi_server import util


class Role(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, custom_fields: object=None, description: str=None, display: str=None, id: int=None, last_updated: datetime=None, name: str=None, prefix_count: int=None, slug: str=None, tags: List[NestedTag]=None, url: str=None, vlan_count: int=None, weight: int=None):
        """Role - a model defined in OpenAPI

        :param created: The created of this Role.
        :param custom_fields: The custom_fields of this Role.
        :param description: The description of this Role.
        :param display: The display of this Role.
        :param id: The id of this Role.
        :param last_updated: The last_updated of this Role.
        :param name: The name of this Role.
        :param prefix_count: The prefix_count of this Role.
        :param slug: The slug of this Role.
        :param tags: The tags of this Role.
        :param url: The url of this Role.
        :param vlan_count: The vlan_count of this Role.
        :param weight: The weight of this Role.
        """
        self.openapi_types = {
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'display': str,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'prefix_count': int,
            'slug': str,
            'tags': List[NestedTag],
            'url': str,
            'vlan_count': int,
            'weight': int
        }

        self.attribute_map = {
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display': 'display',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'prefix_count': 'prefix_count',
            'slug': 'slug',
            'tags': 'tags',
            'url': 'url',
            'vlan_count': 'vlan_count',
            'weight': 'weight'
        }

        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display = display
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._prefix_count = prefix_count
        self._slug = slug
        self._tags = tags
        self._url = url
        self._vlan_count = vlan_count
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Role of this Role.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Role.


        :return: The created of this Role.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Role.


        :param created: The created of this Role.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Role.


        :return: The custom_fields of this Role.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Role.


        :param custom_fields: The custom_fields of this Role.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Role.


        :return: The description of this Role.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display(self):
        """Gets the display of this Role.


        :return: The display of this Role.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Role.


        :param display: The display of this Role.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this Role.


        :return: The id of this Role.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.


        :param id: The id of this Role.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Role.


        :return: The last_updated of this Role.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Role.


        :param last_updated: The last_updated of this Role.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Role.


        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def prefix_count(self):
        """Gets the prefix_count of this Role.


        :return: The prefix_count of this Role.
        :rtype: int
        """
        return self._prefix_count

    @prefix_count.setter
    def prefix_count(self, prefix_count):
        """Sets the prefix_count of this Role.


        :param prefix_count: The prefix_count of this Role.
        :type prefix_count: int
        """

        self._prefix_count = prefix_count

    @property
    def slug(self):
        """Gets the slug of this Role.


        :return: The slug of this Role.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Role.


        :param slug: The slug of this Role.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 100:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `100`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def tags(self):
        """Gets the tags of this Role.


        :return: The tags of this Role.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Role.


        :param tags: The tags of this Role.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def url(self):
        """Gets the url of this Role.


        :return: The url of this Role.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Role.


        :param url: The url of this Role.
        :type url: str
        """

        self._url = url

    @property
    def vlan_count(self):
        """Gets the vlan_count of this Role.


        :return: The vlan_count of this Role.
        :rtype: int
        """
        return self._vlan_count

    @vlan_count.setter
    def vlan_count(self, vlan_count):
        """Sets the vlan_count of this Role.


        :param vlan_count: The vlan_count of this Role.
        :type vlan_count: int
        """

        self._vlan_count = vlan_count

    @property
    def weight(self):
        """Gets the weight of this Role.


        :return: The weight of this Role.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Role.


        :param weight: The weight of this Role.
        :type weight: int
        """
        if weight is not None and weight > 32767:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
