# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_module_bay import NestedModuleBay
from openapi_server.models.nested_module_type import NestedModuleType
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.status8 import Status8
from openapi_server import util


class Module(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_tag: str=None, comments: str=None, created: datetime=None, custom_fields: object=None, description: str=None, device: NestedDevice=None, display: str=None, id: int=None, last_updated: datetime=None, module_bay: NestedModuleBay=None, module_type: NestedModuleType=None, serial: str=None, status: Status8=None, tags: List[NestedTag]=None, url: str=None):
        """Module - a model defined in OpenAPI

        :param asset_tag: The asset_tag of this Module.
        :param comments: The comments of this Module.
        :param created: The created of this Module.
        :param custom_fields: The custom_fields of this Module.
        :param description: The description of this Module.
        :param device: The device of this Module.
        :param display: The display of this Module.
        :param id: The id of this Module.
        :param last_updated: The last_updated of this Module.
        :param module_bay: The module_bay of this Module.
        :param module_type: The module_type of this Module.
        :param serial: The serial of this Module.
        :param status: The status of this Module.
        :param tags: The tags of this Module.
        :param url: The url of this Module.
        """
        self.openapi_types = {
            'asset_tag': str,
            'comments': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'device': NestedDevice,
            'display': str,
            'id': int,
            'last_updated': datetime,
            'module_bay': NestedModuleBay,
            'module_type': NestedModuleType,
            'serial': str,
            'status': Status8,
            'tags': List[NestedTag],
            'url': str
        }

        self.attribute_map = {
            'asset_tag': 'asset_tag',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device': 'device',
            'display': 'display',
            'id': 'id',
            'last_updated': 'last_updated',
            'module_bay': 'module_bay',
            'module_type': 'module_type',
            'serial': 'serial',
            'status': 'status',
            'tags': 'tags',
            'url': 'url'
        }

        self._asset_tag = asset_tag
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device = device
        self._display = display
        self._id = id
        self._last_updated = last_updated
        self._module_bay = module_bay
        self._module_type = module_type
        self._serial = serial
        self._status = status
        self._tags = tags
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Module':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Module of this Module.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_tag(self):
        """Gets the asset_tag of this Module.

        A unique tag used to identify this device

        :return: The asset_tag of this Module.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this Module.

        A unique tag used to identify this device

        :param asset_tag: The asset_tag of this Module.
        :type asset_tag: str
        """
        if asset_tag is not None and len(asset_tag) > 50:
            raise ValueError("Invalid value for `asset_tag`, length must be less than or equal to `50`")

        self._asset_tag = asset_tag

    @property
    def comments(self):
        """Gets the comments of this Module.


        :return: The comments of this Module.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Module.


        :param comments: The comments of this Module.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this Module.


        :return: The created of this Module.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Module.


        :param created: The created of this Module.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Module.


        :return: The custom_fields of this Module.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Module.


        :param custom_fields: The custom_fields of this Module.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Module.


        :return: The description of this Module.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Module.


        :param description: The description of this Module.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this Module.


        :return: The device of this Module.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Module.


        :param device: The device of this Module.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def display(self):
        """Gets the display of this Module.


        :return: The display of this Module.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Module.


        :param display: The display of this Module.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this Module.


        :return: The id of this Module.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Module.


        :param id: The id of this Module.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Module.


        :return: The last_updated of this Module.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Module.


        :param last_updated: The last_updated of this Module.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def module_bay(self):
        """Gets the module_bay of this Module.


        :return: The module_bay of this Module.
        :rtype: NestedModuleBay
        """
        return self._module_bay

    @module_bay.setter
    def module_bay(self, module_bay):
        """Sets the module_bay of this Module.


        :param module_bay: The module_bay of this Module.
        :type module_bay: NestedModuleBay
        """
        if module_bay is None:
            raise ValueError("Invalid value for `module_bay`, must not be `None`")

        self._module_bay = module_bay

    @property
    def module_type(self):
        """Gets the module_type of this Module.


        :return: The module_type of this Module.
        :rtype: NestedModuleType
        """
        return self._module_type

    @module_type.setter
    def module_type(self, module_type):
        """Sets the module_type of this Module.


        :param module_type: The module_type of this Module.
        :type module_type: NestedModuleType
        """
        if module_type is None:
            raise ValueError("Invalid value for `module_type`, must not be `None`")

        self._module_type = module_type

    @property
    def serial(self):
        """Gets the serial of this Module.


        :return: The serial of this Module.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Module.


        :param serial: The serial of this Module.
        :type serial: str
        """
        if serial is not None and len(serial) > 50:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `50`")

        self._serial = serial

    @property
    def status(self):
        """Gets the status of this Module.


        :return: The status of this Module.
        :rtype: Status8
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Module.


        :param status: The status of this Module.
        :type status: Status8
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Module.


        :return: The tags of this Module.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Module.


        :param tags: The tags of this Module.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def url(self):
        """Gets the url of this Module.


        :return: The url of this Module.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Module.


        :param url: The url of this Module.
        :type url: str
        """

        self._url = url
