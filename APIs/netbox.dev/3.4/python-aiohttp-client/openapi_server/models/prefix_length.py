# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrefixLength(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prefix_length: int=None):
        """PrefixLength - a model defined in OpenAPI

        :param prefix_length: The prefix_length of this PrefixLength.
        """
        self.openapi_types = {
            'prefix_length': int
        }

        self.attribute_map = {
            'prefix_length': 'prefix_length'
        }

        self._prefix_length = prefix_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrefixLength':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrefixLength of this PrefixLength.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prefix_length(self):
        """Gets the prefix_length of this PrefixLength.


        :return: The prefix_length of this PrefixLength.
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this PrefixLength.


        :param prefix_length: The prefix_length of this PrefixLength.
        :type prefix_length: int
        """
        if prefix_length is None:
            raise ValueError("Invalid value for `prefix_length`, must not be `None`")

        self._prefix_length = prefix_length
