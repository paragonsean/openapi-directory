# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_group import NestedGroup
import re
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_joined: datetime=None, display: str=None, email: str=None, first_name: str=None, groups: list[NestedGroup]=None, id: int=None, is_active: bool=None, is_staff: bool=None, last_name: str=None, password: str=None, url: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param date_joined: The date_joined of this User.
        :param display: The display of this User.
        :param email: The email of this User.
        :param first_name: The first_name of this User.
        :param groups: The groups of this User.
        :param id: The id of this User.
        :param is_active: The is_active of this User.
        :param is_staff: The is_staff of this User.
        :param last_name: The last_name of this User.
        :param password: The password of this User.
        :param url: The url of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'date_joined': datetime,
            'display': str,
            'email': str,
            'first_name': str,
            'groups': list[NestedGroup],
            'id': int,
            'is_active': bool,
            'is_staff': bool,
            'last_name': str,
            'password': str,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'date_joined': 'date_joined',
            'display': 'display',
            'email': 'email',
            'first_name': 'first_name',
            'groups': 'groups',
            'id': 'id',
            'is_active': 'is_active',
            'is_staff': 'is_staff',
            'last_name': 'last_name',
            'password': 'password',
            'url': 'url',
            'username': 'username'
        }

        self._date_joined = date_joined
        self._display = display
        self._email = email
        self._first_name = first_name
        self._groups = groups
        self._id = id
        self._is_active = is_active
        self._is_staff = is_staff
        self._last_name = last_name
        self._password = password
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_joined(self):
        """Gets the date_joined of this User.


        :return: The date_joined of this User.
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this User.


        :param date_joined: The date_joined of this User.
        :type date_joined: datetime
        """

        self._date_joined = date_joined

    @property
    def display(self):
        """Gets the display of this User.


        :return: The display of this User.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this User.


        :param display: The display of this User.
        :type display: str
        """

        self._display = display

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is not None and len(email) > 254:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 150:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `150`")

        self._first_name = first_name

    @property
    def groups(self):
        """Gets the groups of this User.


        :return: The groups of this User.
        :rtype: list[NestedGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.


        :param groups: The groups of this User.
        :type groups: list[NestedGroup]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this User.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

        :return: The is_active of this User.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this User.

        Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

        :param is_active: The is_active of this User.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_staff(self):
        """Gets the is_staff of this User.

        Designates whether the user can log into this admin site.

        :return: The is_staff of this User.
        :rtype: bool
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this User.

        Designates whether the user can log into this admin site.

        :param is_staff: The is_staff of this User.
        :type is_staff: bool
        """

        self._is_staff = is_staff

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 150:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 128:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def url(self):
        """Gets the url of this User.


        :return: The url of this User.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this User.


        :param url: The url of this User.
        :type url: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this User.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.

        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 150:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `150`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")
        if username is not None and not re.search(r'^[\w.@+-]+$', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[\w.@+-]+$/`")

        self._username = username
