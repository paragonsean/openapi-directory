# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cable import NestedCable
from openapi_server.models.nested_tag import NestedTag
from openapi_server import util


class WritableInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occupied: bool=None, bridge: int=None, cable: NestedCable=None, cable_end: str=None, connected_endpoints: List[str]=None, connected_endpoints_reachable: bool=None, connected_endpoints_type: str=None, count_fhrp_groups: int=None, count_ipaddresses: int=None, created: datetime=None, custom_fields: object=None, description: str=None, device: int=None, display: str=None, duplex: str=None, enabled: bool=None, id: int=None, l2vpn_termination: str=None, label: str=None, lag: int=None, last_updated: datetime=None, link_peers: List[str]=None, link_peers_type: str=None, mac_address: str=None, mark_connected: bool=None, mgmt_only: bool=None, mode: str=None, module: int=None, mtu: int=None, name: str=None, parent: int=None, poe_mode: str=None, poe_type: str=None, rf_channel: str=None, rf_channel_frequency: float=None, rf_channel_width: float=None, rf_role: str=None, speed: int=None, tagged_vlans: list[int]=None, tags: List[NestedTag]=None, tx_power: int=None, type: str=None, untagged_vlan: int=None, url: str=None, vdcs: list[int]=None, vrf: int=None, wireless_lans: list[int]=None, wireless_link: int=None, wwn: str=None):
        """WritableInterface - a model defined in OpenAPI

        :param occupied: The occupied of this WritableInterface.
        :param bridge: The bridge of this WritableInterface.
        :param cable: The cable of this WritableInterface.
        :param cable_end: The cable_end of this WritableInterface.
        :param connected_endpoints: The connected_endpoints of this WritableInterface.
        :param connected_endpoints_reachable: The connected_endpoints_reachable of this WritableInterface.
        :param connected_endpoints_type: The connected_endpoints_type of this WritableInterface.
        :param count_fhrp_groups: The count_fhrp_groups of this WritableInterface.
        :param count_ipaddresses: The count_ipaddresses of this WritableInterface.
        :param created: The created of this WritableInterface.
        :param custom_fields: The custom_fields of this WritableInterface.
        :param description: The description of this WritableInterface.
        :param device: The device of this WritableInterface.
        :param display: The display of this WritableInterface.
        :param duplex: The duplex of this WritableInterface.
        :param enabled: The enabled of this WritableInterface.
        :param id: The id of this WritableInterface.
        :param l2vpn_termination: The l2vpn_termination of this WritableInterface.
        :param label: The label of this WritableInterface.
        :param lag: The lag of this WritableInterface.
        :param last_updated: The last_updated of this WritableInterface.
        :param link_peers: The link_peers of this WritableInterface.
        :param link_peers_type: The link_peers_type of this WritableInterface.
        :param mac_address: The mac_address of this WritableInterface.
        :param mark_connected: The mark_connected of this WritableInterface.
        :param mgmt_only: The mgmt_only of this WritableInterface.
        :param mode: The mode of this WritableInterface.
        :param module: The module of this WritableInterface.
        :param mtu: The mtu of this WritableInterface.
        :param name: The name of this WritableInterface.
        :param parent: The parent of this WritableInterface.
        :param poe_mode: The poe_mode of this WritableInterface.
        :param poe_type: The poe_type of this WritableInterface.
        :param rf_channel: The rf_channel of this WritableInterface.
        :param rf_channel_frequency: The rf_channel_frequency of this WritableInterface.
        :param rf_channel_width: The rf_channel_width of this WritableInterface.
        :param rf_role: The rf_role of this WritableInterface.
        :param speed: The speed of this WritableInterface.
        :param tagged_vlans: The tagged_vlans of this WritableInterface.
        :param tags: The tags of this WritableInterface.
        :param tx_power: The tx_power of this WritableInterface.
        :param type: The type of this WritableInterface.
        :param untagged_vlan: The untagged_vlan of this WritableInterface.
        :param url: The url of this WritableInterface.
        :param vdcs: The vdcs of this WritableInterface.
        :param vrf: The vrf of this WritableInterface.
        :param wireless_lans: The wireless_lans of this WritableInterface.
        :param wireless_link: The wireless_link of this WritableInterface.
        :param wwn: The wwn of this WritableInterface.
        """
        self.openapi_types = {
            'occupied': bool,
            'bridge': int,
            'cable': NestedCable,
            'cable_end': str,
            'connected_endpoints': List[str],
            'connected_endpoints_reachable': bool,
            'connected_endpoints_type': str,
            'count_fhrp_groups': int,
            'count_ipaddresses': int,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'device': int,
            'display': str,
            'duplex': str,
            'enabled': bool,
            'id': int,
            'l2vpn_termination': str,
            'label': str,
            'lag': int,
            'last_updated': datetime,
            'link_peers': List[str],
            'link_peers_type': str,
            'mac_address': str,
            'mark_connected': bool,
            'mgmt_only': bool,
            'mode': str,
            'module': int,
            'mtu': int,
            'name': str,
            'parent': int,
            'poe_mode': str,
            'poe_type': str,
            'rf_channel': str,
            'rf_channel_frequency': float,
            'rf_channel_width': float,
            'rf_role': str,
            'speed': int,
            'tagged_vlans': list[int],
            'tags': List[NestedTag],
            'tx_power': int,
            'type': str,
            'untagged_vlan': int,
            'url': str,
            'vdcs': list[int],
            'vrf': int,
            'wireless_lans': list[int],
            'wireless_link': int,
            'wwn': str
        }

        self.attribute_map = {
            'occupied': '_occupied',
            'bridge': 'bridge',
            'cable': 'cable',
            'cable_end': 'cable_end',
            'connected_endpoints': 'connected_endpoints',
            'connected_endpoints_reachable': 'connected_endpoints_reachable',
            'connected_endpoints_type': 'connected_endpoints_type',
            'count_fhrp_groups': 'count_fhrp_groups',
            'count_ipaddresses': 'count_ipaddresses',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device': 'device',
            'display': 'display',
            'duplex': 'duplex',
            'enabled': 'enabled',
            'id': 'id',
            'l2vpn_termination': 'l2vpn_termination',
            'label': 'label',
            'lag': 'lag',
            'last_updated': 'last_updated',
            'link_peers': 'link_peers',
            'link_peers_type': 'link_peers_type',
            'mac_address': 'mac_address',
            'mark_connected': 'mark_connected',
            'mgmt_only': 'mgmt_only',
            'mode': 'mode',
            'module': 'module',
            'mtu': 'mtu',
            'name': 'name',
            'parent': 'parent',
            'poe_mode': 'poe_mode',
            'poe_type': 'poe_type',
            'rf_channel': 'rf_channel',
            'rf_channel_frequency': 'rf_channel_frequency',
            'rf_channel_width': 'rf_channel_width',
            'rf_role': 'rf_role',
            'speed': 'speed',
            'tagged_vlans': 'tagged_vlans',
            'tags': 'tags',
            'tx_power': 'tx_power',
            'type': 'type',
            'untagged_vlan': 'untagged_vlan',
            'url': 'url',
            'vdcs': 'vdcs',
            'vrf': 'vrf',
            'wireless_lans': 'wireless_lans',
            'wireless_link': 'wireless_link',
            'wwn': 'wwn'
        }

        self._occupied = occupied
        self._bridge = bridge
        self._cable = cable
        self._cable_end = cable_end
        self._connected_endpoints = connected_endpoints
        self._connected_endpoints_reachable = connected_endpoints_reachable
        self._connected_endpoints_type = connected_endpoints_type
        self._count_fhrp_groups = count_fhrp_groups
        self._count_ipaddresses = count_ipaddresses
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device = device
        self._display = display
        self._duplex = duplex
        self._enabled = enabled
        self._id = id
        self._l2vpn_termination = l2vpn_termination
        self._label = label
        self._lag = lag
        self._last_updated = last_updated
        self._link_peers = link_peers
        self._link_peers_type = link_peers_type
        self._mac_address = mac_address
        self._mark_connected = mark_connected
        self._mgmt_only = mgmt_only
        self._mode = mode
        self._module = module
        self._mtu = mtu
        self._name = name
        self._parent = parent
        self._poe_mode = poe_mode
        self._poe_type = poe_type
        self._rf_channel = rf_channel
        self._rf_channel_frequency = rf_channel_frequency
        self._rf_channel_width = rf_channel_width
        self._rf_role = rf_role
        self._speed = speed
        self._tagged_vlans = tagged_vlans
        self._tags = tags
        self._tx_power = tx_power
        self._type = type
        self._untagged_vlan = untagged_vlan
        self._url = url
        self._vdcs = vdcs
        self._vrf = vrf
        self._wireless_lans = wireless_lans
        self._wireless_link = wireless_link
        self._wwn = wwn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableInterface of this WritableInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occupied(self):
        """Gets the occupied of this WritableInterface.


        :return: The occupied of this WritableInterface.
        :rtype: bool
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this WritableInterface.


        :param occupied: The occupied of this WritableInterface.
        :type occupied: bool
        """

        self._occupied = occupied

    @property
    def bridge(self):
        """Gets the bridge of this WritableInterface.


        :return: The bridge of this WritableInterface.
        :rtype: int
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """Sets the bridge of this WritableInterface.


        :param bridge: The bridge of this WritableInterface.
        :type bridge: int
        """

        self._bridge = bridge

    @property
    def cable(self):
        """Gets the cable of this WritableInterface.


        :return: The cable of this WritableInterface.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this WritableInterface.


        :param cable: The cable of this WritableInterface.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def cable_end(self):
        """Gets the cable_end of this WritableInterface.


        :return: The cable_end of this WritableInterface.
        :rtype: str
        """
        return self._cable_end

    @cable_end.setter
    def cable_end(self, cable_end):
        """Sets the cable_end of this WritableInterface.


        :param cable_end: The cable_end of this WritableInterface.
        :type cable_end: str
        """
        if cable_end is not None and len(cable_end) < 1:
            raise ValueError("Invalid value for `cable_end`, length must be greater than or equal to `1`")

        self._cable_end = cable_end

    @property
    def connected_endpoints(self):
        """Gets the connected_endpoints of this WritableInterface.

         Return the appropriate serializer for the type of connected object. 

        :return: The connected_endpoints of this WritableInterface.
        :rtype: List[str]
        """
        return self._connected_endpoints

    @connected_endpoints.setter
    def connected_endpoints(self, connected_endpoints):
        """Sets the connected_endpoints of this WritableInterface.

         Return the appropriate serializer for the type of connected object. 

        :param connected_endpoints: The connected_endpoints of this WritableInterface.
        :type connected_endpoints: List[str]
        """

        self._connected_endpoints = connected_endpoints

    @property
    def connected_endpoints_reachable(self):
        """Gets the connected_endpoints_reachable of this WritableInterface.


        :return: The connected_endpoints_reachable of this WritableInterface.
        :rtype: bool
        """
        return self._connected_endpoints_reachable

    @connected_endpoints_reachable.setter
    def connected_endpoints_reachable(self, connected_endpoints_reachable):
        """Sets the connected_endpoints_reachable of this WritableInterface.


        :param connected_endpoints_reachable: The connected_endpoints_reachable of this WritableInterface.
        :type connected_endpoints_reachable: bool
        """

        self._connected_endpoints_reachable = connected_endpoints_reachable

    @property
    def connected_endpoints_type(self):
        """Gets the connected_endpoints_type of this WritableInterface.


        :return: The connected_endpoints_type of this WritableInterface.
        :rtype: str
        """
        return self._connected_endpoints_type

    @connected_endpoints_type.setter
    def connected_endpoints_type(self, connected_endpoints_type):
        """Sets the connected_endpoints_type of this WritableInterface.


        :param connected_endpoints_type: The connected_endpoints_type of this WritableInterface.
        :type connected_endpoints_type: str
        """

        self._connected_endpoints_type = connected_endpoints_type

    @property
    def count_fhrp_groups(self):
        """Gets the count_fhrp_groups of this WritableInterface.


        :return: The count_fhrp_groups of this WritableInterface.
        :rtype: int
        """
        return self._count_fhrp_groups

    @count_fhrp_groups.setter
    def count_fhrp_groups(self, count_fhrp_groups):
        """Sets the count_fhrp_groups of this WritableInterface.


        :param count_fhrp_groups: The count_fhrp_groups of this WritableInterface.
        :type count_fhrp_groups: int
        """

        self._count_fhrp_groups = count_fhrp_groups

    @property
    def count_ipaddresses(self):
        """Gets the count_ipaddresses of this WritableInterface.


        :return: The count_ipaddresses of this WritableInterface.
        :rtype: int
        """
        return self._count_ipaddresses

    @count_ipaddresses.setter
    def count_ipaddresses(self, count_ipaddresses):
        """Sets the count_ipaddresses of this WritableInterface.


        :param count_ipaddresses: The count_ipaddresses of this WritableInterface.
        :type count_ipaddresses: int
        """

        self._count_ipaddresses = count_ipaddresses

    @property
    def created(self):
        """Gets the created of this WritableInterface.


        :return: The created of this WritableInterface.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableInterface.


        :param created: The created of this WritableInterface.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableInterface.


        :return: The custom_fields of this WritableInterface.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableInterface.


        :param custom_fields: The custom_fields of this WritableInterface.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableInterface.


        :return: The description of this WritableInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableInterface.


        :param description: The description of this WritableInterface.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this WritableInterface.


        :return: The device of this WritableInterface.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this WritableInterface.


        :param device: The device of this WritableInterface.
        :type device: int
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def display(self):
        """Gets the display of this WritableInterface.


        :return: The display of this WritableInterface.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this WritableInterface.


        :param display: The display of this WritableInterface.
        :type display: str
        """

        self._display = display

    @property
    def duplex(self):
        """Gets the duplex of this WritableInterface.


        :return: The duplex of this WritableInterface.
        :rtype: str
        """
        return self._duplex

    @duplex.setter
    def duplex(self, duplex):
        """Sets the duplex of this WritableInterface.


        :param duplex: The duplex of this WritableInterface.
        :type duplex: str
        """
        allowed_values = [None,"half", "full", "auto"]  # noqa: E501
        if duplex not in allowed_values:
            raise ValueError(
                "Invalid value for `duplex` ({0}), must be one of {1}"
                .format(duplex, allowed_values)
            )

        self._duplex = duplex

    @property
    def enabled(self):
        """Gets the enabled of this WritableInterface.


        :return: The enabled of this WritableInterface.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WritableInterface.


        :param enabled: The enabled of this WritableInterface.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this WritableInterface.


        :return: The id of this WritableInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableInterface.


        :param id: The id of this WritableInterface.
        :type id: int
        """

        self._id = id

    @property
    def l2vpn_termination(self):
        """Gets the l2vpn_termination of this WritableInterface.


        :return: The l2vpn_termination of this WritableInterface.
        :rtype: str
        """
        return self._l2vpn_termination

    @l2vpn_termination.setter
    def l2vpn_termination(self, l2vpn_termination):
        """Sets the l2vpn_termination of this WritableInterface.


        :param l2vpn_termination: The l2vpn_termination of this WritableInterface.
        :type l2vpn_termination: str
        """

        self._l2vpn_termination = l2vpn_termination

    @property
    def label(self):
        """Gets the label of this WritableInterface.

        Physical label

        :return: The label of this WritableInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WritableInterface.

        Physical label

        :param label: The label of this WritableInterface.
        :type label: str
        """
        if label is not None and len(label) > 64:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")

        self._label = label

    @property
    def lag(self):
        """Gets the lag of this WritableInterface.


        :return: The lag of this WritableInterface.
        :rtype: int
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this WritableInterface.


        :param lag: The lag of this WritableInterface.
        :type lag: int
        """

        self._lag = lag

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableInterface.


        :return: The last_updated of this WritableInterface.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableInterface.


        :param last_updated: The last_updated of this WritableInterface.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def link_peers(self):
        """Gets the link_peers of this WritableInterface.

         Return the appropriate serializer for the link termination model. 

        :return: The link_peers of this WritableInterface.
        :rtype: List[str]
        """
        return self._link_peers

    @link_peers.setter
    def link_peers(self, link_peers):
        """Sets the link_peers of this WritableInterface.

         Return the appropriate serializer for the link termination model. 

        :param link_peers: The link_peers of this WritableInterface.
        :type link_peers: List[str]
        """

        self._link_peers = link_peers

    @property
    def link_peers_type(self):
        """Gets the link_peers_type of this WritableInterface.


        :return: The link_peers_type of this WritableInterface.
        :rtype: str
        """
        return self._link_peers_type

    @link_peers_type.setter
    def link_peers_type(self, link_peers_type):
        """Sets the link_peers_type of this WritableInterface.


        :param link_peers_type: The link_peers_type of this WritableInterface.
        :type link_peers_type: str
        """

        self._link_peers_type = link_peers_type

    @property
    def mac_address(self):
        """Gets the mac_address of this WritableInterface.


        :return: The mac_address of this WritableInterface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this WritableInterface.


        :param mac_address: The mac_address of this WritableInterface.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mark_connected(self):
        """Gets the mark_connected of this WritableInterface.

        Treat as if a cable is connected

        :return: The mark_connected of this WritableInterface.
        :rtype: bool
        """
        return self._mark_connected

    @mark_connected.setter
    def mark_connected(self, mark_connected):
        """Sets the mark_connected of this WritableInterface.

        Treat as if a cable is connected

        :param mark_connected: The mark_connected of this WritableInterface.
        :type mark_connected: bool
        """

        self._mark_connected = mark_connected

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this WritableInterface.

        This interface is used only for out-of-band management

        :return: The mgmt_only of this WritableInterface.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this WritableInterface.

        This interface is used only for out-of-band management

        :param mgmt_only: The mgmt_only of this WritableInterface.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def mode(self):
        """Gets the mode of this WritableInterface.


        :return: The mode of this WritableInterface.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this WritableInterface.


        :param mode: The mode of this WritableInterface.
        :type mode: str
        """
        allowed_values = ["access", "tagged", "tagged-all"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def module(self):
        """Gets the module of this WritableInterface.


        :return: The module of this WritableInterface.
        :rtype: int
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this WritableInterface.


        :param module: The module of this WritableInterface.
        :type module: int
        """

        self._module = module

    @property
    def mtu(self):
        """Gets the mtu of this WritableInterface.


        :return: The mtu of this WritableInterface.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this WritableInterface.


        :param mtu: The mtu of this WritableInterface.
        :type mtu: int
        """
        if mtu is not None and mtu > 65536:
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `65536`")
        if mtu is not None and mtu < 1:
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1`")

        self._mtu = mtu

    @property
    def name(self):
        """Gets the name of this WritableInterface.


        :return: The name of this WritableInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableInterface.


        :param name: The name of this WritableInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this WritableInterface.


        :return: The parent of this WritableInterface.
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this WritableInterface.


        :param parent: The parent of this WritableInterface.
        :type parent: int
        """

        self._parent = parent

    @property
    def poe_mode(self):
        """Gets the poe_mode of this WritableInterface.


        :return: The poe_mode of this WritableInterface.
        :rtype: str
        """
        return self._poe_mode

    @poe_mode.setter
    def poe_mode(self, poe_mode):
        """Sets the poe_mode of this WritableInterface.


        :param poe_mode: The poe_mode of this WritableInterface.
        :type poe_mode: str
        """
        allowed_values = ["pd", "pse"]  # noqa: E501
        if poe_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `poe_mode` ({0}), must be one of {1}"
                .format(poe_mode, allowed_values)
            )

        self._poe_mode = poe_mode

    @property
    def poe_type(self):
        """Gets the poe_type of this WritableInterface.


        :return: The poe_type of this WritableInterface.
        :rtype: str
        """
        return self._poe_type

    @poe_type.setter
    def poe_type(self, poe_type):
        """Sets the poe_type of this WritableInterface.


        :param poe_type: The poe_type of this WritableInterface.
        :type poe_type: str
        """
        allowed_values = ["type1-ieee802.3af", "type2-ieee802.3at", "type2-ieee802.3az", "type3-ieee802.3bt", "type4-ieee802.3bt", "passive-24v-2pair", "passive-24v-4pair", "passive-48v-2pair", "passive-48v-4pair"]  # noqa: E501
        if poe_type not in allowed_values:
            raise ValueError(
                "Invalid value for `poe_type` ({0}), must be one of {1}"
                .format(poe_type, allowed_values)
            )

        self._poe_type = poe_type

    @property
    def rf_channel(self):
        """Gets the rf_channel of this WritableInterface.


        :return: The rf_channel of this WritableInterface.
        :rtype: str
        """
        return self._rf_channel

    @rf_channel.setter
    def rf_channel(self, rf_channel):
        """Sets the rf_channel of this WritableInterface.


        :param rf_channel: The rf_channel of this WritableInterface.
        :type rf_channel: str
        """
        allowed_values = ["2.4g-1-2412-22", "2.4g-2-2417-22", "2.4g-3-2422-22", "2.4g-4-2427-22", "2.4g-5-2432-22", "2.4g-6-2437-22", "2.4g-7-2442-22", "2.4g-8-2447-22", "2.4g-9-2452-22", "2.4g-10-2457-22", "2.4g-11-2462-22", "2.4g-12-2467-22", "2.4g-13-2472-22", "5g-32-5160-20", "5g-34-5170-40", "5g-36-5180-20", "5g-38-5190-40", "5g-40-5200-20", "5g-42-5210-80", "5g-44-5220-20", "5g-46-5230-40", "5g-48-5240-20", "5g-50-5250-160", "5g-52-5260-20", "5g-54-5270-40", "5g-56-5280-20", "5g-58-5290-80", "5g-60-5300-20", "5g-62-5310-40", "5g-64-5320-20", "5g-100-5500-20", "5g-102-5510-40", "5g-104-5520-20", "5g-106-5530-80", "5g-108-5540-20", "5g-110-5550-40", "5g-112-5560-20", "5g-114-5570-160", "5g-116-5580-20", "5g-118-5590-40", "5g-120-5600-20", "5g-122-5610-80", "5g-124-5620-20", "5g-126-5630-40", "5g-128-5640-20", "5g-132-5660-20", "5g-134-5670-40", "5g-136-5680-20", "5g-138-5690-80", "5g-140-5700-20", "5g-142-5710-40", "5g-144-5720-20", "5g-149-5745-20", "5g-151-5755-40", "5g-153-5765-20", "5g-155-5775-80", "5g-157-5785-20", "5g-159-5795-40", "5g-161-5805-20", "5g-163-5815-160", "5g-165-5825-20", "5g-167-5835-40", "5g-169-5845-20", "5g-171-5855-80", "5g-173-5865-20", "5g-175-5875-40", "5g-177-5885-20", "6g-1-5955-20", "6g-3-5965-40", "6g-5-5975-20", "6g-7-5985-80", "6g-9-5995-20", "6g-11-6005-40", "6g-13-6015-20", "6g-15-6025-160", "6g-17-6035-20", "6g-19-6045-40", "6g-21-6055-20", "6g-23-6065-80", "6g-25-6075-20", "6g-27-6085-40", "6g-29-6095-20", "6g-31-6105-320", "6g-33-6115-20", "6g-35-6125-40", "6g-37-6135-20", "6g-39-6145-80", "6g-41-6155-20", "6g-43-6165-40", "6g-45-6175-20", "6g-47-6185-160", "6g-49-6195-20", "6g-51-6205-40", "6g-53-6215-20", "6g-55-6225-80", "6g-57-6235-20", "6g-59-6245-40", "6g-61-6255-20", "6g-65-6275-20", "6g-67-6285-40", "6g-69-6295-20", "6g-71-6305-80", "6g-73-6315-20", "6g-75-6325-40", "6g-77-6335-20", "6g-79-6345-160", "6g-81-6355-20", "6g-83-6365-40", "6g-85-6375-20", "6g-87-6385-80", "6g-89-6395-20", "6g-91-6405-40", "6g-93-6415-20", "6g-95-6425-320", "6g-97-6435-20", "6g-99-6445-40", "6g-101-6455-20", "6g-103-6465-80", "6g-105-6475-20", "6g-107-6485-40", "6g-109-6495-20", "6g-111-6505-160", "6g-113-6515-20", "6g-115-6525-40", "6g-117-6535-20", "6g-119-6545-80", "6g-121-6555-20", "6g-123-6565-40", "6g-125-6575-20", "6g-129-6595-20", "6g-131-6605-40", "6g-133-6615-20", "6g-135-6625-80", "6g-137-6635-20", "6g-139-6645-40", "6g-141-6655-20", "6g-143-6665-160", "6g-145-6675-20", "6g-147-6685-40", "6g-149-6695-20", "6g-151-6705-80", "6g-153-6715-20", "6g-155-6725-40", "6g-157-6735-20", "6g-159-6745-320", "6g-161-6755-20", "6g-163-6765-40", "6g-165-6775-20", "6g-167-6785-80", "6g-169-6795-20", "6g-171-6805-40", "6g-173-6815-20", "6g-175-6825-160", "6g-177-6835-20", "6g-179-6845-40", "6g-181-6855-20", "6g-183-6865-80", "6g-185-6875-20", "6g-187-6885-40", "6g-189-6895-20", "6g-193-6915-20", "6g-195-6925-40", "6g-197-6935-20", "6g-199-6945-80", "6g-201-6955-20", "6g-203-6965-40", "6g-205-6975-20", "6g-207-6985-160", "6g-209-6995-20", "6g-211-7005-40", "6g-213-7015-20", "6g-215-7025-80", "6g-217-7035-20", "6g-219-7045-40", "6g-221-7055-20", "6g-225-7075-20", "6g-227-7085-40", "6g-229-7095-20", "6g-233-7115-20", "60g-1-58320-2160", "60g-2-60480-2160", "60g-3-62640-2160", "60g-4-64800-2160", "60g-5-66960-2160", "60g-6-69120-2160", "60g-9-59400-4320", "60g-10-61560-4320", "60g-11-63720-4320", "60g-12-65880-4320", "60g-13-68040-4320", "60g-17-60480-6480", "60g-18-62640-6480", "60g-19-64800-6480", "60g-20-66960-6480", "60g-25-61560-6480", "60g-26-63720-6480", "60g-27-65880-6480"]  # noqa: E501
        if rf_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `rf_channel` ({0}), must be one of {1}"
                .format(rf_channel, allowed_values)
            )

        self._rf_channel = rf_channel

    @property
    def rf_channel_frequency(self):
        """Gets the rf_channel_frequency of this WritableInterface.


        :return: The rf_channel_frequency of this WritableInterface.
        :rtype: float
        """
        return self._rf_channel_frequency

    @rf_channel_frequency.setter
    def rf_channel_frequency(self, rf_channel_frequency):
        """Sets the rf_channel_frequency of this WritableInterface.


        :param rf_channel_frequency: The rf_channel_frequency of this WritableInterface.
        :type rf_channel_frequency: float
        """

        self._rf_channel_frequency = rf_channel_frequency

    @property
    def rf_channel_width(self):
        """Gets the rf_channel_width of this WritableInterface.


        :return: The rf_channel_width of this WritableInterface.
        :rtype: float
        """
        return self._rf_channel_width

    @rf_channel_width.setter
    def rf_channel_width(self, rf_channel_width):
        """Sets the rf_channel_width of this WritableInterface.


        :param rf_channel_width: The rf_channel_width of this WritableInterface.
        :type rf_channel_width: float
        """

        self._rf_channel_width = rf_channel_width

    @property
    def rf_role(self):
        """Gets the rf_role of this WritableInterface.


        :return: The rf_role of this WritableInterface.
        :rtype: str
        """
        return self._rf_role

    @rf_role.setter
    def rf_role(self, rf_role):
        """Sets the rf_role of this WritableInterface.


        :param rf_role: The rf_role of this WritableInterface.
        :type rf_role: str
        """
        allowed_values = ["ap", "station"]  # noqa: E501
        if rf_role not in allowed_values:
            raise ValueError(
                "Invalid value for `rf_role` ({0}), must be one of {1}"
                .format(rf_role, allowed_values)
            )

        self._rf_role = rf_role

    @property
    def speed(self):
        """Gets the speed of this WritableInterface.


        :return: The speed of this WritableInterface.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this WritableInterface.


        :param speed: The speed of this WritableInterface.
        :type speed: int
        """
        if speed is not None and speed > 2147483647:
            raise ValueError("Invalid value for `speed`, must be a value less than or equal to `2147483647`")
        if speed is not None and speed < 0:
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")

        self._speed = speed

    @property
    def tagged_vlans(self):
        """Gets the tagged_vlans of this WritableInterface.


        :return: The tagged_vlans of this WritableInterface.
        :rtype: list[int]
        """
        return self._tagged_vlans

    @tagged_vlans.setter
    def tagged_vlans(self, tagged_vlans):
        """Sets the tagged_vlans of this WritableInterface.


        :param tagged_vlans: The tagged_vlans of this WritableInterface.
        :type tagged_vlans: list[int]
        """

        self._tagged_vlans = tagged_vlans

    @property
    def tags(self):
        """Gets the tags of this WritableInterface.


        :return: The tags of this WritableInterface.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableInterface.


        :param tags: The tags of this WritableInterface.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tx_power(self):
        """Gets the tx_power of this WritableInterface.


        :return: The tx_power of this WritableInterface.
        :rtype: int
        """
        return self._tx_power

    @tx_power.setter
    def tx_power(self, tx_power):
        """Sets the tx_power of this WritableInterface.


        :param tx_power: The tx_power of this WritableInterface.
        :type tx_power: int
        """
        if tx_power is not None and tx_power > 127:
            raise ValueError("Invalid value for `tx_power`, must be a value less than or equal to `127`")
        if tx_power is not None and tx_power < 0:
            raise ValueError("Invalid value for `tx_power`, must be a value greater than or equal to `0`")

        self._tx_power = tx_power

    @property
    def type(self):
        """Gets the type of this WritableInterface.


        :return: The type of this WritableInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableInterface.


        :param type: The type of this WritableInterface.
        :type type: str
        """
        allowed_values = ["virtual", "bridge", "lag", "100base-fx", "100base-lfx", "100base-tx", "100base-t1", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "50gbase-x-sfp56", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cpak", "100gbase-x-qsfp28", "200gbase-x-qsfp56", "400gbase-x-qsfpdd", "400gbase-x-osfp", "800gbase-x-qsfpdd", "800gbase-x-osfp", "1000base-kx", "10gbase-kr", "10gbase-kx4", "25gbase-kr", "40gbase-kr4", "50gbase-kr", "100gbase-kp4", "100gbase-kr2", "100gbase-kr4", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "ieee802.11ay", "ieee802.15.1", "other-wireless", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "64gfc-qsfpp", "128gfc-qsfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "xdsl", "docsis", "gpon", "xg-pon", "xgs-pon", "ng-pon2", "epon", "10g-epon", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "cisco-stackwise-80", "cisco-stackwise-160", "cisco-stackwise-320", "cisco-stackwise-480", "cisco-stackwise-1t", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def untagged_vlan(self):
        """Gets the untagged_vlan of this WritableInterface.


        :return: The untagged_vlan of this WritableInterface.
        :rtype: int
        """
        return self._untagged_vlan

    @untagged_vlan.setter
    def untagged_vlan(self, untagged_vlan):
        """Sets the untagged_vlan of this WritableInterface.


        :param untagged_vlan: The untagged_vlan of this WritableInterface.
        :type untagged_vlan: int
        """

        self._untagged_vlan = untagged_vlan

    @property
    def url(self):
        """Gets the url of this WritableInterface.


        :return: The url of this WritableInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WritableInterface.


        :param url: The url of this WritableInterface.
        :type url: str
        """

        self._url = url

    @property
    def vdcs(self):
        """Gets the vdcs of this WritableInterface.


        :return: The vdcs of this WritableInterface.
        :rtype: list[int]
        """
        return self._vdcs

    @vdcs.setter
    def vdcs(self, vdcs):
        """Sets the vdcs of this WritableInterface.


        :param vdcs: The vdcs of this WritableInterface.
        :type vdcs: list[int]
        """
        if vdcs is None:
            raise ValueError("Invalid value for `vdcs`, must not be `None`")

        self._vdcs = vdcs

    @property
    def vrf(self):
        """Gets the vrf of this WritableInterface.


        :return: The vrf of this WritableInterface.
        :rtype: int
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this WritableInterface.


        :param vrf: The vrf of this WritableInterface.
        :type vrf: int
        """

        self._vrf = vrf

    @property
    def wireless_lans(self):
        """Gets the wireless_lans of this WritableInterface.


        :return: The wireless_lans of this WritableInterface.
        :rtype: list[int]
        """
        return self._wireless_lans

    @wireless_lans.setter
    def wireless_lans(self, wireless_lans):
        """Sets the wireless_lans of this WritableInterface.


        :param wireless_lans: The wireless_lans of this WritableInterface.
        :type wireless_lans: list[int]
        """

        self._wireless_lans = wireless_lans

    @property
    def wireless_link(self):
        """Gets the wireless_link of this WritableInterface.


        :return: The wireless_link of this WritableInterface.
        :rtype: int
        """
        return self._wireless_link

    @wireless_link.setter
    def wireless_link(self, wireless_link):
        """Sets the wireless_link of this WritableInterface.


        :param wireless_link: The wireless_link of this WritableInterface.
        :type wireless_link: int
        """

        self._wireless_link = wireless_link

    @property
    def wwn(self):
        """Gets the wwn of this WritableInterface.

        64-bit World Wide Name

        :return: The wwn of this WritableInterface.
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this WritableInterface.

        64-bit World Wide Name

        :param wwn: The wwn of this WritableInterface.
        :type wwn: str
        """

        self._wwn = wwn
