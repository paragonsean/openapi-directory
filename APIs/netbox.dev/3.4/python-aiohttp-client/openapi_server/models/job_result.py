# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_user import NestedUser
from openapi_server.models.status6 import Status6
from openapi_server import util


class JobResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: datetime=None, created: datetime=None, data: object=None, display: str=None, id: int=None, interval: int=None, job_id: str=None, name: str=None, obj_type: str=None, scheduled: datetime=None, started: datetime=None, status: Status6=None, url: str=None, user: NestedUser=None):
        """JobResult - a model defined in OpenAPI

        :param completed: The completed of this JobResult.
        :param created: The created of this JobResult.
        :param data: The data of this JobResult.
        :param display: The display of this JobResult.
        :param id: The id of this JobResult.
        :param interval: The interval of this JobResult.
        :param job_id: The job_id of this JobResult.
        :param name: The name of this JobResult.
        :param obj_type: The obj_type of this JobResult.
        :param scheduled: The scheduled of this JobResult.
        :param started: The started of this JobResult.
        :param status: The status of this JobResult.
        :param url: The url of this JobResult.
        :param user: The user of this JobResult.
        """
        self.openapi_types = {
            'completed': datetime,
            'created': datetime,
            'data': object,
            'display': str,
            'id': int,
            'interval': int,
            'job_id': str,
            'name': str,
            'obj_type': str,
            'scheduled': datetime,
            'started': datetime,
            'status': Status6,
            'url': str,
            'user': NestedUser
        }

        self.attribute_map = {
            'completed': 'completed',
            'created': 'created',
            'data': 'data',
            'display': 'display',
            'id': 'id',
            'interval': 'interval',
            'job_id': 'job_id',
            'name': 'name',
            'obj_type': 'obj_type',
            'scheduled': 'scheduled',
            'started': 'started',
            'status': 'status',
            'url': 'url',
            'user': 'user'
        }

        self._completed = completed
        self._created = created
        self._data = data
        self._display = display
        self._id = id
        self._interval = interval
        self._job_id = job_id
        self._name = name
        self._obj_type = obj_type
        self._scheduled = scheduled
        self._started = started
        self._status = status
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobResult of this JobResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this JobResult.


        :return: The completed of this JobResult.
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this JobResult.


        :param completed: The completed of this JobResult.
        :type completed: datetime
        """

        self._completed = completed

    @property
    def created(self):
        """Gets the created of this JobResult.


        :return: The created of this JobResult.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JobResult.


        :param created: The created of this JobResult.
        :type created: datetime
        """

        self._created = created

    @property
    def data(self):
        """Gets the data of this JobResult.


        :return: The data of this JobResult.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this JobResult.


        :param data: The data of this JobResult.
        :type data: object
        """

        self._data = data

    @property
    def display(self):
        """Gets the display of this JobResult.


        :return: The display of this JobResult.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this JobResult.


        :param display: The display of this JobResult.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this JobResult.


        :return: The id of this JobResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobResult.


        :param id: The id of this JobResult.
        :type id: int
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this JobResult.

        Recurrence interval (in minutes)

        :return: The interval of this JobResult.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this JobResult.

        Recurrence interval (in minutes)

        :param interval: The interval of this JobResult.
        :type interval: int
        """
        if interval is not None and interval > 2147483647:
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `2147483647`")
        if interval is not None and interval < 1:
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")

        self._interval = interval

    @property
    def job_id(self):
        """Gets the job_id of this JobResult.


        :return: The job_id of this JobResult.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobResult.


        :param job_id: The job_id of this JobResult.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def name(self):
        """Gets the name of this JobResult.


        :return: The name of this JobResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobResult.


        :param name: The name of this JobResult.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def obj_type(self):
        """Gets the obj_type of this JobResult.


        :return: The obj_type of this JobResult.
        :rtype: str
        """
        return self._obj_type

    @obj_type.setter
    def obj_type(self, obj_type):
        """Sets the obj_type of this JobResult.


        :param obj_type: The obj_type of this JobResult.
        :type obj_type: str
        """

        self._obj_type = obj_type

    @property
    def scheduled(self):
        """Gets the scheduled of this JobResult.


        :return: The scheduled of this JobResult.
        :rtype: datetime
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this JobResult.


        :param scheduled: The scheduled of this JobResult.
        :type scheduled: datetime
        """

        self._scheduled = scheduled

    @property
    def started(self):
        """Gets the started of this JobResult.


        :return: The started of this JobResult.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this JobResult.


        :param started: The started of this JobResult.
        :type started: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this JobResult.


        :return: The status of this JobResult.
        :rtype: Status6
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobResult.


        :param status: The status of this JobResult.
        :type status: Status6
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this JobResult.


        :return: The url of this JobResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JobResult.


        :param url: The url of this JobResult.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this JobResult.


        :return: The user of this JobResult.
        :rtype: NestedUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobResult.


        :param user: The user of this JobResult.
        :type user: NestedUser
        """

        self._user = user
