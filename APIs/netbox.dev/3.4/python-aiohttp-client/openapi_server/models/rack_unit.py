# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.face1 import Face1
from openapi_server.models.nested_device import NestedDevice
from openapi_server import util


class RackUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: NestedDevice=None, display: str=None, face: Face1=None, id: float=None, name: str=None, occupied: bool=None):
        """RackUnit - a model defined in OpenAPI

        :param device: The device of this RackUnit.
        :param display: The display of this RackUnit.
        :param face: The face of this RackUnit.
        :param id: The id of this RackUnit.
        :param name: The name of this RackUnit.
        :param occupied: The occupied of this RackUnit.
        """
        self.openapi_types = {
            'device': NestedDevice,
            'display': str,
            'face': Face1,
            'id': float,
            'name': str,
            'occupied': bool
        }

        self.attribute_map = {
            'device': 'device',
            'display': 'display',
            'face': 'face',
            'id': 'id',
            'name': 'name',
            'occupied': 'occupied'
        }

        self._device = device
        self._display = display
        self._face = face
        self._id = id
        self._name = name
        self._occupied = occupied

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RackUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RackUnit of this RackUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this RackUnit.


        :return: The device of this RackUnit.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this RackUnit.


        :param device: The device of this RackUnit.
        :type device: NestedDevice
        """

        self._device = device

    @property
    def display(self):
        """Gets the display of this RackUnit.


        :return: The display of this RackUnit.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this RackUnit.


        :param display: The display of this RackUnit.
        :type display: str
        """

        self._display = display

    @property
    def face(self):
        """Gets the face of this RackUnit.


        :return: The face of this RackUnit.
        :rtype: Face1
        """
        return self._face

    @face.setter
    def face(self, face):
        """Sets the face of this RackUnit.


        :param face: The face of this RackUnit.
        :type face: Face1
        """

        self._face = face

    @property
    def id(self):
        """Gets the id of this RackUnit.


        :return: The id of this RackUnit.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RackUnit.


        :param id: The id of this RackUnit.
        :type id: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RackUnit.


        :return: The name of this RackUnit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RackUnit.


        :param name: The name of this RackUnit.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def occupied(self):
        """Gets the occupied of this RackUnit.


        :return: The occupied of this RackUnit.
        :rtype: bool
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this RackUnit.


        :param occupied: The occupied of this RackUnit.
        :type occupied: bool
        """

        self._occupied = occupied
