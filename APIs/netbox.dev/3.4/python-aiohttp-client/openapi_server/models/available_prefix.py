# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_vrf import NestedVRF
from openapi_server import util


class AvailablePrefix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family: int=None, prefix: str=None, vrf: NestedVRF=None):
        """AvailablePrefix - a model defined in OpenAPI

        :param family: The family of this AvailablePrefix.
        :param prefix: The prefix of this AvailablePrefix.
        :param vrf: The vrf of this AvailablePrefix.
        """
        self.openapi_types = {
            'family': int,
            'prefix': str,
            'vrf': NestedVRF
        }

        self.attribute_map = {
            'family': 'family',
            'prefix': 'prefix',
            'vrf': 'vrf'
        }

        self._family = family
        self._prefix = prefix
        self._vrf = vrf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailablePrefix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailablePrefix of this AvailablePrefix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family(self):
        """Gets the family of this AvailablePrefix.


        :return: The family of this AvailablePrefix.
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this AvailablePrefix.


        :param family: The family of this AvailablePrefix.
        :type family: int
        """

        self._family = family

    @property
    def prefix(self):
        """Gets the prefix of this AvailablePrefix.


        :return: The prefix of this AvailablePrefix.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this AvailablePrefix.


        :param prefix: The prefix of this AvailablePrefix.
        :type prefix: str
        """
        if prefix is not None and len(prefix) < 1:
            raise ValueError("Invalid value for `prefix`, length must be greater than or equal to `1`")

        self._prefix = prefix

    @property
    def vrf(self):
        """Gets the vrf of this AvailablePrefix.


        :return: The vrf of this AvailablePrefix.
        :rtype: NestedVRF
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this AvailablePrefix.


        :param vrf: The vrf of this AvailablePrefix.
        :type vrf: NestedVRF
        """

        self._vrf = vrf
