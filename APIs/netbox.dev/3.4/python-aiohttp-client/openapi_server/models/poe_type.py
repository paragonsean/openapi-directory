# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PoeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, value: str=None):
        """PoeType - a model defined in OpenAPI

        :param label: The label of this PoeType.
        :param value: The value of this PoeType.
        """
        self.openapi_types = {
            'label': str,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value'
        }

        self._label = label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Poe_type of this PoeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this PoeType.


        :return: The label of this PoeType.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PoeType.


        :param label: The label of this PoeType.
        :type label: str
        """
        allowed_values = ["802.3af (Type 1)", "802.3at (Type 2)", "802.3az (Type 2)", "802.3bt (Type 3)", "802.3bt (Type 4)", "Passive 24V (2-pair)", "Passive 24V (4-pair)", "Passive 48V (2-pair)", "Passive 48V (4-pair)"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def value(self):
        """Gets the value of this PoeType.


        :return: The value of this PoeType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PoeType.


        :param value: The value of this PoeType.
        :type value: str
        """
        allowed_values = ["type1-ieee802.3af", "type2-ieee802.3at", "type2-ieee802.3az", "type3-ieee802.3bt", "type4-ieee802.3bt", "passive-24v-2pair", "passive-24v-4pair", "passive-48v-2pair", "passive-48v-4pair"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
