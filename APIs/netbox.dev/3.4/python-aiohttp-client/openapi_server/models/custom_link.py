# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, button_class: str=None, content_types: list[str]=None, created: datetime=None, display: str=None, enabled: bool=None, group_name: str=None, id: int=None, last_updated: datetime=None, link_text: str=None, link_url: str=None, name: str=None, new_window: bool=None, url: str=None, weight: int=None):
        """CustomLink - a model defined in OpenAPI

        :param button_class: The button_class of this CustomLink.
        :param content_types: The content_types of this CustomLink.
        :param created: The created of this CustomLink.
        :param display: The display of this CustomLink.
        :param enabled: The enabled of this CustomLink.
        :param group_name: The group_name of this CustomLink.
        :param id: The id of this CustomLink.
        :param last_updated: The last_updated of this CustomLink.
        :param link_text: The link_text of this CustomLink.
        :param link_url: The link_url of this CustomLink.
        :param name: The name of this CustomLink.
        :param new_window: The new_window of this CustomLink.
        :param url: The url of this CustomLink.
        :param weight: The weight of this CustomLink.
        """
        self.openapi_types = {
            'button_class': str,
            'content_types': list[str],
            'created': datetime,
            'display': str,
            'enabled': bool,
            'group_name': str,
            'id': int,
            'last_updated': datetime,
            'link_text': str,
            'link_url': str,
            'name': str,
            'new_window': bool,
            'url': str,
            'weight': int
        }

        self.attribute_map = {
            'button_class': 'button_class',
            'content_types': 'content_types',
            'created': 'created',
            'display': 'display',
            'enabled': 'enabled',
            'group_name': 'group_name',
            'id': 'id',
            'last_updated': 'last_updated',
            'link_text': 'link_text',
            'link_url': 'link_url',
            'name': 'name',
            'new_window': 'new_window',
            'url': 'url',
            'weight': 'weight'
        }

        self._button_class = button_class
        self._content_types = content_types
        self._created = created
        self._display = display
        self._enabled = enabled
        self._group_name = group_name
        self._id = id
        self._last_updated = last_updated
        self._link_text = link_text
        self._link_url = link_url
        self._name = name
        self._new_window = new_window
        self._url = url
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomLink of this CustomLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def button_class(self):
        """Gets the button_class of this CustomLink.

        The class of the first link in a group will be used for the dropdown button

        :return: The button_class of this CustomLink.
        :rtype: str
        """
        return self._button_class

    @button_class.setter
    def button_class(self, button_class):
        """Sets the button_class of this CustomLink.

        The class of the first link in a group will be used for the dropdown button

        :param button_class: The button_class of this CustomLink.
        :type button_class: str
        """
        allowed_values = ["outline-dark", "blue", "indigo", "purple", "pink", "red", "orange", "yellow", "green", "teal", "cyan", "gray", "black", "white", "ghost-dark"]  # noqa: E501
        if button_class not in allowed_values:
            raise ValueError(
                "Invalid value for `button_class` ({0}), must be one of {1}"
                .format(button_class, allowed_values)
            )

        self._button_class = button_class

    @property
    def content_types(self):
        """Gets the content_types of this CustomLink.


        :return: The content_types of this CustomLink.
        :rtype: list[str]
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this CustomLink.


        :param content_types: The content_types of this CustomLink.
        :type content_types: list[str]
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")

        self._content_types = content_types

    @property
    def created(self):
        """Gets the created of this CustomLink.


        :return: The created of this CustomLink.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CustomLink.


        :param created: The created of this CustomLink.
        :type created: datetime
        """

        self._created = created

    @property
    def display(self):
        """Gets the display of this CustomLink.


        :return: The display of this CustomLink.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CustomLink.


        :param display: The display of this CustomLink.
        :type display: str
        """

        self._display = display

    @property
    def enabled(self):
        """Gets the enabled of this CustomLink.


        :return: The enabled of this CustomLink.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CustomLink.


        :param enabled: The enabled of this CustomLink.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def group_name(self):
        """Gets the group_name of this CustomLink.

        Links with the same group will appear as a dropdown menu

        :return: The group_name of this CustomLink.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CustomLink.

        Links with the same group will appear as a dropdown menu

        :param group_name: The group_name of this CustomLink.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 50:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `50`")

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this CustomLink.


        :return: The id of this CustomLink.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomLink.


        :param id: The id of this CustomLink.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this CustomLink.


        :return: The last_updated of this CustomLink.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CustomLink.


        :param last_updated: The last_updated of this CustomLink.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def link_text(self):
        """Gets the link_text of this CustomLink.

        Jinja2 template code for link text

        :return: The link_text of this CustomLink.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """Sets the link_text of this CustomLink.

        Jinja2 template code for link text

        :param link_text: The link_text of this CustomLink.
        :type link_text: str
        """
        if link_text is None:
            raise ValueError("Invalid value for `link_text`, must not be `None`")
        if link_text is not None and len(link_text) < 1:
            raise ValueError("Invalid value for `link_text`, length must be greater than or equal to `1`")

        self._link_text = link_text

    @property
    def link_url(self):
        """Gets the link_url of this CustomLink.

        Jinja2 template code for link URL

        :return: The link_url of this CustomLink.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this CustomLink.

        Jinja2 template code for link URL

        :param link_url: The link_url of this CustomLink.
        :type link_url: str
        """
        if link_url is None:
            raise ValueError("Invalid value for `link_url`, must not be `None`")
        if link_url is not None and len(link_url) < 1:
            raise ValueError("Invalid value for `link_url`, length must be greater than or equal to `1`")

        self._link_url = link_url

    @property
    def name(self):
        """Gets the name of this CustomLink.


        :return: The name of this CustomLink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomLink.


        :param name: The name of this CustomLink.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def new_window(self):
        """Gets the new_window of this CustomLink.

        Force link to open in a new window

        :return: The new_window of this CustomLink.
        :rtype: bool
        """
        return self._new_window

    @new_window.setter
    def new_window(self, new_window):
        """Sets the new_window of this CustomLink.

        Force link to open in a new window

        :param new_window: The new_window of this CustomLink.
        :type new_window: bool
        """

        self._new_window = new_window

    @property
    def url(self):
        """Gets the url of this CustomLink.


        :return: The url of this CustomLink.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CustomLink.


        :param url: The url of this CustomLink.
        :type url: str
        """

        self._url = url

    @property
    def weight(self):
        """Gets the weight of this CustomLink.


        :return: The weight of this CustomLink.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CustomLink.


        :param weight: The weight of this CustomLink.
        :type weight: int
        """
        if weight is not None and weight > 32767:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `32767`")
        if weight is not None and weight < 0:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `0`")

        self._weight = weight
