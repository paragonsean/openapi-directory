# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cluster import NestedCluster
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_device_role import NestedDeviceRole
from openapi_server.models.nested_ip_address import NestedIPAddress
from openapi_server.models.nested_platform import NestedPlatform
from openapi_server.models.nested_site import NestedSite
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server.models.status8 import Status8
from openapi_server import util


class VirtualMachineWithConfigContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: NestedCluster=None, comments: str=None, config_context: object=None, created: datetime=None, custom_fields: object=None, description: str=None, device: NestedDevice=None, disk: int=None, display: str=None, id: int=None, last_updated: datetime=None, local_context_data: object=None, memory: int=None, name: str=None, platform: NestedPlatform=None, primary_ip: NestedIPAddress=None, primary_ip4: NestedIPAddress=None, primary_ip6: NestedIPAddress=None, role: NestedDeviceRole=None, site: NestedSite=None, status: Status8=None, tags: List[NestedTag]=None, tenant: NestedTenant=None, url: str=None, vcpus: float=None):
        """VirtualMachineWithConfigContext - a model defined in OpenAPI

        :param cluster: The cluster of this VirtualMachineWithConfigContext.
        :param comments: The comments of this VirtualMachineWithConfigContext.
        :param config_context: The config_context of this VirtualMachineWithConfigContext.
        :param created: The created of this VirtualMachineWithConfigContext.
        :param custom_fields: The custom_fields of this VirtualMachineWithConfigContext.
        :param description: The description of this VirtualMachineWithConfigContext.
        :param device: The device of this VirtualMachineWithConfigContext.
        :param disk: The disk of this VirtualMachineWithConfigContext.
        :param display: The display of this VirtualMachineWithConfigContext.
        :param id: The id of this VirtualMachineWithConfigContext.
        :param last_updated: The last_updated of this VirtualMachineWithConfigContext.
        :param local_context_data: The local_context_data of this VirtualMachineWithConfigContext.
        :param memory: The memory of this VirtualMachineWithConfigContext.
        :param name: The name of this VirtualMachineWithConfigContext.
        :param platform: The platform of this VirtualMachineWithConfigContext.
        :param primary_ip: The primary_ip of this VirtualMachineWithConfigContext.
        :param primary_ip4: The primary_ip4 of this VirtualMachineWithConfigContext.
        :param primary_ip6: The primary_ip6 of this VirtualMachineWithConfigContext.
        :param role: The role of this VirtualMachineWithConfigContext.
        :param site: The site of this VirtualMachineWithConfigContext.
        :param status: The status of this VirtualMachineWithConfigContext.
        :param tags: The tags of this VirtualMachineWithConfigContext.
        :param tenant: The tenant of this VirtualMachineWithConfigContext.
        :param url: The url of this VirtualMachineWithConfigContext.
        :param vcpus: The vcpus of this VirtualMachineWithConfigContext.
        """
        self.openapi_types = {
            'cluster': NestedCluster,
            'comments': str,
            'config_context': object,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'device': NestedDevice,
            'disk': int,
            'display': str,
            'id': int,
            'last_updated': datetime,
            'local_context_data': object,
            'memory': int,
            'name': str,
            'platform': NestedPlatform,
            'primary_ip': NestedIPAddress,
            'primary_ip4': NestedIPAddress,
            'primary_ip6': NestedIPAddress,
            'role': NestedDeviceRole,
            'site': NestedSite,
            'status': Status8,
            'tags': List[NestedTag],
            'tenant': NestedTenant,
            'url': str,
            'vcpus': float
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'comments': 'comments',
            'config_context': 'config_context',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device': 'device',
            'disk': 'disk',
            'display': 'display',
            'id': 'id',
            'last_updated': 'last_updated',
            'local_context_data': 'local_context_data',
            'memory': 'memory',
            'name': 'name',
            'platform': 'platform',
            'primary_ip': 'primary_ip',
            'primary_ip4': 'primary_ip4',
            'primary_ip6': 'primary_ip6',
            'role': 'role',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'url': 'url',
            'vcpus': 'vcpus'
        }

        self._cluster = cluster
        self._comments = comments
        self._config_context = config_context
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device = device
        self._disk = disk
        self._display = display
        self._id = id
        self._last_updated = last_updated
        self._local_context_data = local_context_data
        self._memory = memory
        self._name = name
        self._platform = platform
        self._primary_ip = primary_ip
        self._primary_ip4 = primary_ip4
        self._primary_ip6 = primary_ip6
        self._role = role
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._url = url
        self._vcpus = vcpus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineWithConfigContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineWithConfigContext of this VirtualMachineWithConfigContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this VirtualMachineWithConfigContext.


        :return: The cluster of this VirtualMachineWithConfigContext.
        :rtype: NestedCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this VirtualMachineWithConfigContext.


        :param cluster: The cluster of this VirtualMachineWithConfigContext.
        :type cluster: NestedCluster
        """

        self._cluster = cluster

    @property
    def comments(self):
        """Gets the comments of this VirtualMachineWithConfigContext.


        :return: The comments of this VirtualMachineWithConfigContext.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this VirtualMachineWithConfigContext.


        :param comments: The comments of this VirtualMachineWithConfigContext.
        :type comments: str
        """

        self._comments = comments

    @property
    def config_context(self):
        """Gets the config_context of this VirtualMachineWithConfigContext.


        :return: The config_context of this VirtualMachineWithConfigContext.
        :rtype: object
        """
        return self._config_context

    @config_context.setter
    def config_context(self, config_context):
        """Sets the config_context of this VirtualMachineWithConfigContext.


        :param config_context: The config_context of this VirtualMachineWithConfigContext.
        :type config_context: object
        """

        self._config_context = config_context

    @property
    def created(self):
        """Gets the created of this VirtualMachineWithConfigContext.


        :return: The created of this VirtualMachineWithConfigContext.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VirtualMachineWithConfigContext.


        :param created: The created of this VirtualMachineWithConfigContext.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this VirtualMachineWithConfigContext.


        :return: The custom_fields of this VirtualMachineWithConfigContext.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this VirtualMachineWithConfigContext.


        :param custom_fields: The custom_fields of this VirtualMachineWithConfigContext.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this VirtualMachineWithConfigContext.


        :return: The description of this VirtualMachineWithConfigContext.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualMachineWithConfigContext.


        :param description: The description of this VirtualMachineWithConfigContext.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this VirtualMachineWithConfigContext.


        :return: The device of this VirtualMachineWithConfigContext.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this VirtualMachineWithConfigContext.


        :param device: The device of this VirtualMachineWithConfigContext.
        :type device: NestedDevice
        """

        self._device = device

    @property
    def disk(self):
        """Gets the disk of this VirtualMachineWithConfigContext.


        :return: The disk of this VirtualMachineWithConfigContext.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this VirtualMachineWithConfigContext.


        :param disk: The disk of this VirtualMachineWithConfigContext.
        :type disk: int
        """
        if disk is not None and disk > 2147483647:
            raise ValueError("Invalid value for `disk`, must be a value less than or equal to `2147483647`")
        if disk is not None and disk < 0:
            raise ValueError("Invalid value for `disk`, must be a value greater than or equal to `0`")

        self._disk = disk

    @property
    def display(self):
        """Gets the display of this VirtualMachineWithConfigContext.


        :return: The display of this VirtualMachineWithConfigContext.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this VirtualMachineWithConfigContext.


        :param display: The display of this VirtualMachineWithConfigContext.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this VirtualMachineWithConfigContext.


        :return: The id of this VirtualMachineWithConfigContext.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineWithConfigContext.


        :param id: The id of this VirtualMachineWithConfigContext.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this VirtualMachineWithConfigContext.


        :return: The last_updated of this VirtualMachineWithConfigContext.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VirtualMachineWithConfigContext.


        :param last_updated: The last_updated of this VirtualMachineWithConfigContext.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def local_context_data(self):
        """Gets the local_context_data of this VirtualMachineWithConfigContext.


        :return: The local_context_data of this VirtualMachineWithConfigContext.
        :rtype: object
        """
        return self._local_context_data

    @local_context_data.setter
    def local_context_data(self, local_context_data):
        """Sets the local_context_data of this VirtualMachineWithConfigContext.


        :param local_context_data: The local_context_data of this VirtualMachineWithConfigContext.
        :type local_context_data: object
        """

        self._local_context_data = local_context_data

    @property
    def memory(self):
        """Gets the memory of this VirtualMachineWithConfigContext.


        :return: The memory of this VirtualMachineWithConfigContext.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this VirtualMachineWithConfigContext.


        :param memory: The memory of this VirtualMachineWithConfigContext.
        :type memory: int
        """
        if memory is not None and memory > 2147483647:
            raise ValueError("Invalid value for `memory`, must be a value less than or equal to `2147483647`")
        if memory is not None and memory < 0:
            raise ValueError("Invalid value for `memory`, must be a value greater than or equal to `0`")

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this VirtualMachineWithConfigContext.


        :return: The name of this VirtualMachineWithConfigContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineWithConfigContext.


        :param name: The name of this VirtualMachineWithConfigContext.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this VirtualMachineWithConfigContext.


        :return: The platform of this VirtualMachineWithConfigContext.
        :rtype: NestedPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VirtualMachineWithConfigContext.


        :param platform: The platform of this VirtualMachineWithConfigContext.
        :type platform: NestedPlatform
        """

        self._platform = platform

    @property
    def primary_ip(self):
        """Gets the primary_ip of this VirtualMachineWithConfigContext.


        :return: The primary_ip of this VirtualMachineWithConfigContext.
        :rtype: NestedIPAddress
        """
        return self._primary_ip

    @primary_ip.setter
    def primary_ip(self, primary_ip):
        """Sets the primary_ip of this VirtualMachineWithConfigContext.


        :param primary_ip: The primary_ip of this VirtualMachineWithConfigContext.
        :type primary_ip: NestedIPAddress
        """

        self._primary_ip = primary_ip

    @property
    def primary_ip4(self):
        """Gets the primary_ip4 of this VirtualMachineWithConfigContext.


        :return: The primary_ip4 of this VirtualMachineWithConfigContext.
        :rtype: NestedIPAddress
        """
        return self._primary_ip4

    @primary_ip4.setter
    def primary_ip4(self, primary_ip4):
        """Sets the primary_ip4 of this VirtualMachineWithConfigContext.


        :param primary_ip4: The primary_ip4 of this VirtualMachineWithConfigContext.
        :type primary_ip4: NestedIPAddress
        """

        self._primary_ip4 = primary_ip4

    @property
    def primary_ip6(self):
        """Gets the primary_ip6 of this VirtualMachineWithConfigContext.


        :return: The primary_ip6 of this VirtualMachineWithConfigContext.
        :rtype: NestedIPAddress
        """
        return self._primary_ip6

    @primary_ip6.setter
    def primary_ip6(self, primary_ip6):
        """Sets the primary_ip6 of this VirtualMachineWithConfigContext.


        :param primary_ip6: The primary_ip6 of this VirtualMachineWithConfigContext.
        :type primary_ip6: NestedIPAddress
        """

        self._primary_ip6 = primary_ip6

    @property
    def role(self):
        """Gets the role of this VirtualMachineWithConfigContext.


        :return: The role of this VirtualMachineWithConfigContext.
        :rtype: NestedDeviceRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this VirtualMachineWithConfigContext.


        :param role: The role of this VirtualMachineWithConfigContext.
        :type role: NestedDeviceRole
        """

        self._role = role

    @property
    def site(self):
        """Gets the site of this VirtualMachineWithConfigContext.


        :return: The site of this VirtualMachineWithConfigContext.
        :rtype: NestedSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this VirtualMachineWithConfigContext.


        :param site: The site of this VirtualMachineWithConfigContext.
        :type site: NestedSite
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this VirtualMachineWithConfigContext.


        :return: The status of this VirtualMachineWithConfigContext.
        :rtype: Status8
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirtualMachineWithConfigContext.


        :param status: The status of this VirtualMachineWithConfigContext.
        :type status: Status8
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this VirtualMachineWithConfigContext.


        :return: The tags of this VirtualMachineWithConfigContext.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualMachineWithConfigContext.


        :param tags: The tags of this VirtualMachineWithConfigContext.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this VirtualMachineWithConfigContext.


        :return: The tenant of this VirtualMachineWithConfigContext.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this VirtualMachineWithConfigContext.


        :param tenant: The tenant of this VirtualMachineWithConfigContext.
        :type tenant: NestedTenant
        """

        self._tenant = tenant

    @property
    def url(self):
        """Gets the url of this VirtualMachineWithConfigContext.


        :return: The url of this VirtualMachineWithConfigContext.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this VirtualMachineWithConfigContext.


        :param url: The url of this VirtualMachineWithConfigContext.
        :type url: str
        """

        self._url = url

    @property
    def vcpus(self):
        """Gets the vcpus of this VirtualMachineWithConfigContext.


        :return: The vcpus of this VirtualMachineWithConfigContext.
        :rtype: float
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this VirtualMachineWithConfigContext.


        :param vcpus: The vcpus of this VirtualMachineWithConfigContext.
        :type vcpus: float
        """
        if vcpus is not None and vcpus < 0.01:
            raise ValueError("Invalid value for `vcpus`, must be a value greater than or equal to `0.01`")

        self._vcpus = vcpus
