# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_contact import NestedContact
from openapi_server.models.nested_contact_role import NestedContactRole
from openapi_server.models.priority import Priority
from openapi_server import util


class ContactAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact: NestedContact=None, content_type: str=None, created: datetime=None, display: str=None, id: int=None, last_updated: datetime=None, object: object=None, object_id: int=None, priority: Priority=None, role: NestedContactRole=None, url: str=None):
        """ContactAssignment - a model defined in OpenAPI

        :param contact: The contact of this ContactAssignment.
        :param content_type: The content_type of this ContactAssignment.
        :param created: The created of this ContactAssignment.
        :param display: The display of this ContactAssignment.
        :param id: The id of this ContactAssignment.
        :param last_updated: The last_updated of this ContactAssignment.
        :param object: The object of this ContactAssignment.
        :param object_id: The object_id of this ContactAssignment.
        :param priority: The priority of this ContactAssignment.
        :param role: The role of this ContactAssignment.
        :param url: The url of this ContactAssignment.
        """
        self.openapi_types = {
            'contact': NestedContact,
            'content_type': str,
            'created': datetime,
            'display': str,
            'id': int,
            'last_updated': datetime,
            'object': object,
            'object_id': int,
            'priority': Priority,
            'role': NestedContactRole,
            'url': str
        }

        self.attribute_map = {
            'contact': 'contact',
            'content_type': 'content_type',
            'created': 'created',
            'display': 'display',
            'id': 'id',
            'last_updated': 'last_updated',
            'object': 'object',
            'object_id': 'object_id',
            'priority': 'priority',
            'role': 'role',
            'url': 'url'
        }

        self._contact = contact
        self._content_type = content_type
        self._created = created
        self._display = display
        self._id = id
        self._last_updated = last_updated
        self._object = object
        self._object_id = object_id
        self._priority = priority
        self._role = role
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactAssignment of this ContactAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact(self):
        """Gets the contact of this ContactAssignment.


        :return: The contact of this ContactAssignment.
        :rtype: NestedContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ContactAssignment.


        :param contact: The contact of this ContactAssignment.
        :type contact: NestedContact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def content_type(self):
        """Gets the content_type of this ContactAssignment.


        :return: The content_type of this ContactAssignment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContactAssignment.


        :param content_type: The content_type of this ContactAssignment.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def created(self):
        """Gets the created of this ContactAssignment.


        :return: The created of this ContactAssignment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContactAssignment.


        :param created: The created of this ContactAssignment.
        :type created: datetime
        """

        self._created = created

    @property
    def display(self):
        """Gets the display of this ContactAssignment.


        :return: The display of this ContactAssignment.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ContactAssignment.


        :param display: The display of this ContactAssignment.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this ContactAssignment.


        :return: The id of this ContactAssignment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactAssignment.


        :param id: The id of this ContactAssignment.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this ContactAssignment.


        :return: The last_updated of this ContactAssignment.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ContactAssignment.


        :param last_updated: The last_updated of this ContactAssignment.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def object(self):
        """Gets the object of this ContactAssignment.


        :return: The object of this ContactAssignment.
        :rtype: object
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ContactAssignment.


        :param object: The object of this ContactAssignment.
        :type object: object
        """

        self._object = object

    @property
    def object_id(self):
        """Gets the object_id of this ContactAssignment.


        :return: The object_id of this ContactAssignment.
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ContactAssignment.


        :param object_id: The object_id of this ContactAssignment.
        :type object_id: int
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")
        if object_id is not None and object_id > -9223372036854775616:
            raise ValueError("Invalid value for `object_id`, must be a value less than or equal to `-9223372036854775616`")
        if object_id is not None and object_id < 0:
            raise ValueError("Invalid value for `object_id`, must be a value greater than or equal to `0`")

        self._object_id = object_id

    @property
    def priority(self):
        """Gets the priority of this ContactAssignment.


        :return: The priority of this ContactAssignment.
        :rtype: Priority
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ContactAssignment.


        :param priority: The priority of this ContactAssignment.
        :type priority: Priority
        """

        self._priority = priority

    @property
    def role(self):
        """Gets the role of this ContactAssignment.


        :return: The role of this ContactAssignment.
        :rtype: NestedContactRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ContactAssignment.


        :param role: The role of this ContactAssignment.
        :type role: NestedContactRole
        """

        self._role = role

    @property
    def url(self):
        """Gets the url of this ContactAssignment.


        :return: The url of this ContactAssignment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContactAssignment.


        :param url: The url of this ContactAssignment.
        :type url: str
        """

        self._url = url
