# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.airflow import Airflow
from openapi_server.models.nested_manufacturer import NestedManufacturer
from openapi_server.models.nested_tag import NestedTag
from openapi_server.models.subdevice_role import SubdeviceRole
from openapi_server.models.weight_unit import WeightUnit
import re
from openapi_server import util


class DeviceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airflow: Airflow=None, comments: str=None, created: datetime=None, custom_fields: object=None, description: str=None, device_count: int=None, display: str=None, front_image: str=None, id: int=None, is_full_depth: bool=None, last_updated: datetime=None, manufacturer: NestedManufacturer=None, model: str=None, part_number: str=None, rear_image: str=None, slug: str=None, subdevice_role: SubdeviceRole=None, tags: List[NestedTag]=None, u_height: float=1, url: str=None, weight: float=None, weight_unit: WeightUnit=None):
        """DeviceType - a model defined in OpenAPI

        :param airflow: The airflow of this DeviceType.
        :param comments: The comments of this DeviceType.
        :param created: The created of this DeviceType.
        :param custom_fields: The custom_fields of this DeviceType.
        :param description: The description of this DeviceType.
        :param device_count: The device_count of this DeviceType.
        :param display: The display of this DeviceType.
        :param front_image: The front_image of this DeviceType.
        :param id: The id of this DeviceType.
        :param is_full_depth: The is_full_depth of this DeviceType.
        :param last_updated: The last_updated of this DeviceType.
        :param manufacturer: The manufacturer of this DeviceType.
        :param model: The model of this DeviceType.
        :param part_number: The part_number of this DeviceType.
        :param rear_image: The rear_image of this DeviceType.
        :param slug: The slug of this DeviceType.
        :param subdevice_role: The subdevice_role of this DeviceType.
        :param tags: The tags of this DeviceType.
        :param u_height: The u_height of this DeviceType.
        :param url: The url of this DeviceType.
        :param weight: The weight of this DeviceType.
        :param weight_unit: The weight_unit of this DeviceType.
        """
        self.openapi_types = {
            'airflow': Airflow,
            'comments': str,
            'created': datetime,
            'custom_fields': object,
            'description': str,
            'device_count': int,
            'display': str,
            'front_image': str,
            'id': int,
            'is_full_depth': bool,
            'last_updated': datetime,
            'manufacturer': NestedManufacturer,
            'model': str,
            'part_number': str,
            'rear_image': str,
            'slug': str,
            'subdevice_role': SubdeviceRole,
            'tags': List[NestedTag],
            'u_height': float,
            'url': str,
            'weight': float,
            'weight_unit': WeightUnit
        }

        self.attribute_map = {
            'airflow': 'airflow',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device_count': 'device_count',
            'display': 'display',
            'front_image': 'front_image',
            'id': 'id',
            'is_full_depth': 'is_full_depth',
            'last_updated': 'last_updated',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'part_number': 'part_number',
            'rear_image': 'rear_image',
            'slug': 'slug',
            'subdevice_role': 'subdevice_role',
            'tags': 'tags',
            'u_height': 'u_height',
            'url': 'url',
            'weight': 'weight',
            'weight_unit': 'weight_unit'
        }

        self._airflow = airflow
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device_count = device_count
        self._display = display
        self._front_image = front_image
        self._id = id
        self._is_full_depth = is_full_depth
        self._last_updated = last_updated
        self._manufacturer = manufacturer
        self._model = model
        self._part_number = part_number
        self._rear_image = rear_image
        self._slug = slug
        self._subdevice_role = subdevice_role
        self._tags = tags
        self._u_height = u_height
        self._url = url
        self._weight = weight
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceType of this DeviceType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airflow(self):
        """Gets the airflow of this DeviceType.


        :return: The airflow of this DeviceType.
        :rtype: Airflow
        """
        return self._airflow

    @airflow.setter
    def airflow(self, airflow):
        """Sets the airflow of this DeviceType.


        :param airflow: The airflow of this DeviceType.
        :type airflow: Airflow
        """

        self._airflow = airflow

    @property
    def comments(self):
        """Gets the comments of this DeviceType.


        :return: The comments of this DeviceType.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DeviceType.


        :param comments: The comments of this DeviceType.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this DeviceType.


        :return: The created of this DeviceType.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DeviceType.


        :param created: The created of this DeviceType.
        :type created: datetime
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this DeviceType.


        :return: The custom_fields of this DeviceType.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this DeviceType.


        :param custom_fields: The custom_fields of this DeviceType.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this DeviceType.


        :return: The description of this DeviceType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceType.


        :param description: The description of this DeviceType.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_count(self):
        """Gets the device_count of this DeviceType.


        :return: The device_count of this DeviceType.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this DeviceType.


        :param device_count: The device_count of this DeviceType.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def display(self):
        """Gets the display of this DeviceType.


        :return: The display of this DeviceType.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this DeviceType.


        :param display: The display of this DeviceType.
        :type display: str
        """

        self._display = display

    @property
    def front_image(self):
        """Gets the front_image of this DeviceType.


        :return: The front_image of this DeviceType.
        :rtype: str
        """
        return self._front_image

    @front_image.setter
    def front_image(self, front_image):
        """Sets the front_image of this DeviceType.


        :param front_image: The front_image of this DeviceType.
        :type front_image: str
        """

        self._front_image = front_image

    @property
    def id(self):
        """Gets the id of this DeviceType.


        :return: The id of this DeviceType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceType.


        :param id: The id of this DeviceType.
        :type id: int
        """

        self._id = id

    @property
    def is_full_depth(self):
        """Gets the is_full_depth of this DeviceType.

        Device consumes both front and rear rack faces

        :return: The is_full_depth of this DeviceType.
        :rtype: bool
        """
        return self._is_full_depth

    @is_full_depth.setter
    def is_full_depth(self, is_full_depth):
        """Sets the is_full_depth of this DeviceType.

        Device consumes both front and rear rack faces

        :param is_full_depth: The is_full_depth of this DeviceType.
        :type is_full_depth: bool
        """

        self._is_full_depth = is_full_depth

    @property
    def last_updated(self):
        """Gets the last_updated of this DeviceType.


        :return: The last_updated of this DeviceType.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DeviceType.


        :param last_updated: The last_updated of this DeviceType.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceType.


        :return: The manufacturer of this DeviceType.
        :rtype: NestedManufacturer
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceType.


        :param manufacturer: The manufacturer of this DeviceType.
        :type manufacturer: NestedManufacturer
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this DeviceType.


        :return: The model of this DeviceType.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceType.


        :param model: The model of this DeviceType.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")
        if model is not None and len(model) > 100:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `100`")
        if model is not None and len(model) < 1:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")

        self._model = model

    @property
    def part_number(self):
        """Gets the part_number of this DeviceType.

        Discrete part number (optional)

        :return: The part_number of this DeviceType.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this DeviceType.

        Discrete part number (optional)

        :param part_number: The part_number of this DeviceType.
        :type part_number: str
        """
        if part_number is not None and len(part_number) > 50:
            raise ValueError("Invalid value for `part_number`, length must be less than or equal to `50`")

        self._part_number = part_number

    @property
    def rear_image(self):
        """Gets the rear_image of this DeviceType.


        :return: The rear_image of this DeviceType.
        :rtype: str
        """
        return self._rear_image

    @rear_image.setter
    def rear_image(self, rear_image):
        """Sets the rear_image of this DeviceType.


        :param rear_image: The rear_image of this DeviceType.
        :type rear_image: str
        """

        self._rear_image = rear_image

    @property
    def slug(self):
        """Gets the slug of this DeviceType.


        :return: The slug of this DeviceType.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DeviceType.


        :param slug: The slug of this DeviceType.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 100:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `100`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def subdevice_role(self):
        """Gets the subdevice_role of this DeviceType.


        :return: The subdevice_role of this DeviceType.
        :rtype: SubdeviceRole
        """
        return self._subdevice_role

    @subdevice_role.setter
    def subdevice_role(self, subdevice_role):
        """Sets the subdevice_role of this DeviceType.


        :param subdevice_role: The subdevice_role of this DeviceType.
        :type subdevice_role: SubdeviceRole
        """

        self._subdevice_role = subdevice_role

    @property
    def tags(self):
        """Gets the tags of this DeviceType.


        :return: The tags of this DeviceType.
        :rtype: List[NestedTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceType.


        :param tags: The tags of this DeviceType.
        :type tags: List[NestedTag]
        """

        self._tags = tags

    @property
    def u_height(self):
        """Gets the u_height of this DeviceType.


        :return: The u_height of this DeviceType.
        :rtype: float
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """Sets the u_height of this DeviceType.


        :param u_height: The u_height of this DeviceType.
        :type u_height: float
        """
        if u_height is not None and u_height < 0:
            raise ValueError("Invalid value for `u_height`, must be a value greater than or equal to `0`")

        self._u_height = u_height

    @property
    def url(self):
        """Gets the url of this DeviceType.


        :return: The url of this DeviceType.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DeviceType.


        :param url: The url of this DeviceType.
        :type url: str
        """

        self._url = url

    @property
    def weight(self):
        """Gets the weight of this DeviceType.


        :return: The weight of this DeviceType.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DeviceType.


        :param weight: The weight of this DeviceType.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this DeviceType.


        :return: The weight_unit of this DeviceType.
        :rtype: WeightUnit
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this DeviceType.


        :param weight_unit: The weight_unit of this DeviceType.
        :type weight_unit: WeightUnit
        """

        self._weight_unit = weight_unit
