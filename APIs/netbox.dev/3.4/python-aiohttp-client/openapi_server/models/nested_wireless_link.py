# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NestedWirelessLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: str=None, id: int=None, ssid: str=None, url: str=None):
        """NestedWirelessLink - a model defined in OpenAPI

        :param display: The display of this NestedWirelessLink.
        :param id: The id of this NestedWirelessLink.
        :param ssid: The ssid of this NestedWirelessLink.
        :param url: The url of this NestedWirelessLink.
        """
        self.openapi_types = {
            'display': str,
            'id': int,
            'ssid': str,
            'url': str
        }

        self.attribute_map = {
            'display': 'display',
            'id': 'id',
            'ssid': 'ssid',
            'url': 'url'
        }

        self._display = display
        self._id = id
        self._ssid = ssid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedWirelessLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedWirelessLink of this NestedWirelessLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this NestedWirelessLink.


        :return: The display of this NestedWirelessLink.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this NestedWirelessLink.


        :param display: The display of this NestedWirelessLink.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this NestedWirelessLink.


        :return: The id of this NestedWirelessLink.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedWirelessLink.


        :param id: The id of this NestedWirelessLink.
        :type id: int
        """

        self._id = id

    @property
    def ssid(self):
        """Gets the ssid of this NestedWirelessLink.


        :return: The ssid of this NestedWirelessLink.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this NestedWirelessLink.


        :param ssid: The ssid of this NestedWirelessLink.
        :type ssid: str
        """
        if ssid is not None and len(ssid) > 32:
            raise ValueError("Invalid value for `ssid`, length must be less than or equal to `32`")

        self._ssid = ssid

    @property
    def url(self):
        """Gets the url of this NestedWirelessLink.


        :return: The url of this NestedWirelessLink.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NestedWirelessLink.


        :param url: The url of this NestedWirelessLink.
        :type url: str
        """

        self._url = url
