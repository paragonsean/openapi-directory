# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class NestedL2VPN(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: str=None, id: int=None, identifier: int=None, name: str=None, slug: str=None, type: str=None, url: str=None):
        """NestedL2VPN - a model defined in OpenAPI

        :param display: The display of this NestedL2VPN.
        :param id: The id of this NestedL2VPN.
        :param identifier: The identifier of this NestedL2VPN.
        :param name: The name of this NestedL2VPN.
        :param slug: The slug of this NestedL2VPN.
        :param type: The type of this NestedL2VPN.
        :param url: The url of this NestedL2VPN.
        """
        self.openapi_types = {
            'display': str,
            'id': int,
            'identifier': int,
            'name': str,
            'slug': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'display': 'display',
            'id': 'id',
            'identifier': 'identifier',
            'name': 'name',
            'slug': 'slug',
            'type': 'type',
            'url': 'url'
        }

        self._display = display
        self._id = id
        self._identifier = identifier
        self._name = name
        self._slug = slug
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NestedL2VPN':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NestedL2VPN of this NestedL2VPN.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this NestedL2VPN.


        :return: The display of this NestedL2VPN.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this NestedL2VPN.


        :param display: The display of this NestedL2VPN.
        :type display: str
        """

        self._display = display

    @property
    def id(self):
        """Gets the id of this NestedL2VPN.


        :return: The id of this NestedL2VPN.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NestedL2VPN.


        :param id: The id of this NestedL2VPN.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this NestedL2VPN.


        :return: The identifier of this NestedL2VPN.
        :rtype: int
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this NestedL2VPN.


        :param identifier: The identifier of this NestedL2VPN.
        :type identifier: int
        """
        if identifier is not None and identifier > -9223372036854775616:
            raise ValueError("Invalid value for `identifier`, must be a value less than or equal to `-9223372036854775616`")
        if identifier is not None and identifier < 9223372036854775616:
            raise ValueError("Invalid value for `identifier`, must be a value greater than or equal to `9223372036854775616`")

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this NestedL2VPN.


        :return: The name of this NestedL2VPN.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NestedL2VPN.


        :param name: The name of this NestedL2VPN.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this NestedL2VPN.


        :return: The slug of this NestedL2VPN.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this NestedL2VPN.


        :param slug: The slug of this NestedL2VPN.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 100:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `100`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def type(self):
        """Gets the type of this NestedL2VPN.


        :return: The type of this NestedL2VPN.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NestedL2VPN.


        :param type: The type of this NestedL2VPN.
        :type type: str
        """
        allowed_values = ["vpws", "vpls", "vxlan", "vxlan-evpn", "mpls-evpn", "pbb-evpn", "epl", "evpl", "ep-lan", "evp-lan", "ep-tree", "evp-tree"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this NestedL2VPN.


        :return: The url of this NestedL2VPN.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NestedL2VPN.


        :param url: The url of this NestedL2VPN.
        :type url: str
        """

        self._url = url
