/*
 * IPQualityScore API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PhoneValidation200ResponseAssociatedEmailAddresses;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PhoneValidation200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:15.798849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhoneValidation200Response {
  public static final String SERIALIZED_NAME_V_O_I_P = "VOIP";
  @SerializedName(SERIALIZED_NAME_V_O_I_P)
  private Boolean VOIP;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ACTIVE_STATUS = "active_status";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STATUS)
  private String activeStatus;

  public static final String SERIALIZED_NAME_ASSOCIATED_EMAIL_ADDRESSES = "associated_email_addresses";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_EMAIL_ADDRESSES)
  private PhoneValidation200ResponseAssociatedEmailAddresses associatedEmailAddresses;

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DIALING_CODE = "dialing_code";
  @SerializedName(SERIALIZED_NAME_DIALING_CODE)
  private BigDecimal dialingCode;

  public static final String SERIALIZED_NAME_DO_NOT_CALL = "do_not_call";
  @SerializedName(SERIALIZED_NAME_DO_NOT_CALL)
  private Boolean doNotCall;

  public static final String SERIALIZED_NAME_FORMATTED = "formatted";
  @SerializedName(SERIALIZED_NAME_FORMATTED)
  private String formatted;

  public static final String SERIALIZED_NAME_FRAUD_SCORE = "fraud_score";
  @SerializedName(SERIALIZED_NAME_FRAUD_SCORE)
  private BigDecimal fraudScore;

  public static final String SERIALIZED_NAME_LEAKED = "leaked";
  @SerializedName(SERIALIZED_NAME_LEAKED)
  private Boolean leaked;

  public static final String SERIALIZED_NAME_LINE_TYPE = "line_type";
  @SerializedName(SERIALIZED_NAME_LINE_TYPE)
  private String lineType;

  public static final String SERIALIZED_NAME_LOCAL_FORMAT = "local_format";
  @SerializedName(SERIALIZED_NAME_LOCAL_FORMAT)
  private String localFormat;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MNC = "mnc";
  @SerializedName(SERIALIZED_NAME_MNC)
  private String mnc;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREPAID = "prepaid";
  @SerializedName(SERIALIZED_NAME_PREPAID)
  private String prepaid;

  public static final String SERIALIZED_NAME_RECENT_ABUSE = "recent_abuse";
  @SerializedName(SERIALIZED_NAME_RECENT_ABUSE)
  private Boolean recentAbuse;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RISKY = "risky";
  @SerializedName(SERIALIZED_NAME_RISKY)
  private Boolean risky;

  public static final String SERIALIZED_NAME_SMS_DOMAIN = "sms_domain";
  @SerializedName(SERIALIZED_NAME_SMS_DOMAIN)
  private String smsDomain;

  public static final String SERIALIZED_NAME_SMS_EMAIL = "sms_email";
  @SerializedName(SERIALIZED_NAME_SMS_EMAIL)
  private String smsEmail;

  public static final String SERIALIZED_NAME_SPAMMER = "spammer";
  @SerializedName(SERIALIZED_NAME_SPAMMER)
  private Boolean spammer;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_USER_ACTIVITY = "user_activity";
  @SerializedName(SERIALIZED_NAME_USER_ACTIVITY)
  private String userActivity;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zip_code";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public PhoneValidation200Response() {
  }

  public PhoneValidation200Response VOIP(Boolean VOIP) {
    this.VOIP = VOIP;
    return this;
  }

  /**
   * Get VOIP
   * @return VOIP
   */
  @javax.annotation.Nullable
  public Boolean getVOIP() {
    return VOIP;
  }

  public void setVOIP(Boolean VOIP) {
    this.VOIP = VOIP;
  }


  public PhoneValidation200Response active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public PhoneValidation200Response activeStatus(String activeStatus) {
    this.activeStatus = activeStatus;
    return this;
  }

  /**
   * Get activeStatus
   * @return activeStatus
   */
  @javax.annotation.Nullable
  public String getActiveStatus() {
    return activeStatus;
  }

  public void setActiveStatus(String activeStatus) {
    this.activeStatus = activeStatus;
  }


  public PhoneValidation200Response associatedEmailAddresses(PhoneValidation200ResponseAssociatedEmailAddresses associatedEmailAddresses) {
    this.associatedEmailAddresses = associatedEmailAddresses;
    return this;
  }

  /**
   * Get associatedEmailAddresses
   * @return associatedEmailAddresses
   */
  @javax.annotation.Nullable
  public PhoneValidation200ResponseAssociatedEmailAddresses getAssociatedEmailAddresses() {
    return associatedEmailAddresses;
  }

  public void setAssociatedEmailAddresses(PhoneValidation200ResponseAssociatedEmailAddresses associatedEmailAddresses) {
    this.associatedEmailAddresses = associatedEmailAddresses;
  }


  public PhoneValidation200Response carrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  /**
   * Get carrier
   * @return carrier
   */
  @javax.annotation.Nullable
  public String getCarrier() {
    return carrier;
  }

  public void setCarrier(String carrier) {
    this.carrier = carrier;
  }


  public PhoneValidation200Response city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public PhoneValidation200Response country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PhoneValidation200Response dialingCode(BigDecimal dialingCode) {
    this.dialingCode = dialingCode;
    return this;
  }

  /**
   * Get dialingCode
   * @return dialingCode
   */
  @javax.annotation.Nullable
  public BigDecimal getDialingCode() {
    return dialingCode;
  }

  public void setDialingCode(BigDecimal dialingCode) {
    this.dialingCode = dialingCode;
  }


  public PhoneValidation200Response doNotCall(Boolean doNotCall) {
    this.doNotCall = doNotCall;
    return this;
  }

  /**
   * Get doNotCall
   * @return doNotCall
   */
  @javax.annotation.Nullable
  public Boolean getDoNotCall() {
    return doNotCall;
  }

  public void setDoNotCall(Boolean doNotCall) {
    this.doNotCall = doNotCall;
  }


  public PhoneValidation200Response formatted(String formatted) {
    this.formatted = formatted;
    return this;
  }

  /**
   * Get formatted
   * @return formatted
   */
  @javax.annotation.Nullable
  public String getFormatted() {
    return formatted;
  }

  public void setFormatted(String formatted) {
    this.formatted = formatted;
  }


  public PhoneValidation200Response fraudScore(BigDecimal fraudScore) {
    this.fraudScore = fraudScore;
    return this;
  }

  /**
   * Get fraudScore
   * @return fraudScore
   */
  @javax.annotation.Nullable
  public BigDecimal getFraudScore() {
    return fraudScore;
  }

  public void setFraudScore(BigDecimal fraudScore) {
    this.fraudScore = fraudScore;
  }


  public PhoneValidation200Response leaked(Boolean leaked) {
    this.leaked = leaked;
    return this;
  }

  /**
   * Get leaked
   * @return leaked
   */
  @javax.annotation.Nullable
  public Boolean getLeaked() {
    return leaked;
  }

  public void setLeaked(Boolean leaked) {
    this.leaked = leaked;
  }


  public PhoneValidation200Response lineType(String lineType) {
    this.lineType = lineType;
    return this;
  }

  /**
   * Get lineType
   * @return lineType
   */
  @javax.annotation.Nullable
  public String getLineType() {
    return lineType;
  }

  public void setLineType(String lineType) {
    this.lineType = lineType;
  }


  public PhoneValidation200Response localFormat(String localFormat) {
    this.localFormat = localFormat;
    return this;
  }

  /**
   * Get localFormat
   * @return localFormat
   */
  @javax.annotation.Nullable
  public String getLocalFormat() {
    return localFormat;
  }

  public void setLocalFormat(String localFormat) {
    this.localFormat = localFormat;
  }


  public PhoneValidation200Response mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * Get mcc
   * @return mcc
   */
  @javax.annotation.Nullable
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }


  public PhoneValidation200Response message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public PhoneValidation200Response mnc(String mnc) {
    this.mnc = mnc;
    return this;
  }

  /**
   * Get mnc
   * @return mnc
   */
  @javax.annotation.Nullable
  public String getMnc() {
    return mnc;
  }

  public void setMnc(String mnc) {
    this.mnc = mnc;
  }


  public PhoneValidation200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PhoneValidation200Response prepaid(String prepaid) {
    this.prepaid = prepaid;
    return this;
  }

  /**
   * Get prepaid
   * @return prepaid
   */
  @javax.annotation.Nullable
  public String getPrepaid() {
    return prepaid;
  }

  public void setPrepaid(String prepaid) {
    this.prepaid = prepaid;
  }


  public PhoneValidation200Response recentAbuse(Boolean recentAbuse) {
    this.recentAbuse = recentAbuse;
    return this;
  }

  /**
   * Get recentAbuse
   * @return recentAbuse
   */
  @javax.annotation.Nullable
  public Boolean getRecentAbuse() {
    return recentAbuse;
  }

  public void setRecentAbuse(Boolean recentAbuse) {
    this.recentAbuse = recentAbuse;
  }


  public PhoneValidation200Response region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public PhoneValidation200Response requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public PhoneValidation200Response risky(Boolean risky) {
    this.risky = risky;
    return this;
  }

  /**
   * Get risky
   * @return risky
   */
  @javax.annotation.Nullable
  public Boolean getRisky() {
    return risky;
  }

  public void setRisky(Boolean risky) {
    this.risky = risky;
  }


  public PhoneValidation200Response smsDomain(String smsDomain) {
    this.smsDomain = smsDomain;
    return this;
  }

  /**
   * Get smsDomain
   * @return smsDomain
   */
  @javax.annotation.Nullable
  public String getSmsDomain() {
    return smsDomain;
  }

  public void setSmsDomain(String smsDomain) {
    this.smsDomain = smsDomain;
  }


  public PhoneValidation200Response smsEmail(String smsEmail) {
    this.smsEmail = smsEmail;
    return this;
  }

  /**
   * Get smsEmail
   * @return smsEmail
   */
  @javax.annotation.Nullable
  public String getSmsEmail() {
    return smsEmail;
  }

  public void setSmsEmail(String smsEmail) {
    this.smsEmail = smsEmail;
  }


  public PhoneValidation200Response spammer(Boolean spammer) {
    this.spammer = spammer;
    return this;
  }

  /**
   * Get spammer
   * @return spammer
   */
  @javax.annotation.Nullable
  public Boolean getSpammer() {
    return spammer;
  }

  public void setSpammer(Boolean spammer) {
    this.spammer = spammer;
  }


  public PhoneValidation200Response success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public PhoneValidation200Response timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public PhoneValidation200Response userActivity(String userActivity) {
    this.userActivity = userActivity;
    return this;
  }

  /**
   * Get userActivity
   * @return userActivity
   */
  @javax.annotation.Nullable
  public String getUserActivity() {
    return userActivity;
  }

  public void setUserActivity(String userActivity) {
    this.userActivity = userActivity;
  }


  public PhoneValidation200Response valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Get valid
   * @return valid
   */
  @javax.annotation.Nullable
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public PhoneValidation200Response zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Get zipCode
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneValidation200Response phoneValidation200Response = (PhoneValidation200Response) o;
    return Objects.equals(this.VOIP, phoneValidation200Response.VOIP) &&
        Objects.equals(this.active, phoneValidation200Response.active) &&
        Objects.equals(this.activeStatus, phoneValidation200Response.activeStatus) &&
        Objects.equals(this.associatedEmailAddresses, phoneValidation200Response.associatedEmailAddresses) &&
        Objects.equals(this.carrier, phoneValidation200Response.carrier) &&
        Objects.equals(this.city, phoneValidation200Response.city) &&
        Objects.equals(this.country, phoneValidation200Response.country) &&
        Objects.equals(this.dialingCode, phoneValidation200Response.dialingCode) &&
        Objects.equals(this.doNotCall, phoneValidation200Response.doNotCall) &&
        Objects.equals(this.formatted, phoneValidation200Response.formatted) &&
        Objects.equals(this.fraudScore, phoneValidation200Response.fraudScore) &&
        Objects.equals(this.leaked, phoneValidation200Response.leaked) &&
        Objects.equals(this.lineType, phoneValidation200Response.lineType) &&
        Objects.equals(this.localFormat, phoneValidation200Response.localFormat) &&
        Objects.equals(this.mcc, phoneValidation200Response.mcc) &&
        Objects.equals(this.message, phoneValidation200Response.message) &&
        Objects.equals(this.mnc, phoneValidation200Response.mnc) &&
        Objects.equals(this.name, phoneValidation200Response.name) &&
        Objects.equals(this.prepaid, phoneValidation200Response.prepaid) &&
        Objects.equals(this.recentAbuse, phoneValidation200Response.recentAbuse) &&
        Objects.equals(this.region, phoneValidation200Response.region) &&
        Objects.equals(this.requestId, phoneValidation200Response.requestId) &&
        Objects.equals(this.risky, phoneValidation200Response.risky) &&
        Objects.equals(this.smsDomain, phoneValidation200Response.smsDomain) &&
        Objects.equals(this.smsEmail, phoneValidation200Response.smsEmail) &&
        Objects.equals(this.spammer, phoneValidation200Response.spammer) &&
        Objects.equals(this.success, phoneValidation200Response.success) &&
        Objects.equals(this.timezone, phoneValidation200Response.timezone) &&
        Objects.equals(this.userActivity, phoneValidation200Response.userActivity) &&
        Objects.equals(this.valid, phoneValidation200Response.valid) &&
        Objects.equals(this.zipCode, phoneValidation200Response.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(VOIP, active, activeStatus, associatedEmailAddresses, carrier, city, country, dialingCode, doNotCall, formatted, fraudScore, leaked, lineType, localFormat, mcc, message, mnc, name, prepaid, recentAbuse, region, requestId, risky, smsDomain, smsEmail, spammer, success, timezone, userActivity, valid, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneValidation200Response {\n");
    sb.append("    VOIP: ").append(toIndentedString(VOIP)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    activeStatus: ").append(toIndentedString(activeStatus)).append("\n");
    sb.append("    associatedEmailAddresses: ").append(toIndentedString(associatedEmailAddresses)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    dialingCode: ").append(toIndentedString(dialingCode)).append("\n");
    sb.append("    doNotCall: ").append(toIndentedString(doNotCall)).append("\n");
    sb.append("    formatted: ").append(toIndentedString(formatted)).append("\n");
    sb.append("    fraudScore: ").append(toIndentedString(fraudScore)).append("\n");
    sb.append("    leaked: ").append(toIndentedString(leaked)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("    localFormat: ").append(toIndentedString(localFormat)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prepaid: ").append(toIndentedString(prepaid)).append("\n");
    sb.append("    recentAbuse: ").append(toIndentedString(recentAbuse)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    risky: ").append(toIndentedString(risky)).append("\n");
    sb.append("    smsDomain: ").append(toIndentedString(smsDomain)).append("\n");
    sb.append("    smsEmail: ").append(toIndentedString(smsEmail)).append("\n");
    sb.append("    spammer: ").append(toIndentedString(spammer)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    userActivity: ").append(toIndentedString(userActivity)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VOIP");
    openapiFields.add("active");
    openapiFields.add("active_status");
    openapiFields.add("associated_email_addresses");
    openapiFields.add("carrier");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("dialing_code");
    openapiFields.add("do_not_call");
    openapiFields.add("formatted");
    openapiFields.add("fraud_score");
    openapiFields.add("leaked");
    openapiFields.add("line_type");
    openapiFields.add("local_format");
    openapiFields.add("mcc");
    openapiFields.add("message");
    openapiFields.add("mnc");
    openapiFields.add("name");
    openapiFields.add("prepaid");
    openapiFields.add("recent_abuse");
    openapiFields.add("region");
    openapiFields.add("request_id");
    openapiFields.add("risky");
    openapiFields.add("sms_domain");
    openapiFields.add("sms_email");
    openapiFields.add("spammer");
    openapiFields.add("success");
    openapiFields.add("timezone");
    openapiFields.add("user_activity");
    openapiFields.add("valid");
    openapiFields.add("zip_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneValidation200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneValidation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneValidation200Response is not found in the empty JSON string", PhoneValidation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneValidation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneValidation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active_status") != null && !jsonObj.get("active_status").isJsonNull()) && !jsonObj.get("active_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_status").toString()));
      }
      // validate the optional field `associated_email_addresses`
      if (jsonObj.get("associated_email_addresses") != null && !jsonObj.get("associated_email_addresses").isJsonNull()) {
        PhoneValidation200ResponseAssociatedEmailAddresses.validateJsonElement(jsonObj.get("associated_email_addresses"));
      }
      if ((jsonObj.get("carrier") != null && !jsonObj.get("carrier").isJsonNull()) && !jsonObj.get("carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("formatted") != null && !jsonObj.get("formatted").isJsonNull()) && !jsonObj.get("formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatted").toString()));
      }
      if ((jsonObj.get("line_type") != null && !jsonObj.get("line_type").isJsonNull()) && !jsonObj.get("line_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_type").toString()));
      }
      if ((jsonObj.get("local_format") != null && !jsonObj.get("local_format").isJsonNull()) && !jsonObj.get("local_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_format").toString()));
      }
      if ((jsonObj.get("mcc") != null && !jsonObj.get("mcc").isJsonNull()) && !jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("mnc") != null && !jsonObj.get("mnc").isJsonNull()) && !jsonObj.get("mnc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mnc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mnc").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("prepaid") != null && !jsonObj.get("prepaid").isJsonNull()) && !jsonObj.get("prepaid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prepaid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prepaid").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("sms_domain") != null && !jsonObj.get("sms_domain").isJsonNull()) && !jsonObj.get("sms_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sms_domain").toString()));
      }
      if ((jsonObj.get("sms_email") != null && !jsonObj.get("sms_email").isJsonNull()) && !jsonObj.get("sms_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sms_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sms_email").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("user_activity") != null && !jsonObj.get("user_activity").isJsonNull()) && !jsonObj.get("user_activity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_activity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_activity").toString()));
      }
      if ((jsonObj.get("zip_code") != null && !jsonObj.get("zip_code").isJsonNull()) && !jsonObj.get("zip_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneValidation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneValidation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneValidation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneValidation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneValidation200Response>() {
           @Override
           public void write(JsonWriter out, PhoneValidation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneValidation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneValidation200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneValidation200Response
   * @throws IOException if the JSON string is invalid with respect to PhoneValidation200Response
   */
  public static PhoneValidation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneValidation200Response.class);
  }

  /**
   * Convert an instance of PhoneValidation200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

