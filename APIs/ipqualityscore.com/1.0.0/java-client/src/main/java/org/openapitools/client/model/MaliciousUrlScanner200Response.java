/*
 * IPQualityScore API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.MaliciousUrlScanner200ResponseDomainAge;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MaliciousUrlScanner200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:15.798849-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaliciousUrlScanner200Response {
  public static final String SERIALIZED_NAME_ADULT = "adult";
  @SerializedName(SERIALIZED_NAME_ADULT)
  private Boolean adult;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DNS_VALID = "dns_valid";
  @SerializedName(SERIALIZED_NAME_DNS_VALID)
  private Boolean dnsValid;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_AGE = "domain_age";
  @SerializedName(SERIALIZED_NAME_DOMAIN_AGE)
  private MaliciousUrlScanner200ResponseDomainAge domainAge;

  public static final String SERIALIZED_NAME_DOMAIN_RANK = "domain_rank";
  @SerializedName(SERIALIZED_NAME_DOMAIN_RANK)
  private BigDecimal domainRank;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_MALWARE = "malware";
  @SerializedName(SERIALIZED_NAME_MALWARE)
  private Boolean malware;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private BigDecimal pageSize;

  public static final String SERIALIZED_NAME_PARKING = "parking";
  @SerializedName(SERIALIZED_NAME_PARKING)
  private Boolean parking;

  public static final String SERIALIZED_NAME_PHISHING = "phishing";
  @SerializedName(SERIALIZED_NAME_PHISHING)
  private Boolean phishing;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RISK_SCORE = "risk_score";
  @SerializedName(SERIALIZED_NAME_RISK_SCORE)
  private BigDecimal riskScore;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_SPAMMING = "spamming";
  @SerializedName(SERIALIZED_NAME_SPAMMING)
  private Boolean spamming;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private BigDecimal statusCode;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_SUSPICIOUS = "suspicious";
  @SerializedName(SERIALIZED_NAME_SUSPICIOUS)
  private Boolean suspicious;

  public static final String SERIALIZED_NAME_UNSAFE = "unsafe";
  @SerializedName(SERIALIZED_NAME_UNSAFE)
  private Boolean unsafe;

  public MaliciousUrlScanner200Response() {
  }

  public MaliciousUrlScanner200Response adult(Boolean adult) {
    this.adult = adult;
    return this;
  }

  /**
   * Get adult
   * @return adult
   */
  @javax.annotation.Nullable
  public Boolean getAdult() {
    return adult;
  }

  public void setAdult(Boolean adult) {
    this.adult = adult;
  }


  public MaliciousUrlScanner200Response category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public MaliciousUrlScanner200Response contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public MaliciousUrlScanner200Response dnsValid(Boolean dnsValid) {
    this.dnsValid = dnsValid;
    return this;
  }

  /**
   * Get dnsValid
   * @return dnsValid
   */
  @javax.annotation.Nullable
  public Boolean getDnsValid() {
    return dnsValid;
  }

  public void setDnsValid(Boolean dnsValid) {
    this.dnsValid = dnsValid;
  }


  public MaliciousUrlScanner200Response domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public MaliciousUrlScanner200Response domainAge(MaliciousUrlScanner200ResponseDomainAge domainAge) {
    this.domainAge = domainAge;
    return this;
  }

  /**
   * Get domainAge
   * @return domainAge
   */
  @javax.annotation.Nullable
  public MaliciousUrlScanner200ResponseDomainAge getDomainAge() {
    return domainAge;
  }

  public void setDomainAge(MaliciousUrlScanner200ResponseDomainAge domainAge) {
    this.domainAge = domainAge;
  }


  public MaliciousUrlScanner200Response domainRank(BigDecimal domainRank) {
    this.domainRank = domainRank;
    return this;
  }

  /**
   * Get domainRank
   * @return domainRank
   */
  @javax.annotation.Nullable
  public BigDecimal getDomainRank() {
    return domainRank;
  }

  public void setDomainRank(BigDecimal domainRank) {
    this.domainRank = domainRank;
  }


  public MaliciousUrlScanner200Response ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public MaliciousUrlScanner200Response malware(Boolean malware) {
    this.malware = malware;
    return this;
  }

  /**
   * Get malware
   * @return malware
   */
  @javax.annotation.Nullable
  public Boolean getMalware() {
    return malware;
  }

  public void setMalware(Boolean malware) {
    this.malware = malware;
  }


  public MaliciousUrlScanner200Response message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public MaliciousUrlScanner200Response pageSize(BigDecimal pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public BigDecimal getPageSize() {
    return pageSize;
  }

  public void setPageSize(BigDecimal pageSize) {
    this.pageSize = pageSize;
  }


  public MaliciousUrlScanner200Response parking(Boolean parking) {
    this.parking = parking;
    return this;
  }

  /**
   * Get parking
   * @return parking
   */
  @javax.annotation.Nullable
  public Boolean getParking() {
    return parking;
  }

  public void setParking(Boolean parking) {
    this.parking = parking;
  }


  public MaliciousUrlScanner200Response phishing(Boolean phishing) {
    this.phishing = phishing;
    return this;
  }

  /**
   * Get phishing
   * @return phishing
   */
  @javax.annotation.Nullable
  public Boolean getPhishing() {
    return phishing;
  }

  public void setPhishing(Boolean phishing) {
    this.phishing = phishing;
  }


  public MaliciousUrlScanner200Response requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public MaliciousUrlScanner200Response riskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
    return this;
  }

  /**
   * Get riskScore
   * @return riskScore
   */
  @javax.annotation.Nullable
  public BigDecimal getRiskScore() {
    return riskScore;
  }

  public void setRiskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
  }


  public MaliciousUrlScanner200Response server(String server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public MaliciousUrlScanner200Response spamming(Boolean spamming) {
    this.spamming = spamming;
    return this;
  }

  /**
   * Get spamming
   * @return spamming
   */
  @javax.annotation.Nullable
  public Boolean getSpamming() {
    return spamming;
  }

  public void setSpamming(Boolean spamming) {
    this.spamming = spamming;
  }


  public MaliciousUrlScanner200Response statusCode(BigDecimal statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public BigDecimal getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(BigDecimal statusCode) {
    this.statusCode = statusCode;
  }


  public MaliciousUrlScanner200Response success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public MaliciousUrlScanner200Response suspicious(Boolean suspicious) {
    this.suspicious = suspicious;
    return this;
  }

  /**
   * Get suspicious
   * @return suspicious
   */
  @javax.annotation.Nullable
  public Boolean getSuspicious() {
    return suspicious;
  }

  public void setSuspicious(Boolean suspicious) {
    this.suspicious = suspicious;
  }


  public MaliciousUrlScanner200Response unsafe(Boolean unsafe) {
    this.unsafe = unsafe;
    return this;
  }

  /**
   * Get unsafe
   * @return unsafe
   */
  @javax.annotation.Nullable
  public Boolean getUnsafe() {
    return unsafe;
  }

  public void setUnsafe(Boolean unsafe) {
    this.unsafe = unsafe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaliciousUrlScanner200Response maliciousUrlScanner200Response = (MaliciousUrlScanner200Response) o;
    return Objects.equals(this.adult, maliciousUrlScanner200Response.adult) &&
        Objects.equals(this.category, maliciousUrlScanner200Response.category) &&
        Objects.equals(this.contentType, maliciousUrlScanner200Response.contentType) &&
        Objects.equals(this.dnsValid, maliciousUrlScanner200Response.dnsValid) &&
        Objects.equals(this.domain, maliciousUrlScanner200Response.domain) &&
        Objects.equals(this.domainAge, maliciousUrlScanner200Response.domainAge) &&
        Objects.equals(this.domainRank, maliciousUrlScanner200Response.domainRank) &&
        Objects.equals(this.ipAddress, maliciousUrlScanner200Response.ipAddress) &&
        Objects.equals(this.malware, maliciousUrlScanner200Response.malware) &&
        Objects.equals(this.message, maliciousUrlScanner200Response.message) &&
        Objects.equals(this.pageSize, maliciousUrlScanner200Response.pageSize) &&
        Objects.equals(this.parking, maliciousUrlScanner200Response.parking) &&
        Objects.equals(this.phishing, maliciousUrlScanner200Response.phishing) &&
        Objects.equals(this.requestId, maliciousUrlScanner200Response.requestId) &&
        Objects.equals(this.riskScore, maliciousUrlScanner200Response.riskScore) &&
        Objects.equals(this.server, maliciousUrlScanner200Response.server) &&
        Objects.equals(this.spamming, maliciousUrlScanner200Response.spamming) &&
        Objects.equals(this.statusCode, maliciousUrlScanner200Response.statusCode) &&
        Objects.equals(this.success, maliciousUrlScanner200Response.success) &&
        Objects.equals(this.suspicious, maliciousUrlScanner200Response.suspicious) &&
        Objects.equals(this.unsafe, maliciousUrlScanner200Response.unsafe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adult, category, contentType, dnsValid, domain, domainAge, domainRank, ipAddress, malware, message, pageSize, parking, phishing, requestId, riskScore, server, spamming, statusCode, success, suspicious, unsafe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaliciousUrlScanner200Response {\n");
    sb.append("    adult: ").append(toIndentedString(adult)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    dnsValid: ").append(toIndentedString(dnsValid)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainAge: ").append(toIndentedString(domainAge)).append("\n");
    sb.append("    domainRank: ").append(toIndentedString(domainRank)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    malware: ").append(toIndentedString(malware)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    parking: ").append(toIndentedString(parking)).append("\n");
    sb.append("    phishing: ").append(toIndentedString(phishing)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    spamming: ").append(toIndentedString(spamming)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    suspicious: ").append(toIndentedString(suspicious)).append("\n");
    sb.append("    unsafe: ").append(toIndentedString(unsafe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adult");
    openapiFields.add("category");
    openapiFields.add("content_type");
    openapiFields.add("dns_valid");
    openapiFields.add("domain");
    openapiFields.add("domain_age");
    openapiFields.add("domain_rank");
    openapiFields.add("ip_address");
    openapiFields.add("malware");
    openapiFields.add("message");
    openapiFields.add("page_size");
    openapiFields.add("parking");
    openapiFields.add("phishing");
    openapiFields.add("request_id");
    openapiFields.add("risk_score");
    openapiFields.add("server");
    openapiFields.add("spamming");
    openapiFields.add("status_code");
    openapiFields.add("success");
    openapiFields.add("suspicious");
    openapiFields.add("unsafe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaliciousUrlScanner200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaliciousUrlScanner200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaliciousUrlScanner200Response is not found in the empty JSON string", MaliciousUrlScanner200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaliciousUrlScanner200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaliciousUrlScanner200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // validate the optional field `domain_age`
      if (jsonObj.get("domain_age") != null && !jsonObj.get("domain_age").isJsonNull()) {
        MaliciousUrlScanner200ResponseDomainAge.validateJsonElement(jsonObj.get("domain_age"));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull()) && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaliciousUrlScanner200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaliciousUrlScanner200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaliciousUrlScanner200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaliciousUrlScanner200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<MaliciousUrlScanner200Response>() {
           @Override
           public void write(JsonWriter out, MaliciousUrlScanner200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaliciousUrlScanner200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaliciousUrlScanner200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaliciousUrlScanner200Response
   * @throws IOException if the JSON string is invalid with respect to MaliciousUrlScanner200Response
   */
  public static MaliciousUrlScanner200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaliciousUrlScanner200Response.class);
  }

  /**
   * Convert an instance of MaliciousUrlScanner200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

