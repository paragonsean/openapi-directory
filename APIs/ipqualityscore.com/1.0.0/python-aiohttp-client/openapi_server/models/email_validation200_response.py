# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_validation200_response_associated_names import EmailValidation200ResponseAssociatedNames
from openapi_server.models.email_validation200_response_associated_phone_numbers import EmailValidation200ResponseAssociatedPhoneNumbers
from openapi_server.models.email_validation200_response_domain_age import EmailValidation200ResponseDomainAge
from openapi_server import util


class EmailValidation200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_names: EmailValidation200ResponseAssociatedNames=None, associated_phone_numbers: EmailValidation200ResponseAssociatedPhoneNumbers=None, catch_all: bool=None, common: bool=None, deliverability: str=None, disposable: bool=None, dns_valid: bool=None, domain_age: EmailValidation200ResponseDomainAge=None, domain_velocity: str=None, first_name: str=None, first_seen: EmailValidation200ResponseDomainAge=None, fraud_score: float=None, frequent_complainer: bool=None, generic: bool=None, honeypot: bool=None, leaked: bool=None, message: str=None, overall_score: float=None, recent_abuse: bool=None, request_id: str=None, sanitized_email: str=None, smtp_score: float=None, spam_trap_score: str=None, success: bool=None, suggested_domain: str=None, suspect: bool=None, timed_out: bool=None, user_activity: str=None, valid: bool=None):
        """EmailValidation200Response - a model defined in OpenAPI

        :param associated_names: The associated_names of this EmailValidation200Response.
        :param associated_phone_numbers: The associated_phone_numbers of this EmailValidation200Response.
        :param catch_all: The catch_all of this EmailValidation200Response.
        :param common: The common of this EmailValidation200Response.
        :param deliverability: The deliverability of this EmailValidation200Response.
        :param disposable: The disposable of this EmailValidation200Response.
        :param dns_valid: The dns_valid of this EmailValidation200Response.
        :param domain_age: The domain_age of this EmailValidation200Response.
        :param domain_velocity: The domain_velocity of this EmailValidation200Response.
        :param first_name: The first_name of this EmailValidation200Response.
        :param first_seen: The first_seen of this EmailValidation200Response.
        :param fraud_score: The fraud_score of this EmailValidation200Response.
        :param frequent_complainer: The frequent_complainer of this EmailValidation200Response.
        :param generic: The generic of this EmailValidation200Response.
        :param honeypot: The honeypot of this EmailValidation200Response.
        :param leaked: The leaked of this EmailValidation200Response.
        :param message: The message of this EmailValidation200Response.
        :param overall_score: The overall_score of this EmailValidation200Response.
        :param recent_abuse: The recent_abuse of this EmailValidation200Response.
        :param request_id: The request_id of this EmailValidation200Response.
        :param sanitized_email: The sanitized_email of this EmailValidation200Response.
        :param smtp_score: The smtp_score of this EmailValidation200Response.
        :param spam_trap_score: The spam_trap_score of this EmailValidation200Response.
        :param success: The success of this EmailValidation200Response.
        :param suggested_domain: The suggested_domain of this EmailValidation200Response.
        :param suspect: The suspect of this EmailValidation200Response.
        :param timed_out: The timed_out of this EmailValidation200Response.
        :param user_activity: The user_activity of this EmailValidation200Response.
        :param valid: The valid of this EmailValidation200Response.
        """
        self.openapi_types = {
            'associated_names': EmailValidation200ResponseAssociatedNames,
            'associated_phone_numbers': EmailValidation200ResponseAssociatedPhoneNumbers,
            'catch_all': bool,
            'common': bool,
            'deliverability': str,
            'disposable': bool,
            'dns_valid': bool,
            'domain_age': EmailValidation200ResponseDomainAge,
            'domain_velocity': str,
            'first_name': str,
            'first_seen': EmailValidation200ResponseDomainAge,
            'fraud_score': float,
            'frequent_complainer': bool,
            'generic': bool,
            'honeypot': bool,
            'leaked': bool,
            'message': str,
            'overall_score': float,
            'recent_abuse': bool,
            'request_id': str,
            'sanitized_email': str,
            'smtp_score': float,
            'spam_trap_score': str,
            'success': bool,
            'suggested_domain': str,
            'suspect': bool,
            'timed_out': bool,
            'user_activity': str,
            'valid': bool
        }

        self.attribute_map = {
            'associated_names': 'associated_names',
            'associated_phone_numbers': 'associated_phone_numbers',
            'catch_all': 'catch_all',
            'common': 'common',
            'deliverability': 'deliverability',
            'disposable': 'disposable',
            'dns_valid': 'dns_valid',
            'domain_age': 'domain_age',
            'domain_velocity': 'domain_velocity',
            'first_name': 'first_name',
            'first_seen': 'first_seen',
            'fraud_score': 'fraud_score',
            'frequent_complainer': 'frequent_complainer',
            'generic': 'generic',
            'honeypot': 'honeypot',
            'leaked': 'leaked',
            'message': 'message',
            'overall_score': 'overall_score',
            'recent_abuse': 'recent_abuse',
            'request_id': 'request_id',
            'sanitized_email': 'sanitized_email',
            'smtp_score': 'smtp_score',
            'spam_trap_score': 'spam_trap_score',
            'success': 'success',
            'suggested_domain': 'suggested_domain',
            'suspect': 'suspect',
            'timed_out': 'timed_out',
            'user_activity': 'user_activity',
            'valid': 'valid'
        }

        self._associated_names = associated_names
        self._associated_phone_numbers = associated_phone_numbers
        self._catch_all = catch_all
        self._common = common
        self._deliverability = deliverability
        self._disposable = disposable
        self._dns_valid = dns_valid
        self._domain_age = domain_age
        self._domain_velocity = domain_velocity
        self._first_name = first_name
        self._first_seen = first_seen
        self._fraud_score = fraud_score
        self._frequent_complainer = frequent_complainer
        self._generic = generic
        self._honeypot = honeypot
        self._leaked = leaked
        self._message = message
        self._overall_score = overall_score
        self._recent_abuse = recent_abuse
        self._request_id = request_id
        self._sanitized_email = sanitized_email
        self._smtp_score = smtp_score
        self._spam_trap_score = spam_trap_score
        self._success = success
        self._suggested_domain = suggested_domain
        self._suspect = suspect
        self._timed_out = timed_out
        self._user_activity = user_activity
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailValidation200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The emailValidation_200_response of this EmailValidation200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_names(self):
        """Gets the associated_names of this EmailValidation200Response.


        :return: The associated_names of this EmailValidation200Response.
        :rtype: EmailValidation200ResponseAssociatedNames
        """
        return self._associated_names

    @associated_names.setter
    def associated_names(self, associated_names):
        """Sets the associated_names of this EmailValidation200Response.


        :param associated_names: The associated_names of this EmailValidation200Response.
        :type associated_names: EmailValidation200ResponseAssociatedNames
        """

        self._associated_names = associated_names

    @property
    def associated_phone_numbers(self):
        """Gets the associated_phone_numbers of this EmailValidation200Response.


        :return: The associated_phone_numbers of this EmailValidation200Response.
        :rtype: EmailValidation200ResponseAssociatedPhoneNumbers
        """
        return self._associated_phone_numbers

    @associated_phone_numbers.setter
    def associated_phone_numbers(self, associated_phone_numbers):
        """Sets the associated_phone_numbers of this EmailValidation200Response.


        :param associated_phone_numbers: The associated_phone_numbers of this EmailValidation200Response.
        :type associated_phone_numbers: EmailValidation200ResponseAssociatedPhoneNumbers
        """

        self._associated_phone_numbers = associated_phone_numbers

    @property
    def catch_all(self):
        """Gets the catch_all of this EmailValidation200Response.


        :return: The catch_all of this EmailValidation200Response.
        :rtype: bool
        """
        return self._catch_all

    @catch_all.setter
    def catch_all(self, catch_all):
        """Sets the catch_all of this EmailValidation200Response.


        :param catch_all: The catch_all of this EmailValidation200Response.
        :type catch_all: bool
        """

        self._catch_all = catch_all

    @property
    def common(self):
        """Gets the common of this EmailValidation200Response.


        :return: The common of this EmailValidation200Response.
        :rtype: bool
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this EmailValidation200Response.


        :param common: The common of this EmailValidation200Response.
        :type common: bool
        """

        self._common = common

    @property
    def deliverability(self):
        """Gets the deliverability of this EmailValidation200Response.


        :return: The deliverability of this EmailValidation200Response.
        :rtype: str
        """
        return self._deliverability

    @deliverability.setter
    def deliverability(self, deliverability):
        """Sets the deliverability of this EmailValidation200Response.


        :param deliverability: The deliverability of this EmailValidation200Response.
        :type deliverability: str
        """

        self._deliverability = deliverability

    @property
    def disposable(self):
        """Gets the disposable of this EmailValidation200Response.


        :return: The disposable of this EmailValidation200Response.
        :rtype: bool
        """
        return self._disposable

    @disposable.setter
    def disposable(self, disposable):
        """Sets the disposable of this EmailValidation200Response.


        :param disposable: The disposable of this EmailValidation200Response.
        :type disposable: bool
        """

        self._disposable = disposable

    @property
    def dns_valid(self):
        """Gets the dns_valid of this EmailValidation200Response.


        :return: The dns_valid of this EmailValidation200Response.
        :rtype: bool
        """
        return self._dns_valid

    @dns_valid.setter
    def dns_valid(self, dns_valid):
        """Sets the dns_valid of this EmailValidation200Response.


        :param dns_valid: The dns_valid of this EmailValidation200Response.
        :type dns_valid: bool
        """

        self._dns_valid = dns_valid

    @property
    def domain_age(self):
        """Gets the domain_age of this EmailValidation200Response.


        :return: The domain_age of this EmailValidation200Response.
        :rtype: EmailValidation200ResponseDomainAge
        """
        return self._domain_age

    @domain_age.setter
    def domain_age(self, domain_age):
        """Sets the domain_age of this EmailValidation200Response.


        :param domain_age: The domain_age of this EmailValidation200Response.
        :type domain_age: EmailValidation200ResponseDomainAge
        """

        self._domain_age = domain_age

    @property
    def domain_velocity(self):
        """Gets the domain_velocity of this EmailValidation200Response.


        :return: The domain_velocity of this EmailValidation200Response.
        :rtype: str
        """
        return self._domain_velocity

    @domain_velocity.setter
    def domain_velocity(self, domain_velocity):
        """Sets the domain_velocity of this EmailValidation200Response.


        :param domain_velocity: The domain_velocity of this EmailValidation200Response.
        :type domain_velocity: str
        """

        self._domain_velocity = domain_velocity

    @property
    def first_name(self):
        """Gets the first_name of this EmailValidation200Response.


        :return: The first_name of this EmailValidation200Response.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmailValidation200Response.


        :param first_name: The first_name of this EmailValidation200Response.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def first_seen(self):
        """Gets the first_seen of this EmailValidation200Response.


        :return: The first_seen of this EmailValidation200Response.
        :rtype: EmailValidation200ResponseDomainAge
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this EmailValidation200Response.


        :param first_seen: The first_seen of this EmailValidation200Response.
        :type first_seen: EmailValidation200ResponseDomainAge
        """

        self._first_seen = first_seen

    @property
    def fraud_score(self):
        """Gets the fraud_score of this EmailValidation200Response.


        :return: The fraud_score of this EmailValidation200Response.
        :rtype: float
        """
        return self._fraud_score

    @fraud_score.setter
    def fraud_score(self, fraud_score):
        """Sets the fraud_score of this EmailValidation200Response.


        :param fraud_score: The fraud_score of this EmailValidation200Response.
        :type fraud_score: float
        """

        self._fraud_score = fraud_score

    @property
    def frequent_complainer(self):
        """Gets the frequent_complainer of this EmailValidation200Response.


        :return: The frequent_complainer of this EmailValidation200Response.
        :rtype: bool
        """
        return self._frequent_complainer

    @frequent_complainer.setter
    def frequent_complainer(self, frequent_complainer):
        """Sets the frequent_complainer of this EmailValidation200Response.


        :param frequent_complainer: The frequent_complainer of this EmailValidation200Response.
        :type frequent_complainer: bool
        """

        self._frequent_complainer = frequent_complainer

    @property
    def generic(self):
        """Gets the generic of this EmailValidation200Response.


        :return: The generic of this EmailValidation200Response.
        :rtype: bool
        """
        return self._generic

    @generic.setter
    def generic(self, generic):
        """Sets the generic of this EmailValidation200Response.


        :param generic: The generic of this EmailValidation200Response.
        :type generic: bool
        """

        self._generic = generic

    @property
    def honeypot(self):
        """Gets the honeypot of this EmailValidation200Response.


        :return: The honeypot of this EmailValidation200Response.
        :rtype: bool
        """
        return self._honeypot

    @honeypot.setter
    def honeypot(self, honeypot):
        """Sets the honeypot of this EmailValidation200Response.


        :param honeypot: The honeypot of this EmailValidation200Response.
        :type honeypot: bool
        """

        self._honeypot = honeypot

    @property
    def leaked(self):
        """Gets the leaked of this EmailValidation200Response.


        :return: The leaked of this EmailValidation200Response.
        :rtype: bool
        """
        return self._leaked

    @leaked.setter
    def leaked(self, leaked):
        """Sets the leaked of this EmailValidation200Response.


        :param leaked: The leaked of this EmailValidation200Response.
        :type leaked: bool
        """

        self._leaked = leaked

    @property
    def message(self):
        """Gets the message of this EmailValidation200Response.


        :return: The message of this EmailValidation200Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EmailValidation200Response.


        :param message: The message of this EmailValidation200Response.
        :type message: str
        """

        self._message = message

    @property
    def overall_score(self):
        """Gets the overall_score of this EmailValidation200Response.


        :return: The overall_score of this EmailValidation200Response.
        :rtype: float
        """
        return self._overall_score

    @overall_score.setter
    def overall_score(self, overall_score):
        """Sets the overall_score of this EmailValidation200Response.


        :param overall_score: The overall_score of this EmailValidation200Response.
        :type overall_score: float
        """

        self._overall_score = overall_score

    @property
    def recent_abuse(self):
        """Gets the recent_abuse of this EmailValidation200Response.


        :return: The recent_abuse of this EmailValidation200Response.
        :rtype: bool
        """
        return self._recent_abuse

    @recent_abuse.setter
    def recent_abuse(self, recent_abuse):
        """Sets the recent_abuse of this EmailValidation200Response.


        :param recent_abuse: The recent_abuse of this EmailValidation200Response.
        :type recent_abuse: bool
        """

        self._recent_abuse = recent_abuse

    @property
    def request_id(self):
        """Gets the request_id of this EmailValidation200Response.


        :return: The request_id of this EmailValidation200Response.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this EmailValidation200Response.


        :param request_id: The request_id of this EmailValidation200Response.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def sanitized_email(self):
        """Gets the sanitized_email of this EmailValidation200Response.


        :return: The sanitized_email of this EmailValidation200Response.
        :rtype: str
        """
        return self._sanitized_email

    @sanitized_email.setter
    def sanitized_email(self, sanitized_email):
        """Sets the sanitized_email of this EmailValidation200Response.


        :param sanitized_email: The sanitized_email of this EmailValidation200Response.
        :type sanitized_email: str
        """

        self._sanitized_email = sanitized_email

    @property
    def smtp_score(self):
        """Gets the smtp_score of this EmailValidation200Response.


        :return: The smtp_score of this EmailValidation200Response.
        :rtype: float
        """
        return self._smtp_score

    @smtp_score.setter
    def smtp_score(self, smtp_score):
        """Sets the smtp_score of this EmailValidation200Response.


        :param smtp_score: The smtp_score of this EmailValidation200Response.
        :type smtp_score: float
        """

        self._smtp_score = smtp_score

    @property
    def spam_trap_score(self):
        """Gets the spam_trap_score of this EmailValidation200Response.


        :return: The spam_trap_score of this EmailValidation200Response.
        :rtype: str
        """
        return self._spam_trap_score

    @spam_trap_score.setter
    def spam_trap_score(self, spam_trap_score):
        """Sets the spam_trap_score of this EmailValidation200Response.


        :param spam_trap_score: The spam_trap_score of this EmailValidation200Response.
        :type spam_trap_score: str
        """

        self._spam_trap_score = spam_trap_score

    @property
    def success(self):
        """Gets the success of this EmailValidation200Response.


        :return: The success of this EmailValidation200Response.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EmailValidation200Response.


        :param success: The success of this EmailValidation200Response.
        :type success: bool
        """

        self._success = success

    @property
    def suggested_domain(self):
        """Gets the suggested_domain of this EmailValidation200Response.


        :return: The suggested_domain of this EmailValidation200Response.
        :rtype: str
        """
        return self._suggested_domain

    @suggested_domain.setter
    def suggested_domain(self, suggested_domain):
        """Sets the suggested_domain of this EmailValidation200Response.


        :param suggested_domain: The suggested_domain of this EmailValidation200Response.
        :type suggested_domain: str
        """

        self._suggested_domain = suggested_domain

    @property
    def suspect(self):
        """Gets the suspect of this EmailValidation200Response.


        :return: The suspect of this EmailValidation200Response.
        :rtype: bool
        """
        return self._suspect

    @suspect.setter
    def suspect(self, suspect):
        """Sets the suspect of this EmailValidation200Response.


        :param suspect: The suspect of this EmailValidation200Response.
        :type suspect: bool
        """

        self._suspect = suspect

    @property
    def timed_out(self):
        """Gets the timed_out of this EmailValidation200Response.


        :return: The timed_out of this EmailValidation200Response.
        :rtype: bool
        """
        return self._timed_out

    @timed_out.setter
    def timed_out(self, timed_out):
        """Sets the timed_out of this EmailValidation200Response.


        :param timed_out: The timed_out of this EmailValidation200Response.
        :type timed_out: bool
        """

        self._timed_out = timed_out

    @property
    def user_activity(self):
        """Gets the user_activity of this EmailValidation200Response.


        :return: The user_activity of this EmailValidation200Response.
        :rtype: str
        """
        return self._user_activity

    @user_activity.setter
    def user_activity(self, user_activity):
        """Sets the user_activity of this EmailValidation200Response.


        :param user_activity: The user_activity of this EmailValidation200Response.
        :type user_activity: str
        """

        self._user_activity = user_activity

    @property
    def valid(self):
        """Gets the valid of this EmailValidation200Response.


        :return: The valid of this EmailValidation200Response.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this EmailValidation200Response.


        :param valid: The valid of this EmailValidation200Response.
        :type valid: bool
        """

        self._valid = valid
