/**
 * IPQualityScore API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailValidation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailValidation_200_response::OAIEmailValidation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailValidation_200_response::OAIEmailValidation_200_response() {
    this->initializeModel();
}

OAIEmailValidation_200_response::~OAIEmailValidation_200_response() {}

void OAIEmailValidation_200_response::initializeModel() {

    m_associated_names_isSet = false;
    m_associated_names_isValid = false;

    m_associated_phone_numbers_isSet = false;
    m_associated_phone_numbers_isValid = false;

    m_catch_all_isSet = false;
    m_catch_all_isValid = false;

    m_common_isSet = false;
    m_common_isValid = false;

    m_deliverability_isSet = false;
    m_deliverability_isValid = false;

    m_disposable_isSet = false;
    m_disposable_isValid = false;

    m_dns_valid_isSet = false;
    m_dns_valid_isValid = false;

    m_domain_age_isSet = false;
    m_domain_age_isValid = false;

    m_domain_velocity_isSet = false;
    m_domain_velocity_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_first_seen_isSet = false;
    m_first_seen_isValid = false;

    m_fraud_score_isSet = false;
    m_fraud_score_isValid = false;

    m_frequent_complainer_isSet = false;
    m_frequent_complainer_isValid = false;

    m_generic_isSet = false;
    m_generic_isValid = false;

    m_honeypot_isSet = false;
    m_honeypot_isValid = false;

    m_leaked_isSet = false;
    m_leaked_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_overall_score_isSet = false;
    m_overall_score_isValid = false;

    m_recent_abuse_isSet = false;
    m_recent_abuse_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_sanitized_email_isSet = false;
    m_sanitized_email_isValid = false;

    m_smtp_score_isSet = false;
    m_smtp_score_isValid = false;

    m_spam_trap_score_isSet = false;
    m_spam_trap_score_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_suggested_domain_isSet = false;
    m_suggested_domain_isValid = false;

    m_suspect_isSet = false;
    m_suspect_isValid = false;

    m_timed_out_isSet = false;
    m_timed_out_isValid = false;

    m_user_activity_isSet = false;
    m_user_activity_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIEmailValidation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailValidation_200_response::fromJsonObject(QJsonObject json) {

    m_associated_names_isValid = ::OpenAPI::fromJsonValue(m_associated_names, json[QString("associated_names")]);
    m_associated_names_isSet = !json[QString("associated_names")].isNull() && m_associated_names_isValid;

    m_associated_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_associated_phone_numbers, json[QString("associated_phone_numbers")]);
    m_associated_phone_numbers_isSet = !json[QString("associated_phone_numbers")].isNull() && m_associated_phone_numbers_isValid;

    m_catch_all_isValid = ::OpenAPI::fromJsonValue(m_catch_all, json[QString("catch_all")]);
    m_catch_all_isSet = !json[QString("catch_all")].isNull() && m_catch_all_isValid;

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_deliverability_isValid = ::OpenAPI::fromJsonValue(m_deliverability, json[QString("deliverability")]);
    m_deliverability_isSet = !json[QString("deliverability")].isNull() && m_deliverability_isValid;

    m_disposable_isValid = ::OpenAPI::fromJsonValue(m_disposable, json[QString("disposable")]);
    m_disposable_isSet = !json[QString("disposable")].isNull() && m_disposable_isValid;

    m_dns_valid_isValid = ::OpenAPI::fromJsonValue(m_dns_valid, json[QString("dns_valid")]);
    m_dns_valid_isSet = !json[QString("dns_valid")].isNull() && m_dns_valid_isValid;

    m_domain_age_isValid = ::OpenAPI::fromJsonValue(m_domain_age, json[QString("domain_age")]);
    m_domain_age_isSet = !json[QString("domain_age")].isNull() && m_domain_age_isValid;

    m_domain_velocity_isValid = ::OpenAPI::fromJsonValue(m_domain_velocity, json[QString("domain_velocity")]);
    m_domain_velocity_isSet = !json[QString("domain_velocity")].isNull() && m_domain_velocity_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_first_seen_isValid = ::OpenAPI::fromJsonValue(m_first_seen, json[QString("first_seen")]);
    m_first_seen_isSet = !json[QString("first_seen")].isNull() && m_first_seen_isValid;

    m_fraud_score_isValid = ::OpenAPI::fromJsonValue(m_fraud_score, json[QString("fraud_score")]);
    m_fraud_score_isSet = !json[QString("fraud_score")].isNull() && m_fraud_score_isValid;

    m_frequent_complainer_isValid = ::OpenAPI::fromJsonValue(m_frequent_complainer, json[QString("frequent_complainer")]);
    m_frequent_complainer_isSet = !json[QString("frequent_complainer")].isNull() && m_frequent_complainer_isValid;

    m_generic_isValid = ::OpenAPI::fromJsonValue(m_generic, json[QString("generic")]);
    m_generic_isSet = !json[QString("generic")].isNull() && m_generic_isValid;

    m_honeypot_isValid = ::OpenAPI::fromJsonValue(m_honeypot, json[QString("honeypot")]);
    m_honeypot_isSet = !json[QString("honeypot")].isNull() && m_honeypot_isValid;

    m_leaked_isValid = ::OpenAPI::fromJsonValue(m_leaked, json[QString("leaked")]);
    m_leaked_isSet = !json[QString("leaked")].isNull() && m_leaked_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_overall_score_isValid = ::OpenAPI::fromJsonValue(m_overall_score, json[QString("overall_score")]);
    m_overall_score_isSet = !json[QString("overall_score")].isNull() && m_overall_score_isValid;

    m_recent_abuse_isValid = ::OpenAPI::fromJsonValue(m_recent_abuse, json[QString("recent_abuse")]);
    m_recent_abuse_isSet = !json[QString("recent_abuse")].isNull() && m_recent_abuse_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_sanitized_email_isValid = ::OpenAPI::fromJsonValue(m_sanitized_email, json[QString("sanitized_email")]);
    m_sanitized_email_isSet = !json[QString("sanitized_email")].isNull() && m_sanitized_email_isValid;

    m_smtp_score_isValid = ::OpenAPI::fromJsonValue(m_smtp_score, json[QString("smtp_score")]);
    m_smtp_score_isSet = !json[QString("smtp_score")].isNull() && m_smtp_score_isValid;

    m_spam_trap_score_isValid = ::OpenAPI::fromJsonValue(m_spam_trap_score, json[QString("spam_trap_score")]);
    m_spam_trap_score_isSet = !json[QString("spam_trap_score")].isNull() && m_spam_trap_score_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_suggested_domain_isValid = ::OpenAPI::fromJsonValue(m_suggested_domain, json[QString("suggested_domain")]);
    m_suggested_domain_isSet = !json[QString("suggested_domain")].isNull() && m_suggested_domain_isValid;

    m_suspect_isValid = ::OpenAPI::fromJsonValue(m_suspect, json[QString("suspect")]);
    m_suspect_isSet = !json[QString("suspect")].isNull() && m_suspect_isValid;

    m_timed_out_isValid = ::OpenAPI::fromJsonValue(m_timed_out, json[QString("timed_out")]);
    m_timed_out_isSet = !json[QString("timed_out")].isNull() && m_timed_out_isValid;

    m_user_activity_isValid = ::OpenAPI::fromJsonValue(m_user_activity, json[QString("user_activity")]);
    m_user_activity_isSet = !json[QString("user_activity")].isNull() && m_user_activity_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIEmailValidation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailValidation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_names.isSet()) {
        obj.insert(QString("associated_names"), ::OpenAPI::toJsonValue(m_associated_names));
    }
    if (m_associated_phone_numbers.isSet()) {
        obj.insert(QString("associated_phone_numbers"), ::OpenAPI::toJsonValue(m_associated_phone_numbers));
    }
    if (m_catch_all_isSet) {
        obj.insert(QString("catch_all"), ::OpenAPI::toJsonValue(m_catch_all));
    }
    if (m_common_isSet) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_deliverability_isSet) {
        obj.insert(QString("deliverability"), ::OpenAPI::toJsonValue(m_deliverability));
    }
    if (m_disposable_isSet) {
        obj.insert(QString("disposable"), ::OpenAPI::toJsonValue(m_disposable));
    }
    if (m_dns_valid_isSet) {
        obj.insert(QString("dns_valid"), ::OpenAPI::toJsonValue(m_dns_valid));
    }
    if (m_domain_age.isSet()) {
        obj.insert(QString("domain_age"), ::OpenAPI::toJsonValue(m_domain_age));
    }
    if (m_domain_velocity_isSet) {
        obj.insert(QString("domain_velocity"), ::OpenAPI::toJsonValue(m_domain_velocity));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_first_seen.isSet()) {
        obj.insert(QString("first_seen"), ::OpenAPI::toJsonValue(m_first_seen));
    }
    if (m_fraud_score_isSet) {
        obj.insert(QString("fraud_score"), ::OpenAPI::toJsonValue(m_fraud_score));
    }
    if (m_frequent_complainer_isSet) {
        obj.insert(QString("frequent_complainer"), ::OpenAPI::toJsonValue(m_frequent_complainer));
    }
    if (m_generic_isSet) {
        obj.insert(QString("generic"), ::OpenAPI::toJsonValue(m_generic));
    }
    if (m_honeypot_isSet) {
        obj.insert(QString("honeypot"), ::OpenAPI::toJsonValue(m_honeypot));
    }
    if (m_leaked_isSet) {
        obj.insert(QString("leaked"), ::OpenAPI::toJsonValue(m_leaked));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_overall_score_isSet) {
        obj.insert(QString("overall_score"), ::OpenAPI::toJsonValue(m_overall_score));
    }
    if (m_recent_abuse_isSet) {
        obj.insert(QString("recent_abuse"), ::OpenAPI::toJsonValue(m_recent_abuse));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_sanitized_email_isSet) {
        obj.insert(QString("sanitized_email"), ::OpenAPI::toJsonValue(m_sanitized_email));
    }
    if (m_smtp_score_isSet) {
        obj.insert(QString("smtp_score"), ::OpenAPI::toJsonValue(m_smtp_score));
    }
    if (m_spam_trap_score_isSet) {
        obj.insert(QString("spam_trap_score"), ::OpenAPI::toJsonValue(m_spam_trap_score));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_suggested_domain_isSet) {
        obj.insert(QString("suggested_domain"), ::OpenAPI::toJsonValue(m_suggested_domain));
    }
    if (m_suspect_isSet) {
        obj.insert(QString("suspect"), ::OpenAPI::toJsonValue(m_suspect));
    }
    if (m_timed_out_isSet) {
        obj.insert(QString("timed_out"), ::OpenAPI::toJsonValue(m_timed_out));
    }
    if (m_user_activity_isSet) {
        obj.insert(QString("user_activity"), ::OpenAPI::toJsonValue(m_user_activity));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

OAIEmailValidation_200_response_associated_names OAIEmailValidation_200_response::getAssociatedNames() const {
    return m_associated_names;
}
void OAIEmailValidation_200_response::setAssociatedNames(const OAIEmailValidation_200_response_associated_names &associated_names) {
    m_associated_names = associated_names;
    m_associated_names_isSet = true;
}

bool OAIEmailValidation_200_response::is_associated_names_Set() const{
    return m_associated_names_isSet;
}

bool OAIEmailValidation_200_response::is_associated_names_Valid() const{
    return m_associated_names_isValid;
}

OAIEmailValidation_200_response_associated_phone_numbers OAIEmailValidation_200_response::getAssociatedPhoneNumbers() const {
    return m_associated_phone_numbers;
}
void OAIEmailValidation_200_response::setAssociatedPhoneNumbers(const OAIEmailValidation_200_response_associated_phone_numbers &associated_phone_numbers) {
    m_associated_phone_numbers = associated_phone_numbers;
    m_associated_phone_numbers_isSet = true;
}

bool OAIEmailValidation_200_response::is_associated_phone_numbers_Set() const{
    return m_associated_phone_numbers_isSet;
}

bool OAIEmailValidation_200_response::is_associated_phone_numbers_Valid() const{
    return m_associated_phone_numbers_isValid;
}

bool OAIEmailValidation_200_response::isCatchAll() const {
    return m_catch_all;
}
void OAIEmailValidation_200_response::setCatchAll(const bool &catch_all) {
    m_catch_all = catch_all;
    m_catch_all_isSet = true;
}

bool OAIEmailValidation_200_response::is_catch_all_Set() const{
    return m_catch_all_isSet;
}

bool OAIEmailValidation_200_response::is_catch_all_Valid() const{
    return m_catch_all_isValid;
}

bool OAIEmailValidation_200_response::isCommon() const {
    return m_common;
}
void OAIEmailValidation_200_response::setCommon(const bool &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIEmailValidation_200_response::is_common_Set() const{
    return m_common_isSet;
}

bool OAIEmailValidation_200_response::is_common_Valid() const{
    return m_common_isValid;
}

QString OAIEmailValidation_200_response::getDeliverability() const {
    return m_deliverability;
}
void OAIEmailValidation_200_response::setDeliverability(const QString &deliverability) {
    m_deliverability = deliverability;
    m_deliverability_isSet = true;
}

bool OAIEmailValidation_200_response::is_deliverability_Set() const{
    return m_deliverability_isSet;
}

bool OAIEmailValidation_200_response::is_deliverability_Valid() const{
    return m_deliverability_isValid;
}

bool OAIEmailValidation_200_response::isDisposable() const {
    return m_disposable;
}
void OAIEmailValidation_200_response::setDisposable(const bool &disposable) {
    m_disposable = disposable;
    m_disposable_isSet = true;
}

bool OAIEmailValidation_200_response::is_disposable_Set() const{
    return m_disposable_isSet;
}

bool OAIEmailValidation_200_response::is_disposable_Valid() const{
    return m_disposable_isValid;
}

bool OAIEmailValidation_200_response::isDnsValid() const {
    return m_dns_valid;
}
void OAIEmailValidation_200_response::setDnsValid(const bool &dns_valid) {
    m_dns_valid = dns_valid;
    m_dns_valid_isSet = true;
}

bool OAIEmailValidation_200_response::is_dns_valid_Set() const{
    return m_dns_valid_isSet;
}

bool OAIEmailValidation_200_response::is_dns_valid_Valid() const{
    return m_dns_valid_isValid;
}

OAIEmailValidation_200_response_domain_age OAIEmailValidation_200_response::getDomainAge() const {
    return m_domain_age;
}
void OAIEmailValidation_200_response::setDomainAge(const OAIEmailValidation_200_response_domain_age &domain_age) {
    m_domain_age = domain_age;
    m_domain_age_isSet = true;
}

bool OAIEmailValidation_200_response::is_domain_age_Set() const{
    return m_domain_age_isSet;
}

bool OAIEmailValidation_200_response::is_domain_age_Valid() const{
    return m_domain_age_isValid;
}

QString OAIEmailValidation_200_response::getDomainVelocity() const {
    return m_domain_velocity;
}
void OAIEmailValidation_200_response::setDomainVelocity(const QString &domain_velocity) {
    m_domain_velocity = domain_velocity;
    m_domain_velocity_isSet = true;
}

bool OAIEmailValidation_200_response::is_domain_velocity_Set() const{
    return m_domain_velocity_isSet;
}

bool OAIEmailValidation_200_response::is_domain_velocity_Valid() const{
    return m_domain_velocity_isValid;
}

QString OAIEmailValidation_200_response::getFirstName() const {
    return m_first_name;
}
void OAIEmailValidation_200_response::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIEmailValidation_200_response::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIEmailValidation_200_response::is_first_name_Valid() const{
    return m_first_name_isValid;
}

OAIEmailValidation_200_response_domain_age OAIEmailValidation_200_response::getFirstSeen() const {
    return m_first_seen;
}
void OAIEmailValidation_200_response::setFirstSeen(const OAIEmailValidation_200_response_domain_age &first_seen) {
    m_first_seen = first_seen;
    m_first_seen_isSet = true;
}

bool OAIEmailValidation_200_response::is_first_seen_Set() const{
    return m_first_seen_isSet;
}

bool OAIEmailValidation_200_response::is_first_seen_Valid() const{
    return m_first_seen_isValid;
}

double OAIEmailValidation_200_response::getFraudScore() const {
    return m_fraud_score;
}
void OAIEmailValidation_200_response::setFraudScore(const double &fraud_score) {
    m_fraud_score = fraud_score;
    m_fraud_score_isSet = true;
}

bool OAIEmailValidation_200_response::is_fraud_score_Set() const{
    return m_fraud_score_isSet;
}

bool OAIEmailValidation_200_response::is_fraud_score_Valid() const{
    return m_fraud_score_isValid;
}

bool OAIEmailValidation_200_response::isFrequentComplainer() const {
    return m_frequent_complainer;
}
void OAIEmailValidation_200_response::setFrequentComplainer(const bool &frequent_complainer) {
    m_frequent_complainer = frequent_complainer;
    m_frequent_complainer_isSet = true;
}

bool OAIEmailValidation_200_response::is_frequent_complainer_Set() const{
    return m_frequent_complainer_isSet;
}

bool OAIEmailValidation_200_response::is_frequent_complainer_Valid() const{
    return m_frequent_complainer_isValid;
}

bool OAIEmailValidation_200_response::isGeneric() const {
    return m_generic;
}
void OAIEmailValidation_200_response::setGeneric(const bool &generic) {
    m_generic = generic;
    m_generic_isSet = true;
}

bool OAIEmailValidation_200_response::is_generic_Set() const{
    return m_generic_isSet;
}

bool OAIEmailValidation_200_response::is_generic_Valid() const{
    return m_generic_isValid;
}

bool OAIEmailValidation_200_response::isHoneypot() const {
    return m_honeypot;
}
void OAIEmailValidation_200_response::setHoneypot(const bool &honeypot) {
    m_honeypot = honeypot;
    m_honeypot_isSet = true;
}

bool OAIEmailValidation_200_response::is_honeypot_Set() const{
    return m_honeypot_isSet;
}

bool OAIEmailValidation_200_response::is_honeypot_Valid() const{
    return m_honeypot_isValid;
}

bool OAIEmailValidation_200_response::isLeaked() const {
    return m_leaked;
}
void OAIEmailValidation_200_response::setLeaked(const bool &leaked) {
    m_leaked = leaked;
    m_leaked_isSet = true;
}

bool OAIEmailValidation_200_response::is_leaked_Set() const{
    return m_leaked_isSet;
}

bool OAIEmailValidation_200_response::is_leaked_Valid() const{
    return m_leaked_isValid;
}

QString OAIEmailValidation_200_response::getMessage() const {
    return m_message;
}
void OAIEmailValidation_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEmailValidation_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEmailValidation_200_response::is_message_Valid() const{
    return m_message_isValid;
}

double OAIEmailValidation_200_response::getOverallScore() const {
    return m_overall_score;
}
void OAIEmailValidation_200_response::setOverallScore(const double &overall_score) {
    m_overall_score = overall_score;
    m_overall_score_isSet = true;
}

bool OAIEmailValidation_200_response::is_overall_score_Set() const{
    return m_overall_score_isSet;
}

bool OAIEmailValidation_200_response::is_overall_score_Valid() const{
    return m_overall_score_isValid;
}

bool OAIEmailValidation_200_response::isRecentAbuse() const {
    return m_recent_abuse;
}
void OAIEmailValidation_200_response::setRecentAbuse(const bool &recent_abuse) {
    m_recent_abuse = recent_abuse;
    m_recent_abuse_isSet = true;
}

bool OAIEmailValidation_200_response::is_recent_abuse_Set() const{
    return m_recent_abuse_isSet;
}

bool OAIEmailValidation_200_response::is_recent_abuse_Valid() const{
    return m_recent_abuse_isValid;
}

QString OAIEmailValidation_200_response::getRequestId() const {
    return m_request_id;
}
void OAIEmailValidation_200_response::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIEmailValidation_200_response::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIEmailValidation_200_response::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIEmailValidation_200_response::getSanitizedEmail() const {
    return m_sanitized_email;
}
void OAIEmailValidation_200_response::setSanitizedEmail(const QString &sanitized_email) {
    m_sanitized_email = sanitized_email;
    m_sanitized_email_isSet = true;
}

bool OAIEmailValidation_200_response::is_sanitized_email_Set() const{
    return m_sanitized_email_isSet;
}

bool OAIEmailValidation_200_response::is_sanitized_email_Valid() const{
    return m_sanitized_email_isValid;
}

double OAIEmailValidation_200_response::getSmtpScore() const {
    return m_smtp_score;
}
void OAIEmailValidation_200_response::setSmtpScore(const double &smtp_score) {
    m_smtp_score = smtp_score;
    m_smtp_score_isSet = true;
}

bool OAIEmailValidation_200_response::is_smtp_score_Set() const{
    return m_smtp_score_isSet;
}

bool OAIEmailValidation_200_response::is_smtp_score_Valid() const{
    return m_smtp_score_isValid;
}

QString OAIEmailValidation_200_response::getSpamTrapScore() const {
    return m_spam_trap_score;
}
void OAIEmailValidation_200_response::setSpamTrapScore(const QString &spam_trap_score) {
    m_spam_trap_score = spam_trap_score;
    m_spam_trap_score_isSet = true;
}

bool OAIEmailValidation_200_response::is_spam_trap_score_Set() const{
    return m_spam_trap_score_isSet;
}

bool OAIEmailValidation_200_response::is_spam_trap_score_Valid() const{
    return m_spam_trap_score_isValid;
}

bool OAIEmailValidation_200_response::isSuccess() const {
    return m_success;
}
void OAIEmailValidation_200_response::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIEmailValidation_200_response::is_success_Set() const{
    return m_success_isSet;
}

bool OAIEmailValidation_200_response::is_success_Valid() const{
    return m_success_isValid;
}

QString OAIEmailValidation_200_response::getSuggestedDomain() const {
    return m_suggested_domain;
}
void OAIEmailValidation_200_response::setSuggestedDomain(const QString &suggested_domain) {
    m_suggested_domain = suggested_domain;
    m_suggested_domain_isSet = true;
}

bool OAIEmailValidation_200_response::is_suggested_domain_Set() const{
    return m_suggested_domain_isSet;
}

bool OAIEmailValidation_200_response::is_suggested_domain_Valid() const{
    return m_suggested_domain_isValid;
}

bool OAIEmailValidation_200_response::isSuspect() const {
    return m_suspect;
}
void OAIEmailValidation_200_response::setSuspect(const bool &suspect) {
    m_suspect = suspect;
    m_suspect_isSet = true;
}

bool OAIEmailValidation_200_response::is_suspect_Set() const{
    return m_suspect_isSet;
}

bool OAIEmailValidation_200_response::is_suspect_Valid() const{
    return m_suspect_isValid;
}

bool OAIEmailValidation_200_response::isTimedOut() const {
    return m_timed_out;
}
void OAIEmailValidation_200_response::setTimedOut(const bool &timed_out) {
    m_timed_out = timed_out;
    m_timed_out_isSet = true;
}

bool OAIEmailValidation_200_response::is_timed_out_Set() const{
    return m_timed_out_isSet;
}

bool OAIEmailValidation_200_response::is_timed_out_Valid() const{
    return m_timed_out_isValid;
}

QString OAIEmailValidation_200_response::getUserActivity() const {
    return m_user_activity;
}
void OAIEmailValidation_200_response::setUserActivity(const QString &user_activity) {
    m_user_activity = user_activity;
    m_user_activity_isSet = true;
}

bool OAIEmailValidation_200_response::is_user_activity_Set() const{
    return m_user_activity_isSet;
}

bool OAIEmailValidation_200_response::is_user_activity_Valid() const{
    return m_user_activity_isValid;
}

bool OAIEmailValidation_200_response::isRValid() const {
    return m_r_valid;
}
void OAIEmailValidation_200_response::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIEmailValidation_200_response::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIEmailValidation_200_response::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIEmailValidation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_phone_numbers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catch_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliverability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_age.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_velocity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequent_complainer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_honeypot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_abuse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanitized_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spam_trap_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailValidation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
