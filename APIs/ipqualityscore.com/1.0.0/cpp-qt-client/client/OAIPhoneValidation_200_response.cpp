/**
 * IPQualityScore API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoneValidation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhoneValidation_200_response::OAIPhoneValidation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhoneValidation_200_response::OAIPhoneValidation_200_response() {
    this->initializeModel();
}

OAIPhoneValidation_200_response::~OAIPhoneValidation_200_response() {}

void OAIPhoneValidation_200_response::initializeModel() {

    m_voip_isSet = false;
    m_voip_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_active_status_isSet = false;
    m_active_status_isValid = false;

    m_associated_email_addresses_isSet = false;
    m_associated_email_addresses_isValid = false;

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_dialing_code_isSet = false;
    m_dialing_code_isValid = false;

    m_do_not_call_isSet = false;
    m_do_not_call_isValid = false;

    m_formatted_isSet = false;
    m_formatted_isValid = false;

    m_fraud_score_isSet = false;
    m_fraud_score_isValid = false;

    m_leaked_isSet = false;
    m_leaked_isValid = false;

    m_line_type_isSet = false;
    m_line_type_isValid = false;

    m_local_format_isSet = false;
    m_local_format_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prepaid_isSet = false;
    m_prepaid_isValid = false;

    m_recent_abuse_isSet = false;
    m_recent_abuse_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_risky_isSet = false;
    m_risky_isValid = false;

    m_sms_domain_isSet = false;
    m_sms_domain_isValid = false;

    m_sms_email_isSet = false;
    m_sms_email_isValid = false;

    m_spammer_isSet = false;
    m_spammer_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_user_activity_isSet = false;
    m_user_activity_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIPhoneValidation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoneValidation_200_response::fromJsonObject(QJsonObject json) {

    m_voip_isValid = ::OpenAPI::fromJsonValue(m_voip, json[QString("VOIP")]);
    m_voip_isSet = !json[QString("VOIP")].isNull() && m_voip_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_active_status_isValid = ::OpenAPI::fromJsonValue(m_active_status, json[QString("active_status")]);
    m_active_status_isSet = !json[QString("active_status")].isNull() && m_active_status_isValid;

    m_associated_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_associated_email_addresses, json[QString("associated_email_addresses")]);
    m_associated_email_addresses_isSet = !json[QString("associated_email_addresses")].isNull() && m_associated_email_addresses_isValid;

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("carrier")]);
    m_carrier_isSet = !json[QString("carrier")].isNull() && m_carrier_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_dialing_code_isValid = ::OpenAPI::fromJsonValue(m_dialing_code, json[QString("dialing_code")]);
    m_dialing_code_isSet = !json[QString("dialing_code")].isNull() && m_dialing_code_isValid;

    m_do_not_call_isValid = ::OpenAPI::fromJsonValue(m_do_not_call, json[QString("do_not_call")]);
    m_do_not_call_isSet = !json[QString("do_not_call")].isNull() && m_do_not_call_isValid;

    m_formatted_isValid = ::OpenAPI::fromJsonValue(m_formatted, json[QString("formatted")]);
    m_formatted_isSet = !json[QString("formatted")].isNull() && m_formatted_isValid;

    m_fraud_score_isValid = ::OpenAPI::fromJsonValue(m_fraud_score, json[QString("fraud_score")]);
    m_fraud_score_isSet = !json[QString("fraud_score")].isNull() && m_fraud_score_isValid;

    m_leaked_isValid = ::OpenAPI::fromJsonValue(m_leaked, json[QString("leaked")]);
    m_leaked_isSet = !json[QString("leaked")].isNull() && m_leaked_isValid;

    m_line_type_isValid = ::OpenAPI::fromJsonValue(m_line_type, json[QString("line_type")]);
    m_line_type_isSet = !json[QString("line_type")].isNull() && m_line_type_isValid;

    m_local_format_isValid = ::OpenAPI::fromJsonValue(m_local_format, json[QString("local_format")]);
    m_local_format_isSet = !json[QString("local_format")].isNull() && m_local_format_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("mnc")]);
    m_mnc_isSet = !json[QString("mnc")].isNull() && m_mnc_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prepaid_isValid = ::OpenAPI::fromJsonValue(m_prepaid, json[QString("prepaid")]);
    m_prepaid_isSet = !json[QString("prepaid")].isNull() && m_prepaid_isValid;

    m_recent_abuse_isValid = ::OpenAPI::fromJsonValue(m_recent_abuse, json[QString("recent_abuse")]);
    m_recent_abuse_isSet = !json[QString("recent_abuse")].isNull() && m_recent_abuse_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_risky_isValid = ::OpenAPI::fromJsonValue(m_risky, json[QString("risky")]);
    m_risky_isSet = !json[QString("risky")].isNull() && m_risky_isValid;

    m_sms_domain_isValid = ::OpenAPI::fromJsonValue(m_sms_domain, json[QString("sms_domain")]);
    m_sms_domain_isSet = !json[QString("sms_domain")].isNull() && m_sms_domain_isValid;

    m_sms_email_isValid = ::OpenAPI::fromJsonValue(m_sms_email, json[QString("sms_email")]);
    m_sms_email_isSet = !json[QString("sms_email")].isNull() && m_sms_email_isValid;

    m_spammer_isValid = ::OpenAPI::fromJsonValue(m_spammer, json[QString("spammer")]);
    m_spammer_isSet = !json[QString("spammer")].isNull() && m_spammer_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_user_activity_isValid = ::OpenAPI::fromJsonValue(m_user_activity, json[QString("user_activity")]);
    m_user_activity_isSet = !json[QString("user_activity")].isNull() && m_user_activity_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIPhoneValidation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoneValidation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_voip_isSet) {
        obj.insert(QString("VOIP"), ::OpenAPI::toJsonValue(m_voip));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_active_status_isSet) {
        obj.insert(QString("active_status"), ::OpenAPI::toJsonValue(m_active_status));
    }
    if (m_associated_email_addresses.isSet()) {
        obj.insert(QString("associated_email_addresses"), ::OpenAPI::toJsonValue(m_associated_email_addresses));
    }
    if (m_carrier_isSet) {
        obj.insert(QString("carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_dialing_code_isSet) {
        obj.insert(QString("dialing_code"), ::OpenAPI::toJsonValue(m_dialing_code));
    }
    if (m_do_not_call_isSet) {
        obj.insert(QString("do_not_call"), ::OpenAPI::toJsonValue(m_do_not_call));
    }
    if (m_formatted_isSet) {
        obj.insert(QString("formatted"), ::OpenAPI::toJsonValue(m_formatted));
    }
    if (m_fraud_score_isSet) {
        obj.insert(QString("fraud_score"), ::OpenAPI::toJsonValue(m_fraud_score));
    }
    if (m_leaked_isSet) {
        obj.insert(QString("leaked"), ::OpenAPI::toJsonValue(m_leaked));
    }
    if (m_line_type_isSet) {
        obj.insert(QString("line_type"), ::OpenAPI::toJsonValue(m_line_type));
    }
    if (m_local_format_isSet) {
        obj.insert(QString("local_format"), ::OpenAPI::toJsonValue(m_local_format));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prepaid_isSet) {
        obj.insert(QString("prepaid"), ::OpenAPI::toJsonValue(m_prepaid));
    }
    if (m_recent_abuse_isSet) {
        obj.insert(QString("recent_abuse"), ::OpenAPI::toJsonValue(m_recent_abuse));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_risky_isSet) {
        obj.insert(QString("risky"), ::OpenAPI::toJsonValue(m_risky));
    }
    if (m_sms_domain_isSet) {
        obj.insert(QString("sms_domain"), ::OpenAPI::toJsonValue(m_sms_domain));
    }
    if (m_sms_email_isSet) {
        obj.insert(QString("sms_email"), ::OpenAPI::toJsonValue(m_sms_email));
    }
    if (m_spammer_isSet) {
        obj.insert(QString("spammer"), ::OpenAPI::toJsonValue(m_spammer));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_user_activity_isSet) {
        obj.insert(QString("user_activity"), ::OpenAPI::toJsonValue(m_user_activity));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

bool OAIPhoneValidation_200_response::isVoip() const {
    return m_voip;
}
void OAIPhoneValidation_200_response::setVoip(const bool &voip) {
    m_voip = voip;
    m_voip_isSet = true;
}

bool OAIPhoneValidation_200_response::is_voip_Set() const{
    return m_voip_isSet;
}

bool OAIPhoneValidation_200_response::is_voip_Valid() const{
    return m_voip_isValid;
}

bool OAIPhoneValidation_200_response::isActive() const {
    return m_active;
}
void OAIPhoneValidation_200_response::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPhoneValidation_200_response::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPhoneValidation_200_response::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPhoneValidation_200_response::getActiveStatus() const {
    return m_active_status;
}
void OAIPhoneValidation_200_response::setActiveStatus(const QString &active_status) {
    m_active_status = active_status;
    m_active_status_isSet = true;
}

bool OAIPhoneValidation_200_response::is_active_status_Set() const{
    return m_active_status_isSet;
}

bool OAIPhoneValidation_200_response::is_active_status_Valid() const{
    return m_active_status_isValid;
}

OAIPhoneValidation_200_response_associated_email_addresses OAIPhoneValidation_200_response::getAssociatedEmailAddresses() const {
    return m_associated_email_addresses;
}
void OAIPhoneValidation_200_response::setAssociatedEmailAddresses(const OAIPhoneValidation_200_response_associated_email_addresses &associated_email_addresses) {
    m_associated_email_addresses = associated_email_addresses;
    m_associated_email_addresses_isSet = true;
}

bool OAIPhoneValidation_200_response::is_associated_email_addresses_Set() const{
    return m_associated_email_addresses_isSet;
}

bool OAIPhoneValidation_200_response::is_associated_email_addresses_Valid() const{
    return m_associated_email_addresses_isValid;
}

QString OAIPhoneValidation_200_response::getCarrier() const {
    return m_carrier;
}
void OAIPhoneValidation_200_response::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAIPhoneValidation_200_response::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAIPhoneValidation_200_response::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAIPhoneValidation_200_response::getCity() const {
    return m_city;
}
void OAIPhoneValidation_200_response::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPhoneValidation_200_response::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPhoneValidation_200_response::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIPhoneValidation_200_response::getCountry() const {
    return m_country;
}
void OAIPhoneValidation_200_response::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPhoneValidation_200_response::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPhoneValidation_200_response::is_country_Valid() const{
    return m_country_isValid;
}

double OAIPhoneValidation_200_response::getDialingCode() const {
    return m_dialing_code;
}
void OAIPhoneValidation_200_response::setDialingCode(const double &dialing_code) {
    m_dialing_code = dialing_code;
    m_dialing_code_isSet = true;
}

bool OAIPhoneValidation_200_response::is_dialing_code_Set() const{
    return m_dialing_code_isSet;
}

bool OAIPhoneValidation_200_response::is_dialing_code_Valid() const{
    return m_dialing_code_isValid;
}

bool OAIPhoneValidation_200_response::isDoNotCall() const {
    return m_do_not_call;
}
void OAIPhoneValidation_200_response::setDoNotCall(const bool &do_not_call) {
    m_do_not_call = do_not_call;
    m_do_not_call_isSet = true;
}

bool OAIPhoneValidation_200_response::is_do_not_call_Set() const{
    return m_do_not_call_isSet;
}

bool OAIPhoneValidation_200_response::is_do_not_call_Valid() const{
    return m_do_not_call_isValid;
}

QString OAIPhoneValidation_200_response::getFormatted() const {
    return m_formatted;
}
void OAIPhoneValidation_200_response::setFormatted(const QString &formatted) {
    m_formatted = formatted;
    m_formatted_isSet = true;
}

bool OAIPhoneValidation_200_response::is_formatted_Set() const{
    return m_formatted_isSet;
}

bool OAIPhoneValidation_200_response::is_formatted_Valid() const{
    return m_formatted_isValid;
}

double OAIPhoneValidation_200_response::getFraudScore() const {
    return m_fraud_score;
}
void OAIPhoneValidation_200_response::setFraudScore(const double &fraud_score) {
    m_fraud_score = fraud_score;
    m_fraud_score_isSet = true;
}

bool OAIPhoneValidation_200_response::is_fraud_score_Set() const{
    return m_fraud_score_isSet;
}

bool OAIPhoneValidation_200_response::is_fraud_score_Valid() const{
    return m_fraud_score_isValid;
}

bool OAIPhoneValidation_200_response::isLeaked() const {
    return m_leaked;
}
void OAIPhoneValidation_200_response::setLeaked(const bool &leaked) {
    m_leaked = leaked;
    m_leaked_isSet = true;
}

bool OAIPhoneValidation_200_response::is_leaked_Set() const{
    return m_leaked_isSet;
}

bool OAIPhoneValidation_200_response::is_leaked_Valid() const{
    return m_leaked_isValid;
}

QString OAIPhoneValidation_200_response::getLineType() const {
    return m_line_type;
}
void OAIPhoneValidation_200_response::setLineType(const QString &line_type) {
    m_line_type = line_type;
    m_line_type_isSet = true;
}

bool OAIPhoneValidation_200_response::is_line_type_Set() const{
    return m_line_type_isSet;
}

bool OAIPhoneValidation_200_response::is_line_type_Valid() const{
    return m_line_type_isValid;
}

QString OAIPhoneValidation_200_response::getLocalFormat() const {
    return m_local_format;
}
void OAIPhoneValidation_200_response::setLocalFormat(const QString &local_format) {
    m_local_format = local_format;
    m_local_format_isSet = true;
}

bool OAIPhoneValidation_200_response::is_local_format_Set() const{
    return m_local_format_isSet;
}

bool OAIPhoneValidation_200_response::is_local_format_Valid() const{
    return m_local_format_isValid;
}

QString OAIPhoneValidation_200_response::getMcc() const {
    return m_mcc;
}
void OAIPhoneValidation_200_response::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIPhoneValidation_200_response::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIPhoneValidation_200_response::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAIPhoneValidation_200_response::getMessage() const {
    return m_message;
}
void OAIPhoneValidation_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPhoneValidation_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPhoneValidation_200_response::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPhoneValidation_200_response::getMnc() const {
    return m_mnc;
}
void OAIPhoneValidation_200_response::setMnc(const QString &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAIPhoneValidation_200_response::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAIPhoneValidation_200_response::is_mnc_Valid() const{
    return m_mnc_isValid;
}

QString OAIPhoneValidation_200_response::getName() const {
    return m_name;
}
void OAIPhoneValidation_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPhoneValidation_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPhoneValidation_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPhoneValidation_200_response::getPrepaid() const {
    return m_prepaid;
}
void OAIPhoneValidation_200_response::setPrepaid(const QString &prepaid) {
    m_prepaid = prepaid;
    m_prepaid_isSet = true;
}

bool OAIPhoneValidation_200_response::is_prepaid_Set() const{
    return m_prepaid_isSet;
}

bool OAIPhoneValidation_200_response::is_prepaid_Valid() const{
    return m_prepaid_isValid;
}

bool OAIPhoneValidation_200_response::isRecentAbuse() const {
    return m_recent_abuse;
}
void OAIPhoneValidation_200_response::setRecentAbuse(const bool &recent_abuse) {
    m_recent_abuse = recent_abuse;
    m_recent_abuse_isSet = true;
}

bool OAIPhoneValidation_200_response::is_recent_abuse_Set() const{
    return m_recent_abuse_isSet;
}

bool OAIPhoneValidation_200_response::is_recent_abuse_Valid() const{
    return m_recent_abuse_isValid;
}

QString OAIPhoneValidation_200_response::getRegion() const {
    return m_region;
}
void OAIPhoneValidation_200_response::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPhoneValidation_200_response::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPhoneValidation_200_response::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIPhoneValidation_200_response::getRequestId() const {
    return m_request_id;
}
void OAIPhoneValidation_200_response::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPhoneValidation_200_response::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPhoneValidation_200_response::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIPhoneValidation_200_response::isRisky() const {
    return m_risky;
}
void OAIPhoneValidation_200_response::setRisky(const bool &risky) {
    m_risky = risky;
    m_risky_isSet = true;
}

bool OAIPhoneValidation_200_response::is_risky_Set() const{
    return m_risky_isSet;
}

bool OAIPhoneValidation_200_response::is_risky_Valid() const{
    return m_risky_isValid;
}

QString OAIPhoneValidation_200_response::getSmsDomain() const {
    return m_sms_domain;
}
void OAIPhoneValidation_200_response::setSmsDomain(const QString &sms_domain) {
    m_sms_domain = sms_domain;
    m_sms_domain_isSet = true;
}

bool OAIPhoneValidation_200_response::is_sms_domain_Set() const{
    return m_sms_domain_isSet;
}

bool OAIPhoneValidation_200_response::is_sms_domain_Valid() const{
    return m_sms_domain_isValid;
}

QString OAIPhoneValidation_200_response::getSmsEmail() const {
    return m_sms_email;
}
void OAIPhoneValidation_200_response::setSmsEmail(const QString &sms_email) {
    m_sms_email = sms_email;
    m_sms_email_isSet = true;
}

bool OAIPhoneValidation_200_response::is_sms_email_Set() const{
    return m_sms_email_isSet;
}

bool OAIPhoneValidation_200_response::is_sms_email_Valid() const{
    return m_sms_email_isValid;
}

bool OAIPhoneValidation_200_response::isSpammer() const {
    return m_spammer;
}
void OAIPhoneValidation_200_response::setSpammer(const bool &spammer) {
    m_spammer = spammer;
    m_spammer_isSet = true;
}

bool OAIPhoneValidation_200_response::is_spammer_Set() const{
    return m_spammer_isSet;
}

bool OAIPhoneValidation_200_response::is_spammer_Valid() const{
    return m_spammer_isValid;
}

bool OAIPhoneValidation_200_response::isSuccess() const {
    return m_success;
}
void OAIPhoneValidation_200_response::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIPhoneValidation_200_response::is_success_Set() const{
    return m_success_isSet;
}

bool OAIPhoneValidation_200_response::is_success_Valid() const{
    return m_success_isValid;
}

QString OAIPhoneValidation_200_response::getTimezone() const {
    return m_timezone;
}
void OAIPhoneValidation_200_response::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIPhoneValidation_200_response::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIPhoneValidation_200_response::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIPhoneValidation_200_response::getUserActivity() const {
    return m_user_activity;
}
void OAIPhoneValidation_200_response::setUserActivity(const QString &user_activity) {
    m_user_activity = user_activity;
    m_user_activity_isSet = true;
}

bool OAIPhoneValidation_200_response::is_user_activity_Set() const{
    return m_user_activity_isSet;
}

bool OAIPhoneValidation_200_response::is_user_activity_Valid() const{
    return m_user_activity_isValid;
}

bool OAIPhoneValidation_200_response::isRValid() const {
    return m_r_valid;
}
void OAIPhoneValidation_200_response::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIPhoneValidation_200_response::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIPhoneValidation_200_response::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

QString OAIPhoneValidation_200_response::getZipCode() const {
    return m_zip_code;
}
void OAIPhoneValidation_200_response::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIPhoneValidation_200_response::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIPhoneValidation_200_response::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIPhoneValidation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_voip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_email_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialing_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leaked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_abuse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risky_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spammer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoneValidation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
