/**
 * IPQualityScore API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaliciousUrlScanner_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaliciousUrlScanner_200_response::OAIMaliciousUrlScanner_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaliciousUrlScanner_200_response::OAIMaliciousUrlScanner_200_response() {
    this->initializeModel();
}

OAIMaliciousUrlScanner_200_response::~OAIMaliciousUrlScanner_200_response() {}

void OAIMaliciousUrlScanner_200_response::initializeModel() {

    m_adult_isSet = false;
    m_adult_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_dns_valid_isSet = false;
    m_dns_valid_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_domain_age_isSet = false;
    m_domain_age_isValid = false;

    m_domain_rank_isSet = false;
    m_domain_rank_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_malware_isSet = false;
    m_malware_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_parking_isSet = false;
    m_parking_isValid = false;

    m_phishing_isSet = false;
    m_phishing_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_risk_score_isSet = false;
    m_risk_score_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_spamming_isSet = false;
    m_spamming_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_suspicious_isSet = false;
    m_suspicious_isValid = false;

    m_unsafe_isSet = false;
    m_unsafe_isValid = false;
}

void OAIMaliciousUrlScanner_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaliciousUrlScanner_200_response::fromJsonObject(QJsonObject json) {

    m_adult_isValid = ::OpenAPI::fromJsonValue(m_adult, json[QString("adult")]);
    m_adult_isSet = !json[QString("adult")].isNull() && m_adult_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_dns_valid_isValid = ::OpenAPI::fromJsonValue(m_dns_valid, json[QString("dns_valid")]);
    m_dns_valid_isSet = !json[QString("dns_valid")].isNull() && m_dns_valid_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_domain_age_isValid = ::OpenAPI::fromJsonValue(m_domain_age, json[QString("domain_age")]);
    m_domain_age_isSet = !json[QString("domain_age")].isNull() && m_domain_age_isValid;

    m_domain_rank_isValid = ::OpenAPI::fromJsonValue(m_domain_rank, json[QString("domain_rank")]);
    m_domain_rank_isSet = !json[QString("domain_rank")].isNull() && m_domain_rank_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_malware_isValid = ::OpenAPI::fromJsonValue(m_malware, json[QString("malware")]);
    m_malware_isSet = !json[QString("malware")].isNull() && m_malware_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_parking_isValid = ::OpenAPI::fromJsonValue(m_parking, json[QString("parking")]);
    m_parking_isSet = !json[QString("parking")].isNull() && m_parking_isValid;

    m_phishing_isValid = ::OpenAPI::fromJsonValue(m_phishing, json[QString("phishing")]);
    m_phishing_isSet = !json[QString("phishing")].isNull() && m_phishing_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_risk_score_isValid = ::OpenAPI::fromJsonValue(m_risk_score, json[QString("risk_score")]);
    m_risk_score_isSet = !json[QString("risk_score")].isNull() && m_risk_score_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_spamming_isValid = ::OpenAPI::fromJsonValue(m_spamming, json[QString("spamming")]);
    m_spamming_isSet = !json[QString("spamming")].isNull() && m_spamming_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("status_code")]);
    m_status_code_isSet = !json[QString("status_code")].isNull() && m_status_code_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_suspicious_isValid = ::OpenAPI::fromJsonValue(m_suspicious, json[QString("suspicious")]);
    m_suspicious_isSet = !json[QString("suspicious")].isNull() && m_suspicious_isValid;

    m_unsafe_isValid = ::OpenAPI::fromJsonValue(m_unsafe, json[QString("unsafe")]);
    m_unsafe_isSet = !json[QString("unsafe")].isNull() && m_unsafe_isValid;
}

QString OAIMaliciousUrlScanner_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaliciousUrlScanner_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_isSet) {
        obj.insert(QString("adult"), ::OpenAPI::toJsonValue(m_adult));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_dns_valid_isSet) {
        obj.insert(QString("dns_valid"), ::OpenAPI::toJsonValue(m_dns_valid));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_domain_age.isSet()) {
        obj.insert(QString("domain_age"), ::OpenAPI::toJsonValue(m_domain_age));
    }
    if (m_domain_rank_isSet) {
        obj.insert(QString("domain_rank"), ::OpenAPI::toJsonValue(m_domain_rank));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_malware_isSet) {
        obj.insert(QString("malware"), ::OpenAPI::toJsonValue(m_malware));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_parking_isSet) {
        obj.insert(QString("parking"), ::OpenAPI::toJsonValue(m_parking));
    }
    if (m_phishing_isSet) {
        obj.insert(QString("phishing"), ::OpenAPI::toJsonValue(m_phishing));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_risk_score_isSet) {
        obj.insert(QString("risk_score"), ::OpenAPI::toJsonValue(m_risk_score));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_spamming_isSet) {
        obj.insert(QString("spamming"), ::OpenAPI::toJsonValue(m_spamming));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("status_code"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_suspicious_isSet) {
        obj.insert(QString("suspicious"), ::OpenAPI::toJsonValue(m_suspicious));
    }
    if (m_unsafe_isSet) {
        obj.insert(QString("unsafe"), ::OpenAPI::toJsonValue(m_unsafe));
    }
    return obj;
}

bool OAIMaliciousUrlScanner_200_response::isAdult() const {
    return m_adult;
}
void OAIMaliciousUrlScanner_200_response::setAdult(const bool &adult) {
    m_adult = adult;
    m_adult_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_adult_Set() const{
    return m_adult_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_adult_Valid() const{
    return m_adult_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getCategory() const {
    return m_category;
}
void OAIMaliciousUrlScanner_200_response::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getContentType() const {
    return m_content_type;
}
void OAIMaliciousUrlScanner_200_response::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isDnsValid() const {
    return m_dns_valid;
}
void OAIMaliciousUrlScanner_200_response::setDnsValid(const bool &dns_valid) {
    m_dns_valid = dns_valid;
    m_dns_valid_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_dns_valid_Set() const{
    return m_dns_valid_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_dns_valid_Valid() const{
    return m_dns_valid_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getDomain() const {
    return m_domain;
}
void OAIMaliciousUrlScanner_200_response::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIMaliciousUrlScanner_200_response_domain_age OAIMaliciousUrlScanner_200_response::getDomainAge() const {
    return m_domain_age;
}
void OAIMaliciousUrlScanner_200_response::setDomainAge(const OAIMaliciousUrlScanner_200_response_domain_age &domain_age) {
    m_domain_age = domain_age;
    m_domain_age_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_domain_age_Set() const{
    return m_domain_age_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_domain_age_Valid() const{
    return m_domain_age_isValid;
}

double OAIMaliciousUrlScanner_200_response::getDomainRank() const {
    return m_domain_rank;
}
void OAIMaliciousUrlScanner_200_response::setDomainRank(const double &domain_rank) {
    m_domain_rank = domain_rank;
    m_domain_rank_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_domain_rank_Set() const{
    return m_domain_rank_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_domain_rank_Valid() const{
    return m_domain_rank_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getIpAddress() const {
    return m_ip_address;
}
void OAIMaliciousUrlScanner_200_response::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isMalware() const {
    return m_malware;
}
void OAIMaliciousUrlScanner_200_response::setMalware(const bool &malware) {
    m_malware = malware;
    m_malware_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_malware_Set() const{
    return m_malware_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_malware_Valid() const{
    return m_malware_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getMessage() const {
    return m_message;
}
void OAIMaliciousUrlScanner_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_message_Valid() const{
    return m_message_isValid;
}

double OAIMaliciousUrlScanner_200_response::getPageSize() const {
    return m_page_size;
}
void OAIMaliciousUrlScanner_200_response::setPageSize(const double &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isParking() const {
    return m_parking;
}
void OAIMaliciousUrlScanner_200_response::setParking(const bool &parking) {
    m_parking = parking;
    m_parking_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_parking_Set() const{
    return m_parking_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_parking_Valid() const{
    return m_parking_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isPhishing() const {
    return m_phishing;
}
void OAIMaliciousUrlScanner_200_response::setPhishing(const bool &phishing) {
    m_phishing = phishing;
    m_phishing_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_phishing_Set() const{
    return m_phishing_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_phishing_Valid() const{
    return m_phishing_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getRequestId() const {
    return m_request_id;
}
void OAIMaliciousUrlScanner_200_response::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_request_id_Valid() const{
    return m_request_id_isValid;
}

double OAIMaliciousUrlScanner_200_response::getRiskScore() const {
    return m_risk_score;
}
void OAIMaliciousUrlScanner_200_response::setRiskScore(const double &risk_score) {
    m_risk_score = risk_score;
    m_risk_score_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_risk_score_Set() const{
    return m_risk_score_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_risk_score_Valid() const{
    return m_risk_score_isValid;
}

QString OAIMaliciousUrlScanner_200_response::getServer() const {
    return m_server;
}
void OAIMaliciousUrlScanner_200_response::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_server_Set() const{
    return m_server_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_server_Valid() const{
    return m_server_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isSpamming() const {
    return m_spamming;
}
void OAIMaliciousUrlScanner_200_response::setSpamming(const bool &spamming) {
    m_spamming = spamming;
    m_spamming_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_spamming_Set() const{
    return m_spamming_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_spamming_Valid() const{
    return m_spamming_isValid;
}

double OAIMaliciousUrlScanner_200_response::getStatusCode() const {
    return m_status_code;
}
void OAIMaliciousUrlScanner_200_response::setStatusCode(const double &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isSuccess() const {
    return m_success;
}
void OAIMaliciousUrlScanner_200_response::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_success_Set() const{
    return m_success_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isSuspicious() const {
    return m_suspicious;
}
void OAIMaliciousUrlScanner_200_response::setSuspicious(const bool &suspicious) {
    m_suspicious = suspicious;
    m_suspicious_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_suspicious_Set() const{
    return m_suspicious_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_suspicious_Valid() const{
    return m_suspicious_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isUnsafe() const {
    return m_unsafe;
}
void OAIMaliciousUrlScanner_200_response::setUnsafe(const bool &unsafe) {
    m_unsafe = unsafe;
    m_unsafe_isSet = true;
}

bool OAIMaliciousUrlScanner_200_response::is_unsafe_Set() const{
    return m_unsafe_isSet;
}

bool OAIMaliciousUrlScanner_200_response::is_unsafe_Valid() const{
    return m_unsafe_isValid;
}

bool OAIMaliciousUrlScanner_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_age.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_malware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phishing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spamming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspicious_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsafe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaliciousUrlScanner_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
