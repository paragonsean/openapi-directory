# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArtistArt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artist_id: str=None, banner: str=None, logo: str=None, name: str=None):
        """ArtistArt - a model defined in OpenAPI

        :param artist_id: The artist_id of this ArtistArt.
        :param banner: The banner of this ArtistArt.
        :param logo: The logo of this ArtistArt.
        :param name: The name of this ArtistArt.
        """
        self.openapi_types = {
            'artist_id': str,
            'banner': str,
            'logo': str,
            'name': str
        }

        self.attribute_map = {
            'artist_id': 'ArtistID',
            'banner': 'Banner',
            'logo': 'Logo',
            'name': 'Name'
        }

        self._artist_id = artist_id
        self._banner = banner
        self._logo = logo
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArtistArt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArtistArt of this ArtistArt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist_id(self):
        """Gets the artist_id of this ArtistArt.


        :return: The artist_id of this ArtistArt.
        :rtype: str
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id):
        """Sets the artist_id of this ArtistArt.


        :param artist_id: The artist_id of this ArtistArt.
        :type artist_id: str
        """

        self._artist_id = artist_id

    @property
    def banner(self):
        """Gets the banner of this ArtistArt.


        :return: The banner of this ArtistArt.
        :rtype: str
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this ArtistArt.


        :param banner: The banner of this ArtistArt.
        :type banner: str
        """

        self._banner = banner

    @property
    def logo(self):
        """Gets the logo of this ArtistArt.


        :return: The logo of this ArtistArt.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this ArtistArt.


        :param logo: The logo of this ArtistArt.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this ArtistArt.


        :return: The name of this ArtistArt.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtistArt.


        :param name: The name of this ArtistArt.
        :type name: str
        """

        self._name = name
