# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_ids import ExternalIDs
from openapi_server import util


class Magnets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, externals: List[ExternalIDs]=None, first_seen_date: str=None, hash: str=None, image: str=None, name: str=None, peers: str=None, seeds: str=None, size: str=None, title: str=None, type: str=None):
        """Magnets - a model defined in OpenAPI

        :param externals: The externals of this Magnets.
        :param first_seen_date: The first_seen_date of this Magnets.
        :param hash: The hash of this Magnets.
        :param image: The image of this Magnets.
        :param name: The name of this Magnets.
        :param peers: The peers of this Magnets.
        :param seeds: The seeds of this Magnets.
        :param size: The size of this Magnets.
        :param title: The title of this Magnets.
        :param type: The type of this Magnets.
        """
        self.openapi_types = {
            'externals': List[ExternalIDs],
            'first_seen_date': str,
            'hash': str,
            'image': str,
            'name': str,
            'peers': str,
            'seeds': str,
            'size': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'externals': 'Externals',
            'first_seen_date': 'FirstSeenDate',
            'hash': 'Hash',
            'image': 'Image',
            'name': 'Name',
            'peers': 'Peers',
            'seeds': 'Seeds',
            'size': 'Size',
            'title': 'Title',
            'type': 'Type'
        }

        self._externals = externals
        self._first_seen_date = first_seen_date
        self._hash = hash
        self._image = image
        self._name = name
        self._peers = peers
        self._seeds = seeds
        self._size = size
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Magnets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Magnets of this Magnets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def externals(self):
        """Gets the externals of this Magnets.


        :return: The externals of this Magnets.
        :rtype: List[ExternalIDs]
        """
        return self._externals

    @externals.setter
    def externals(self, externals):
        """Sets the externals of this Magnets.


        :param externals: The externals of this Magnets.
        :type externals: List[ExternalIDs]
        """

        self._externals = externals

    @property
    def first_seen_date(self):
        """Gets the first_seen_date of this Magnets.

        Date this hash was first detected

        :return: The first_seen_date of this Magnets.
        :rtype: str
        """
        return self._first_seen_date

    @first_seen_date.setter
    def first_seen_date(self, first_seen_date):
        """Sets the first_seen_date of this Magnets.

        Date this hash was first detected

        :param first_seen_date: The first_seen_date of this Magnets.
        :type first_seen_date: str
        """

        self._first_seen_date = first_seen_date

    @property
    def hash(self):
        """Gets the hash of this Magnets.

        The actual hash you need to construct your magnet

        :return: The hash of this Magnets.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Magnets.

        The actual hash you need to construct your magnet

        :param hash: The hash of this Magnets.
        :type hash: str
        """

        self._hash = hash

    @property
    def image(self):
        """Gets the image of this Magnets.


        :return: The image of this Magnets.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Magnets.


        :param image: The image of this Magnets.
        :type image: str
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this Magnets.


        :return: The name of this Magnets.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Magnets.


        :param name: The name of this Magnets.
        :type name: str
        """

        self._name = name

    @property
    def peers(self):
        """Gets the peers of this Magnets.

        Number of Peers available at FirstSeenDate

        :return: The peers of this Magnets.
        :rtype: str
        """
        return self._peers

    @peers.setter
    def peers(self, peers):
        """Sets the peers of this Magnets.

        Number of Peers available at FirstSeenDate

        :param peers: The peers of this Magnets.
        :type peers: str
        """

        self._peers = peers

    @property
    def seeds(self):
        """Gets the seeds of this Magnets.

        Number of Seeds available at FirstSeenDate

        :return: The seeds of this Magnets.
        :rtype: str
        """
        return self._seeds

    @seeds.setter
    def seeds(self, seeds):
        """Sets the seeds of this Magnets.

        Number of Seeds available at FirstSeenDate

        :param seeds: The seeds of this Magnets.
        :type seeds: str
        """

        self._seeds = seeds

    @property
    def size(self):
        """Gets the size of this Magnets.


        :return: The size of this Magnets.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Magnets.


        :param size: The size of this Magnets.
        :type size: str
        """

        self._size = size

    @property
    def title(self):
        """Gets the title of this Magnets.


        :return: The title of this Magnets.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Magnets.


        :param title: The title of this Magnets.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Magnets.


        :return: The type of this Magnets.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Magnets.


        :param type: The type of this Magnets.
        :type type: str
        """

        self._type = type
