# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlbumTracks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_id: str=None, artist_id: str=None, length: str=None, track_name: str=None, track_no: str=None):
        """AlbumTracks - a model defined in OpenAPI

        :param album_id: The album_id of this AlbumTracks.
        :param artist_id: The artist_id of this AlbumTracks.
        :param length: The length of this AlbumTracks.
        :param track_name: The track_name of this AlbumTracks.
        :param track_no: The track_no of this AlbumTracks.
        """
        self.openapi_types = {
            'album_id': str,
            'artist_id': str,
            'length': str,
            'track_name': str,
            'track_no': str
        }

        self.attribute_map = {
            'album_id': 'AlbumID',
            'artist_id': 'ArtistID',
            'length': 'Length',
            'track_name': 'TrackName',
            'track_no': 'TrackNo'
        }

        self._album_id = album_id
        self._artist_id = artist_id
        self._length = length
        self._track_name = track_name
        self._track_no = track_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlbumTracks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlbumTracks of this AlbumTracks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_id(self):
        """Gets the album_id of this AlbumTracks.


        :return: The album_id of this AlbumTracks.
        :rtype: str
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id):
        """Sets the album_id of this AlbumTracks.


        :param album_id: The album_id of this AlbumTracks.
        :type album_id: str
        """

        self._album_id = album_id

    @property
    def artist_id(self):
        """Gets the artist_id of this AlbumTracks.


        :return: The artist_id of this AlbumTracks.
        :rtype: str
        """
        return self._artist_id

    @artist_id.setter
    def artist_id(self, artist_id):
        """Sets the artist_id of this AlbumTracks.


        :param artist_id: The artist_id of this AlbumTracks.
        :type artist_id: str
        """

        self._artist_id = artist_id

    @property
    def length(self):
        """Gets the length of this AlbumTracks.


        :return: The length of this AlbumTracks.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this AlbumTracks.


        :param length: The length of this AlbumTracks.
        :type length: str
        """

        self._length = length

    @property
    def track_name(self):
        """Gets the track_name of this AlbumTracks.


        :return: The track_name of this AlbumTracks.
        :rtype: str
        """
        return self._track_name

    @track_name.setter
    def track_name(self, track_name):
        """Sets the track_name of this AlbumTracks.


        :param track_name: The track_name of this AlbumTracks.
        :type track_name: str
        """

        self._track_name = track_name

    @property
    def track_no(self):
        """Gets the track_no of this AlbumTracks.


        :return: The track_no of this AlbumTracks.
        :rtype: str
        """
        return self._track_no

    @track_no.setter
    def track_no(self, track_no):
        """Sets the track_no of this AlbumTracks.


        :param track_no: The track_no of this AlbumTracks.
        :type track_no: str
        """

        self._track_no = track_no
