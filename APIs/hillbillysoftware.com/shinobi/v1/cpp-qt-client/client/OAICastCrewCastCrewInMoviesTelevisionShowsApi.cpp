/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICastCrewCastCrewInMoviesTelevisionShowsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICastCrewCastCrewInMoviesTelevisionShowsApi::OAICastCrewCastCrewInMoviesTelevisionShowsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICastCrewCastCrewInMoviesTelevisionShowsApi::~OAICastCrewCastCrewInMoviesTelevisionShowsApi() {
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.hillbillysoftware.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("actorGet", defaultConf);
    _serverIndices.insert("actorGet", 0);
    _serverConfigs.insert("actorInShowsGet", defaultConf);
    _serverIndices.insert("actorInShowsGet", 0);
    _serverConfigs.insert("actorsInTVShowGet", defaultConf);
    _serverIndices.insert("actorsInTVShowGet", 0);
    _serverConfigs.insert("addActorPost", defaultConf);
    _serverIndices.insert("addActorPost", 0);
    _serverConfigs.insert("castByActorGet", defaultConf);
    _serverIndices.insert("castByActorGet", 0);
    _serverConfigs.insert("crewByIDGet", defaultConf);
    _serverIndices.insert("crewByIDGet", 0);
    _serverConfigs.insert("crewByPersonGet", defaultConf);
    _serverIndices.insert("crewByPersonGet", 0);
    _serverConfigs.insert("crewGet", defaultConf);
    _serverIndices.insert("crewGet", 0);
    _serverConfigs.insert("crewbyShownameGet", defaultConf);
    _serverIndices.insert("crewbyShownameGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICastCrewCastCrewInMoviesTelevisionShowsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setUsername(const QString &username) {
    _username = username;
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setPassword(const QString &password) {
    _password = password;
}


void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICastCrewCastCrewInMoviesTelevisionShowsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICastCrewCastCrewInMoviesTelevisionShowsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICastCrewCastCrewInMoviesTelevisionShowsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICastCrewCastCrewInMoviesTelevisionShowsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICastCrewCastCrewInMoviesTelevisionShowsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorGet(const QString &accesstoken, const QString &query) {
    QString fullPath = QString(_serverConfigs["actorGet"][_serverIndices.value("actorGet")].URL()+"/Actors/Search/{accesstoken}/{Query}");
    
    
    {
        QString accesstokenPathParam("{");
        accesstokenPathParam.append("accesstoken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accesstoken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accesstoken"+pathSuffix : pathPrefix;
        fullPath.replace(accesstokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accesstoken)));
    }
    
    {
        QString queryPathParam("{");
        queryPathParam.append("Query").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Query", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Query"+pathSuffix : pathPrefix;
        fullPath.replace(queryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIActor> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIActor val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actorGetSignal(output);
        Q_EMIT actorGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actorGetSignalE(output, error_type, error_str);
        Q_EMIT actorGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actorGetSignalError(output, error_type, error_str);
        Q_EMIT actorGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorInShowsGet(const QString &access_token, const QString &actor) {
    QString fullPath = QString(_serverConfigs["actorInShowsGet"][_serverIndices.value("actorInShowsGet")].URL()+"/Cast/ActorBySearch/{AccessToken}/{Actor}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString actorPathParam("{");
        actorPathParam.append("Actor").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Actor", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Actor"+pathSuffix : pathPrefix;
        fullPath.replace(actorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(actor)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorInShowsGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorInShowsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITVShowActor> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITVShowActor val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actorInShowsGetSignal(output);
        Q_EMIT actorInShowsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actorInShowsGetSignalE(output, error_type, error_str);
        Q_EMIT actorInShowsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actorInShowsGetSignalError(output, error_type, error_str);
        Q_EMIT actorInShowsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorsInTVShowGet(const QString &accesstoken, const QString &show_name) {
    QString fullPath = QString(_serverConfigs["actorsInTVShowGet"][_serverIndices.value("actorsInTVShowGet")].URL()+"/Cast/ByTVShow/{accesstoken}/{ShowName}");
    
    
    {
        QString accesstokenPathParam("{");
        accesstokenPathParam.append("accesstoken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accesstoken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accesstoken"+pathSuffix : pathPrefix;
        fullPath.replace(accesstokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accesstoken)));
    }
    
    {
        QString show_namePathParam("{");
        show_namePathParam.append("ShowName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ShowName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ShowName"+pathSuffix : pathPrefix;
        fullPath.replace(show_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorsInTVShowGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::actorsInTVShowGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITVShowActor> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITVShowActor val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT actorsInTVShowGetSignal(output);
        Q_EMIT actorsInTVShowGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT actorsInTVShowGetSignalE(output, error_type, error_str);
        Q_EMIT actorsInTVShowGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT actorsInTVShowGetSignalError(output, error_type, error_str);
        Q_EMIT actorsInTVShowGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::addActorPost(const OAIActorPost &value) {
    QString fullPath = QString(_serverConfigs["addActorPost"][_serverIndices.value("addActorPost")].URL()+"/AddActor");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = value.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::addActorPostCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::addActorPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPostResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addActorPostSignal(output);
        Q_EMIT addActorPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addActorPostSignalE(output, error_type, error_str);
        Q_EMIT addActorPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addActorPostSignalError(output, error_type, error_str);
        Q_EMIT addActorPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::castByActorGet(const QString &access_token, const QString &actor) {
    QString fullPath = QString(_serverConfigs["castByActorGet"][_serverIndices.value("castByActorGet")].URL()+"/Cast/ByActor/{AccessToken}/{Actor}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString actorPathParam("{");
        actorPathParam.append("Actor").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Actor", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Actor"+pathSuffix : pathPrefix;
        fullPath.replace(actorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(actor)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::castByActorGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::castByActorGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITVShowActor> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITVShowActor val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT castByActorGetSignal(output);
        Q_EMIT castByActorGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT castByActorGetSignalE(output, error_type, error_str);
        Q_EMIT castByActorGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT castByActorGetSignalError(output, error_type, error_str);
        Q_EMIT castByActorGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewByIDGet(const QString &access_token, const QString &id) {
    QString fullPath = QString(_serverConfigs["crewByIDGet"][_serverIndices.value("crewByIDGet")].URL()+"/Crew/ByID/{AccessToken}/{ID}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewByIDGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewByIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrew> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrew val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crewByIDGetSignal(output);
        Q_EMIT crewByIDGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crewByIDGetSignalE(output, error_type, error_str);
        Q_EMIT crewByIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crewByIDGetSignalError(output, error_type, error_str);
        Q_EMIT crewByIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewByPersonGet(const QString &access_token, const QString &person_name) {
    QString fullPath = QString(_serverConfigs["crewByPersonGet"][_serverIndices.value("crewByPersonGet")].URL()+"/Crew/ByPerson/{AccessToken}/{PersonName}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString person_namePathParam("{");
        person_namePathParam.append("PersonName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PersonName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PersonName"+pathSuffix : pathPrefix;
        fullPath.replace(person_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(person_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewByPersonGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewByPersonGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrew> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrew val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crewByPersonGetSignal(output);
        Q_EMIT crewByPersonGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crewByPersonGetSignalE(output, error_type, error_str);
        Q_EMIT crewByPersonGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crewByPersonGetSignalError(output, error_type, error_str);
        Q_EMIT crewByPersonGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewGet(const QString &access_token, const QString &phrase) {
    QString fullPath = QString(_serverConfigs["crewGet"][_serverIndices.value("crewGet")].URL()+"/Crew/Search/{AccessToken}/{Phrase}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString phrasePathParam("{");
        phrasePathParam.append("Phrase").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Phrase", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Phrase"+pathSuffix : pathPrefix;
        fullPath.replace(phrasePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(phrase)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrew> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrew val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crewGetSignal(output);
        Q_EMIT crewGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crewGetSignalE(output, error_type, error_str);
        Q_EMIT crewGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crewGetSignalError(output, error_type, error_str);
        Q_EMIT crewGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewbyShownameGet(const QString &access_token, const QString &show_name) {
    QString fullPath = QString(_serverConfigs["crewbyShownameGet"][_serverIndices.value("crewbyShownameGet")].URL()+"/Crew/ByShowName/{AccessToken}/{ShowName}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString show_namePathParam("{");
        show_namePathParam.append("ShowName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ShowName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ShowName"+pathSuffix : pathPrefix;
        fullPath.replace(show_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(show_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewbyShownameGetCallback);
    connect(this, &OAICastCrewCastCrewInMoviesTelevisionShowsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::crewbyShownameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrew> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrew val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crewbyShownameGetSignal(output);
        Q_EMIT crewbyShownameGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crewbyShownameGetSignalE(output, error_type, error_str);
        Q_EMIT crewbyShownameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crewbyShownameGetSignalError(output, error_type, error_str);
        Q_EMIT crewbyShownameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICastCrewCastCrewInMoviesTelevisionShowsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
