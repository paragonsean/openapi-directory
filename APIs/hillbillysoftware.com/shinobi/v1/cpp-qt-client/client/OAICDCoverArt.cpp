/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICDCoverArt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICDCoverArt::OAICDCoverArt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICDCoverArt::OAICDCoverArt() {
    this->initializeModel();
}

OAICDCoverArt::~OAICDCoverArt() {}

void OAICDCoverArt::initializeModel() {

    m_cover_image_isSet = false;
    m_cover_image_isValid = false;

    m_cover_thumb_medium_isSet = false;
    m_cover_thumb_medium_isValid = false;

    m_cover_thumb_small_isSet = false;
    m_cover_thumb_small_isValid = false;

    m_cover_type_isSet = false;
    m_cover_type_isValid = false;

    m_music_brainz_id_isSet = false;
    m_music_brainz_id_isValid = false;
}

void OAICDCoverArt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICDCoverArt::fromJsonObject(QJsonObject json) {

    m_cover_image_isValid = ::OpenAPI::fromJsonValue(m_cover_image, json[QString("CoverImage")]);
    m_cover_image_isSet = !json[QString("CoverImage")].isNull() && m_cover_image_isValid;

    m_cover_thumb_medium_isValid = ::OpenAPI::fromJsonValue(m_cover_thumb_medium, json[QString("CoverThumbMedium")]);
    m_cover_thumb_medium_isSet = !json[QString("CoverThumbMedium")].isNull() && m_cover_thumb_medium_isValid;

    m_cover_thumb_small_isValid = ::OpenAPI::fromJsonValue(m_cover_thumb_small, json[QString("CoverThumbSmall")]);
    m_cover_thumb_small_isSet = !json[QString("CoverThumbSmall")].isNull() && m_cover_thumb_small_isValid;

    m_cover_type_isValid = ::OpenAPI::fromJsonValue(m_cover_type, json[QString("CoverType")]);
    m_cover_type_isSet = !json[QString("CoverType")].isNull() && m_cover_type_isValid;

    m_music_brainz_id_isValid = ::OpenAPI::fromJsonValue(m_music_brainz_id, json[QString("MusicBrainzID")]);
    m_music_brainz_id_isSet = !json[QString("MusicBrainzID")].isNull() && m_music_brainz_id_isValid;
}

QString OAICDCoverArt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICDCoverArt::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_image_isSet) {
        obj.insert(QString("CoverImage"), ::OpenAPI::toJsonValue(m_cover_image));
    }
    if (m_cover_thumb_medium_isSet) {
        obj.insert(QString("CoverThumbMedium"), ::OpenAPI::toJsonValue(m_cover_thumb_medium));
    }
    if (m_cover_thumb_small_isSet) {
        obj.insert(QString("CoverThumbSmall"), ::OpenAPI::toJsonValue(m_cover_thumb_small));
    }
    if (m_cover_type_isSet) {
        obj.insert(QString("CoverType"), ::OpenAPI::toJsonValue(m_cover_type));
    }
    if (m_music_brainz_id_isSet) {
        obj.insert(QString("MusicBrainzID"), ::OpenAPI::toJsonValue(m_music_brainz_id));
    }
    return obj;
}

QString OAICDCoverArt::getCoverImage() const {
    return m_cover_image;
}
void OAICDCoverArt::setCoverImage(const QString &cover_image) {
    m_cover_image = cover_image;
    m_cover_image_isSet = true;
}

bool OAICDCoverArt::is_cover_image_Set() const{
    return m_cover_image_isSet;
}

bool OAICDCoverArt::is_cover_image_Valid() const{
    return m_cover_image_isValid;
}

QString OAICDCoverArt::getCoverThumbMedium() const {
    return m_cover_thumb_medium;
}
void OAICDCoverArt::setCoverThumbMedium(const QString &cover_thumb_medium) {
    m_cover_thumb_medium = cover_thumb_medium;
    m_cover_thumb_medium_isSet = true;
}

bool OAICDCoverArt::is_cover_thumb_medium_Set() const{
    return m_cover_thumb_medium_isSet;
}

bool OAICDCoverArt::is_cover_thumb_medium_Valid() const{
    return m_cover_thumb_medium_isValid;
}

QString OAICDCoverArt::getCoverThumbSmall() const {
    return m_cover_thumb_small;
}
void OAICDCoverArt::setCoverThumbSmall(const QString &cover_thumb_small) {
    m_cover_thumb_small = cover_thumb_small;
    m_cover_thumb_small_isSet = true;
}

bool OAICDCoverArt::is_cover_thumb_small_Set() const{
    return m_cover_thumb_small_isSet;
}

bool OAICDCoverArt::is_cover_thumb_small_Valid() const{
    return m_cover_thumb_small_isValid;
}

QString OAICDCoverArt::getCoverType() const {
    return m_cover_type;
}
void OAICDCoverArt::setCoverType(const QString &cover_type) {
    m_cover_type = cover_type;
    m_cover_type_isSet = true;
}

bool OAICDCoverArt::is_cover_type_Set() const{
    return m_cover_type_isSet;
}

bool OAICDCoverArt::is_cover_type_Valid() const{
    return m_cover_type_isValid;
}

QString OAICDCoverArt::getMusicBrainzId() const {
    return m_music_brainz_id;
}
void OAICDCoverArt::setMusicBrainzId(const QString &music_brainz_id) {
    m_music_brainz_id = music_brainz_id;
    m_music_brainz_id_isSet = true;
}

bool OAICDCoverArt::is_music_brainz_id_Set() const{
    return m_music_brainz_id_isSet;
}

bool OAICDCoverArt::is_music_brainz_id_Valid() const{
    return m_music_brainz_id_isValid;
}

bool OAICDCoverArt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_thumb_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_thumb_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_brainz_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICDCoverArt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
