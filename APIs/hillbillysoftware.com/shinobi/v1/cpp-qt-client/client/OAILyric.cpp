/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILyric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILyric::OAILyric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILyric::OAILyric() {
    this->initializeModel();
}

OAILyric::~OAILyric() {}

void OAILyric::initializeModel() {

    m_album_id_isSet = false;
    m_album_id_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_lyrics_isSet = false;
    m_lyrics_isValid = false;

    m_song_isSet = false;
    m_song_isValid = false;
}

void OAILyric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILyric::fromJsonObject(QJsonObject json) {

    m_album_id_isValid = ::OpenAPI::fromJsonValue(m_album_id, json[QString("AlbumID")]);
    m_album_id_isSet = !json[QString("AlbumID")].isNull() && m_album_id_isValid;

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("Artist")]);
    m_artist_isSet = !json[QString("Artist")].isNull() && m_artist_isValid;

    m_lyrics_isValid = ::OpenAPI::fromJsonValue(m_lyrics, json[QString("Lyrics")]);
    m_lyrics_isSet = !json[QString("Lyrics")].isNull() && m_lyrics_isValid;

    m_song_isValid = ::OpenAPI::fromJsonValue(m_song, json[QString("Song")]);
    m_song_isSet = !json[QString("Song")].isNull() && m_song_isValid;
}

QString OAILyric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILyric::asJsonObject() const {
    QJsonObject obj;
    if (m_album_id_isSet) {
        obj.insert(QString("AlbumID"), ::OpenAPI::toJsonValue(m_album_id));
    }
    if (m_artist_isSet) {
        obj.insert(QString("Artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_lyrics_isSet) {
        obj.insert(QString("Lyrics"), ::OpenAPI::toJsonValue(m_lyrics));
    }
    if (m_song_isSet) {
        obj.insert(QString("Song"), ::OpenAPI::toJsonValue(m_song));
    }
    return obj;
}

QString OAILyric::getAlbumId() const {
    return m_album_id;
}
void OAILyric::setAlbumId(const QString &album_id) {
    m_album_id = album_id;
    m_album_id_isSet = true;
}

bool OAILyric::is_album_id_Set() const{
    return m_album_id_isSet;
}

bool OAILyric::is_album_id_Valid() const{
    return m_album_id_isValid;
}

QString OAILyric::getArtist() const {
    return m_artist;
}
void OAILyric::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAILyric::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAILyric::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAILyric::getLyrics() const {
    return m_lyrics;
}
void OAILyric::setLyrics(const QString &lyrics) {
    m_lyrics = lyrics;
    m_lyrics_isSet = true;
}

bool OAILyric::is_lyrics_Set() const{
    return m_lyrics_isSet;
}

bool OAILyric::is_lyrics_Valid() const{
    return m_lyrics_isValid;
}

QString OAILyric::getSong() const {
    return m_song;
}
void OAILyric::setSong(const QString &song) {
    m_song = song;
    m_song_isSet = true;
}

bool OAILyric::is_song_Set() const{
    return m_song_isSet;
}

bool OAILyric::is_song_Valid() const{
    return m_song_isValid;
}

bool OAILyric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lyrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_song_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILyric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
