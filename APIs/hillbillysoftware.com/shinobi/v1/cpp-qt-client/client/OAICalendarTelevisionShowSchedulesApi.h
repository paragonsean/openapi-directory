/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICalendarTelevisionShowSchedulesApi_H
#define OAI_OAICalendarTelevisionShowSchedulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICountry.h"
#include "OAINetworks.h"
#include "OAISchedule.h"
#include "OAIShowSeasons.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICalendarTelevisionShowSchedulesApi : public QObject {
    Q_OBJECT

public:
    OAICalendarTelevisionShowSchedulesApi(const int timeOut = 0);
    ~OAICalendarTelevisionShowSchedulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    * @param[in]  year QString [required]
    */
    virtual void calendarByShowNameGet(const QString &access_token, const QString &name, const QString &year);

    /**
    * @param[in]  access_token QString [required]
    */
    virtual void calendarCountriesGet(const QString &access_token);

    /**
    * @param[in]  access_token QString [required]
    */
    virtual void calendarNetworksGet(const QString &access_token);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    */
    virtual void calendarShowSeasonsGet(const QString &access_token, const QString &name);

    /**
    * @param[in]  access_token QString [required]
    */
    virtual void calendarTodayGet(const QString &access_token);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    * @param[in]  season QString [required]
    */
    virtual void calendarbyShownameSeasonGet(const QString &access_token, const QString &name, const QString &season);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  date QString [required]
    * @param[in]  country QString [required]
    */
    virtual void scheduleByDateGet(const QString &access_token, const QString &date, const QString &country);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calendarByShowNameGetCallback(OAIHttpRequestWorker *worker);
    void calendarCountriesGetCallback(OAIHttpRequestWorker *worker);
    void calendarNetworksGetCallback(OAIHttpRequestWorker *worker);
    void calendarShowSeasonsGetCallback(OAIHttpRequestWorker *worker);
    void calendarTodayGetCallback(OAIHttpRequestWorker *worker);
    void calendarbyShownameSeasonGetCallback(OAIHttpRequestWorker *worker);
    void scheduleByDateGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calendarByShowNameGetSignal(QList<OAISchedule> summary);
    void calendarCountriesGetSignal(QList<OAICountry> summary);
    void calendarNetworksGetSignal(QList<OAINetworks> summary);
    void calendarShowSeasonsGetSignal(QList<OAIShowSeasons> summary);
    void calendarTodayGetSignal(QList<OAISchedule> summary);
    void calendarbyShownameSeasonGetSignal(QList<OAISchedule> summary);
    void scheduleByDateGetSignal(QList<OAISchedule> summary);


    void calendarByShowNameGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISchedule> summary);
    void calendarCountriesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICountry> summary);
    void calendarNetworksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworks> summary);
    void calendarShowSeasonsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIShowSeasons> summary);
    void calendarTodayGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISchedule> summary);
    void calendarbyShownameSeasonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISchedule> summary);
    void scheduleByDateGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISchedule> summary);

    Q_DECL_DEPRECATED_X("Use calendarByShowNameGetSignalError() instead")
    void calendarByShowNameGetSignalE(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarByShowNameGetSignalError(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarCountriesGetSignalError() instead")
    void calendarCountriesGetSignalE(QList<OAICountry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarCountriesGetSignalError(QList<OAICountry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarNetworksGetSignalError() instead")
    void calendarNetworksGetSignalE(QList<OAINetworks> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarNetworksGetSignalError(QList<OAINetworks> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarShowSeasonsGetSignalError() instead")
    void calendarShowSeasonsGetSignalE(QList<OAIShowSeasons> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarShowSeasonsGetSignalError(QList<OAIShowSeasons> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarTodayGetSignalError() instead")
    void calendarTodayGetSignalE(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarTodayGetSignalError(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarbyShownameSeasonGetSignalError() instead")
    void calendarbyShownameSeasonGetSignalE(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarbyShownameSeasonGetSignalError(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleByDateGetSignalError() instead")
    void scheduleByDateGetSignalE(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleByDateGetSignalError(QList<OAISchedule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calendarByShowNameGetSignalErrorFull() instead")
    void calendarByShowNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarByShowNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarCountriesGetSignalErrorFull() instead")
    void calendarCountriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarCountriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarNetworksGetSignalErrorFull() instead")
    void calendarNetworksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarNetworksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarShowSeasonsGetSignalErrorFull() instead")
    void calendarShowSeasonsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarShowSeasonsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarTodayGetSignalErrorFull() instead")
    void calendarTodayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarTodayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendarbyShownameSeasonGetSignalErrorFull() instead")
    void calendarbyShownameSeasonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendarbyShownameSeasonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleByDateGetSignalErrorFull() instead")
    void scheduleByDateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleByDateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
