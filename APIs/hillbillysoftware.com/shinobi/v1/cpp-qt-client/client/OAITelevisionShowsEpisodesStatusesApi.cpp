/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelevisionShowsEpisodesStatusesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITelevisionShowsEpisodesStatusesApi::OAITelevisionShowsEpisodesStatusesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITelevisionShowsEpisodesStatusesApi::~OAITelevisionShowsEpisodesStatusesApi() {
}

void OAITelevisionShowsEpisodesStatusesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.hillbillysoftware.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("addTVShowPost", defaultConf);
    _serverIndices.insert("addTVShowPost", 0);
    _serverConfigs.insert("episodesByIDGet", defaultConf);
    _serverIndices.insert("episodesByIDGet", 0);
    _serverConfigs.insert("episodesBySeasonGet", defaultConf);
    _serverIndices.insert("episodesBySeasonGet", 0);
    _serverConfigs.insert("episodesGet", defaultConf);
    _serverIndices.insert("episodesGet", 0);
    _serverConfigs.insert("episodesLastAvailableSeasonGet", defaultConf);
    _serverIndices.insert("episodesLastAvailableSeasonGet", 0);
    _serverConfigs.insert("episodesLastAvailableSeasonbyNameGet", defaultConf);
    _serverIndices.insert("episodesLastAvailableSeasonbyNameGet", 0);
    _serverConfigs.insert("episodesSeasonCountGet", defaultConf);
    _serverIndices.insert("episodesSeasonCountGet", 0);
    _serverConfigs.insert("showStatusGet", defaultConf);
    _serverIndices.insert("showStatusGet", 0);
    _serverConfigs.insert("tVShowByNameGet", defaultConf);
    _serverIndices.insert("tVShowByNameGet", 0);
    _serverConfigs.insert("tVShowIDGet", defaultConf);
    _serverIndices.insert("tVShowIDGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITelevisionShowsEpisodesStatusesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITelevisionShowsEpisodesStatusesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITelevisionShowsEpisodesStatusesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITelevisionShowsEpisodesStatusesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITelevisionShowsEpisodesStatusesApi::setUsername(const QString &username) {
    _username = username;
}

void OAITelevisionShowsEpisodesStatusesApi::setPassword(const QString &password) {
    _password = password;
}


void OAITelevisionShowsEpisodesStatusesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITelevisionShowsEpisodesStatusesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITelevisionShowsEpisodesStatusesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITelevisionShowsEpisodesStatusesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITelevisionShowsEpisodesStatusesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITelevisionShowsEpisodesStatusesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITelevisionShowsEpisodesStatusesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITelevisionShowsEpisodesStatusesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITelevisionShowsEpisodesStatusesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITelevisionShowsEpisodesStatusesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITelevisionShowsEpisodesStatusesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITelevisionShowsEpisodesStatusesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITelevisionShowsEpisodesStatusesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITelevisionShowsEpisodesStatusesApi::addTVShowPost(const OAITVInformationPost &value) {
    QString fullPath = QString(_serverConfigs["addTVShowPost"][_serverIndices.value("addTVShowPost")].URL()+"/AddTVShow");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = value.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::addTVShowPostCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::addTVShowPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPostResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addTVShowPostSignal(output);
        Q_EMIT addTVShowPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addTVShowPostSignalE(output, error_type, error_str);
        Q_EMIT addTVShowPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addTVShowPostSignalError(output, error_type, error_str);
        Q_EMIT addTVShowPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::episodesByIDGet(const QString &access_token, const QString &id) {
    QString fullPath = QString(_serverConfigs["episodesByIDGet"][_serverIndices.value("episodesByIDGet")].URL()+"/Episodes/ByID/{AccessToken}/{ID}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::episodesByIDGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::episodesByIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEpisode> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEpisode val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodesByIDGetSignal(output);
        Q_EMIT episodesByIDGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodesByIDGetSignalE(output, error_type, error_str);
        Q_EMIT episodesByIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodesByIDGetSignalError(output, error_type, error_str);
        Q_EMIT episodesByIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::episodesBySeasonGet(const QString &access_token, const QString &id, const QString &season) {
    QString fullPath = QString(_serverConfigs["episodesBySeasonGet"][_serverIndices.value("episodesBySeasonGet")].URL()+"/Episodes/BySeason/{AccessToken}/{ID}/{Season}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString seasonPathParam("{");
        seasonPathParam.append("Season").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Season", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Season"+pathSuffix : pathPrefix;
        fullPath.replace(seasonPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(season)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::episodesBySeasonGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::episodesBySeasonGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEpisode> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEpisode val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodesBySeasonGetSignal(output);
        Q_EMIT episodesBySeasonGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodesBySeasonGetSignalE(output, error_type, error_str);
        Q_EMIT episodesBySeasonGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodesBySeasonGetSignalError(output, error_type, error_str);
        Q_EMIT episodesBySeasonGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::episodesGet(const QString &access_token, const QString &showname) {
    QString fullPath = QString(_serverConfigs["episodesGet"][_serverIndices.value("episodesGet")].URL()+"/Episodes/ByShowName/{AccessToken}/{Showname}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString shownamePathParam("{");
        shownamePathParam.append("Showname").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Showname", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Showname"+pathSuffix : pathPrefix;
        fullPath.replace(shownamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(showname)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::episodesGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::episodesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIEpisode> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIEpisode val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodesGetSignal(output);
        Q_EMIT episodesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodesGetSignalE(output, error_type, error_str);
        Q_EMIT episodesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodesGetSignalError(output, error_type, error_str);
        Q_EMIT episodesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::episodesLastAvailableSeasonGet(const QString &access_token, const QString &id) {
    QString fullPath = QString(_serverConfigs["episodesLastAvailableSeasonGet"][_serverIndices.value("episodesLastAvailableSeasonGet")].URL()+"/Episodes/LatestSeason/{AccessToken}/{ID}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::episodesLastAvailableSeasonGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::episodesLastAvailableSeasonGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILastAvailableSeason output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodesLastAvailableSeasonGetSignal(output);
        Q_EMIT episodesLastAvailableSeasonGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodesLastAvailableSeasonGetSignalE(output, error_type, error_str);
        Q_EMIT episodesLastAvailableSeasonGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodesLastAvailableSeasonGetSignalError(output, error_type, error_str);
        Q_EMIT episodesLastAvailableSeasonGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::episodesLastAvailableSeasonbyNameGet(const QString &access_token, const QString &name) {
    QString fullPath = QString(_serverConfigs["episodesLastAvailableSeasonbyNameGet"][_serverIndices.value("episodesLastAvailableSeasonbyNameGet")].URL()+"/Episodes/LatestSeason/Show/{AccessToken}/{Name}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("Name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::episodesLastAvailableSeasonbyNameGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::episodesLastAvailableSeasonbyNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILastAvailableSeason output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodesLastAvailableSeasonbyNameGetSignal(output);
        Q_EMIT episodesLastAvailableSeasonbyNameGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodesLastAvailableSeasonbyNameGetSignalE(output, error_type, error_str);
        Q_EMIT episodesLastAvailableSeasonbyNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodesLastAvailableSeasonbyNameGetSignalError(output, error_type, error_str);
        Q_EMIT episodesLastAvailableSeasonbyNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::episodesSeasonCountGet(const QString &access_token, const QString &id) {
    QString fullPath = QString(_serverConfigs["episodesSeasonCountGet"][_serverIndices.value("episodesSeasonCountGet")].URL()+"/Episodes/SeasonCount/{AccessToken}/{ID}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"ID"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::episodesSeasonCountGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::episodesSeasonCountGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITVShowSeasons output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT episodesSeasonCountGetSignal(output);
        Q_EMIT episodesSeasonCountGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT episodesSeasonCountGetSignalE(output, error_type, error_str);
        Q_EMIT episodesSeasonCountGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT episodesSeasonCountGetSignalError(output, error_type, error_str);
        Q_EMIT episodesSeasonCountGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::showStatusGet(const QString &access_token, const QString &query) {
    QString fullPath = QString(_serverConfigs["showStatusGet"][_serverIndices.value("showStatusGet")].URL()+"/Status/{AccessToken}/{Query}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString queryPathParam("{");
        queryPathParam.append("Query").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Query", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Query"+pathSuffix : pathPrefix;
        fullPath.replace(queryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::showStatusGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::showStatusGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAI_ShowStatus> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAI_ShowStatus val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT showStatusGetSignal(output);
        Q_EMIT showStatusGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT showStatusGetSignalE(output, error_type, error_str);
        Q_EMIT showStatusGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT showStatusGetSignalError(output, error_type, error_str);
        Q_EMIT showStatusGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::tVShowByNameGet(const QString &access_token, const QString &query) {
    QString fullPath = QString(_serverConfigs["tVShowByNameGet"][_serverIndices.value("tVShowByNameGet")].URL()+"/TV/ByName/{AccessToken}/{Query}");
    
    
    {
        QString access_tokenPathParam("{");
        access_tokenPathParam.append("AccessToken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "AccessToken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"AccessToken"+pathSuffix : pathPrefix;
        fullPath.replace(access_tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_token)));
    }
    
    {
        QString queryPathParam("{");
        queryPathParam.append("Query").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "Query", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"Query"+pathSuffix : pathPrefix;
        fullPath.replace(queryPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(query)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::tVShowByNameGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::tVShowByNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITVInformation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITVInformation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tVShowByNameGetSignal(output);
        Q_EMIT tVShowByNameGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tVShowByNameGetSignalE(output, error_type, error_str);
        Q_EMIT tVShowByNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tVShowByNameGetSignalError(output, error_type, error_str);
        Q_EMIT tVShowByNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::tVShowIDGet(const QString &accesstoken, const QString &id, const QString &imdb_id) {
    QString fullPath = QString(_serverConfigs["tVShowIDGet"][_serverIndices.value("tVShowIDGet")].URL()+"/TV/ByID/{accesstoken}/{imdbID}");
    
    
    {
        QString accesstokenPathParam("{");
        accesstokenPathParam.append("accesstoken").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "accesstoken", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"accesstoken"+pathSuffix : pathPrefix;
        fullPath.replace(accesstokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(accesstoken)));
    }
    
    {
        QString imdb_idPathParam("{");
        imdb_idPathParam.append("imdbID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "imdbID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"imdbID"+pathSuffix : pathPrefix;
        fullPath.replace(imdb_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(imdb_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "id", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("id")).append(querySuffix).append(QUrl::toPercentEncoding(id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITelevisionShowsEpisodesStatusesApi::tVShowIDGetCallback);
    connect(this, &OAITelevisionShowsEpisodesStatusesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITelevisionShowsEpisodesStatusesApi::tVShowIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITVInformation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tVShowIDGetSignal(output);
        Q_EMIT tVShowIDGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tVShowIDGetSignalE(output, error_type, error_str);
        Q_EMIT tVShowIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tVShowIDGetSignalError(output, error_type, error_str);
        Q_EMIT tVShowIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITelevisionShowsEpisodesStatusesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
