/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatingItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatingItem::OAIRatingItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatingItem::OAIRatingItem() {
    this->initializeModel();
}

OAIRatingItem::~OAIRatingItem() {}

void OAIRatingItem::initializeModel() {

    m_episo_date_isSet = false;
    m_episo_date_isValid = false;

    m_imdb_isSet = false;
    m_imdb_isValid = false;

    m_meta_critics_isSet = false;
    m_meta_critics_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rotten_tomatoes_isSet = false;
    m_rotten_tomatoes_isValid = false;

    m_rotten_tomatoes_audience_score_isSet = false;
    m_rotten_tomatoes_audience_score_isValid = false;

    m_tvdb_isSet = false;
    m_tvdb_isValid = false;

    m_tv_maze_isSet = false;
    m_tv_maze_isValid = false;

    m_trakt_isSet = false;
    m_trakt_isValid = false;

    m_imdb_id_isSet = false;
    m_imdb_id_isValid = false;
}

void OAIRatingItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatingItem::fromJsonObject(QJsonObject json) {

    m_episo_date_isValid = ::OpenAPI::fromJsonValue(m_episo_date, json[QString("EpisoDate")]);
    m_episo_date_isSet = !json[QString("EpisoDate")].isNull() && m_episo_date_isValid;

    m_imdb_isValid = ::OpenAPI::fromJsonValue(m_imdb, json[QString("IMDB")]);
    m_imdb_isSet = !json[QString("IMDB")].isNull() && m_imdb_isValid;

    m_meta_critics_isValid = ::OpenAPI::fromJsonValue(m_meta_critics, json[QString("MetaCritics")]);
    m_meta_critics_isSet = !json[QString("MetaCritics")].isNull() && m_meta_critics_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rotten_tomatoes_isValid = ::OpenAPI::fromJsonValue(m_rotten_tomatoes, json[QString("RottenTomatoes")]);
    m_rotten_tomatoes_isSet = !json[QString("RottenTomatoes")].isNull() && m_rotten_tomatoes_isValid;

    m_rotten_tomatoes_audience_score_isValid = ::OpenAPI::fromJsonValue(m_rotten_tomatoes_audience_score, json[QString("RottenTomatoesAudienceScore")]);
    m_rotten_tomatoes_audience_score_isSet = !json[QString("RottenTomatoesAudienceScore")].isNull() && m_rotten_tomatoes_audience_score_isValid;

    m_tvdb_isValid = ::OpenAPI::fromJsonValue(m_tvdb, json[QString("TVDB")]);
    m_tvdb_isSet = !json[QString("TVDB")].isNull() && m_tvdb_isValid;

    m_tv_maze_isValid = ::OpenAPI::fromJsonValue(m_tv_maze, json[QString("TVMaze")]);
    m_tv_maze_isSet = !json[QString("TVMaze")].isNull() && m_tv_maze_isValid;

    m_trakt_isValid = ::OpenAPI::fromJsonValue(m_trakt, json[QString("Trakt")]);
    m_trakt_isSet = !json[QString("Trakt")].isNull() && m_trakt_isValid;

    m_imdb_id_isValid = ::OpenAPI::fromJsonValue(m_imdb_id, json[QString("imdbID")]);
    m_imdb_id_isSet = !json[QString("imdbID")].isNull() && m_imdb_id_isValid;
}

QString OAIRatingItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatingItem::asJsonObject() const {
    QJsonObject obj;
    if (m_episo_date_isSet) {
        obj.insert(QString("EpisoDate"), ::OpenAPI::toJsonValue(m_episo_date));
    }
    if (m_imdb_isSet) {
        obj.insert(QString("IMDB"), ::OpenAPI::toJsonValue(m_imdb));
    }
    if (m_meta_critics_isSet) {
        obj.insert(QString("MetaCritics"), ::OpenAPI::toJsonValue(m_meta_critics));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rotten_tomatoes_isSet) {
        obj.insert(QString("RottenTomatoes"), ::OpenAPI::toJsonValue(m_rotten_tomatoes));
    }
    if (m_rotten_tomatoes_audience_score_isSet) {
        obj.insert(QString("RottenTomatoesAudienceScore"), ::OpenAPI::toJsonValue(m_rotten_tomatoes_audience_score));
    }
    if (m_tvdb_isSet) {
        obj.insert(QString("TVDB"), ::OpenAPI::toJsonValue(m_tvdb));
    }
    if (m_tv_maze_isSet) {
        obj.insert(QString("TVMaze"), ::OpenAPI::toJsonValue(m_tv_maze));
    }
    if (m_trakt_isSet) {
        obj.insert(QString("Trakt"), ::OpenAPI::toJsonValue(m_trakt));
    }
    if (m_imdb_id_isSet) {
        obj.insert(QString("imdbID"), ::OpenAPI::toJsonValue(m_imdb_id));
    }
    return obj;
}

QString OAIRatingItem::getEpisoDate() const {
    return m_episo_date;
}
void OAIRatingItem::setEpisoDate(const QString &episo_date) {
    m_episo_date = episo_date;
    m_episo_date_isSet = true;
}

bool OAIRatingItem::is_episo_date_Set() const{
    return m_episo_date_isSet;
}

bool OAIRatingItem::is_episo_date_Valid() const{
    return m_episo_date_isValid;
}

QString OAIRatingItem::getImdb() const {
    return m_imdb;
}
void OAIRatingItem::setImdb(const QString &imdb) {
    m_imdb = imdb;
    m_imdb_isSet = true;
}

bool OAIRatingItem::is_imdb_Set() const{
    return m_imdb_isSet;
}

bool OAIRatingItem::is_imdb_Valid() const{
    return m_imdb_isValid;
}

QString OAIRatingItem::getMetaCritics() const {
    return m_meta_critics;
}
void OAIRatingItem::setMetaCritics(const QString &meta_critics) {
    m_meta_critics = meta_critics;
    m_meta_critics_isSet = true;
}

bool OAIRatingItem::is_meta_critics_Set() const{
    return m_meta_critics_isSet;
}

bool OAIRatingItem::is_meta_critics_Valid() const{
    return m_meta_critics_isValid;
}

QString OAIRatingItem::getName() const {
    return m_name;
}
void OAIRatingItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRatingItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRatingItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRatingItem::getRottenTomatoes() const {
    return m_rotten_tomatoes;
}
void OAIRatingItem::setRottenTomatoes(const QString &rotten_tomatoes) {
    m_rotten_tomatoes = rotten_tomatoes;
    m_rotten_tomatoes_isSet = true;
}

bool OAIRatingItem::is_rotten_tomatoes_Set() const{
    return m_rotten_tomatoes_isSet;
}

bool OAIRatingItem::is_rotten_tomatoes_Valid() const{
    return m_rotten_tomatoes_isValid;
}

QString OAIRatingItem::getRottenTomatoesAudienceScore() const {
    return m_rotten_tomatoes_audience_score;
}
void OAIRatingItem::setRottenTomatoesAudienceScore(const QString &rotten_tomatoes_audience_score) {
    m_rotten_tomatoes_audience_score = rotten_tomatoes_audience_score;
    m_rotten_tomatoes_audience_score_isSet = true;
}

bool OAIRatingItem::is_rotten_tomatoes_audience_score_Set() const{
    return m_rotten_tomatoes_audience_score_isSet;
}

bool OAIRatingItem::is_rotten_tomatoes_audience_score_Valid() const{
    return m_rotten_tomatoes_audience_score_isValid;
}

QString OAIRatingItem::getTvdb() const {
    return m_tvdb;
}
void OAIRatingItem::setTvdb(const QString &tvdb) {
    m_tvdb = tvdb;
    m_tvdb_isSet = true;
}

bool OAIRatingItem::is_tvdb_Set() const{
    return m_tvdb_isSet;
}

bool OAIRatingItem::is_tvdb_Valid() const{
    return m_tvdb_isValid;
}

QString OAIRatingItem::getTvMaze() const {
    return m_tv_maze;
}
void OAIRatingItem::setTvMaze(const QString &tv_maze) {
    m_tv_maze = tv_maze;
    m_tv_maze_isSet = true;
}

bool OAIRatingItem::is_tv_maze_Set() const{
    return m_tv_maze_isSet;
}

bool OAIRatingItem::is_tv_maze_Valid() const{
    return m_tv_maze_isValid;
}

QString OAIRatingItem::getTrakt() const {
    return m_trakt;
}
void OAIRatingItem::setTrakt(const QString &trakt) {
    m_trakt = trakt;
    m_trakt_isSet = true;
}

bool OAIRatingItem::is_trakt_Set() const{
    return m_trakt_isSet;
}

bool OAIRatingItem::is_trakt_Valid() const{
    return m_trakt_isValid;
}

QString OAIRatingItem::getImdbId() const {
    return m_imdb_id;
}
void OAIRatingItem::setImdbId(const QString &imdb_id) {
    m_imdb_id = imdb_id;
    m_imdb_id_isSet = true;
}

bool OAIRatingItem::is_imdb_id_Set() const{
    return m_imdb_id_isSet;
}

bool OAIRatingItem::is_imdb_id_Valid() const{
    return m_imdb_id_isValid;
}

bool OAIRatingItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_episo_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_critics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotten_tomatoes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotten_tomatoes_audience_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tvdb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_maze_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trakt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatingItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
