/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImdbID.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImdbID::OAIImdbID(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImdbID::OAIImdbID() {
    this->initializeModel();
}

OAIImdbID::~OAIImdbID() {}

void OAIImdbID::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_shinobi_id_isSet = false;
    m_shinobi_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImdbID::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImdbID::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_shinobi_id_isValid = ::OpenAPI::fromJsonValue(m_shinobi_id, json[QString("ShinobiID")]);
    m_shinobi_id_isSet = !json[QString("ShinobiID")].isNull() && m_shinobi_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIImdbID::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImdbID::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_shinobi_id_isSet) {
        obj.insert(QString("ShinobiID"), ::OpenAPI::toJsonValue(m_shinobi_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImdbID::getId() const {
    return m_id;
}
void OAIImdbID::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImdbID::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImdbID::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImdbID::getShinobiId() const {
    return m_shinobi_id;
}
void OAIImdbID::setShinobiId(const QString &shinobi_id) {
    m_shinobi_id = shinobi_id;
    m_shinobi_id_isSet = true;
}

bool OAIImdbID::is_shinobi_id_Set() const{
    return m_shinobi_id_isSet;
}

bool OAIImdbID::is_shinobi_id_Valid() const{
    return m_shinobi_id_isValid;
}

QString OAIImdbID::getTitle() const {
    return m_title;
}
void OAIImdbID::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIImdbID::is_title_Set() const{
    return m_title_isSet;
}

bool OAIImdbID::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIImdbID::getType() const {
    return m_type;
}
void OAIImdbID::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImdbID::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImdbID::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImdbID::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shinobi_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImdbID::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
