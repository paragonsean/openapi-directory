/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMagnets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMagnets::OAIMagnets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMagnets::OAIMagnets() {
    this->initializeModel();
}

OAIMagnets::~OAIMagnets() {}

void OAIMagnets::initializeModel() {

    m_externals_isSet = false;
    m_externals_isValid = false;

    m_first_seen_date_isSet = false;
    m_first_seen_date_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_peers_isSet = false;
    m_peers_isValid = false;

    m_seeds_isSet = false;
    m_seeds_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMagnets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMagnets::fromJsonObject(QJsonObject json) {

    m_externals_isValid = ::OpenAPI::fromJsonValue(m_externals, json[QString("Externals")]);
    m_externals_isSet = !json[QString("Externals")].isNull() && m_externals_isValid;

    m_first_seen_date_isValid = ::OpenAPI::fromJsonValue(m_first_seen_date, json[QString("FirstSeenDate")]);
    m_first_seen_date_isSet = !json[QString("FirstSeenDate")].isNull() && m_first_seen_date_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("Hash")]);
    m_hash_isSet = !json[QString("Hash")].isNull() && m_hash_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("Image")]);
    m_image_isSet = !json[QString("Image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_peers_isValid = ::OpenAPI::fromJsonValue(m_peers, json[QString("Peers")]);
    m_peers_isSet = !json[QString("Peers")].isNull() && m_peers_isValid;

    m_seeds_isValid = ::OpenAPI::fromJsonValue(m_seeds, json[QString("Seeds")]);
    m_seeds_isSet = !json[QString("Seeds")].isNull() && m_seeds_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIMagnets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMagnets::asJsonObject() const {
    QJsonObject obj;
    if (m_externals.size() > 0) {
        obj.insert(QString("Externals"), ::OpenAPI::toJsonValue(m_externals));
    }
    if (m_first_seen_date_isSet) {
        obj.insert(QString("FirstSeenDate"), ::OpenAPI::toJsonValue(m_first_seen_date));
    }
    if (m_hash_isSet) {
        obj.insert(QString("Hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_image_isSet) {
        obj.insert(QString("Image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_peers_isSet) {
        obj.insert(QString("Peers"), ::OpenAPI::toJsonValue(m_peers));
    }
    if (m_seeds_isSet) {
        obj.insert(QString("Seeds"), ::OpenAPI::toJsonValue(m_seeds));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIExternalIDs> OAIMagnets::getExternals() const {
    return m_externals;
}
void OAIMagnets::setExternals(const QList<OAIExternalIDs> &externals) {
    m_externals = externals;
    m_externals_isSet = true;
}

bool OAIMagnets::is_externals_Set() const{
    return m_externals_isSet;
}

bool OAIMagnets::is_externals_Valid() const{
    return m_externals_isValid;
}

QString OAIMagnets::getFirstSeenDate() const {
    return m_first_seen_date;
}
void OAIMagnets::setFirstSeenDate(const QString &first_seen_date) {
    m_first_seen_date = first_seen_date;
    m_first_seen_date_isSet = true;
}

bool OAIMagnets::is_first_seen_date_Set() const{
    return m_first_seen_date_isSet;
}

bool OAIMagnets::is_first_seen_date_Valid() const{
    return m_first_seen_date_isValid;
}

QString OAIMagnets::getHash() const {
    return m_hash;
}
void OAIMagnets::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIMagnets::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIMagnets::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIMagnets::getImage() const {
    return m_image;
}
void OAIMagnets::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIMagnets::is_image_Set() const{
    return m_image_isSet;
}

bool OAIMagnets::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIMagnets::getName() const {
    return m_name;
}
void OAIMagnets::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMagnets::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMagnets::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMagnets::getPeers() const {
    return m_peers;
}
void OAIMagnets::setPeers(const QString &peers) {
    m_peers = peers;
    m_peers_isSet = true;
}

bool OAIMagnets::is_peers_Set() const{
    return m_peers_isSet;
}

bool OAIMagnets::is_peers_Valid() const{
    return m_peers_isValid;
}

QString OAIMagnets::getSeeds() const {
    return m_seeds;
}
void OAIMagnets::setSeeds(const QString &seeds) {
    m_seeds = seeds;
    m_seeds_isSet = true;
}

bool OAIMagnets::is_seeds_Set() const{
    return m_seeds_isSet;
}

bool OAIMagnets::is_seeds_Valid() const{
    return m_seeds_isValid;
}

QString OAIMagnets::getSize() const {
    return m_size;
}
void OAIMagnets::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIMagnets::is_size_Set() const{
    return m_size_isSet;
}

bool OAIMagnets::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIMagnets::getTitle() const {
    return m_title;
}
void OAIMagnets::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMagnets::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMagnets::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMagnets::getType() const {
    return m_type;
}
void OAIMagnets::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMagnets::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMagnets::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMagnets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_externals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_seen_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMagnets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
