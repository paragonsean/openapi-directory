/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMusicArtistsBandsTracksAlbumArtCoverArtVideosApi_H
#define OAI_OAIMusicArtistsBandsTracksAlbumArtCoverArtVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlbumArt.h"
#include "OAIAlbumTracks.h"
#include "OAIArtistArt.h"
#include "OAIBandAlbums.h"
#include "OAIBandInfo.h"
#include "OAIBandInfoExtended.h"
#include "OAICDCoverArt.h"
#include "OAILyric.h"
#include "OAIMusicVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMusicArtistsBandsTracksAlbumArtCoverArtVideosApi : public QObject {
    Q_OBJECT

public:
    OAIMusicArtistsBandsTracksAlbumArtCoverArtVideosApi(const int timeOut = 0);
    ~OAIMusicArtistsBandsTracksAlbumArtCoverArtVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  artist_id QString [required]
    */
    virtual void musiVideosGet(const QString &access_token, const QString &artist_id);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  album_id QString [required]
    */
    virtual void musicAlbumArtGet(const QString &access_token, const QString &album_id);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  artist_id QString [required]
    */
    virtual void musicAlbumsGet(const QString &access_token, const QString &artist_id);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    */
    virtual void musicArtistExtendedGet(const QString &access_token, const QString &name);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  mbid QString [required]
    */
    virtual void musicByMusicBrainzGet(const QString &access_token, const QString &mbid);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  mbid QString [required]
    */
    virtual void musicCDCoversGet(const QString &access_token, const QString &mbid);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    */
    virtual void musicCoverArtByNameGet(const QString &access_token, const QString &name);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  artist_id QString [required]
    */
    virtual void musicCoverArtGet(const QString &access_token, const QString &artist_id);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    */
    virtual void musicGet(const QString &access_token, const QString &name);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  song QString [required]
    */
    virtual void musicLyricsBySongGet(const QString &access_token, const QString &song);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  name QString [required]
    */
    virtual void musicLyricsGet(const QString &access_token, const QString &name);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  album_id QString [required]
    */
    virtual void musicLyricsbyAlbumIDGet(const QString &access_token, const QString &album_id);

    /**
    * @param[in]  access_token QString [required]
    * @param[in]  album_id QString [required]
    */
    virtual void musicTracksGet(const QString &access_token, const QString &album_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void musiVideosGetCallback(OAIHttpRequestWorker *worker);
    void musicAlbumArtGetCallback(OAIHttpRequestWorker *worker);
    void musicAlbumsGetCallback(OAIHttpRequestWorker *worker);
    void musicArtistExtendedGetCallback(OAIHttpRequestWorker *worker);
    void musicByMusicBrainzGetCallback(OAIHttpRequestWorker *worker);
    void musicCDCoversGetCallback(OAIHttpRequestWorker *worker);
    void musicCoverArtByNameGetCallback(OAIHttpRequestWorker *worker);
    void musicCoverArtGetCallback(OAIHttpRequestWorker *worker);
    void musicGetCallback(OAIHttpRequestWorker *worker);
    void musicLyricsBySongGetCallback(OAIHttpRequestWorker *worker);
    void musicLyricsGetCallback(OAIHttpRequestWorker *worker);
    void musicLyricsbyAlbumIDGetCallback(OAIHttpRequestWorker *worker);
    void musicTracksGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void musiVideosGetSignal(QList<OAIMusicVideo> summary);
    void musicAlbumArtGetSignal(OAIAlbumArt summary);
    void musicAlbumsGetSignal(QList<OAIBandAlbums> summary);
    void musicArtistExtendedGetSignal(QList<OAIBandInfoExtended> summary);
    void musicByMusicBrainzGetSignal(QList<OAIBandInfo> summary);
    void musicCDCoversGetSignal(QList<OAICDCoverArt> summary);
    void musicCoverArtByNameGetSignal(OAIArtistArt summary);
    void musicCoverArtGetSignal(OAIArtistArt summary);
    void musicGetSignal(QList<OAIBandInfo> summary);
    void musicLyricsBySongGetSignal(QList<OAILyric> summary);
    void musicLyricsGetSignal(QList<OAILyric> summary);
    void musicLyricsbyAlbumIDGetSignal(QList<OAILyric> summary);
    void musicTracksGetSignal(QList<OAIAlbumTracks> summary);


    void musiVideosGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMusicVideo> summary);
    void musicAlbumArtGetSignalFull(OAIHttpRequestWorker *worker, OAIAlbumArt summary);
    void musicAlbumsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBandAlbums> summary);
    void musicArtistExtendedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBandInfoExtended> summary);
    void musicByMusicBrainzGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBandInfo> summary);
    void musicCDCoversGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICDCoverArt> summary);
    void musicCoverArtByNameGetSignalFull(OAIHttpRequestWorker *worker, OAIArtistArt summary);
    void musicCoverArtGetSignalFull(OAIHttpRequestWorker *worker, OAIArtistArt summary);
    void musicGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBandInfo> summary);
    void musicLyricsBySongGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILyric> summary);
    void musicLyricsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILyric> summary);
    void musicLyricsbyAlbumIDGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILyric> summary);
    void musicTracksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbumTracks> summary);

    Q_DECL_DEPRECATED_X("Use musiVideosGetSignalError() instead")
    void musiVideosGetSignalE(QList<OAIMusicVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musiVideosGetSignalError(QList<OAIMusicVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicAlbumArtGetSignalError() instead")
    void musicAlbumArtGetSignalE(OAIAlbumArt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicAlbumArtGetSignalError(OAIAlbumArt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicAlbumsGetSignalError() instead")
    void musicAlbumsGetSignalE(QList<OAIBandAlbums> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicAlbumsGetSignalError(QList<OAIBandAlbums> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicArtistExtendedGetSignalError() instead")
    void musicArtistExtendedGetSignalE(QList<OAIBandInfoExtended> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicArtistExtendedGetSignalError(QList<OAIBandInfoExtended> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicByMusicBrainzGetSignalError() instead")
    void musicByMusicBrainzGetSignalE(QList<OAIBandInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicByMusicBrainzGetSignalError(QList<OAIBandInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicCDCoversGetSignalError() instead")
    void musicCDCoversGetSignalE(QList<OAICDCoverArt> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicCDCoversGetSignalError(QList<OAICDCoverArt> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicCoverArtByNameGetSignalError() instead")
    void musicCoverArtByNameGetSignalE(OAIArtistArt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicCoverArtByNameGetSignalError(OAIArtistArt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicCoverArtGetSignalError() instead")
    void musicCoverArtGetSignalE(OAIArtistArt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicCoverArtGetSignalError(OAIArtistArt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicGetSignalError() instead")
    void musicGetSignalE(QList<OAIBandInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicGetSignalError(QList<OAIBandInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicLyricsBySongGetSignalError() instead")
    void musicLyricsBySongGetSignalE(QList<OAILyric> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicLyricsBySongGetSignalError(QList<OAILyric> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicLyricsGetSignalError() instead")
    void musicLyricsGetSignalE(QList<OAILyric> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicLyricsGetSignalError(QList<OAILyric> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicLyricsbyAlbumIDGetSignalError() instead")
    void musicLyricsbyAlbumIDGetSignalE(QList<OAILyric> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicLyricsbyAlbumIDGetSignalError(QList<OAILyric> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicTracksGetSignalError() instead")
    void musicTracksGetSignalE(QList<OAIAlbumTracks> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void musicTracksGetSignalError(QList<OAIAlbumTracks> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use musiVideosGetSignalErrorFull() instead")
    void musiVideosGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musiVideosGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicAlbumArtGetSignalErrorFull() instead")
    void musicAlbumArtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicAlbumArtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicAlbumsGetSignalErrorFull() instead")
    void musicAlbumsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicAlbumsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicArtistExtendedGetSignalErrorFull() instead")
    void musicArtistExtendedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicArtistExtendedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicByMusicBrainzGetSignalErrorFull() instead")
    void musicByMusicBrainzGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicByMusicBrainzGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicCDCoversGetSignalErrorFull() instead")
    void musicCDCoversGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicCDCoversGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicCoverArtByNameGetSignalErrorFull() instead")
    void musicCoverArtByNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicCoverArtByNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicCoverArtGetSignalErrorFull() instead")
    void musicCoverArtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicCoverArtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicGetSignalErrorFull() instead")
    void musicGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicLyricsBySongGetSignalErrorFull() instead")
    void musicLyricsBySongGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicLyricsBySongGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicLyricsGetSignalErrorFull() instead")
    void musicLyricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicLyricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicLyricsbyAlbumIDGetSignalErrorFull() instead")
    void musicLyricsbyAlbumIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicLyricsbyAlbumIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use musicTracksGetSignalErrorFull() instead")
    void musicTracksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void musicTracksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
