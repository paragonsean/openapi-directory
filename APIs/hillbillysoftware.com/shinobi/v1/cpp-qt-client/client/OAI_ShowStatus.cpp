/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_ShowStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_ShowStatus::OAI_ShowStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_ShowStatus::OAI_ShowStatus() {
    this->initializeModel();
}

OAI_ShowStatus::~OAI_ShowStatus() {}

void OAI_ShowStatus::initializeModel() {

    m_enddate_isSet = false;
    m_enddate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_years_on_isSet = false;
    m_years_on_isValid = false;

    m_imdb_id_isSet = false;
    m_imdb_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tvdb_id_isSet = false;
    m_tvdb_id_isValid = false;
}

void OAI_ShowStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_ShowStatus::fromJsonObject(QJsonObject json) {

    m_enddate_isValid = ::OpenAPI::fromJsonValue(m_enddate, json[QString("Enddate")]);
    m_enddate_isSet = !json[QString("Enddate")].isNull() && m_enddate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_years_on_isValid = ::OpenAPI::fromJsonValue(m_years_on, json[QString("YearsOn")]);
    m_years_on_isSet = !json[QString("YearsOn")].isNull() && m_years_on_isValid;

    m_imdb_id_isValid = ::OpenAPI::fromJsonValue(m_imdb_id, json[QString("imdbID")]);
    m_imdb_id_isSet = !json[QString("imdbID")].isNull() && m_imdb_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tvdb_id_isValid = ::OpenAPI::fromJsonValue(m_tvdb_id, json[QString("tvdbID")]);
    m_tvdb_id_isSet = !json[QString("tvdbID")].isNull() && m_tvdb_id_isValid;
}

QString OAI_ShowStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_ShowStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_enddate_isSet) {
        obj.insert(QString("Enddate"), ::OpenAPI::toJsonValue(m_enddate));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_years_on_isSet) {
        obj.insert(QString("YearsOn"), ::OpenAPI::toJsonValue(m_years_on));
    }
    if (m_imdb_id_isSet) {
        obj.insert(QString("imdbID"), ::OpenAPI::toJsonValue(m_imdb_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tvdb_id_isSet) {
        obj.insert(QString("tvdbID"), ::OpenAPI::toJsonValue(m_tvdb_id));
    }
    return obj;
}

QString OAI_ShowStatus::getEnddate() const {
    return m_enddate;
}
void OAI_ShowStatus::setEnddate(const QString &enddate) {
    m_enddate = enddate;
    m_enddate_isSet = true;
}

bool OAI_ShowStatus::is_enddate_Set() const{
    return m_enddate_isSet;
}

bool OAI_ShowStatus::is_enddate_Valid() const{
    return m_enddate_isValid;
}

QString OAI_ShowStatus::getId() const {
    return m_id;
}
void OAI_ShowStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI_ShowStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAI_ShowStatus::is_id_Valid() const{
    return m_id_isValid;
}

QString OAI_ShowStatus::getTitle() const {
    return m_title;
}
void OAI_ShowStatus::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAI_ShowStatus::is_title_Set() const{
    return m_title_isSet;
}

bool OAI_ShowStatus::is_title_Valid() const{
    return m_title_isValid;
}

QString OAI_ShowStatus::getYearsOn() const {
    return m_years_on;
}
void OAI_ShowStatus::setYearsOn(const QString &years_on) {
    m_years_on = years_on;
    m_years_on_isSet = true;
}

bool OAI_ShowStatus::is_years_on_Set() const{
    return m_years_on_isSet;
}

bool OAI_ShowStatus::is_years_on_Valid() const{
    return m_years_on_isValid;
}

QString OAI_ShowStatus::getImdbId() const {
    return m_imdb_id;
}
void OAI_ShowStatus::setImdbId(const QString &imdb_id) {
    m_imdb_id = imdb_id;
    m_imdb_id_isSet = true;
}

bool OAI_ShowStatus::is_imdb_id_Set() const{
    return m_imdb_id_isSet;
}

bool OAI_ShowStatus::is_imdb_id_Valid() const{
    return m_imdb_id_isValid;
}

QString OAI_ShowStatus::getStatus() const {
    return m_status;
}
void OAI_ShowStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_ShowStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_ShowStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI_ShowStatus::getTvdbId() const {
    return m_tvdb_id;
}
void OAI_ShowStatus::setTvdbId(const QString &tvdb_id) {
    m_tvdb_id = tvdb_id;
    m_tvdb_id_isSet = true;
}

bool OAI_ShowStatus::is_tvdb_id_Set() const{
    return m_tvdb_id_isSet;
}

bool OAI_ShowStatus::is_tvdb_id_Valid() const{
    return m_tvdb_id_isValid;
}

bool OAI_ShowStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enddate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_years_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tvdb_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_ShowStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
