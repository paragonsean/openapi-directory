/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_Awards.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_Awards::OAI_Awards(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_Awards::OAI_Awards() {
    this->initializeModel();
}

OAI_Awards::~OAI_Awards() {}

void OAI_Awards::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_nominee_isSet = false;
    m_nominee_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_winner_isSet = false;
    m_winner_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAI_Awards::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_Awards::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_nominee_isValid = ::OpenAPI::fromJsonValue(m_nominee, json[QString("Nominee")]);
    m_nominee_isSet = !json[QString("Nominee")].isNull() && m_nominee_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_winner_isValid = ::OpenAPI::fromJsonValue(m_winner, json[QString("Winner")]);
    m_winner_isSet = !json[QString("Winner")].isNull() && m_winner_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;
}

QString OAI_Awards::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_Awards::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_nominee_isSet) {
        obj.insert(QString("Nominee"), ::OpenAPI::toJsonValue(m_nominee));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_winner_isSet) {
        obj.insert(QString("Winner"), ::OpenAPI::toJsonValue(m_winner));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAI_Awards::getCategory() const {
    return m_category;
}
void OAI_Awards::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAI_Awards::is_category_Set() const{
    return m_category_isSet;
}

bool OAI_Awards::is_category_Valid() const{
    return m_category_isValid;
}

QString OAI_Awards::getNominee() const {
    return m_nominee;
}
void OAI_Awards::setNominee(const QString &nominee) {
    m_nominee = nominee;
    m_nominee_isSet = true;
}

bool OAI_Awards::is_nominee_Set() const{
    return m_nominee_isSet;
}

bool OAI_Awards::is_nominee_Valid() const{
    return m_nominee_isValid;
}

QString OAI_Awards::getType() const {
    return m_type;
}
void OAI_Awards::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAI_Awards::is_type_Set() const{
    return m_type_isSet;
}

bool OAI_Awards::is_type_Valid() const{
    return m_type_isValid;
}

QString OAI_Awards::getWinner() const {
    return m_winner;
}
void OAI_Awards::setWinner(const QString &winner) {
    m_winner = winner;
    m_winner_isSet = true;
}

bool OAI_Awards::is_winner_Set() const{
    return m_winner_isSet;
}

bool OAI_Awards::is_winner_Valid() const{
    return m_winner_isValid;
}

QString OAI_Awards::getYear() const {
    return m_year;
}
void OAI_Awards::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAI_Awards::is_year_Set() const{
    return m_year_isSet;
}

bool OAI_Awards::is_year_Valid() const{
    return m_year_isValid;
}

bool OAI_Awards::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nominee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_Awards::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
