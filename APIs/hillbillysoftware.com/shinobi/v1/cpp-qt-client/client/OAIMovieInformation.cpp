/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMovieInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMovieInformation::OAIMovieInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMovieInformation::OAIMovieInformation() {
    this->initializeModel();
}

OAIMovieInformation::~OAIMovieInformation() {}

void OAIMovieInformation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_imdb_id_isSet = false;
    m_imdb_id_isValid = false;

    m_release_year_isSet = false;
    m_release_year_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_synopsis_isSet = false;
    m_synopsis_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIMovieInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMovieInformation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_imdb_id_isValid = ::OpenAPI::fromJsonValue(m_imdb_id, json[QString("ImdbID")]);
    m_imdb_id_isSet = !json[QString("ImdbID")].isNull() && m_imdb_id_isValid;

    m_release_year_isValid = ::OpenAPI::fromJsonValue(m_release_year, json[QString("ReleaseYear")]);
    m_release_year_isSet = !json[QString("ReleaseYear")].isNull() && m_release_year_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("Runtime")]);
    m_runtime_isSet = !json[QString("Runtime")].isNull() && m_runtime_isValid;

    m_synopsis_isValid = ::OpenAPI::fromJsonValue(m_synopsis, json[QString("Synopsis")]);
    m_synopsis_isSet = !json[QString("Synopsis")].isNull() && m_synopsis_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIMovieInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMovieInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_imdb_id_isSet) {
        obj.insert(QString("ImdbID"), ::OpenAPI::toJsonValue(m_imdb_id));
    }
    if (m_release_year_isSet) {
        obj.insert(QString("ReleaseYear"), ::OpenAPI::toJsonValue(m_release_year));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("Runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_synopsis_isSet) {
        obj.insert(QString("Synopsis"), ::OpenAPI::toJsonValue(m_synopsis));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIMovieInformation::getId() const {
    return m_id;
}
void OAIMovieInformation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMovieInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMovieInformation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMovieInformation::getImdbId() const {
    return m_imdb_id;
}
void OAIMovieInformation::setImdbId(const QString &imdb_id) {
    m_imdb_id = imdb_id;
    m_imdb_id_isSet = true;
}

bool OAIMovieInformation::is_imdb_id_Set() const{
    return m_imdb_id_isSet;
}

bool OAIMovieInformation::is_imdb_id_Valid() const{
    return m_imdb_id_isValid;
}

QString OAIMovieInformation::getReleaseYear() const {
    return m_release_year;
}
void OAIMovieInformation::setReleaseYear(const QString &release_year) {
    m_release_year = release_year;
    m_release_year_isSet = true;
}

bool OAIMovieInformation::is_release_year_Set() const{
    return m_release_year_isSet;
}

bool OAIMovieInformation::is_release_year_Valid() const{
    return m_release_year_isValid;
}

QString OAIMovieInformation::getRuntime() const {
    return m_runtime;
}
void OAIMovieInformation::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIMovieInformation::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIMovieInformation::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QString OAIMovieInformation::getSynopsis() const {
    return m_synopsis;
}
void OAIMovieInformation::setSynopsis(const QString &synopsis) {
    m_synopsis = synopsis;
    m_synopsis_isSet = true;
}

bool OAIMovieInformation::is_synopsis_Set() const{
    return m_synopsis_isSet;
}

bool OAIMovieInformation::is_synopsis_Valid() const{
    return m_synopsis_isValid;
}

QString OAIMovieInformation::getTitle() const {
    return m_title;
}
void OAIMovieInformation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMovieInformation::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMovieInformation::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIMovieInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imdb_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMovieInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
