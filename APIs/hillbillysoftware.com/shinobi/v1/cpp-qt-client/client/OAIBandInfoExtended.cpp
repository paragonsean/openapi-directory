/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBandInfoExtended.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBandInfoExtended::OAIBandInfoExtended(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBandInfoExtended::OAIBandInfoExtended() {
    this->initializeModel();
}

OAIBandInfoExtended::~OAIBandInfoExtended() {}

void OAIBandInfoExtended::initializeModel() {

    m_albums_isSet = false;
    m_albums_isValid = false;

    m_artist_id_isSet = false;
    m_artist_id_isValid = false;

    m_banner_isSet = false;
    m_banner_isValid = false;

    m_biography_isSet = false;
    m_biography_isValid = false;

    m_disbanded_year_isSet = false;
    m_disbanded_year_isValid = false;

    m_formation_year_isSet = false;
    m_formation_year_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_music_brainz_id_isSet = false;
    m_music_brainz_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_social_media_isSet = false;
    m_social_media_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_web_site_isSet = false;
    m_web_site_isValid = false;
}

void OAIBandInfoExtended::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBandInfoExtended::fromJsonObject(QJsonObject json) {

    m_albums_isValid = ::OpenAPI::fromJsonValue(m_albums, json[QString("Albums")]);
    m_albums_isSet = !json[QString("Albums")].isNull() && m_albums_isValid;

    m_artist_id_isValid = ::OpenAPI::fromJsonValue(m_artist_id, json[QString("ArtistID")]);
    m_artist_id_isSet = !json[QString("ArtistID")].isNull() && m_artist_id_isValid;

    m_banner_isValid = ::OpenAPI::fromJsonValue(m_banner, json[QString("Banner")]);
    m_banner_isSet = !json[QString("Banner")].isNull() && m_banner_isValid;

    m_biography_isValid = ::OpenAPI::fromJsonValue(m_biography, json[QString("Biography")]);
    m_biography_isSet = !json[QString("Biography")].isNull() && m_biography_isValid;

    m_disbanded_year_isValid = ::OpenAPI::fromJsonValue(m_disbanded_year, json[QString("DisbandedYear")]);
    m_disbanded_year_isSet = !json[QString("DisbandedYear")].isNull() && m_disbanded_year_isValid;

    m_formation_year_isValid = ::OpenAPI::fromJsonValue(m_formation_year, json[QString("FormationYear")]);
    m_formation_year_isSet = !json[QString("FormationYear")].isNull() && m_formation_year_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("Genre")]);
    m_genre_isSet = !json[QString("Genre")].isNull() && m_genre_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("Logo")]);
    m_logo_isSet = !json[QString("Logo")].isNull() && m_logo_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("Members")]);
    m_members_isSet = !json[QString("Members")].isNull() && m_members_isValid;

    m_music_brainz_id_isValid = ::OpenAPI::fromJsonValue(m_music_brainz_id, json[QString("MusicBrainzID")]);
    m_music_brainz_id_isSet = !json[QString("MusicBrainzID")].isNull() && m_music_brainz_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_social_media_isValid = ::OpenAPI::fromJsonValue(m_social_media, json[QString("SocialMedia")]);
    m_social_media_isSet = !json[QString("SocialMedia")].isNull() && m_social_media_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("Videos")]);
    m_videos_isSet = !json[QString("Videos")].isNull() && m_videos_isValid;

    m_web_site_isValid = ::OpenAPI::fromJsonValue(m_web_site, json[QString("WebSite")]);
    m_web_site_isSet = !json[QString("WebSite")].isNull() && m_web_site_isValid;
}

QString OAIBandInfoExtended::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBandInfoExtended::asJsonObject() const {
    QJsonObject obj;
    if (m_albums.size() > 0) {
        obj.insert(QString("Albums"), ::OpenAPI::toJsonValue(m_albums));
    }
    if (m_artist_id_isSet) {
        obj.insert(QString("ArtistID"), ::OpenAPI::toJsonValue(m_artist_id));
    }
    if (m_banner_isSet) {
        obj.insert(QString("Banner"), ::OpenAPI::toJsonValue(m_banner));
    }
    if (m_biography_isSet) {
        obj.insert(QString("Biography"), ::OpenAPI::toJsonValue(m_biography));
    }
    if (m_disbanded_year_isSet) {
        obj.insert(QString("DisbandedYear"), ::OpenAPI::toJsonValue(m_disbanded_year));
    }
    if (m_formation_year_isSet) {
        obj.insert(QString("FormationYear"), ::OpenAPI::toJsonValue(m_formation_year));
    }
    if (m_genre_isSet) {
        obj.insert(QString("Genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_logo_isSet) {
        obj.insert(QString("Logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_members_isSet) {
        obj.insert(QString("Members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_music_brainz_id_isSet) {
        obj.insert(QString("MusicBrainzID"), ::OpenAPI::toJsonValue(m_music_brainz_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_social_media_isSet) {
        obj.insert(QString("SocialMedia"), ::OpenAPI::toJsonValue(m_social_media));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("Videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_web_site_isSet) {
        obj.insert(QString("WebSite"), ::OpenAPI::toJsonValue(m_web_site));
    }
    return obj;
}

QList<OAIBandAlbums> OAIBandInfoExtended::getAlbums() const {
    return m_albums;
}
void OAIBandInfoExtended::setAlbums(const QList<OAIBandAlbums> &albums) {
    m_albums = albums;
    m_albums_isSet = true;
}

bool OAIBandInfoExtended::is_albums_Set() const{
    return m_albums_isSet;
}

bool OAIBandInfoExtended::is_albums_Valid() const{
    return m_albums_isValid;
}

QString OAIBandInfoExtended::getArtistId() const {
    return m_artist_id;
}
void OAIBandInfoExtended::setArtistId(const QString &artist_id) {
    m_artist_id = artist_id;
    m_artist_id_isSet = true;
}

bool OAIBandInfoExtended::is_artist_id_Set() const{
    return m_artist_id_isSet;
}

bool OAIBandInfoExtended::is_artist_id_Valid() const{
    return m_artist_id_isValid;
}

QString OAIBandInfoExtended::getBanner() const {
    return m_banner;
}
void OAIBandInfoExtended::setBanner(const QString &banner) {
    m_banner = banner;
    m_banner_isSet = true;
}

bool OAIBandInfoExtended::is_banner_Set() const{
    return m_banner_isSet;
}

bool OAIBandInfoExtended::is_banner_Valid() const{
    return m_banner_isValid;
}

QString OAIBandInfoExtended::getBiography() const {
    return m_biography;
}
void OAIBandInfoExtended::setBiography(const QString &biography) {
    m_biography = biography;
    m_biography_isSet = true;
}

bool OAIBandInfoExtended::is_biography_Set() const{
    return m_biography_isSet;
}

bool OAIBandInfoExtended::is_biography_Valid() const{
    return m_biography_isValid;
}

QString OAIBandInfoExtended::getDisbandedYear() const {
    return m_disbanded_year;
}
void OAIBandInfoExtended::setDisbandedYear(const QString &disbanded_year) {
    m_disbanded_year = disbanded_year;
    m_disbanded_year_isSet = true;
}

bool OAIBandInfoExtended::is_disbanded_year_Set() const{
    return m_disbanded_year_isSet;
}

bool OAIBandInfoExtended::is_disbanded_year_Valid() const{
    return m_disbanded_year_isValid;
}

QString OAIBandInfoExtended::getFormationYear() const {
    return m_formation_year;
}
void OAIBandInfoExtended::setFormationYear(const QString &formation_year) {
    m_formation_year = formation_year;
    m_formation_year_isSet = true;
}

bool OAIBandInfoExtended::is_formation_year_Set() const{
    return m_formation_year_isSet;
}

bool OAIBandInfoExtended::is_formation_year_Valid() const{
    return m_formation_year_isValid;
}

QString OAIBandInfoExtended::getGenre() const {
    return m_genre;
}
void OAIBandInfoExtended::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIBandInfoExtended::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIBandInfoExtended::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAIBandInfoExtended::getLogo() const {
    return m_logo;
}
void OAIBandInfoExtended::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIBandInfoExtended::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIBandInfoExtended::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIBandInfoExtended::getMembers() const {
    return m_members;
}
void OAIBandInfoExtended::setMembers(const QString &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIBandInfoExtended::is_members_Set() const{
    return m_members_isSet;
}

bool OAIBandInfoExtended::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIBandInfoExtended::getMusicBrainzId() const {
    return m_music_brainz_id;
}
void OAIBandInfoExtended::setMusicBrainzId(const QString &music_brainz_id) {
    m_music_brainz_id = music_brainz_id;
    m_music_brainz_id_isSet = true;
}

bool OAIBandInfoExtended::is_music_brainz_id_Set() const{
    return m_music_brainz_id_isSet;
}

bool OAIBandInfoExtended::is_music_brainz_id_Valid() const{
    return m_music_brainz_id_isValid;
}

QString OAIBandInfoExtended::getName() const {
    return m_name;
}
void OAIBandInfoExtended::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBandInfoExtended::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBandInfoExtended::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBandInfoExtended::getSocialMedia() const {
    return m_social_media;
}
void OAIBandInfoExtended::setSocialMedia(const QString &social_media) {
    m_social_media = social_media;
    m_social_media_isSet = true;
}

bool OAIBandInfoExtended::is_social_media_Set() const{
    return m_social_media_isSet;
}

bool OAIBandInfoExtended::is_social_media_Valid() const{
    return m_social_media_isValid;
}

QList<OAIMusicVideo> OAIBandInfoExtended::getVideos() const {
    return m_videos;
}
void OAIBandInfoExtended::setVideos(const QList<OAIMusicVideo> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIBandInfoExtended::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIBandInfoExtended::is_videos_Valid() const{
    return m_videos_isValid;
}

QString OAIBandInfoExtended::getWebSite() const {
    return m_web_site;
}
void OAIBandInfoExtended::setWebSite(const QString &web_site) {
    m_web_site = web_site;
    m_web_site_isSet = true;
}

bool OAIBandInfoExtended::is_web_site_Set() const{
    return m_web_site_isSet;
}

bool OAIBandInfoExtended::is_web_site_Valid() const{
    return m_web_site_isValid;
}

bool OAIBandInfoExtended::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_albums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_biography_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbanded_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formation_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_music_brainz_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_media_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_site_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBandInfoExtended::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
