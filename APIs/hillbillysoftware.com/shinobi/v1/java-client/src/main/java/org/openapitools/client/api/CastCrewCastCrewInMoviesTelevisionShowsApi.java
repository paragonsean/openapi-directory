/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Actor;
import org.openapitools.client.model.ActorPost;
import org.openapitools.client.model.Crew;
import org.openapitools.client.model.PostResult;
import org.openapitools.client.model.TVShowActor;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CastCrewCastCrewInMoviesTelevisionShowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CastCrewCastCrewInMoviesTelevisionShowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CastCrewCastCrewInMoviesTelevisionShowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actorGet
     * @param accesstoken  (required)
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Actors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actorGetCall(String accesstoken, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Actors/Search/{accesstoken}/{Query}"
            .replace("{" + "accesstoken" + "}", localVarApiClient.escapeString(accesstoken.toString()))
            .replace("{" + "Query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actorGetValidateBeforeCall(String accesstoken, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accesstoken' is set
        if (accesstoken == null) {
            throw new ApiException("Missing the required parameter 'accesstoken' when calling actorGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling actorGet(Async)");
        }

        return actorGetCall(accesstoken, query, _callback);

    }

    /**
     * Returns data on queried actor/actress. Result set limited to 5 records
     * 
     * @param accesstoken  (required)
     * @param query  (required)
     * @return List&lt;Actor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Actors </td><td>  -  </td></tr>
     </table>
     */
    public List<Actor> actorGet(String accesstoken, String query) throws ApiException {
        ApiResponse<List<Actor>> localVarResp = actorGetWithHttpInfo(accesstoken, query);
        return localVarResp.getData();
    }

    /**
     * Returns data on queried actor/actress. Result set limited to 5 records
     * 
     * @param accesstoken  (required)
     * @param query  (required)
     * @return ApiResponse&lt;List&lt;Actor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Actors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Actor>> actorGetWithHttpInfo(String accesstoken, String query) throws ApiException {
        okhttp3.Call localVarCall = actorGetValidateBeforeCall(accesstoken, query, null);
        Type localVarReturnType = new TypeToken<List<Actor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns data on queried actor/actress. Result set limited to 5 records (asynchronously)
     * 
     * @param accesstoken  (required)
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Actors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actorGetAsync(String accesstoken, String query, final ApiCallback<List<Actor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actorGetValidateBeforeCall(accesstoken, query, _callback);
        Type localVarReturnType = new TypeToken<List<Actor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actorInShowsGet
     * @param accessToken  (required)
     * @param actor Part of, or full name of actor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actorInShowsGetCall(String accessToken, String actor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Cast/ActorBySearch/{AccessToken}/{Actor}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Actor" + "}", localVarApiClient.escapeString(actor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actorInShowsGetValidateBeforeCall(String accessToken, String actor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling actorInShowsGet(Async)");
        }

        // verify the required parameter 'actor' is set
        if (actor == null) {
            throw new ApiException("Missing the required parameter 'actor' when calling actorInShowsGet(Async)");
        }

        return actorInShowsGetCall(accessToken, actor, _callback);

    }

    /**
     * Returns all shows queried actor/actress is or has been in
     * 
     * @param accessToken  (required)
     * @param actor Part of, or full name of actor (required)
     * @return List&lt;TVShowActor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public List<TVShowActor> actorInShowsGet(String accessToken, String actor) throws ApiException {
        ApiResponse<List<TVShowActor>> localVarResp = actorInShowsGetWithHttpInfo(accessToken, actor);
        return localVarResp.getData();
    }

    /**
     * Returns all shows queried actor/actress is or has been in
     * 
     * @param accessToken  (required)
     * @param actor Part of, or full name of actor (required)
     * @return ApiResponse&lt;List&lt;TVShowActor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TVShowActor>> actorInShowsGetWithHttpInfo(String accessToken, String actor) throws ApiException {
        okhttp3.Call localVarCall = actorInShowsGetValidateBeforeCall(accessToken, actor, null);
        Type localVarReturnType = new TypeToken<List<TVShowActor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all shows queried actor/actress is or has been in (asynchronously)
     * 
     * @param accessToken  (required)
     * @param actor Part of, or full name of actor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actorInShowsGetAsync(String accessToken, String actor, final ApiCallback<List<TVShowActor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actorInShowsGetValidateBeforeCall(accessToken, actor, _callback);
        Type localVarReturnType = new TypeToken<List<TVShowActor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actorsInTVShowGet
     * @param accesstoken  (required)
     * @param showName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actorsInTVShowGetCall(String accesstoken, String showName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Cast/ByTVShow/{accesstoken}/{ShowName}"
            .replace("{" + "accesstoken" + "}", localVarApiClient.escapeString(accesstoken.toString()))
            .replace("{" + "ShowName" + "}", localVarApiClient.escapeString(showName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actorsInTVShowGetValidateBeforeCall(String accesstoken, String showName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accesstoken' is set
        if (accesstoken == null) {
            throw new ApiException("Missing the required parameter 'accesstoken' when calling actorsInTVShowGet(Async)");
        }

        // verify the required parameter 'showName' is set
        if (showName == null) {
            throw new ApiException("Missing the required parameter 'showName' when calling actorsInTVShowGet(Async)");
        }

        return actorsInTVShowGetCall(accesstoken, showName, _callback);

    }

    /**
     * Returns all actors in queried tvshow
     * 
     * @param accesstoken  (required)
     * @param showName  (required)
     * @return List&lt;TVShowActor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public List<TVShowActor> actorsInTVShowGet(String accesstoken, String showName) throws ApiException {
        ApiResponse<List<TVShowActor>> localVarResp = actorsInTVShowGetWithHttpInfo(accesstoken, showName);
        return localVarResp.getData();
    }

    /**
     * Returns all actors in queried tvshow
     * 
     * @param accesstoken  (required)
     * @param showName  (required)
     * @return ApiResponse&lt;List&lt;TVShowActor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TVShowActor>> actorsInTVShowGetWithHttpInfo(String accesstoken, String showName) throws ApiException {
        okhttp3.Call localVarCall = actorsInTVShowGetValidateBeforeCall(accesstoken, showName, null);
        Type localVarReturnType = new TypeToken<List<TVShowActor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all actors in queried tvshow (asynchronously)
     * 
     * @param accesstoken  (required)
     * @param showName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of actors in show </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actorsInTVShowGetAsync(String accesstoken, String showName, final ApiCallback<List<TVShowActor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actorsInTVShowGetValidateBeforeCall(accesstoken, showName, _callback);
        Type localVarReturnType = new TypeToken<List<TVShowActor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addActorPost
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addActorPostCall(ActorPost value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/AddActor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addActorPostValidateBeforeCall(ActorPost value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling addActorPost(Async)");
        }

        return addActorPostCall(value, _callback);

    }

    /**
     * Add new actor or actress to database
     * 
     * @param value  (required)
     * @return PostResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public PostResult addActorPost(ActorPost value) throws ApiException {
        ApiResponse<PostResult> localVarResp = addActorPostWithHttpInfo(value);
        return localVarResp.getData();
    }

    /**
     * Add new actor or actress to database
     * 
     * @param value  (required)
     * @return ApiResponse&lt;PostResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostResult> addActorPostWithHttpInfo(ActorPost value) throws ApiException {
        okhttp3.Call localVarCall = addActorPostValidateBeforeCall(value, null);
        Type localVarReturnType = new TypeToken<PostResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new actor or actress to database (asynchronously)
     * 
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addActorPostAsync(ActorPost value, final ApiCallback<PostResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = addActorPostValidateBeforeCall(value, _callback);
        Type localVarReturnType = new TypeToken<PostResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for castByActorGet
     * @param accessToken  (required)
     * @param actor Full name of actor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of shows Actor is appearing in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castByActorGetCall(String accessToken, String actor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Cast/ByActor/{AccessToken}/{Actor}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Actor" + "}", localVarApiClient.escapeString(actor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call castByActorGetValidateBeforeCall(String accessToken, String actor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling castByActorGet(Async)");
        }

        // verify the required parameter 'actor' is set
        if (actor == null) {
            throw new ApiException("Missing the required parameter 'actor' when calling castByActorGet(Async)");
        }

        return castByActorGetCall(accessToken, actor, _callback);

    }

    /**
     * Returns list of show actor is appearing in
     * 
     * @param accessToken  (required)
     * @param actor Full name of actor (required)
     * @return List&lt;TVShowActor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of shows Actor is appearing in </td><td>  -  </td></tr>
     </table>
     */
    public List<TVShowActor> castByActorGet(String accessToken, String actor) throws ApiException {
        ApiResponse<List<TVShowActor>> localVarResp = castByActorGetWithHttpInfo(accessToken, actor);
        return localVarResp.getData();
    }

    /**
     * Returns list of show actor is appearing in
     * 
     * @param accessToken  (required)
     * @param actor Full name of actor (required)
     * @return ApiResponse&lt;List&lt;TVShowActor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of shows Actor is appearing in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TVShowActor>> castByActorGetWithHttpInfo(String accessToken, String actor) throws ApiException {
        okhttp3.Call localVarCall = castByActorGetValidateBeforeCall(accessToken, actor, null);
        Type localVarReturnType = new TypeToken<List<TVShowActor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of show actor is appearing in (asynchronously)
     * 
     * @param accessToken  (required)
     * @param actor Full name of actor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of shows Actor is appearing in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call castByActorGetAsync(String accessToken, String actor, final ApiCallback<List<TVShowActor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = castByActorGetValidateBeforeCall(accessToken, actor, _callback);
        Type localVarReturnType = new TypeToken<List<TVShowActor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crewByIDGet
     * @param accessToken  (required)
     * @param ID IMDBID, TVmazeID, or TVDBID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewByIDGetCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Crew/ByID/{AccessToken}/{ID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crewByIDGetValidateBeforeCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling crewByIDGet(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling crewByIDGet(Async)");
        }

        return crewByIDGetCall(accessToken, ID, _callback);

    }

    /**
     * Get crew list by ID
     * 
     * @param accessToken  (required)
     * @param ID IMDBID, TVmazeID, or TVDBID (required)
     * @return List&lt;Crew&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public List<Crew> crewByIDGet(String accessToken, String ID) throws ApiException {
        ApiResponse<List<Crew>> localVarResp = crewByIDGetWithHttpInfo(accessToken, ID);
        return localVarResp.getData();
    }

    /**
     * Get crew list by ID
     * 
     * @param accessToken  (required)
     * @param ID IMDBID, TVmazeID, or TVDBID (required)
     * @return ApiResponse&lt;List&lt;Crew&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Crew>> crewByIDGetWithHttpInfo(String accessToken, String ID) throws ApiException {
        okhttp3.Call localVarCall = crewByIDGetValidateBeforeCall(accessToken, ID, null);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get crew list by ID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param ID IMDBID, TVmazeID, or TVDBID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewByIDGetAsync(String accessToken, String ID, final ApiCallback<List<Crew>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crewByIDGetValidateBeforeCall(accessToken, ID, _callback);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crewByPersonGet
     * @param accessToken  (required)
     * @param personName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewByPersonGetCall(String accessToken, String personName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Crew/ByPerson/{AccessToken}/{PersonName}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "PersonName" + "}", localVarApiClient.escapeString(personName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crewByPersonGetValidateBeforeCall(String accessToken, String personName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling crewByPersonGet(Async)");
        }

        // verify the required parameter 'personName' is set
        if (personName == null) {
            throw new ApiException("Missing the required parameter 'personName' when calling crewByPersonGet(Async)");
        }

        return crewByPersonGetCall(accessToken, personName, _callback);

    }

    /**
     * Gets list of productions searched person is/was involved in.
     * 
     * @param accessToken  (required)
     * @param personName  (required)
     * @return List&lt;Crew&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public List<Crew> crewByPersonGet(String accessToken, String personName) throws ApiException {
        ApiResponse<List<Crew>> localVarResp = crewByPersonGetWithHttpInfo(accessToken, personName);
        return localVarResp.getData();
    }

    /**
     * Gets list of productions searched person is/was involved in.
     * 
     * @param accessToken  (required)
     * @param personName  (required)
     * @return ApiResponse&lt;List&lt;Crew&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Crew>> crewByPersonGetWithHttpInfo(String accessToken, String personName) throws ApiException {
        okhttp3.Call localVarCall = crewByPersonGetValidateBeforeCall(accessToken, personName, null);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of productions searched person is/was involved in. (asynchronously)
     * 
     * @param accessToken  (required)
     * @param personName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewByPersonGetAsync(String accessToken, String personName, final ApiCallback<List<Crew>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crewByPersonGetValidateBeforeCall(accessToken, personName, _callback);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crewGet
     * @param accessToken  (required)
     * @param phrase Part of, or full showname to search for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewGetCall(String accessToken, String phrase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Crew/Search/{AccessToken}/{Phrase}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Phrase" + "}", localVarApiClient.escapeString(phrase.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crewGetValidateBeforeCall(String accessToken, String phrase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling crewGet(Async)");
        }

        // verify the required parameter 'phrase' is set
        if (phrase == null) {
            throw new ApiException("Missing the required parameter 'phrase' when calling crewGet(Async)");
        }

        return crewGetCall(accessToken, phrase, _callback);

    }

    /**
     * Returns crew for queried show.
     * 
     * @param accessToken  (required)
     * @param phrase Part of, or full showname to search for (required)
     * @return List&lt;Crew&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public List<Crew> crewGet(String accessToken, String phrase) throws ApiException {
        ApiResponse<List<Crew>> localVarResp = crewGetWithHttpInfo(accessToken, phrase);
        return localVarResp.getData();
    }

    /**
     * Returns crew for queried show.
     * 
     * @param accessToken  (required)
     * @param phrase Part of, or full showname to search for (required)
     * @return ApiResponse&lt;List&lt;Crew&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Crew>> crewGetWithHttpInfo(String accessToken, String phrase) throws ApiException {
        okhttp3.Call localVarCall = crewGetValidateBeforeCall(accessToken, phrase, null);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns crew for queried show. (asynchronously)
     * 
     * @param accessToken  (required)
     * @param phrase Part of, or full showname to search for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewGetAsync(String accessToken, String phrase, final ApiCallback<List<Crew>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crewGetValidateBeforeCall(accessToken, phrase, _callback);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crewbyShownameGet
     * @param accessToken  (required)
     * @param showName Full exact showname (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewbyShownameGetCall(String accessToken, String showName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Crew/ByShowName/{AccessToken}/{ShowName}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ShowName" + "}", localVarApiClient.escapeString(showName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crewbyShownameGetValidateBeforeCall(String accessToken, String showName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling crewbyShownameGet(Async)");
        }

        // verify the required parameter 'showName' is set
        if (showName == null) {
            throw new ApiException("Missing the required parameter 'showName' when calling crewbyShownameGet(Async)");
        }

        return crewbyShownameGetCall(accessToken, showName, _callback);

    }

    /**
     * Get crew list by showname
     * 
     * @param accessToken  (required)
     * @param showName Full exact showname (required)
     * @return List&lt;Crew&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public List<Crew> crewbyShownameGet(String accessToken, String showName) throws ApiException {
        ApiResponse<List<Crew>> localVarResp = crewbyShownameGetWithHttpInfo(accessToken, showName);
        return localVarResp.getData();
    }

    /**
     * Get crew list by showname
     * 
     * @param accessToken  (required)
     * @param showName Full exact showname (required)
     * @return ApiResponse&lt;List&lt;Crew&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Crew>> crewbyShownameGetWithHttpInfo(String accessToken, String showName) throws ApiException {
        okhttp3.Call localVarCall = crewbyShownameGetValidateBeforeCall(accessToken, showName, null);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get crew list by showname (asynchronously)
     * 
     * @param accessToken  (required)
     * @param showName Full exact showname (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of crew </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crewbyShownameGetAsync(String accessToken, String showName, final ApiCallback<List<Crew>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crewbyShownameGetValidateBeforeCall(accessToken, showName, _callback);
        Type localVarReturnType = new TypeToken<List<Crew>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
