/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BandAlbums
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BandAlbums {
  public static final String SERIALIZED_NAME_ALBUM_ART = "AlbumArt";
  @SerializedName(SERIALIZED_NAME_ALBUM_ART)
  private String albumArt;

  public static final String SERIALIZED_NAME_ALBUM_I_D = "AlbumID";
  @SerializedName(SERIALIZED_NAME_ALBUM_I_D)
  private String albumID;

  public static final String SERIALIZED_NAME_ARTIST_I_D = "ArtistID";
  @SerializedName(SERIALIZED_NAME_ARTIST_I_D)
  private String artistID;

  public static final String SERIALIZED_NAME_BIBLIOGRAPHY = "Bibliography";
  @SerializedName(SERIALIZED_NAME_BIBLIOGRAPHY)
  private String bibliography;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASEYEAR = "Releaseyear";
  @SerializedName(SERIALIZED_NAME_RELEASEYEAR)
  private String releaseyear;

  public BandAlbums() {
  }

  public BandAlbums albumArt(String albumArt) {
    this.albumArt = albumArt;
    return this;
  }

  /**
   * Get albumArt
   * @return albumArt
   */
  @javax.annotation.Nullable
  public String getAlbumArt() {
    return albumArt;
  }

  public void setAlbumArt(String albumArt) {
    this.albumArt = albumArt;
  }


  public BandAlbums albumID(String albumID) {
    this.albumID = albumID;
    return this;
  }

  /**
   * Get albumID
   * @return albumID
   */
  @javax.annotation.Nullable
  public String getAlbumID() {
    return albumID;
  }

  public void setAlbumID(String albumID) {
    this.albumID = albumID;
  }


  public BandAlbums artistID(String artistID) {
    this.artistID = artistID;
    return this;
  }

  /**
   * Get artistID
   * @return artistID
   */
  @javax.annotation.Nullable
  public String getArtistID() {
    return artistID;
  }

  public void setArtistID(String artistID) {
    this.artistID = artistID;
  }


  public BandAlbums bibliography(String bibliography) {
    this.bibliography = bibliography;
    return this;
  }

  /**
   * Get bibliography
   * @return bibliography
   */
  @javax.annotation.Nullable
  public String getBibliography() {
    return bibliography;
  }

  public void setBibliography(String bibliography) {
    this.bibliography = bibliography;
  }


  public BandAlbums label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public BandAlbums name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BandAlbums releaseyear(String releaseyear) {
    this.releaseyear = releaseyear;
    return this;
  }

  /**
   * Get releaseyear
   * @return releaseyear
   */
  @javax.annotation.Nullable
  public String getReleaseyear() {
    return releaseyear;
  }

  public void setReleaseyear(String releaseyear) {
    this.releaseyear = releaseyear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BandAlbums bandAlbums = (BandAlbums) o;
    return Objects.equals(this.albumArt, bandAlbums.albumArt) &&
        Objects.equals(this.albumID, bandAlbums.albumID) &&
        Objects.equals(this.artistID, bandAlbums.artistID) &&
        Objects.equals(this.bibliography, bandAlbums.bibliography) &&
        Objects.equals(this.label, bandAlbums.label) &&
        Objects.equals(this.name, bandAlbums.name) &&
        Objects.equals(this.releaseyear, bandAlbums.releaseyear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumArt, albumID, artistID, bibliography, label, name, releaseyear);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BandAlbums {\n");
    sb.append("    albumArt: ").append(toIndentedString(albumArt)).append("\n");
    sb.append("    albumID: ").append(toIndentedString(albumID)).append("\n");
    sb.append("    artistID: ").append(toIndentedString(artistID)).append("\n");
    sb.append("    bibliography: ").append(toIndentedString(bibliography)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseyear: ").append(toIndentedString(releaseyear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlbumArt");
    openapiFields.add("AlbumID");
    openapiFields.add("ArtistID");
    openapiFields.add("Bibliography");
    openapiFields.add("Label");
    openapiFields.add("Name");
    openapiFields.add("Releaseyear");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BandAlbums
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BandAlbums.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BandAlbums is not found in the empty JSON string", BandAlbums.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BandAlbums.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BandAlbums` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AlbumArt") != null && !jsonObj.get("AlbumArt").isJsonNull()) && !jsonObj.get("AlbumArt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlbumArt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlbumArt").toString()));
      }
      if ((jsonObj.get("AlbumID") != null && !jsonObj.get("AlbumID").isJsonNull()) && !jsonObj.get("AlbumID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlbumID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlbumID").toString()));
      }
      if ((jsonObj.get("ArtistID") != null && !jsonObj.get("ArtistID").isJsonNull()) && !jsonObj.get("ArtistID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ArtistID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ArtistID").toString()));
      }
      if ((jsonObj.get("Bibliography") != null && !jsonObj.get("Bibliography").isJsonNull()) && !jsonObj.get("Bibliography").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Bibliography` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Bibliography").toString()));
      }
      if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Releaseyear") != null && !jsonObj.get("Releaseyear").isJsonNull()) && !jsonObj.get("Releaseyear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Releaseyear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Releaseyear").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BandAlbums.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BandAlbums' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BandAlbums> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BandAlbums.class));

       return (TypeAdapter<T>) new TypeAdapter<BandAlbums>() {
           @Override
           public void write(JsonWriter out, BandAlbums value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BandAlbums read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BandAlbums given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BandAlbums
   * @throws IOException if the JSON string is invalid with respect to BandAlbums
   */
  public static BandAlbums fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BandAlbums.class);
  }

  /**
   * Convert an instance of BandAlbums to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

