/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schedule {
  public static final String SERIALIZED_NAME_AIR_DATE = "AirDate";
  @SerializedName(SERIALIZED_NAME_AIR_DATE)
  private String airDate;

  public static final String SERIALIZED_NAME_AIR_TIME = "AirTime";
  @SerializedName(SERIALIZED_NAME_AIR_TIME)
  private String airTime;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DAYS_ON = "DaysOn";
  @SerializedName(SERIALIZED_NAME_DAYS_ON)
  private String daysOn;

  public static final String SERIALIZED_NAME_EPISODE = "Episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private String episode;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_NETWORK = "Network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PREMIERE_DATE = "PremiereDate";
  @SerializedName(SERIALIZED_NAME_PREMIERE_DATE)
  private String premiereDate;

  public static final String SERIALIZED_NAME_RUNTIME = "Runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private String runtime;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private String season;

  public static final String SERIALIZED_NAME_SHOW_NAME = "ShowName";
  @SerializedName(SERIALIZED_NAME_SHOW_NAME)
  private String showName;

  public static final String SERIALIZED_NAME_SUMMARY = "Summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Schedule() {
  }

  public Schedule airDate(String airDate) {
    this.airDate = airDate;
    return this;
  }

  /**
   * Get airDate
   * @return airDate
   */
  @javax.annotation.Nullable
  public String getAirDate() {
    return airDate;
  }

  public void setAirDate(String airDate) {
    this.airDate = airDate;
  }


  public Schedule airTime(String airTime) {
    this.airTime = airTime;
    return this;
  }

  /**
   * Get airTime
   * @return airTime
   */
  @javax.annotation.Nullable
  public String getAirTime() {
    return airTime;
  }

  public void setAirTime(String airTime) {
    this.airTime = airTime;
  }


  public Schedule country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Schedule daysOn(String daysOn) {
    this.daysOn = daysOn;
    return this;
  }

  /**
   * Get daysOn
   * @return daysOn
   */
  @javax.annotation.Nullable
  public String getDaysOn() {
    return daysOn;
  }

  public void setDaysOn(String daysOn) {
    this.daysOn = daysOn;
  }


  public Schedule episode(String episode) {
    this.episode = episode;
    return this;
  }

  /**
   * Get episode
   * @return episode
   */
  @javax.annotation.Nullable
  public String getEpisode() {
    return episode;
  }

  public void setEpisode(String episode) {
    this.episode = episode;
  }


  public Schedule ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public Schedule image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Schedule network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public Schedule premiereDate(String premiereDate) {
    this.premiereDate = premiereDate;
    return this;
  }

  /**
   * Get premiereDate
   * @return premiereDate
   */
  @javax.annotation.Nullable
  public String getPremiereDate() {
    return premiereDate;
  }

  public void setPremiereDate(String premiereDate) {
    this.premiereDate = premiereDate;
  }


  public Schedule runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }


  public Schedule season(String season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public String getSeason() {
    return season;
  }

  public void setSeason(String season) {
    this.season = season;
  }


  public Schedule showName(String showName) {
    this.showName = showName;
    return this;
  }

  /**
   * Get showName
   * @return showName
   */
  @javax.annotation.Nullable
  public String getShowName() {
    return showName;
  }

  public void setShowName(String showName) {
    this.showName = showName;
  }


  public Schedule summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public Schedule title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule schedule = (Schedule) o;
    return Objects.equals(this.airDate, schedule.airDate) &&
        Objects.equals(this.airTime, schedule.airTime) &&
        Objects.equals(this.country, schedule.country) &&
        Objects.equals(this.daysOn, schedule.daysOn) &&
        Objects.equals(this.episode, schedule.episode) &&
        Objects.equals(this.ID, schedule.ID) &&
        Objects.equals(this.image, schedule.image) &&
        Objects.equals(this.network, schedule.network) &&
        Objects.equals(this.premiereDate, schedule.premiereDate) &&
        Objects.equals(this.runtime, schedule.runtime) &&
        Objects.equals(this.season, schedule.season) &&
        Objects.equals(this.showName, schedule.showName) &&
        Objects.equals(this.summary, schedule.summary) &&
        Objects.equals(this.title, schedule.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airDate, airTime, country, daysOn, episode, ID, image, network, premiereDate, runtime, season, showName, summary, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule {\n");
    sb.append("    airDate: ").append(toIndentedString(airDate)).append("\n");
    sb.append("    airTime: ").append(toIndentedString(airTime)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    daysOn: ").append(toIndentedString(daysOn)).append("\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    premiereDate: ").append(toIndentedString(premiereDate)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    showName: ").append(toIndentedString(showName)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AirDate");
    openapiFields.add("AirTime");
    openapiFields.add("Country");
    openapiFields.add("DaysOn");
    openapiFields.add("Episode");
    openapiFields.add("ID");
    openapiFields.add("Image");
    openapiFields.add("Network");
    openapiFields.add("PremiereDate");
    openapiFields.add("Runtime");
    openapiFields.add("Season");
    openapiFields.add("ShowName");
    openapiFields.add("Summary");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedule is not found in the empty JSON string", Schedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AirDate") != null && !jsonObj.get("AirDate").isJsonNull()) && !jsonObj.get("AirDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AirDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AirDate").toString()));
      }
      if ((jsonObj.get("AirTime") != null && !jsonObj.get("AirTime").isJsonNull()) && !jsonObj.get("AirTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AirTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AirTime").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("DaysOn") != null && !jsonObj.get("DaysOn").isJsonNull()) && !jsonObj.get("DaysOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DaysOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DaysOn").toString()));
      }
      if ((jsonObj.get("Episode") != null && !jsonObj.get("Episode").isJsonNull()) && !jsonObj.get("Episode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Episode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Episode").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("Image") != null && !jsonObj.get("Image").isJsonNull()) && !jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      if ((jsonObj.get("Network") != null && !jsonObj.get("Network").isJsonNull()) && !jsonObj.get("Network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Network").toString()));
      }
      if ((jsonObj.get("PremiereDate") != null && !jsonObj.get("PremiereDate").isJsonNull()) && !jsonObj.get("PremiereDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PremiereDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PremiereDate").toString()));
      }
      if ((jsonObj.get("Runtime") != null && !jsonObj.get("Runtime").isJsonNull()) && !jsonObj.get("Runtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Runtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Runtime").toString()));
      }
      if ((jsonObj.get("Season") != null && !jsonObj.get("Season").isJsonNull()) && !jsonObj.get("Season").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Season` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Season").toString()));
      }
      if ((jsonObj.get("ShowName") != null && !jsonObj.get("ShowName").isJsonNull()) && !jsonObj.get("ShowName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShowName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShowName").toString()));
      }
      if ((jsonObj.get("Summary") != null && !jsonObj.get("Summary").isJsonNull()) && !jsonObj.get("Summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Summary").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedule.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedule>() {
           @Override
           public void write(JsonWriter out, Schedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schedule
   * @throws IOException if the JSON string is invalid with respect to Schedule
   */
  public static Schedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedule.class);
  }

  /**
   * Convert an instance of Schedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

