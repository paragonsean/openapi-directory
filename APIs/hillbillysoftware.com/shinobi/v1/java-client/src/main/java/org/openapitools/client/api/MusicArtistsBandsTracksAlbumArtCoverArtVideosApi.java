/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlbumArt;
import org.openapitools.client.model.AlbumTracks;
import org.openapitools.client.model.ArtistArt;
import org.openapitools.client.model.BandAlbums;
import org.openapitools.client.model.BandInfo;
import org.openapitools.client.model.BandInfoExtended;
import org.openapitools.client.model.CDCoverArt;
import org.openapitools.client.model.Lyric;
import org.openapitools.client.model.MusicVideo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MusicArtistsBandsTracksAlbumArtCoverArtVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MusicArtistsBandsTracksAlbumArtCoverArtVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MusicArtistsBandsTracksAlbumArtCoverArtVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for musiVideosGet
     * @param accessToken  (required)
     * @param artistID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all videos available for this Artist / Band </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musiVideosGetCall(String accessToken, String artistID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Videos/{AccessToken}/{ArtistID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ArtistID" + "}", localVarApiClient.escapeString(artistID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musiVideosGetValidateBeforeCall(String accessToken, String artistID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musiVideosGet(Async)");
        }

        // verify the required parameter 'artistID' is set
        if (artistID == null) {
            throw new ApiException("Missing the required parameter 'artistID' when calling musiVideosGet(Async)");
        }

        return musiVideosGetCall(accessToken, artistID, _callback);

    }

    /**
     * Lists all videos available for this Artist / Band
     * 
     * @param accessToken  (required)
     * @param artistID  (required)
     * @return List&lt;MusicVideo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all videos available for this Artist / Band </td><td>  -  </td></tr>
     </table>
     */
    public List<MusicVideo> musiVideosGet(String accessToken, String artistID) throws ApiException {
        ApiResponse<List<MusicVideo>> localVarResp = musiVideosGetWithHttpInfo(accessToken, artistID);
        return localVarResp.getData();
    }

    /**
     * Lists all videos available for this Artist / Band
     * 
     * @param accessToken  (required)
     * @param artistID  (required)
     * @return ApiResponse&lt;List&lt;MusicVideo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all videos available for this Artist / Band </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MusicVideo>> musiVideosGetWithHttpInfo(String accessToken, String artistID) throws ApiException {
        okhttp3.Call localVarCall = musiVideosGetValidateBeforeCall(accessToken, artistID, null);
        Type localVarReturnType = new TypeToken<List<MusicVideo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all videos available for this Artist / Band (asynchronously)
     * 
     * @param accessToken  (required)
     * @param artistID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all videos available for this Artist / Band </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musiVideosGetAsync(String accessToken, String artistID, final ApiCallback<List<MusicVideo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musiVideosGetValidateBeforeCall(accessToken, artistID, _callback);
        Type localVarReturnType = new TypeToken<List<MusicVideo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicAlbumArtGet
     * @param accessToken  (required)
     * @param albumID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets album art for passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicAlbumArtGetCall(String accessToken, String albumID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Albums/Art/{AccessToken}/{AlbumID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "AlbumID" + "}", localVarApiClient.escapeString(albumID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicAlbumArtGetValidateBeforeCall(String accessToken, String albumID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicAlbumArtGet(Async)");
        }

        // verify the required parameter 'albumID' is set
        if (albumID == null) {
            throw new ApiException("Missing the required parameter 'albumID' when calling musicAlbumArtGet(Async)");
        }

        return musicAlbumArtGetCall(accessToken, albumID, _callback);

    }

    /**
     * Returns Albumart for passed AlbumID
     * 
     * @param accessToken  (required)
     * @param albumID  (required)
     * @return AlbumArt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets album art for passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public AlbumArt musicAlbumArtGet(String accessToken, String albumID) throws ApiException {
        ApiResponse<AlbumArt> localVarResp = musicAlbumArtGetWithHttpInfo(accessToken, albumID);
        return localVarResp.getData();
    }

    /**
     * Returns Albumart for passed AlbumID
     * 
     * @param accessToken  (required)
     * @param albumID  (required)
     * @return ApiResponse&lt;AlbumArt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets album art for passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlbumArt> musicAlbumArtGetWithHttpInfo(String accessToken, String albumID) throws ApiException {
        okhttp3.Call localVarCall = musicAlbumArtGetValidateBeforeCall(accessToken, albumID, null);
        Type localVarReturnType = new TypeToken<AlbumArt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns Albumart for passed AlbumID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param albumID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets album art for passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicAlbumArtGetAsync(String accessToken, String albumID, final ApiCallback<AlbumArt> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicAlbumArtGetValidateBeforeCall(accessToken, albumID, _callback);
        Type localVarReturnType = new TypeToken<AlbumArt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicAlbumsGet
     * @param accessToken  (required)
     * @param artistID ID of artist or band to retrieve albums from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all albums from passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicAlbumsGetCall(String accessToken, String artistID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Albums/{AccessToken}/{ArtistID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ArtistID" + "}", localVarApiClient.escapeString(artistID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicAlbumsGetValidateBeforeCall(String accessToken, String artistID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicAlbumsGet(Async)");
        }

        // verify the required parameter 'artistID' is set
        if (artistID == null) {
            throw new ApiException("Missing the required parameter 'artistID' when calling musicAlbumsGet(Async)");
        }

        return musicAlbumsGetCall(accessToken, artistID, _callback);

    }

    /**
     * Get albums from passed ArtistID
     * 
     * @param accessToken  (required)
     * @param artistID ID of artist or band to retrieve albums from (required)
     * @return List&lt;BandAlbums&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all albums from passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public List<BandAlbums> musicAlbumsGet(String accessToken, String artistID) throws ApiException {
        ApiResponse<List<BandAlbums>> localVarResp = musicAlbumsGetWithHttpInfo(accessToken, artistID);
        return localVarResp.getData();
    }

    /**
     * Get albums from passed ArtistID
     * 
     * @param accessToken  (required)
     * @param artistID ID of artist or band to retrieve albums from (required)
     * @return ApiResponse&lt;List&lt;BandAlbums&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all albums from passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BandAlbums>> musicAlbumsGetWithHttpInfo(String accessToken, String artistID) throws ApiException {
        okhttp3.Call localVarCall = musicAlbumsGetValidateBeforeCall(accessToken, artistID, null);
        Type localVarReturnType = new TypeToken<List<BandAlbums>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get albums from passed ArtistID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param artistID ID of artist or band to retrieve albums from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all albums from passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicAlbumsGetAsync(String accessToken, String artistID, final ApiCallback<List<BandAlbums>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicAlbumsGetValidateBeforeCall(accessToken, artistID, _callback);
        Type localVarReturnType = new TypeToken<List<BandAlbums>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicArtistExtendedGet
     * @param accessToken  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extended Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicArtistExtendedGetCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Artist/Extended/{AccessToken}/{Name}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicArtistExtendedGetValidateBeforeCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicArtistExtendedGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling musicArtistExtendedGet(Async)");
        }

        return musicArtistExtendedGetCall(accessToken, name, _callback);

    }

    /**
     * Provides extended information, which includes all known albums and music videos of artist / band
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @return List&lt;BandInfoExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extended Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public List<BandInfoExtended> musicArtistExtendedGet(String accessToken, String name) throws ApiException {
        ApiResponse<List<BandInfoExtended>> localVarResp = musicArtistExtendedGetWithHttpInfo(accessToken, name);
        return localVarResp.getData();
    }

    /**
     * Provides extended information, which includes all known albums and music videos of artist / band
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @return ApiResponse&lt;List&lt;BandInfoExtended&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extended Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BandInfoExtended>> musicArtistExtendedGetWithHttpInfo(String accessToken, String name) throws ApiException {
        okhttp3.Call localVarCall = musicArtistExtendedGetValidateBeforeCall(accessToken, name, null);
        Type localVarReturnType = new TypeToken<List<BandInfoExtended>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provides extended information, which includes all known albums and music videos of artist / band (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extended Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicArtistExtendedGetAsync(String accessToken, String name, final ApiCallback<List<BandInfoExtended>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicArtistExtendedGetValidateBeforeCall(accessToken, name, _callback);
        Type localVarReturnType = new TypeToken<List<BandInfoExtended>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicByMusicBrainzGet
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist based on MusicBrainzID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicByMusicBrainzGetCall(String accessToken, String MBID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Albums/MusicBrainzID/{AccessToken}/{MBID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "MBID" + "}", localVarApiClient.escapeString(MBID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicByMusicBrainzGetValidateBeforeCall(String accessToken, String MBID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicByMusicBrainzGet(Async)");
        }

        // verify the required parameter 'MBID' is set
        if (MBID == null) {
            throw new ApiException("Missing the required parameter 'MBID' when calling musicByMusicBrainzGet(Async)");
        }

        return musicByMusicBrainzGetCall(accessToken, MBID, _callback);

    }

    /**
     * Get Artist / Band information on MusicBrainzID
     * 
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @return List&lt;BandInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist based on MusicBrainzID </td><td>  -  </td></tr>
     </table>
     */
    public List<BandInfo> musicByMusicBrainzGet(String accessToken, String MBID) throws ApiException {
        ApiResponse<List<BandInfo>> localVarResp = musicByMusicBrainzGetWithHttpInfo(accessToken, MBID);
        return localVarResp.getData();
    }

    /**
     * Get Artist / Band information on MusicBrainzID
     * 
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @return ApiResponse&lt;List&lt;BandInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist based on MusicBrainzID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BandInfo>> musicByMusicBrainzGetWithHttpInfo(String accessToken, String MBID) throws ApiException {
        okhttp3.Call localVarCall = musicByMusicBrainzGetValidateBeforeCall(accessToken, MBID, null);
        Type localVarReturnType = new TypeToken<List<BandInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Artist / Band information on MusicBrainzID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist based on MusicBrainzID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicByMusicBrainzGetAsync(String accessToken, String MBID, final ApiCallback<List<BandInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicByMusicBrainzGetValidateBeforeCall(accessToken, MBID, _callback);
        Type localVarReturnType = new TypeToken<List<BandInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicCDCoversGet
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets CD Cover Art for album </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicCDCoversGetCall(String accessToken, String MBID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Albums/CoverArt/{AccessToken}/{MBID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "MBID" + "}", localVarApiClient.escapeString(MBID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicCDCoversGetValidateBeforeCall(String accessToken, String MBID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicCDCoversGet(Async)");
        }

        // verify the required parameter 'MBID' is set
        if (MBID == null) {
            throw new ApiException("Missing the required parameter 'MBID' when calling musicCDCoversGet(Async)");
        }

        return musicCDCoversGetCall(accessToken, MBID, _callback);

    }

    /**
     * Gets CD art for passed MusicBrainzID
     * 
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @return List&lt;CDCoverArt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets CD Cover Art for album </td><td>  -  </td></tr>
     </table>
     */
    public List<CDCoverArt> musicCDCoversGet(String accessToken, String MBID) throws ApiException {
        ApiResponse<List<CDCoverArt>> localVarResp = musicCDCoversGetWithHttpInfo(accessToken, MBID);
        return localVarResp.getData();
    }

    /**
     * Gets CD art for passed MusicBrainzID
     * 
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @return ApiResponse&lt;List&lt;CDCoverArt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets CD Cover Art for album </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CDCoverArt>> musicCDCoversGetWithHttpInfo(String accessToken, String MBID) throws ApiException {
        okhttp3.Call localVarCall = musicCDCoversGetValidateBeforeCall(accessToken, MBID, null);
        Type localVarReturnType = new TypeToken<List<CDCoverArt>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets CD art for passed MusicBrainzID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param MBID MusicBrainzID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets CD Cover Art for album </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicCDCoversGetAsync(String accessToken, String MBID, final ApiCallback<List<CDCoverArt>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicCDCoversGetValidateBeforeCall(accessToken, MBID, _callback);
        Type localVarReturnType = new TypeToken<List<CDCoverArt>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicCoverArtByNameGet
     * @param accessToken  (required)
     * @param name Name of artist or band (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed arist or bandname </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicCoverArtByNameGetCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Artist/Art/Name/{AccessToken}/{Name}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicCoverArtByNameGetValidateBeforeCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicCoverArtByNameGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling musicCoverArtByNameGet(Async)");
        }

        return musicCoverArtByNameGetCall(accessToken, name, _callback);

    }

    /**
     * Retrieves artist / band Banner and logo based on artist or bandname
     * 
     * @param accessToken  (required)
     * @param name Name of artist or band (required)
     * @return ArtistArt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed arist or bandname </td><td>  -  </td></tr>
     </table>
     */
    public ArtistArt musicCoverArtByNameGet(String accessToken, String name) throws ApiException {
        ApiResponse<ArtistArt> localVarResp = musicCoverArtByNameGetWithHttpInfo(accessToken, name);
        return localVarResp.getData();
    }

    /**
     * Retrieves artist / band Banner and logo based on artist or bandname
     * 
     * @param accessToken  (required)
     * @param name Name of artist or band (required)
     * @return ApiResponse&lt;ArtistArt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed arist or bandname </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtistArt> musicCoverArtByNameGetWithHttpInfo(String accessToken, String name) throws ApiException {
        okhttp3.Call localVarCall = musicCoverArtByNameGetValidateBeforeCall(accessToken, name, null);
        Type localVarReturnType = new TypeToken<ArtistArt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves artist / band Banner and logo based on artist or bandname (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name Name of artist or band (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed arist or bandname </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicCoverArtByNameGetAsync(String accessToken, String name, final ApiCallback<ArtistArt> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicCoverArtByNameGetValidateBeforeCall(accessToken, name, _callback);
        Type localVarReturnType = new TypeToken<ArtistArt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicCoverArtGet
     * @param accessToken  (required)
     * @param artistID ArtistID of artist or band (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicCoverArtGetCall(String accessToken, String artistID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Artist/Art/ID/{AccessToken}/{ArtistID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ArtistID" + "}", localVarApiClient.escapeString(artistID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicCoverArtGetValidateBeforeCall(String accessToken, String artistID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicCoverArtGet(Async)");
        }

        // verify the required parameter 'artistID' is set
        if (artistID == null) {
            throw new ApiException("Missing the required parameter 'artistID' when calling musicCoverArtGet(Async)");
        }

        return musicCoverArtGetCall(accessToken, artistID, _callback);

    }

    /**
     * Retrieves artist / band Banner and logo based on ArtistID
     * 
     * @param accessToken  (required)
     * @param artistID ArtistID of artist or band (required)
     * @return ArtistArt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public ArtistArt musicCoverArtGet(String accessToken, String artistID) throws ApiException {
        ApiResponse<ArtistArt> localVarResp = musicCoverArtGetWithHttpInfo(accessToken, artistID);
        return localVarResp.getData();
    }

    /**
     * Retrieves artist / band Banner and logo based on ArtistID
     * 
     * @param accessToken  (required)
     * @param artistID ArtistID of artist or band (required)
     * @return ApiResponse&lt;ArtistArt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtistArt> musicCoverArtGetWithHttpInfo(String accessToken, String artistID) throws ApiException {
        okhttp3.Call localVarCall = musicCoverArtGetValidateBeforeCall(accessToken, artistID, null);
        Type localVarReturnType = new TypeToken<ArtistArt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves artist / band Banner and logo based on ArtistID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param artistID ArtistID of artist or band (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets art for passed ArtistID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicCoverArtGetAsync(String accessToken, String artistID, final ApiCallback<ArtistArt> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicCoverArtGetValidateBeforeCall(accessToken, artistID, _callback);
        Type localVarReturnType = new TypeToken<ArtistArt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicGet
     * @param accessToken  (required)
     * @param name Name (or part) of band or artist name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicGetCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Artist/{AccessToken}/{Name}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicGetValidateBeforeCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling musicGet(Async)");
        }

        return musicGetCall(accessToken, name, _callback);

    }

    /**
     * Get information about passed band name or artist
     * 
     * @param accessToken  (required)
     * @param name Name (or part) of band or artist name (required)
     * @return List&lt;BandInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public List<BandInfo> musicGet(String accessToken, String name) throws ApiException {
        ApiResponse<List<BandInfo>> localVarResp = musicGetWithHttpInfo(accessToken, name);
        return localVarResp.getData();
    }

    /**
     * Get information about passed band name or artist
     * 
     * @param accessToken  (required)
     * @param name Name (or part) of band or artist name (required)
     * @return ApiResponse&lt;List&lt;BandInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BandInfo>> musicGetWithHttpInfo(String accessToken, String name) throws ApiException {
        okhttp3.Call localVarCall = musicGetValidateBeforeCall(accessToken, name, null);
        Type localVarReturnType = new TypeToken<List<BandInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about passed band name or artist (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name Name (or part) of band or artist name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about band / artist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicGetAsync(String accessToken, String name, final ApiCallback<List<BandInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicGetValidateBeforeCall(accessToken, name, _callback);
        Type localVarReturnType = new TypeToken<List<BandInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicLyricsBySongGet
     * @param accessToken  (required)
     * @param song Name or part of song name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested song </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicLyricsBySongGetCall(String accessToken, String song, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Lyrics/BySong/{AccessToken}/{Song}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Song" + "}", localVarApiClient.escapeString(song.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicLyricsBySongGetValidateBeforeCall(String accessToken, String song, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicLyricsBySongGet(Async)");
        }

        // verify the required parameter 'song' is set
        if (song == null) {
            throw new ApiException("Missing the required parameter 'song' when calling musicLyricsBySongGet(Async)");
        }

        return musicLyricsBySongGetCall(accessToken, song, _callback);

    }

    /**
     * Get lyrics on song title
     * 
     * @param accessToken  (required)
     * @param song Name or part of song name (required)
     * @return List&lt;Lyric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested song </td><td>  -  </td></tr>
     </table>
     */
    public List<Lyric> musicLyricsBySongGet(String accessToken, String song) throws ApiException {
        ApiResponse<List<Lyric>> localVarResp = musicLyricsBySongGetWithHttpInfo(accessToken, song);
        return localVarResp.getData();
    }

    /**
     * Get lyrics on song title
     * 
     * @param accessToken  (required)
     * @param song Name or part of song name (required)
     * @return ApiResponse&lt;List&lt;Lyric&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested song </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Lyric>> musicLyricsBySongGetWithHttpInfo(String accessToken, String song) throws ApiException {
        okhttp3.Call localVarCall = musicLyricsBySongGetValidateBeforeCall(accessToken, song, null);
        Type localVarReturnType = new TypeToken<List<Lyric>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lyrics on song title (asynchronously)
     * 
     * @param accessToken  (required)
     * @param song Name or part of song name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested song </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicLyricsBySongGetAsync(String accessToken, String song, final ApiCallback<List<Lyric>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicLyricsBySongGetValidateBeforeCall(accessToken, song, _callback);
        Type localVarReturnType = new TypeToken<List<Lyric>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicLyricsGet
     * @param accessToken  (required)
     * @param name Name (or partial) of band or artist (record set limited to 25) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested artist / band </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicLyricsGetCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Lyrics/ByName/{AccessToken}/{Name}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicLyricsGetValidateBeforeCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicLyricsGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling musicLyricsGet(Async)");
        }

        return musicLyricsGetCall(accessToken, name, _callback);

    }

    /**
     * Get lyrics for band or artist (record set limited to 25)
     * 
     * @param accessToken  (required)
     * @param name Name (or partial) of band or artist (record set limited to 25) (required)
     * @return List&lt;Lyric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested artist / band </td><td>  -  </td></tr>
     </table>
     */
    public List<Lyric> musicLyricsGet(String accessToken, String name) throws ApiException {
        ApiResponse<List<Lyric>> localVarResp = musicLyricsGetWithHttpInfo(accessToken, name);
        return localVarResp.getData();
    }

    /**
     * Get lyrics for band or artist (record set limited to 25)
     * 
     * @param accessToken  (required)
     * @param name Name (or partial) of band or artist (record set limited to 25) (required)
     * @return ApiResponse&lt;List&lt;Lyric&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested artist / band </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Lyric>> musicLyricsGetWithHttpInfo(String accessToken, String name) throws ApiException {
        okhttp3.Call localVarCall = musicLyricsGetValidateBeforeCall(accessToken, name, null);
        Type localVarReturnType = new TypeToken<List<Lyric>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get lyrics for band or artist (record set limited to 25) (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name Name (or partial) of band or artist (record set limited to 25) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested artist / band </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicLyricsGetAsync(String accessToken, String name, final ApiCallback<List<Lyric>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicLyricsGetValidateBeforeCall(accessToken, name, _callback);
        Type localVarReturnType = new TypeToken<List<Lyric>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicLyricsbyAlbumIDGet
     * @param accessToken  (required)
     * @param albumID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested albumID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicLyricsbyAlbumIDGetCall(String accessToken, String albumID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Lyrics/AlbumID/{AccessToken}/{AlbumID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "AlbumID" + "}", localVarApiClient.escapeString(albumID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicLyricsbyAlbumIDGetValidateBeforeCall(String accessToken, String albumID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicLyricsbyAlbumIDGet(Async)");
        }

        // verify the required parameter 'albumID' is set
        if (albumID == null) {
            throw new ApiException("Missing the required parameter 'albumID' when calling musicLyricsbyAlbumIDGet(Async)");
        }

        return musicLyricsbyAlbumIDGetCall(accessToken, albumID, _callback);

    }

    /**
     * Returns all lyrics for requested AlbumID
     * 
     * @param accessToken  (required)
     * @param albumID  (required)
     * @return List&lt;Lyric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested albumID </td><td>  -  </td></tr>
     </table>
     */
    public List<Lyric> musicLyricsbyAlbumIDGet(String accessToken, String albumID) throws ApiException {
        ApiResponse<List<Lyric>> localVarResp = musicLyricsbyAlbumIDGetWithHttpInfo(accessToken, albumID);
        return localVarResp.getData();
    }

    /**
     * Returns all lyrics for requested AlbumID
     * 
     * @param accessToken  (required)
     * @param albumID  (required)
     * @return ApiResponse&lt;List&lt;Lyric&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested albumID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Lyric>> musicLyricsbyAlbumIDGetWithHttpInfo(String accessToken, String albumID) throws ApiException {
        okhttp3.Call localVarCall = musicLyricsbyAlbumIDGetValidateBeforeCall(accessToken, albumID, null);
        Type localVarReturnType = new TypeToken<List<Lyric>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all lyrics for requested AlbumID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param albumID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lyric(s) for requested albumID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicLyricsbyAlbumIDGetAsync(String accessToken, String albumID, final ApiCallback<List<Lyric>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicLyricsbyAlbumIDGetValidateBeforeCall(accessToken, albumID, _callback);
        Type localVarReturnType = new TypeToken<List<Lyric>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for musicTracksGet
     * @param accessToken  (required)
     * @param albumID AlbumID (can be retrieved via album endpoint) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all tracks on album from passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicTracksGetCall(String accessToken, String albumID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Music/Tracks/{AccessToken}/{AlbumID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "AlbumID" + "}", localVarApiClient.escapeString(albumID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call musicTracksGetValidateBeforeCall(String accessToken, String albumID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling musicTracksGet(Async)");
        }

        // verify the required parameter 'albumID' is set
        if (albumID == null) {
            throw new ApiException("Missing the required parameter 'albumID' when calling musicTracksGet(Async)");
        }

        return musicTracksGetCall(accessToken, albumID, _callback);

    }

    /**
     * Get all tracks from requested album
     * 
     * @param accessToken  (required)
     * @param albumID AlbumID (can be retrieved via album endpoint) (required)
     * @return List&lt;AlbumTracks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all tracks on album from passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public List<AlbumTracks> musicTracksGet(String accessToken, String albumID) throws ApiException {
        ApiResponse<List<AlbumTracks>> localVarResp = musicTracksGetWithHttpInfo(accessToken, albumID);
        return localVarResp.getData();
    }

    /**
     * Get all tracks from requested album
     * 
     * @param accessToken  (required)
     * @param albumID AlbumID (can be retrieved via album endpoint) (required)
     * @return ApiResponse&lt;List&lt;AlbumTracks&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all tracks on album from passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AlbumTracks>> musicTracksGetWithHttpInfo(String accessToken, String albumID) throws ApiException {
        okhttp3.Call localVarCall = musicTracksGetValidateBeforeCall(accessToken, albumID, null);
        Type localVarReturnType = new TypeToken<List<AlbumTracks>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all tracks from requested album (asynchronously)
     * 
     * @param accessToken  (required)
     * @param albumID AlbumID (can be retrieved via album endpoint) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lists all tracks on album from passed AlbumID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call musicTracksGetAsync(String accessToken, String albumID, final ApiCallback<List<AlbumTracks>> _callback) throws ApiException {

        okhttp3.Call localVarCall = musicTracksGetValidateBeforeCall(accessToken, albumID, _callback);
        Type localVarReturnType = new TypeToken<List<AlbumTracks>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
