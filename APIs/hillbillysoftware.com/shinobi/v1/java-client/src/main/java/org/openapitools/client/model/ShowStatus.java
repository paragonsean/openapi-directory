/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShowStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShowStatus {
  public static final String SERIALIZED_NAME_ENDDATE = "Enddate";
  @SerializedName(SERIALIZED_NAME_ENDDATE)
  private String enddate;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_YEARS_ON = "YearsOn";
  @SerializedName(SERIALIZED_NAME_YEARS_ON)
  private String yearsOn;

  public static final String SERIALIZED_NAME_IMDB_I_D = "imdbID";
  @SerializedName(SERIALIZED_NAME_IMDB_I_D)
  private String imdbID;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TVDB_I_D = "tvdbID";
  @SerializedName(SERIALIZED_NAME_TVDB_I_D)
  private String tvdbID;

  public ShowStatus() {
  }

  public ShowStatus enddate(String enddate) {
    this.enddate = enddate;
    return this;
  }

  /**
   * Get enddate
   * @return enddate
   */
  @javax.annotation.Nullable
  public String getEnddate() {
    return enddate;
  }

  public void setEnddate(String enddate) {
    this.enddate = enddate;
  }


  public ShowStatus ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public ShowStatus title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ShowStatus yearsOn(String yearsOn) {
    this.yearsOn = yearsOn;
    return this;
  }

  /**
   * Get yearsOn
   * @return yearsOn
   */
  @javax.annotation.Nullable
  public String getYearsOn() {
    return yearsOn;
  }

  public void setYearsOn(String yearsOn) {
    this.yearsOn = yearsOn;
  }


  public ShowStatus imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

  /**
   * Get imdbID
   * @return imdbID
   */
  @javax.annotation.Nullable
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }


  public ShowStatus status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ShowStatus tvdbID(String tvdbID) {
    this.tvdbID = tvdbID;
    return this;
  }

  /**
   * Get tvdbID
   * @return tvdbID
   */
  @javax.annotation.Nullable
  public String getTvdbID() {
    return tvdbID;
  }

  public void setTvdbID(String tvdbID) {
    this.tvdbID = tvdbID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShowStatus showStatus = (ShowStatus) o;
    return Objects.equals(this.enddate, showStatus.enddate) &&
        Objects.equals(this.ID, showStatus.ID) &&
        Objects.equals(this.title, showStatus.title) &&
        Objects.equals(this.yearsOn, showStatus.yearsOn) &&
        Objects.equals(this.imdbID, showStatus.imdbID) &&
        Objects.equals(this.status, showStatus.status) &&
        Objects.equals(this.tvdbID, showStatus.tvdbID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enddate, ID, title, yearsOn, imdbID, status, tvdbID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShowStatus {\n");
    sb.append("    enddate: ").append(toIndentedString(enddate)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    yearsOn: ").append(toIndentedString(yearsOn)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tvdbID: ").append(toIndentedString(tvdbID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enddate");
    openapiFields.add("ID");
    openapiFields.add("Title");
    openapiFields.add("YearsOn");
    openapiFields.add("imdbID");
    openapiFields.add("status");
    openapiFields.add("tvdbID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShowStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShowStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShowStatus is not found in the empty JSON string", ShowStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShowStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShowStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Enddate") != null && !jsonObj.get("Enddate").isJsonNull()) && !jsonObj.get("Enddate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Enddate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Enddate").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("YearsOn") != null && !jsonObj.get("YearsOn").isJsonNull()) && !jsonObj.get("YearsOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YearsOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YearsOn").toString()));
      }
      if ((jsonObj.get("imdbID") != null && !jsonObj.get("imdbID").isJsonNull()) && !jsonObj.get("imdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbID").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tvdbID") != null && !jsonObj.get("tvdbID").isJsonNull()) && !jsonObj.get("tvdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tvdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tvdbID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShowStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShowStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShowStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShowStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ShowStatus>() {
           @Override
           public void write(JsonWriter out, ShowStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShowStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShowStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShowStatus
   * @throws IOException if the JSON string is invalid with respect to ShowStatus
   */
  public static ShowStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShowStatus.class);
  }

  /**
   * Convert an instance of ShowStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

