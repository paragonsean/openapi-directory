/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalIDs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Aliases
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Aliases {
  public static final String SERIALIZED_NAME_AKA = "Aka";
  @SerializedName(SERIALIZED_NAME_AKA)
  private String aka;

  public static final String SERIALIZED_NAME_EXTERNAL_I_DS = "ExternalIDs";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_I_DS)
  private List<ExternalIDs> externalIDs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_NAME = "OriginalName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NAME)
  private String originalName;

  public Aliases() {
  }

  public Aliases aka(String aka) {
    this.aka = aka;
    return this;
  }

  /**
   * Get aka
   * @return aka
   */
  @javax.annotation.Nullable
  public String getAka() {
    return aka;
  }

  public void setAka(String aka) {
    this.aka = aka;
  }


  public Aliases externalIDs(List<ExternalIDs> externalIDs) {
    this.externalIDs = externalIDs;
    return this;
  }

  public Aliases addExternalIDsItem(ExternalIDs externalIDsItem) {
    if (this.externalIDs == null) {
      this.externalIDs = new ArrayList<>();
    }
    this.externalIDs.add(externalIDsItem);
    return this;
  }

  /**
   * Get externalIDs
   * @return externalIDs
   */
  @javax.annotation.Nullable
  public List<ExternalIDs> getExternalIDs() {
    return externalIDs;
  }

  public void setExternalIDs(List<ExternalIDs> externalIDs) {
    this.externalIDs = externalIDs;
  }


  public Aliases name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Aliases originalName(String originalName) {
    this.originalName = originalName;
    return this;
  }

  /**
   * Get originalName
   * @return originalName
   */
  @javax.annotation.Nullable
  public String getOriginalName() {
    return originalName;
  }

  public void setOriginalName(String originalName) {
    this.originalName = originalName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Aliases aliases = (Aliases) o;
    return Objects.equals(this.aka, aliases.aka) &&
        Objects.equals(this.externalIDs, aliases.externalIDs) &&
        Objects.equals(this.name, aliases.name) &&
        Objects.equals(this.originalName, aliases.originalName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aka, externalIDs, name, originalName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Aliases {\n");
    sb.append("    aka: ").append(toIndentedString(aka)).append("\n");
    sb.append("    externalIDs: ").append(toIndentedString(externalIDs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalName: ").append(toIndentedString(originalName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Aka");
    openapiFields.add("ExternalIDs");
    openapiFields.add("Name");
    openapiFields.add("OriginalName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Aliases
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Aliases.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Aliases is not found in the empty JSON string", Aliases.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Aliases.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Aliases` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Aka") != null && !jsonObj.get("Aka").isJsonNull()) && !jsonObj.get("Aka").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Aka` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Aka").toString()));
      }
      if (jsonObj.get("ExternalIDs") != null && !jsonObj.get("ExternalIDs").isJsonNull()) {
        JsonArray jsonArrayexternalIDs = jsonObj.getAsJsonArray("ExternalIDs");
        if (jsonArrayexternalIDs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ExternalIDs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ExternalIDs` to be an array in the JSON string but got `%s`", jsonObj.get("ExternalIDs").toString()));
          }

          // validate the optional field `ExternalIDs` (array)
          for (int i = 0; i < jsonArrayexternalIDs.size(); i++) {
            ExternalIDs.validateJsonElement(jsonArrayexternalIDs.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OriginalName") != null && !jsonObj.get("OriginalName").isJsonNull()) && !jsonObj.get("OriginalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OriginalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OriginalName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Aliases.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Aliases' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Aliases> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Aliases.class));

       return (TypeAdapter<T>) new TypeAdapter<Aliases>() {
           @Override
           public void write(JsonWriter out, Aliases value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Aliases read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Aliases given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Aliases
   * @throws IOException if the JSON string is invalid with respect to Aliases
   */
  public static Aliases fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Aliases.class);
  }

  /**
   * Convert an instance of Aliases to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

