/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CDCoverArt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CDCoverArt {
  public static final String SERIALIZED_NAME_COVER_IMAGE = "CoverImage";
  @SerializedName(SERIALIZED_NAME_COVER_IMAGE)
  private String coverImage;

  public static final String SERIALIZED_NAME_COVER_THUMB_MEDIUM = "CoverThumbMedium";
  @SerializedName(SERIALIZED_NAME_COVER_THUMB_MEDIUM)
  private String coverThumbMedium;

  public static final String SERIALIZED_NAME_COVER_THUMB_SMALL = "CoverThumbSmall";
  @SerializedName(SERIALIZED_NAME_COVER_THUMB_SMALL)
  private String coverThumbSmall;

  public static final String SERIALIZED_NAME_COVER_TYPE = "CoverType";
  @SerializedName(SERIALIZED_NAME_COVER_TYPE)
  private String coverType;

  public static final String SERIALIZED_NAME_MUSIC_BRAINZ_I_D = "MusicBrainzID";
  @SerializedName(SERIALIZED_NAME_MUSIC_BRAINZ_I_D)
  private String musicBrainzID;

  public CDCoverArt() {
  }

  public CDCoverArt coverImage(String coverImage) {
    this.coverImage = coverImage;
    return this;
  }

  /**
   * Get coverImage
   * @return coverImage
   */
  @javax.annotation.Nullable
  public String getCoverImage() {
    return coverImage;
  }

  public void setCoverImage(String coverImage) {
    this.coverImage = coverImage;
  }


  public CDCoverArt coverThumbMedium(String coverThumbMedium) {
    this.coverThumbMedium = coverThumbMedium;
    return this;
  }

  /**
   * Get coverThumbMedium
   * @return coverThumbMedium
   */
  @javax.annotation.Nullable
  public String getCoverThumbMedium() {
    return coverThumbMedium;
  }

  public void setCoverThumbMedium(String coverThumbMedium) {
    this.coverThumbMedium = coverThumbMedium;
  }


  public CDCoverArt coverThumbSmall(String coverThumbSmall) {
    this.coverThumbSmall = coverThumbSmall;
    return this;
  }

  /**
   * Get coverThumbSmall
   * @return coverThumbSmall
   */
  @javax.annotation.Nullable
  public String getCoverThumbSmall() {
    return coverThumbSmall;
  }

  public void setCoverThumbSmall(String coverThumbSmall) {
    this.coverThumbSmall = coverThumbSmall;
  }


  public CDCoverArt coverType(String coverType) {
    this.coverType = coverType;
    return this;
  }

  /**
   * Get coverType
   * @return coverType
   */
  @javax.annotation.Nullable
  public String getCoverType() {
    return coverType;
  }

  public void setCoverType(String coverType) {
    this.coverType = coverType;
  }


  public CDCoverArt musicBrainzID(String musicBrainzID) {
    this.musicBrainzID = musicBrainzID;
    return this;
  }

  /**
   * Get musicBrainzID
   * @return musicBrainzID
   */
  @javax.annotation.Nullable
  public String getMusicBrainzID() {
    return musicBrainzID;
  }

  public void setMusicBrainzID(String musicBrainzID) {
    this.musicBrainzID = musicBrainzID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CDCoverArt cdCoverArt = (CDCoverArt) o;
    return Objects.equals(this.coverImage, cdCoverArt.coverImage) &&
        Objects.equals(this.coverThumbMedium, cdCoverArt.coverThumbMedium) &&
        Objects.equals(this.coverThumbSmall, cdCoverArt.coverThumbSmall) &&
        Objects.equals(this.coverType, cdCoverArt.coverType) &&
        Objects.equals(this.musicBrainzID, cdCoverArt.musicBrainzID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coverImage, coverThumbMedium, coverThumbSmall, coverType, musicBrainzID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CDCoverArt {\n");
    sb.append("    coverImage: ").append(toIndentedString(coverImage)).append("\n");
    sb.append("    coverThumbMedium: ").append(toIndentedString(coverThumbMedium)).append("\n");
    sb.append("    coverThumbSmall: ").append(toIndentedString(coverThumbSmall)).append("\n");
    sb.append("    coverType: ").append(toIndentedString(coverType)).append("\n");
    sb.append("    musicBrainzID: ").append(toIndentedString(musicBrainzID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CoverImage");
    openapiFields.add("CoverThumbMedium");
    openapiFields.add("CoverThumbSmall");
    openapiFields.add("CoverType");
    openapiFields.add("MusicBrainzID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CDCoverArt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CDCoverArt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CDCoverArt is not found in the empty JSON string", CDCoverArt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CDCoverArt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CDCoverArt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CoverImage") != null && !jsonObj.get("CoverImage").isJsonNull()) && !jsonObj.get("CoverImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoverImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoverImage").toString()));
      }
      if ((jsonObj.get("CoverThumbMedium") != null && !jsonObj.get("CoverThumbMedium").isJsonNull()) && !jsonObj.get("CoverThumbMedium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoverThumbMedium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoverThumbMedium").toString()));
      }
      if ((jsonObj.get("CoverThumbSmall") != null && !jsonObj.get("CoverThumbSmall").isJsonNull()) && !jsonObj.get("CoverThumbSmall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoverThumbSmall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoverThumbSmall").toString()));
      }
      if ((jsonObj.get("CoverType") != null && !jsonObj.get("CoverType").isJsonNull()) && !jsonObj.get("CoverType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CoverType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CoverType").toString()));
      }
      if ((jsonObj.get("MusicBrainzID") != null && !jsonObj.get("MusicBrainzID").isJsonNull()) && !jsonObj.get("MusicBrainzID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MusicBrainzID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MusicBrainzID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CDCoverArt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CDCoverArt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CDCoverArt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CDCoverArt.class));

       return (TypeAdapter<T>) new TypeAdapter<CDCoverArt>() {
           @Override
           public void write(JsonWriter out, CDCoverArt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CDCoverArt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CDCoverArt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CDCoverArt
   * @throws IOException if the JSON string is invalid with respect to CDCoverArt
   */
  public static CDCoverArt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CDCoverArt.class);
  }

  /**
   * Convert an instance of CDCoverArt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

