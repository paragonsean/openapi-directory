/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ImdbImages;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesMovieTelevisionShowImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesMovieTelevisionShowImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesMovieTelevisionShowImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for imageSearchGet
     * @param accesstoken  (required)
     * @param query Name or part of name from Movie or Show (required)
     * @param strictmatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSearchGetCall(String accesstoken, String query, Boolean strictmatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Images/Search/{Accesstoken}/{Query}"
            .replace("{" + "Accesstoken" + "}", localVarApiClient.escapeString(accesstoken.toString()))
            .replace("{" + "Query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (strictmatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Strictmatch", strictmatch));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSearchGetValidateBeforeCall(String accesstoken, String query, Boolean strictmatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accesstoken' is set
        if (accesstoken == null) {
            throw new ApiException("Missing the required parameter 'accesstoken' when calling imageSearchGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling imageSearchGet(Async)");
        }

        return imageSearchGetCall(accesstoken, query, strictmatch, _callback);

    }

    /**
     * Get images available for movie/tv show with passed query
     * 
     * @param accesstoken  (required)
     * @param query Name or part of name from Movie or Show (required)
     * @param strictmatch  (optional)
     * @return List&lt;ImdbImages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public List<ImdbImages> imageSearchGet(String accesstoken, String query, Boolean strictmatch) throws ApiException {
        ApiResponse<List<ImdbImages>> localVarResp = imageSearchGetWithHttpInfo(accesstoken, query, strictmatch);
        return localVarResp.getData();
    }

    /**
     * Get images available for movie/tv show with passed query
     * 
     * @param accesstoken  (required)
     * @param query Name or part of name from Movie or Show (required)
     * @param strictmatch  (optional)
     * @return ApiResponse&lt;List&lt;ImdbImages&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImdbImages>> imageSearchGetWithHttpInfo(String accesstoken, String query, Boolean strictmatch) throws ApiException {
        okhttp3.Call localVarCall = imageSearchGetValidateBeforeCall(accesstoken, query, strictmatch, null);
        Type localVarReturnType = new TypeToken<List<ImdbImages>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get images available for movie/tv show with passed query (asynchronously)
     * 
     * @param accesstoken  (required)
     * @param query Name or part of name from Movie or Show (required)
     * @param strictmatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSearchGetAsync(String accesstoken, String query, Boolean strictmatch, final ApiCallback<List<ImdbImages>> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSearchGetValidateBeforeCall(accesstoken, query, strictmatch, _callback);
        Type localVarReturnType = new TypeToken<List<ImdbImages>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesGet
     * @param accessToken  (required)
     * @param imdbID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetCall(String accessToken, String imdbID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Images/ByID/{AccessToken}/{imdbID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "imdbID" + "}", localVarApiClient.escapeString(imdbID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesGetValidateBeforeCall(String accessToken, String imdbID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling imagesGet(Async)");
        }

        // verify the required parameter 'imdbID' is set
        if (imdbID == null) {
            throw new ApiException("Missing the required parameter 'imdbID' when calling imagesGet(Async)");
        }

        return imagesGetCall(accessToken, imdbID, _callback);

    }

    /**
     * Get images available for movie/tv show with passed imdbID
     * 
     * @param accessToken  (required)
     * @param imdbID  (required)
     * @return List&lt;ImdbImages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public List<ImdbImages> imagesGet(String accessToken, String imdbID) throws ApiException {
        ApiResponse<List<ImdbImages>> localVarResp = imagesGetWithHttpInfo(accessToken, imdbID);
        return localVarResp.getData();
    }

    /**
     * Get images available for movie/tv show with passed imdbID
     * 
     * @param accessToken  (required)
     * @param imdbID  (required)
     * @return ApiResponse&lt;List&lt;ImdbImages&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ImdbImages>> imagesGetWithHttpInfo(String accessToken, String imdbID) throws ApiException {
        okhttp3.Call localVarCall = imagesGetValidateBeforeCall(accessToken, imdbID, null);
        Type localVarReturnType = new TypeToken<List<ImdbImages>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get images available for movie/tv show with passed imdbID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param imdbID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesGetAsync(String accessToken, String imdbID, final ApiCallback<List<ImdbImages>> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesGetValidateBeforeCall(accessToken, imdbID, _callback);
        Type localVarReturnType = new TypeToken<List<ImdbImages>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
