/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalIDs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Episode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Episode {
  public static final String SERIALIZED_NAME_AIRDATE = "Airdate";
  @SerializedName(SERIALIZED_NAME_AIRDATE)
  private String airdate;

  public static final String SERIALIZED_NAME_AIRTIME = "Airtime";
  @SerializedName(SERIALIZED_NAME_AIRTIME)
  private String airtime;

  public static final String SERIALIZED_NAME_EPISODE_NO = "EpisodeNo";
  @SerializedName(SERIALIZED_NAME_EPISODE_NO)
  private String episodeNo;

  public static final String SERIALIZED_NAME_EXTERNALS = "Externals";
  @SerializedName(SERIALIZED_NAME_EXTERNALS)
  private List<ExternalIDs> externals = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private String season;

  public static final String SERIALIZED_NAME_SYNOPSIS = "Synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Episode() {
  }

  public Episode airdate(String airdate) {
    this.airdate = airdate;
    return this;
  }

  /**
   * Get airdate
   * @return airdate
   */
  @javax.annotation.Nullable
  public String getAirdate() {
    return airdate;
  }

  public void setAirdate(String airdate) {
    this.airdate = airdate;
  }


  public Episode airtime(String airtime) {
    this.airtime = airtime;
    return this;
  }

  /**
   * Get airtime
   * @return airtime
   */
  @javax.annotation.Nullable
  public String getAirtime() {
    return airtime;
  }

  public void setAirtime(String airtime) {
    this.airtime = airtime;
  }


  public Episode episodeNo(String episodeNo) {
    this.episodeNo = episodeNo;
    return this;
  }

  /**
   * Get episodeNo
   * @return episodeNo
   */
  @javax.annotation.Nullable
  public String getEpisodeNo() {
    return episodeNo;
  }

  public void setEpisodeNo(String episodeNo) {
    this.episodeNo = episodeNo;
  }


  public Episode externals(List<ExternalIDs> externals) {
    this.externals = externals;
    return this;
  }

  public Episode addExternalsItem(ExternalIDs externalsItem) {
    if (this.externals == null) {
      this.externals = new ArrayList<>();
    }
    this.externals.add(externalsItem);
    return this;
  }

  /**
   * Get externals
   * @return externals
   */
  @javax.annotation.Nullable
  public List<ExternalIDs> getExternals() {
    return externals;
  }

  public void setExternals(List<ExternalIDs> externals) {
    this.externals = externals;
  }


  public Episode image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Episode season(String season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public String getSeason() {
    return season;
  }

  public void setSeason(String season) {
    this.season = season;
  }


  public Episode synopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  /**
   * Get synopsis
   * @return synopsis
   */
  @javax.annotation.Nullable
  public String getSynopsis() {
    return synopsis;
  }

  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public Episode title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Episode episode = (Episode) o;
    return Objects.equals(this.airdate, episode.airdate) &&
        Objects.equals(this.airtime, episode.airtime) &&
        Objects.equals(this.episodeNo, episode.episodeNo) &&
        Objects.equals(this.externals, episode.externals) &&
        Objects.equals(this.image, episode.image) &&
        Objects.equals(this.season, episode.season) &&
        Objects.equals(this.synopsis, episode.synopsis) &&
        Objects.equals(this.title, episode.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airdate, airtime, episodeNo, externals, image, season, synopsis, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Episode {\n");
    sb.append("    airdate: ").append(toIndentedString(airdate)).append("\n");
    sb.append("    airtime: ").append(toIndentedString(airtime)).append("\n");
    sb.append("    episodeNo: ").append(toIndentedString(episodeNo)).append("\n");
    sb.append("    externals: ").append(toIndentedString(externals)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Airdate");
    openapiFields.add("Airtime");
    openapiFields.add("EpisodeNo");
    openapiFields.add("Externals");
    openapiFields.add("Image");
    openapiFields.add("Season");
    openapiFields.add("Synopsis");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Episode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Episode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Episode is not found in the empty JSON string", Episode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Episode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Episode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Airdate") != null && !jsonObj.get("Airdate").isJsonNull()) && !jsonObj.get("Airdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Airdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Airdate").toString()));
      }
      if ((jsonObj.get("Airtime") != null && !jsonObj.get("Airtime").isJsonNull()) && !jsonObj.get("Airtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Airtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Airtime").toString()));
      }
      if ((jsonObj.get("EpisodeNo") != null && !jsonObj.get("EpisodeNo").isJsonNull()) && !jsonObj.get("EpisodeNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EpisodeNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EpisodeNo").toString()));
      }
      if (jsonObj.get("Externals") != null && !jsonObj.get("Externals").isJsonNull()) {
        JsonArray jsonArrayexternals = jsonObj.getAsJsonArray("Externals");
        if (jsonArrayexternals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Externals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Externals` to be an array in the JSON string but got `%s`", jsonObj.get("Externals").toString()));
          }

          // validate the optional field `Externals` (array)
          for (int i = 0; i < jsonArrayexternals.size(); i++) {
            ExternalIDs.validateJsonElement(jsonArrayexternals.get(i));
          };
        }
      }
      if ((jsonObj.get("Image") != null && !jsonObj.get("Image").isJsonNull()) && !jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      if ((jsonObj.get("Season") != null && !jsonObj.get("Season").isJsonNull()) && !jsonObj.get("Season").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Season` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Season").toString()));
      }
      if ((jsonObj.get("Synopsis") != null && !jsonObj.get("Synopsis").isJsonNull()) && !jsonObj.get("Synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Synopsis").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Episode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Episode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Episode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Episode.class));

       return (TypeAdapter<T>) new TypeAdapter<Episode>() {
           @Override
           public void write(JsonWriter out, Episode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Episode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Episode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Episode
   * @throws IOException if the JSON string is invalid with respect to Episode
   */
  public static Episode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Episode.class);
  }

  /**
   * Convert an instance of Episode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

