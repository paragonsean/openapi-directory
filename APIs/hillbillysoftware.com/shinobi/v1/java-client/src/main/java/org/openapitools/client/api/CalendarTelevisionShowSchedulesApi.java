/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Country;
import org.openapitools.client.model.Networks;
import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.ShowSeasons;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarTelevisionShowSchedulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalendarTelevisionShowSchedulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarTelevisionShowSchedulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for calendarByShowNameGet
     * @param accessToken  (required)
     * @param name  (required)
     * @param year  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarByShowNameGetCall(String accessToken, String name, String year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/Show/{AccessToken}/{Name}/{Year}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "Year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarByShowNameGetValidateBeforeCall(String accessToken, String name, String year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling calendarByShowNameGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling calendarByShowNameGet(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling calendarByShowNameGet(Async)");
        }

        return calendarByShowNameGetCall(accessToken, name, year, _callback);

    }

    /**
     * Will return show schedule for queried showname and year
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param year  (required)
     * @return List&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public List<Schedule> calendarByShowNameGet(String accessToken, String name, String year) throws ApiException {
        ApiResponse<List<Schedule>> localVarResp = calendarByShowNameGetWithHttpInfo(accessToken, name, year);
        return localVarResp.getData();
    }

    /**
     * Will return show schedule for queried showname and year
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param year  (required)
     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schedule>> calendarByShowNameGetWithHttpInfo(String accessToken, String name, String year) throws ApiException {
        okhttp3.Call localVarCall = calendarByShowNameGetValidateBeforeCall(accessToken, name, year, null);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Will return show schedule for queried showname and year (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param year  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarByShowNameGetAsync(String accessToken, String name, String year, final ApiCallback<List<Schedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarByShowNameGetValidateBeforeCall(accessToken, name, year, _callback);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarCountriesGet
     * @param accessToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarCountriesGetCall(String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/Countries/{AccessToken}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarCountriesGetValidateBeforeCall(String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling calendarCountriesGet(Async)");
        }

        return calendarCountriesGetCall(accessToken, _callback);

    }

    /**
     * Returns list of available countries in calendar database
     * 
     * @param accessToken  (required)
     * @return List&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     </table>
     */
    public List<Country> calendarCountriesGet(String accessToken) throws ApiException {
        ApiResponse<List<Country>> localVarResp = calendarCountriesGetWithHttpInfo(accessToken);
        return localVarResp.getData();
    }

    /**
     * Returns list of available countries in calendar database
     * 
     * @param accessToken  (required)
     * @return ApiResponse&lt;List&lt;Country&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Country>> calendarCountriesGetWithHttpInfo(String accessToken) throws ApiException {
        okhttp3.Call localVarCall = calendarCountriesGetValidateBeforeCall(accessToken, null);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of available countries in calendar database (asynchronously)
     * 
     * @param accessToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of countries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarCountriesGetAsync(String accessToken, final ApiCallback<List<Country>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarCountriesGetValidateBeforeCall(accessToken, _callback);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarNetworksGet
     * @param accessToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarNetworksGetCall(String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/Networks/{AccessToken}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarNetworksGetValidateBeforeCall(String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling calendarNetworksGet(Async)");
        }

        return calendarNetworksGetCall(accessToken, _callback);

    }

    /**
     * Gets a list of available networks
     * 
     * @param accessToken  (required)
     * @return List&lt;Networks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
     </table>
     */
    public List<Networks> calendarNetworksGet(String accessToken) throws ApiException {
        ApiResponse<List<Networks>> localVarResp = calendarNetworksGetWithHttpInfo(accessToken);
        return localVarResp.getData();
    }

    /**
     * Gets a list of available networks
     * 
     * @param accessToken  (required)
     * @return ApiResponse&lt;List&lt;Networks&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Networks>> calendarNetworksGetWithHttpInfo(String accessToken) throws ApiException {
        okhttp3.Call localVarCall = calendarNetworksGetValidateBeforeCall(accessToken, null);
        Type localVarReturnType = new TypeToken<List<Networks>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of available networks (asynchronously)
     * 
     * @param accessToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarNetworksGetAsync(String accessToken, final ApiCallback<List<Networks>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarNetworksGetValidateBeforeCall(accessToken, _callback);
        Type localVarReturnType = new TypeToken<List<Networks>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarShowSeasonsGet
     * @param accessToken  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of years </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarShowSeasonsGetCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/Seasons/{AccessToken}/{Name}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarShowSeasonsGetValidateBeforeCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling calendarShowSeasonsGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling calendarShowSeasonsGet(Async)");
        }

        return calendarShowSeasonsGetCall(accessToken, name, _callback);

    }

    /**
     * Returns list of seasons available in the calendar for show
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @return List&lt;ShowSeasons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of years </td><td>  -  </td></tr>
     </table>
     */
    public List<ShowSeasons> calendarShowSeasonsGet(String accessToken, String name) throws ApiException {
        ApiResponse<List<ShowSeasons>> localVarResp = calendarShowSeasonsGetWithHttpInfo(accessToken, name);
        return localVarResp.getData();
    }

    /**
     * Returns list of seasons available in the calendar for show
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @return ApiResponse&lt;List&lt;ShowSeasons&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of years </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShowSeasons>> calendarShowSeasonsGetWithHttpInfo(String accessToken, String name) throws ApiException {
        okhttp3.Call localVarCall = calendarShowSeasonsGetValidateBeforeCall(accessToken, name, null);
        Type localVarReturnType = new TypeToken<List<ShowSeasons>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns list of seasons available in the calendar for show (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of years </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarShowSeasonsGetAsync(String accessToken, String name, final ApiCallback<List<ShowSeasons>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarShowSeasonsGetValidateBeforeCall(accessToken, name, _callback);
        Type localVarReturnType = new TypeToken<List<ShowSeasons>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarTodayGet
     * @param accessToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarTodayGetCall(String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/Today/{AccessToken}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarTodayGetValidateBeforeCall(String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling calendarTodayGet(Async)");
        }

        return calendarTodayGetCall(accessToken, _callback);

    }

    /**
     * Will return show schedule for today for all countries in database
     * 
     * @param accessToken  (required)
     * @return List&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public List<Schedule> calendarTodayGet(String accessToken) throws ApiException {
        ApiResponse<List<Schedule>> localVarResp = calendarTodayGetWithHttpInfo(accessToken);
        return localVarResp.getData();
    }

    /**
     * Will return show schedule for today for all countries in database
     * 
     * @param accessToken  (required)
     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schedule>> calendarTodayGetWithHttpInfo(String accessToken) throws ApiException {
        okhttp3.Call localVarCall = calendarTodayGetValidateBeforeCall(accessToken, null);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Will return show schedule for today for all countries in database (asynchronously)
     * 
     * @param accessToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarTodayGetAsync(String accessToken, final ApiCallback<List<Schedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarTodayGetValidateBeforeCall(accessToken, _callback);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarbyShownameSeasonGet
     * @param accessToken  (required)
     * @param name  (required)
     * @param season  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarbyShownameSeasonGetCall(String accessToken, String name, String season, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/Show/Season/{AccessToken}/{Name}/{Season}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "Season" + "}", localVarApiClient.escapeString(season.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarbyShownameSeasonGetValidateBeforeCall(String accessToken, String name, String season, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling calendarbyShownameSeasonGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling calendarbyShownameSeasonGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling calendarbyShownameSeasonGet(Async)");
        }

        return calendarbyShownameSeasonGetCall(accessToken, name, season, _callback);

    }

    /**
     * Get Calendar by showname and season
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param season  (required)
     * @return List&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public List<Schedule> calendarbyShownameSeasonGet(String accessToken, String name, String season) throws ApiException {
        ApiResponse<List<Schedule>> localVarResp = calendarbyShownameSeasonGetWithHttpInfo(accessToken, name, season);
        return localVarResp.getData();
    }

    /**
     * Get Calendar by showname and season
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param season  (required)
     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schedule>> calendarbyShownameSeasonGetWithHttpInfo(String accessToken, String name, String season) throws ApiException {
        okhttp3.Call localVarCall = calendarbyShownameSeasonGetValidateBeforeCall(accessToken, name, season, null);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Calendar by showname and season (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param season  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarbyShownameSeasonGetAsync(String accessToken, String name, String season, final ApiCallback<List<Schedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarbyShownameSeasonGetValidateBeforeCall(accessToken, name, season, _callback);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scheduleByDateGet
     * @param accessToken  (required)
     * @param date date format year-month-day (required)
     * @param country US / CA / NL / BE / DE / GB or FR (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleByDateGetCall(String accessToken, String date, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Calendar/ByDate/{AccessToken}/{Date}/{Country}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "Country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scheduleByDateGetValidateBeforeCall(String accessToken, String date, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling scheduleByDateGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling scheduleByDateGet(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling scheduleByDateGet(Async)");
        }

        return scheduleByDateGetCall(accessToken, date, country, _callback);

    }

    /**
     * Gets TV Schedule for selected data
     * 
     * @param accessToken  (required)
     * @param date date format year-month-day (required)
     * @param country US / CA / NL / BE / DE / GB or FR (required)
     * @return List&lt;Schedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public List<Schedule> scheduleByDateGet(String accessToken, String date, String country) throws ApiException {
        ApiResponse<List<Schedule>> localVarResp = scheduleByDateGetWithHttpInfo(accessToken, date, country);
        return localVarResp.getData();
    }

    /**
     * Gets TV Schedule for selected data
     * 
     * @param accessToken  (required)
     * @param date date format year-month-day (required)
     * @param country US / CA / NL / BE / DE / GB or FR (required)
     * @return ApiResponse&lt;List&lt;Schedule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schedule>> scheduleByDateGetWithHttpInfo(String accessToken, String date, String country) throws ApiException {
        okhttp3.Call localVarCall = scheduleByDateGetValidateBeforeCall(accessToken, date, country, null);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets TV Schedule for selected data (asynchronously)
     * 
     * @param accessToken  (required)
     * @param date date format year-month-day (required)
     * @param country US / CA / NL / BE / DE / GB or FR (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of schedules/calendar entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scheduleByDateGetAsync(String accessToken, String date, String country, final ApiCallback<List<Schedule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = scheduleByDateGetValidateBeforeCall(accessToken, date, country, _callback);
        Type localVarReturnType = new TypeToken<List<Schedule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
