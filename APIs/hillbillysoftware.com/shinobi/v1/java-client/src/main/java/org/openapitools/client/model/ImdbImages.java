/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImdbImages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImdbImages {
  public static final String SERIALIZED_NAME_BACKDROPS = "Backdrops";
  @SerializedName(SERIALIZED_NAME_BACKDROPS)
  private List<String> backdrops = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTERS = "Posters";
  @SerializedName(SERIALIZED_NAME_POSTERS)
  private List<String> posters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_IMDB_I_D = "imdbID";
  @SerializedName(SERIALIZED_NAME_IMDB_I_D)
  private String imdbID;

  public ImdbImages() {
  }

  public ImdbImages backdrops(List<String> backdrops) {
    this.backdrops = backdrops;
    return this;
  }

  public ImdbImages addBackdropsItem(String backdropsItem) {
    if (this.backdrops == null) {
      this.backdrops = new ArrayList<>();
    }
    this.backdrops.add(backdropsItem);
    return this;
  }

  /**
   * Get backdrops
   * @return backdrops
   */
  @javax.annotation.Nullable
  public List<String> getBackdrops() {
    return backdrops;
  }

  public void setBackdrops(List<String> backdrops) {
    this.backdrops = backdrops;
  }


  public ImdbImages posters(List<String> posters) {
    this.posters = posters;
    return this;
  }

  public ImdbImages addPostersItem(String postersItem) {
    if (this.posters == null) {
      this.posters = new ArrayList<>();
    }
    this.posters.add(postersItem);
    return this;
  }

  /**
   * Get posters
   * @return posters
   */
  @javax.annotation.Nullable
  public List<String> getPosters() {
    return posters;
  }

  public void setPosters(List<String> posters) {
    this.posters = posters;
  }


  public ImdbImages type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ImdbImages imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

  /**
   * Get imdbID
   * @return imdbID
   */
  @javax.annotation.Nullable
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImdbImages imdbImages = (ImdbImages) o;
    return Objects.equals(this.backdrops, imdbImages.backdrops) &&
        Objects.equals(this.posters, imdbImages.posters) &&
        Objects.equals(this.type, imdbImages.type) &&
        Objects.equals(this.imdbID, imdbImages.imdbID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backdrops, posters, type, imdbID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImdbImages {\n");
    sb.append("    backdrops: ").append(toIndentedString(backdrops)).append("\n");
    sb.append("    posters: ").append(toIndentedString(posters)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Backdrops");
    openapiFields.add("Posters");
    openapiFields.add("Type");
    openapiFields.add("imdbID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImdbImages
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImdbImages.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImdbImages is not found in the empty JSON string", ImdbImages.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImdbImages.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImdbImages` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Backdrops") != null && !jsonObj.get("Backdrops").isJsonNull() && !jsonObj.get("Backdrops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Backdrops` to be an array in the JSON string but got `%s`", jsonObj.get("Backdrops").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Posters") != null && !jsonObj.get("Posters").isJsonNull() && !jsonObj.get("Posters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Posters` to be an array in the JSON string but got `%s`", jsonObj.get("Posters").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("imdbID") != null && !jsonObj.get("imdbID").isJsonNull()) && !jsonObj.get("imdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImdbImages.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImdbImages' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImdbImages> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImdbImages.class));

       return (TypeAdapter<T>) new TypeAdapter<ImdbImages>() {
           @Override
           public void write(JsonWriter out, ImdbImages value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImdbImages read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImdbImages given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImdbImages
   * @throws IOException if the JSON string is invalid with respect to ImdbImages
   */
  public static ImdbImages fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImdbImages.class);
  }

  /**
   * Convert an instance of ImdbImages to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

