/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlbumTracks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlbumTracks {
  public static final String SERIALIZED_NAME_ALBUM_I_D = "AlbumID";
  @SerializedName(SERIALIZED_NAME_ALBUM_I_D)
  private String albumID;

  public static final String SERIALIZED_NAME_ARTIST_I_D = "ArtistID";
  @SerializedName(SERIALIZED_NAME_ARTIST_I_D)
  private String artistID;

  public static final String SERIALIZED_NAME_LENGTH = "Length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private String length;

  public static final String SERIALIZED_NAME_TRACK_NAME = "TrackName";
  @SerializedName(SERIALIZED_NAME_TRACK_NAME)
  private String trackName;

  public static final String SERIALIZED_NAME_TRACK_NO = "TrackNo";
  @SerializedName(SERIALIZED_NAME_TRACK_NO)
  private String trackNo;

  public AlbumTracks() {
  }

  public AlbumTracks albumID(String albumID) {
    this.albumID = albumID;
    return this;
  }

  /**
   * Get albumID
   * @return albumID
   */
  @javax.annotation.Nullable
  public String getAlbumID() {
    return albumID;
  }

  public void setAlbumID(String albumID) {
    this.albumID = albumID;
  }


  public AlbumTracks artistID(String artistID) {
    this.artistID = artistID;
    return this;
  }

  /**
   * Get artistID
   * @return artistID
   */
  @javax.annotation.Nullable
  public String getArtistID() {
    return artistID;
  }

  public void setArtistID(String artistID) {
    this.artistID = artistID;
  }


  public AlbumTracks length(String length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public String getLength() {
    return length;
  }

  public void setLength(String length) {
    this.length = length;
  }


  public AlbumTracks trackName(String trackName) {
    this.trackName = trackName;
    return this;
  }

  /**
   * Get trackName
   * @return trackName
   */
  @javax.annotation.Nullable
  public String getTrackName() {
    return trackName;
  }

  public void setTrackName(String trackName) {
    this.trackName = trackName;
  }


  public AlbumTracks trackNo(String trackNo) {
    this.trackNo = trackNo;
    return this;
  }

  /**
   * Get trackNo
   * @return trackNo
   */
  @javax.annotation.Nullable
  public String getTrackNo() {
    return trackNo;
  }

  public void setTrackNo(String trackNo) {
    this.trackNo = trackNo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumTracks albumTracks = (AlbumTracks) o;
    return Objects.equals(this.albumID, albumTracks.albumID) &&
        Objects.equals(this.artistID, albumTracks.artistID) &&
        Objects.equals(this.length, albumTracks.length) &&
        Objects.equals(this.trackName, albumTracks.trackName) &&
        Objects.equals(this.trackNo, albumTracks.trackNo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumID, artistID, length, trackName, trackNo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumTracks {\n");
    sb.append("    albumID: ").append(toIndentedString(albumID)).append("\n");
    sb.append("    artistID: ").append(toIndentedString(artistID)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    trackName: ").append(toIndentedString(trackName)).append("\n");
    sb.append("    trackNo: ").append(toIndentedString(trackNo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlbumID");
    openapiFields.add("ArtistID");
    openapiFields.add("Length");
    openapiFields.add("TrackName");
    openapiFields.add("TrackNo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlbumTracks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlbumTracks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlbumTracks is not found in the empty JSON string", AlbumTracks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlbumTracks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlbumTracks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AlbumID") != null && !jsonObj.get("AlbumID").isJsonNull()) && !jsonObj.get("AlbumID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlbumID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlbumID").toString()));
      }
      if ((jsonObj.get("ArtistID") != null && !jsonObj.get("ArtistID").isJsonNull()) && !jsonObj.get("ArtistID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ArtistID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ArtistID").toString()));
      }
      if ((jsonObj.get("Length") != null && !jsonObj.get("Length").isJsonNull()) && !jsonObj.get("Length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Length").toString()));
      }
      if ((jsonObj.get("TrackName") != null && !jsonObj.get("TrackName").isJsonNull()) && !jsonObj.get("TrackName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackName").toString()));
      }
      if ((jsonObj.get("TrackNo") != null && !jsonObj.get("TrackNo").isJsonNull()) && !jsonObj.get("TrackNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackNo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlbumTracks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlbumTracks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlbumTracks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlbumTracks.class));

       return (TypeAdapter<T>) new TypeAdapter<AlbumTracks>() {
           @Override
           public void write(JsonWriter out, AlbumTracks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlbumTracks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlbumTracks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlbumTracks
   * @throws IOException if the JSON string is invalid with respect to AlbumTracks
   */
  public static AlbumTracks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlbumTracks.class);
  }

  /**
   * Convert an instance of AlbumTracks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

