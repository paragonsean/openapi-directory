/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BandAlbums;
import org.openapitools.client.model.MusicVideo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BandInfoExtended
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BandInfoExtended {
  public static final String SERIALIZED_NAME_ALBUMS = "Albums";
  @SerializedName(SERIALIZED_NAME_ALBUMS)
  private List<BandAlbums> albums = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIST_I_D = "ArtistID";
  @SerializedName(SERIALIZED_NAME_ARTIST_I_D)
  private String artistID;

  public static final String SERIALIZED_NAME_BANNER = "Banner";
  @SerializedName(SERIALIZED_NAME_BANNER)
  private String banner;

  public static final String SERIALIZED_NAME_BIOGRAPHY = "Biography";
  @SerializedName(SERIALIZED_NAME_BIOGRAPHY)
  private String biography;

  public static final String SERIALIZED_NAME_DISBANDED_YEAR = "DisbandedYear";
  @SerializedName(SERIALIZED_NAME_DISBANDED_YEAR)
  private String disbandedYear;

  public static final String SERIALIZED_NAME_FORMATION_YEAR = "FormationYear";
  @SerializedName(SERIALIZED_NAME_FORMATION_YEAR)
  private String formationYear;

  public static final String SERIALIZED_NAME_GENRE = "Genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_LOGO = "Logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_MEMBERS = "Members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private String members;

  public static final String SERIALIZED_NAME_MUSIC_BRAINZ_I_D = "MusicBrainzID";
  @SerializedName(SERIALIZED_NAME_MUSIC_BRAINZ_I_D)
  private String musicBrainzID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOCIAL_MEDIA = "SocialMedia";
  @SerializedName(SERIALIZED_NAME_SOCIAL_MEDIA)
  private String socialMedia;

  public static final String SERIALIZED_NAME_VIDEOS = "Videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<MusicVideo> videos = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_SITE = "WebSite";
  @SerializedName(SERIALIZED_NAME_WEB_SITE)
  private String webSite;

  public BandInfoExtended() {
  }

  public BandInfoExtended albums(List<BandAlbums> albums) {
    this.albums = albums;
    return this;
  }

  public BandInfoExtended addAlbumsItem(BandAlbums albumsItem) {
    if (this.albums == null) {
      this.albums = new ArrayList<>();
    }
    this.albums.add(albumsItem);
    return this;
  }

  /**
   * Get albums
   * @return albums
   */
  @javax.annotation.Nullable
  public List<BandAlbums> getAlbums() {
    return albums;
  }

  public void setAlbums(List<BandAlbums> albums) {
    this.albums = albums;
  }


  public BandInfoExtended artistID(String artistID) {
    this.artistID = artistID;
    return this;
  }

  /**
   * Get artistID
   * @return artistID
   */
  @javax.annotation.Nullable
  public String getArtistID() {
    return artistID;
  }

  public void setArtistID(String artistID) {
    this.artistID = artistID;
  }


  public BandInfoExtended banner(String banner) {
    this.banner = banner;
    return this;
  }

  /**
   * Get banner
   * @return banner
   */
  @javax.annotation.Nullable
  public String getBanner() {
    return banner;
  }

  public void setBanner(String banner) {
    this.banner = banner;
  }


  public BandInfoExtended biography(String biography) {
    this.biography = biography;
    return this;
  }

  /**
   * Get biography
   * @return biography
   */
  @javax.annotation.Nullable
  public String getBiography() {
    return biography;
  }

  public void setBiography(String biography) {
    this.biography = biography;
  }


  public BandInfoExtended disbandedYear(String disbandedYear) {
    this.disbandedYear = disbandedYear;
    return this;
  }

  /**
   * Get disbandedYear
   * @return disbandedYear
   */
  @javax.annotation.Nullable
  public String getDisbandedYear() {
    return disbandedYear;
  }

  public void setDisbandedYear(String disbandedYear) {
    this.disbandedYear = disbandedYear;
  }


  public BandInfoExtended formationYear(String formationYear) {
    this.formationYear = formationYear;
    return this;
  }

  /**
   * Get formationYear
   * @return formationYear
   */
  @javax.annotation.Nullable
  public String getFormationYear() {
    return formationYear;
  }

  public void setFormationYear(String formationYear) {
    this.formationYear = formationYear;
  }


  public BandInfoExtended genre(String genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nullable
  public String getGenre() {
    return genre;
  }

  public void setGenre(String genre) {
    this.genre = genre;
  }


  public BandInfoExtended logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public BandInfoExtended members(String members) {
    this.members = members;
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nullable
  public String getMembers() {
    return members;
  }

  public void setMembers(String members) {
    this.members = members;
  }


  public BandInfoExtended musicBrainzID(String musicBrainzID) {
    this.musicBrainzID = musicBrainzID;
    return this;
  }

  /**
   * Get musicBrainzID
   * @return musicBrainzID
   */
  @javax.annotation.Nullable
  public String getMusicBrainzID() {
    return musicBrainzID;
  }

  public void setMusicBrainzID(String musicBrainzID) {
    this.musicBrainzID = musicBrainzID;
  }


  public BandInfoExtended name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BandInfoExtended socialMedia(String socialMedia) {
    this.socialMedia = socialMedia;
    return this;
  }

  /**
   * Get socialMedia
   * @return socialMedia
   */
  @javax.annotation.Nullable
  public String getSocialMedia() {
    return socialMedia;
  }

  public void setSocialMedia(String socialMedia) {
    this.socialMedia = socialMedia;
  }


  public BandInfoExtended videos(List<MusicVideo> videos) {
    this.videos = videos;
    return this;
  }

  public BandInfoExtended addVideosItem(MusicVideo videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * Get videos
   * @return videos
   */
  @javax.annotation.Nullable
  public List<MusicVideo> getVideos() {
    return videos;
  }

  public void setVideos(List<MusicVideo> videos) {
    this.videos = videos;
  }


  public BandInfoExtended webSite(String webSite) {
    this.webSite = webSite;
    return this;
  }

  /**
   * Get webSite
   * @return webSite
   */
  @javax.annotation.Nullable
  public String getWebSite() {
    return webSite;
  }

  public void setWebSite(String webSite) {
    this.webSite = webSite;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BandInfoExtended bandInfoExtended = (BandInfoExtended) o;
    return Objects.equals(this.albums, bandInfoExtended.albums) &&
        Objects.equals(this.artistID, bandInfoExtended.artistID) &&
        Objects.equals(this.banner, bandInfoExtended.banner) &&
        Objects.equals(this.biography, bandInfoExtended.biography) &&
        Objects.equals(this.disbandedYear, bandInfoExtended.disbandedYear) &&
        Objects.equals(this.formationYear, bandInfoExtended.formationYear) &&
        Objects.equals(this.genre, bandInfoExtended.genre) &&
        Objects.equals(this.logo, bandInfoExtended.logo) &&
        Objects.equals(this.members, bandInfoExtended.members) &&
        Objects.equals(this.musicBrainzID, bandInfoExtended.musicBrainzID) &&
        Objects.equals(this.name, bandInfoExtended.name) &&
        Objects.equals(this.socialMedia, bandInfoExtended.socialMedia) &&
        Objects.equals(this.videos, bandInfoExtended.videos) &&
        Objects.equals(this.webSite, bandInfoExtended.webSite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albums, artistID, banner, biography, disbandedYear, formationYear, genre, logo, members, musicBrainzID, name, socialMedia, videos, webSite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BandInfoExtended {\n");
    sb.append("    albums: ").append(toIndentedString(albums)).append("\n");
    sb.append("    artistID: ").append(toIndentedString(artistID)).append("\n");
    sb.append("    banner: ").append(toIndentedString(banner)).append("\n");
    sb.append("    biography: ").append(toIndentedString(biography)).append("\n");
    sb.append("    disbandedYear: ").append(toIndentedString(disbandedYear)).append("\n");
    sb.append("    formationYear: ").append(toIndentedString(formationYear)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    musicBrainzID: ").append(toIndentedString(musicBrainzID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    socialMedia: ").append(toIndentedString(socialMedia)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    webSite: ").append(toIndentedString(webSite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Albums");
    openapiFields.add("ArtistID");
    openapiFields.add("Banner");
    openapiFields.add("Biography");
    openapiFields.add("DisbandedYear");
    openapiFields.add("FormationYear");
    openapiFields.add("Genre");
    openapiFields.add("Logo");
    openapiFields.add("Members");
    openapiFields.add("MusicBrainzID");
    openapiFields.add("Name");
    openapiFields.add("SocialMedia");
    openapiFields.add("Videos");
    openapiFields.add("WebSite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BandInfoExtended
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BandInfoExtended.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BandInfoExtended is not found in the empty JSON string", BandInfoExtended.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BandInfoExtended.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BandInfoExtended` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Albums") != null && !jsonObj.get("Albums").isJsonNull()) {
        JsonArray jsonArrayalbums = jsonObj.getAsJsonArray("Albums");
        if (jsonArrayalbums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Albums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Albums` to be an array in the JSON string but got `%s`", jsonObj.get("Albums").toString()));
          }

          // validate the optional field `Albums` (array)
          for (int i = 0; i < jsonArrayalbums.size(); i++) {
            BandAlbums.validateJsonElement(jsonArrayalbums.get(i));
          };
        }
      }
      if ((jsonObj.get("ArtistID") != null && !jsonObj.get("ArtistID").isJsonNull()) && !jsonObj.get("ArtistID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ArtistID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ArtistID").toString()));
      }
      if ((jsonObj.get("Banner") != null && !jsonObj.get("Banner").isJsonNull()) && !jsonObj.get("Banner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Banner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Banner").toString()));
      }
      if ((jsonObj.get("Biography") != null && !jsonObj.get("Biography").isJsonNull()) && !jsonObj.get("Biography").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Biography` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Biography").toString()));
      }
      if ((jsonObj.get("DisbandedYear") != null && !jsonObj.get("DisbandedYear").isJsonNull()) && !jsonObj.get("DisbandedYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisbandedYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisbandedYear").toString()));
      }
      if ((jsonObj.get("FormationYear") != null && !jsonObj.get("FormationYear").isJsonNull()) && !jsonObj.get("FormationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FormationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FormationYear").toString()));
      }
      if ((jsonObj.get("Genre") != null && !jsonObj.get("Genre").isJsonNull()) && !jsonObj.get("Genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Genre").toString()));
      }
      if ((jsonObj.get("Logo") != null && !jsonObj.get("Logo").isJsonNull()) && !jsonObj.get("Logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Logo").toString()));
      }
      if ((jsonObj.get("Members") != null && !jsonObj.get("Members").isJsonNull()) && !jsonObj.get("Members").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Members` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Members").toString()));
      }
      if ((jsonObj.get("MusicBrainzID") != null && !jsonObj.get("MusicBrainzID").isJsonNull()) && !jsonObj.get("MusicBrainzID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MusicBrainzID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MusicBrainzID").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SocialMedia") != null && !jsonObj.get("SocialMedia").isJsonNull()) && !jsonObj.get("SocialMedia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SocialMedia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SocialMedia").toString()));
      }
      if (jsonObj.get("Videos") != null && !jsonObj.get("Videos").isJsonNull()) {
        JsonArray jsonArrayvideos = jsonObj.getAsJsonArray("Videos");
        if (jsonArrayvideos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Videos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Videos` to be an array in the JSON string but got `%s`", jsonObj.get("Videos").toString()));
          }

          // validate the optional field `Videos` (array)
          for (int i = 0; i < jsonArrayvideos.size(); i++) {
            MusicVideo.validateJsonElement(jsonArrayvideos.get(i));
          };
        }
      }
      if ((jsonObj.get("WebSite") != null && !jsonObj.get("WebSite").isJsonNull()) && !jsonObj.get("WebSite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebSite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebSite").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BandInfoExtended.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BandInfoExtended' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BandInfoExtended> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BandInfoExtended.class));

       return (TypeAdapter<T>) new TypeAdapter<BandInfoExtended>() {
           @Override
           public void write(JsonWriter out, BandInfoExtended value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BandInfoExtended read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BandInfoExtended given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BandInfoExtended
   * @throws IOException if the JSON string is invalid with respect to BandInfoExtended
   */
  public static BandInfoExtended fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BandInfoExtended.class);
  }

  /**
   * Convert an instance of BandInfoExtended to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

