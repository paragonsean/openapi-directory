/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Episode;
import org.openapitools.client.model.LastAvailableSeason;
import org.openapitools.client.model.PostResult;
import org.openapitools.client.model.ShowStatus;
import org.openapitools.client.model.TVInformation;
import org.openapitools.client.model.TVInformationPost;
import org.openapitools.client.model.TVShowSeasons;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TelevisionShowsEpisodesStatusesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TelevisionShowsEpisodesStatusesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TelevisionShowsEpisodesStatusesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTVShowPost
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTVShowPostCall(TVInformationPost value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/AddTVShow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTVShowPostValidateBeforeCall(TVInformationPost value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling addTVShowPost(Async)");
        }

        return addTVShowPostCall(value, _callback);

    }

    /**
     * Add new show to database
     * 
     * @param value  (required)
     * @return PostResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public PostResult addTVShowPost(TVInformationPost value) throws ApiException {
        ApiResponse<PostResult> localVarResp = addTVShowPostWithHttpInfo(value);
        return localVarResp.getData();
    }

    /**
     * Add new show to database
     * 
     * @param value  (required)
     * @return ApiResponse&lt;PostResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostResult> addTVShowPostWithHttpInfo(TVInformationPost value) throws ApiException {
        okhttp3.Call localVarCall = addTVShowPostValidateBeforeCall(value, null);
        Type localVarReturnType = new TypeToken<PostResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new show to database (asynchronously)
     * 
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTVShowPostAsync(TVInformationPost value, final ApiCallback<PostResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTVShowPostValidateBeforeCall(value, _callback);
        Type localVarReturnType = new TypeToken<PostResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodesByIDGet
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesByIDGetCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Episodes/ByID/{AccessToken}/{ID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodesByIDGetValidateBeforeCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling episodesByIDGet(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling episodesByIDGet(Async)");
        }

        return episodesByIDGetCall(accessToken, ID, _callback);

    }

    /**
     * Gets all episodes for selected ID
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @return List&lt;Episode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public List<Episode> episodesByIDGet(String accessToken, String ID) throws ApiException {
        ApiResponse<List<Episode>> localVarResp = episodesByIDGetWithHttpInfo(accessToken, ID);
        return localVarResp.getData();
    }

    /**
     * Gets all episodes for selected ID
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @return ApiResponse&lt;List&lt;Episode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Episode>> episodesByIDGetWithHttpInfo(String accessToken, String ID) throws ApiException {
        okhttp3.Call localVarCall = episodesByIDGetValidateBeforeCall(accessToken, ID, null);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all episodes for selected ID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesByIDGetAsync(String accessToken, String ID, final ApiCallback<List<Episode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodesByIDGetValidateBeforeCall(accessToken, ID, _callback);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodesBySeasonGet
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param season Season number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes for specified season </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesBySeasonGetCall(String accessToken, String ID, String season, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Episodes/BySeason/{AccessToken}/{ID}/{Season}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "Season" + "}", localVarApiClient.escapeString(season.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodesBySeasonGetValidateBeforeCall(String accessToken, String ID, String season, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling episodesBySeasonGet(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling episodesBySeasonGet(Async)");
        }

        // verify the required parameter 'season' is set
        if (season == null) {
            throw new ApiException("Missing the required parameter 'season' when calling episodesBySeasonGet(Async)");
        }

        return episodesBySeasonGetCall(accessToken, ID, season, _callback);

    }

    /**
     * Gets list of episodes for specified imdbID and Season number
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param season Season number (required)
     * @return List&lt;Episode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes for specified season </td><td>  -  </td></tr>
     </table>
     */
    public List<Episode> episodesBySeasonGet(String accessToken, String ID, String season) throws ApiException {
        ApiResponse<List<Episode>> localVarResp = episodesBySeasonGetWithHttpInfo(accessToken, ID, season);
        return localVarResp.getData();
    }

    /**
     * Gets list of episodes for specified imdbID and Season number
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param season Season number (required)
     * @return ApiResponse&lt;List&lt;Episode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes for specified season </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Episode>> episodesBySeasonGetWithHttpInfo(String accessToken, String ID, String season) throws ApiException {
        okhttp3.Call localVarCall = episodesBySeasonGetValidateBeforeCall(accessToken, ID, season, null);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of episodes for specified imdbID and Season number (asynchronously)
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param season Season number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes for specified season </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesBySeasonGetAsync(String accessToken, String ID, String season, final ApiCallback<List<Episode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodesBySeasonGetValidateBeforeCall(accessToken, ID, season, _callback);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodesGet
     * @param accessToken  (required)
     * @param showname  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesGetCall(String accessToken, String showname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Episodes/ByShowName/{AccessToken}/{Showname}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Showname" + "}", localVarApiClient.escapeString(showname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodesGetValidateBeforeCall(String accessToken, String showname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling episodesGet(Async)");
        }

        // verify the required parameter 'showname' is set
        if (showname == null) {
            throw new ApiException("Missing the required parameter 'showname' when calling episodesGet(Async)");
        }

        return episodesGetCall(accessToken, showname, _callback);

    }

    /**
     * Gets all episodes for selected show
     * 
     * @param accessToken  (required)
     * @param showname  (required)
     * @return List&lt;Episode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public List<Episode> episodesGet(String accessToken, String showname) throws ApiException {
        ApiResponse<List<Episode>> localVarResp = episodesGetWithHttpInfo(accessToken, showname);
        return localVarResp.getData();
    }

    /**
     * Gets all episodes for selected show
     * 
     * @param accessToken  (required)
     * @param showname  (required)
     * @return ApiResponse&lt;List&lt;Episode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Episode>> episodesGetWithHttpInfo(String accessToken, String showname) throws ApiException {
        okhttp3.Call localVarCall = episodesGetValidateBeforeCall(accessToken, showname, null);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all episodes for selected show (asynchronously)
     * 
     * @param accessToken  (required)
     * @param showname  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of episodes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesGetAsync(String accessToken, String showname, final ApiCallback<List<Episode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodesGetValidateBeforeCall(accessToken, showname, _callback);
        Type localVarReturnType = new TypeToken<List<Episode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodesLastAvailableSeasonGet
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed imdbID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesLastAvailableSeasonGetCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Episodes/LatestSeason/{AccessToken}/{ID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodesLastAvailableSeasonGetValidateBeforeCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling episodesLastAvailableSeasonGet(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling episodesLastAvailableSeasonGet(Async)");
        }

        return episodesLastAvailableSeasonGetCall(accessToken, ID, _callback);

    }

    /**
     * Returns last available season number in database, based on passed imdbID
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @return LastAvailableSeason
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed imdbID </td><td>  -  </td></tr>
     </table>
     */
    public LastAvailableSeason episodesLastAvailableSeasonGet(String accessToken, String ID) throws ApiException {
        ApiResponse<LastAvailableSeason> localVarResp = episodesLastAvailableSeasonGetWithHttpInfo(accessToken, ID);
        return localVarResp.getData();
    }

    /**
     * Returns last available season number in database, based on passed imdbID
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @return ApiResponse&lt;LastAvailableSeason&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed imdbID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LastAvailableSeason> episodesLastAvailableSeasonGetWithHttpInfo(String accessToken, String ID) throws ApiException {
        okhttp3.Call localVarCall = episodesLastAvailableSeasonGetValidateBeforeCall(accessToken, ID, null);
        Type localVarReturnType = new TypeToken<LastAvailableSeason>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns last available season number in database, based on passed imdbID (asynchronously)
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed imdbID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesLastAvailableSeasonGetAsync(String accessToken, String ID, final ApiCallback<LastAvailableSeason> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodesLastAvailableSeasonGetValidateBeforeCall(accessToken, ID, _callback);
        Type localVarReturnType = new TypeToken<LastAvailableSeason>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodesLastAvailableSeasonbyNameGet
     * @param accessToken  (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed showname </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesLastAvailableSeasonbyNameGetCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Episodes/LatestSeason/Show/{AccessToken}/{Name}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodesLastAvailableSeasonbyNameGetValidateBeforeCall(String accessToken, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling episodesLastAvailableSeasonbyNameGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling episodesLastAvailableSeasonbyNameGet(Async)");
        }

        return episodesLastAvailableSeasonbyNameGetCall(accessToken, name, _callback);

    }

    /**
     * Gets latest season number based on show name
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @return LastAvailableSeason
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed showname </td><td>  -  </td></tr>
     </table>
     */
    public LastAvailableSeason episodesLastAvailableSeasonbyNameGet(String accessToken, String name) throws ApiException {
        ApiResponse<LastAvailableSeason> localVarResp = episodesLastAvailableSeasonbyNameGetWithHttpInfo(accessToken, name);
        return localVarResp.getData();
    }

    /**
     * Gets latest season number based on show name
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @return ApiResponse&lt;LastAvailableSeason&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed showname </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LastAvailableSeason> episodesLastAvailableSeasonbyNameGetWithHttpInfo(String accessToken, String name) throws ApiException {
        okhttp3.Call localVarCall = episodesLastAvailableSeasonbyNameGetValidateBeforeCall(accessToken, name, null);
        Type localVarReturnType = new TypeToken<LastAvailableSeason>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets latest season number based on show name (asynchronously)
     * 
     * @param accessToken  (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns last available Season Number for passed showname </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesLastAvailableSeasonbyNameGetAsync(String accessToken, String name, final ApiCallback<LastAvailableSeason> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodesLastAvailableSeasonbyNameGetValidateBeforeCall(accessToken, name, _callback);
        Type localVarReturnType = new TypeToken<LastAvailableSeason>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for episodesSeasonCountGet
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns number of seasons available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesSeasonCountGetCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Episodes/SeasonCount/{AccessToken}/{ID}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call episodesSeasonCountGetValidateBeforeCall(String accessToken, String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling episodesSeasonCountGet(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling episodesSeasonCountGet(Async)");
        }

        return episodesSeasonCountGetCall(accessToken, ID, _callback);

    }

    /**
     * Returns number of available seasons and episodes
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @return TVShowSeasons
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns number of seasons available </td><td>  -  </td></tr>
     </table>
     */
    public TVShowSeasons episodesSeasonCountGet(String accessToken, String ID) throws ApiException {
        ApiResponse<TVShowSeasons> localVarResp = episodesSeasonCountGetWithHttpInfo(accessToken, ID);
        return localVarResp.getData();
    }

    /**
     * Returns number of available seasons and episodes
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @return ApiResponse&lt;TVShowSeasons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns number of seasons available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TVShowSeasons> episodesSeasonCountGetWithHttpInfo(String accessToken, String ID) throws ApiException {
        okhttp3.Call localVarCall = episodesSeasonCountGetValidateBeforeCall(accessToken, ID, null);
        Type localVarReturnType = new TypeToken<TVShowSeasons>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns number of available seasons and episodes (asynchronously)
     * 
     * @param accessToken  (required)
     * @param ID imdbID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns number of seasons available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call episodesSeasonCountGetAsync(String accessToken, String ID, final ApiCallback<TVShowSeasons> _callback) throws ApiException {

        okhttp3.Call localVarCall = episodesSeasonCountGetValidateBeforeCall(accessToken, ID, _callback);
        Type localVarReturnType = new TypeToken<TVShowSeasons>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showStatusGet
     * @param accessToken  (required)
     * @param query Query can be IMDB, TVDB, or Show name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statuses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStatusGetCall(String accessToken, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Status/{AccessToken}/{Query}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showStatusGetValidateBeforeCall(String accessToken, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling showStatusGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling showStatusGet(Async)");
        }

        return showStatusGetCall(accessToken, query, _callback);

    }

    /**
     * Returns status of queried show (query can be IMDB, TVDB, or showname)
     * 
     * @param accessToken  (required)
     * @param query Query can be IMDB, TVDB, or Show name (required)
     * @return List&lt;ShowStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statuses </td><td>  -  </td></tr>
     </table>
     */
    public List<ShowStatus> showStatusGet(String accessToken, String query) throws ApiException {
        ApiResponse<List<ShowStatus>> localVarResp = showStatusGetWithHttpInfo(accessToken, query);
        return localVarResp.getData();
    }

    /**
     * Returns status of queried show (query can be IMDB, TVDB, or showname)
     * 
     * @param accessToken  (required)
     * @param query Query can be IMDB, TVDB, or Show name (required)
     * @return ApiResponse&lt;List&lt;ShowStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statuses </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShowStatus>> showStatusGetWithHttpInfo(String accessToken, String query) throws ApiException {
        okhttp3.Call localVarCall = showStatusGetValidateBeforeCall(accessToken, query, null);
        Type localVarReturnType = new TypeToken<List<ShowStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns status of queried show (query can be IMDB, TVDB, or showname) (asynchronously)
     * 
     * @param accessToken  (required)
     * @param query Query can be IMDB, TVDB, or Show name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of statuses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showStatusGetAsync(String accessToken, String query, final ApiCallback<List<ShowStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = showStatusGetValidateBeforeCall(accessToken, query, _callback);
        Type localVarReturnType = new TypeToken<List<ShowStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tVShowByNameGet
     * @param accessToken  (required)
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of television show information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVShowByNameGetCall(String accessToken, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TV/ByName/{AccessToken}/{Query}"
            .replace("{" + "AccessToken" + "}", localVarApiClient.escapeString(accessToken.toString()))
            .replace("{" + "Query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tVShowByNameGetValidateBeforeCall(String accessToken, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling tVShowByNameGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling tVShowByNameGet(Async)");
        }

        return tVShowByNameGetCall(accessToken, query, _callback);

    }

    /**
     * Returns results based on query, result set limited to 5 records
     * 
     * @param accessToken  (required)
     * @param query  (required)
     * @return List&lt;TVInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of television show information </td><td>  -  </td></tr>
     </table>
     */
    public List<TVInformation> tVShowByNameGet(String accessToken, String query) throws ApiException {
        ApiResponse<List<TVInformation>> localVarResp = tVShowByNameGetWithHttpInfo(accessToken, query);
        return localVarResp.getData();
    }

    /**
     * Returns results based on query, result set limited to 5 records
     * 
     * @param accessToken  (required)
     * @param query  (required)
     * @return ApiResponse&lt;List&lt;TVInformation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of television show information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TVInformation>> tVShowByNameGetWithHttpInfo(String accessToken, String query) throws ApiException {
        okhttp3.Call localVarCall = tVShowByNameGetValidateBeforeCall(accessToken, query, null);
        Type localVarReturnType = new TypeToken<List<TVInformation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns results based on query, result set limited to 5 records (asynchronously)
     * 
     * @param accessToken  (required)
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of television show information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVShowByNameGetAsync(String accessToken, String query, final ApiCallback<List<TVInformation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tVShowByNameGetValidateBeforeCall(accessToken, query, _callback);
        Type localVarReturnType = new TypeToken<List<TVInformation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tVShowIDGet
     * @param accesstoken  (required)
     * @param id imdbID of show you want info on (required)
     * @param imdbID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Television show information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVShowIDGetCall(String accesstoken, String id, String imdbID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TV/ByID/{accesstoken}/{imdbID}"
            .replace("{" + "accesstoken" + "}", localVarApiClient.escapeString(accesstoken.toString()))
            .replace("{" + "imdbID" + "}", localVarApiClient.escapeString(imdbID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tVShowIDGetValidateBeforeCall(String accesstoken, String id, String imdbID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accesstoken' is set
        if (accesstoken == null) {
            throw new ApiException("Missing the required parameter 'accesstoken' when calling tVShowIDGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tVShowIDGet(Async)");
        }

        // verify the required parameter 'imdbID' is set
        if (imdbID == null) {
            throw new ApiException("Missing the required parameter 'imdbID' when calling tVShowIDGet(Async)");
        }

        return tVShowIDGetCall(accesstoken, id, imdbID, _callback);

    }

    /**
     * Returns TVShow information based on IMDBid
     * 
     * @param accesstoken  (required)
     * @param id imdbID of show you want info on (required)
     * @param imdbID  (required)
     * @return TVInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Television show information </td><td>  -  </td></tr>
     </table>
     */
    public TVInformation tVShowIDGet(String accesstoken, String id, String imdbID) throws ApiException {
        ApiResponse<TVInformation> localVarResp = tVShowIDGetWithHttpInfo(accesstoken, id, imdbID);
        return localVarResp.getData();
    }

    /**
     * Returns TVShow information based on IMDBid
     * 
     * @param accesstoken  (required)
     * @param id imdbID of show you want info on (required)
     * @param imdbID  (required)
     * @return ApiResponse&lt;TVInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Television show information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TVInformation> tVShowIDGetWithHttpInfo(String accesstoken, String id, String imdbID) throws ApiException {
        okhttp3.Call localVarCall = tVShowIDGetValidateBeforeCall(accesstoken, id, imdbID, null);
        Type localVarReturnType = new TypeToken<TVInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns TVShow information based on IMDBid (asynchronously)
     * 
     * @param accesstoken  (required)
     * @param id imdbID of show you want info on (required)
     * @param imdbID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Television show information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tVShowIDGetAsync(String accesstoken, String id, String imdbID, final ApiCallback<TVInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = tVShowIDGetValidateBeforeCall(accesstoken, id, imdbID, _callback);
        Type localVarReturnType = new TypeToken<TVInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
