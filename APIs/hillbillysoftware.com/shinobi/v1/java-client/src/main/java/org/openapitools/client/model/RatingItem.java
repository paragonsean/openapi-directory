/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatingItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatingItem {
  public static final String SERIALIZED_NAME_EPISO_DATE = "EpisoDate";
  @SerializedName(SERIALIZED_NAME_EPISO_DATE)
  private String episoDate;

  public static final String SERIALIZED_NAME_I_M_D_B = "IMDB";
  @SerializedName(SERIALIZED_NAME_I_M_D_B)
  private String IMDB;

  public static final String SERIALIZED_NAME_META_CRITICS = "MetaCritics";
  @SerializedName(SERIALIZED_NAME_META_CRITICS)
  private String metaCritics;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROTTEN_TOMATOES = "RottenTomatoes";
  @SerializedName(SERIALIZED_NAME_ROTTEN_TOMATOES)
  private String rottenTomatoes;

  public static final String SERIALIZED_NAME_ROTTEN_TOMATOES_AUDIENCE_SCORE = "RottenTomatoesAudienceScore";
  @SerializedName(SERIALIZED_NAME_ROTTEN_TOMATOES_AUDIENCE_SCORE)
  private String rottenTomatoesAudienceScore;

  public static final String SERIALIZED_NAME_T_V_D_B = "TVDB";
  @SerializedName(SERIALIZED_NAME_T_V_D_B)
  private String TVDB;

  public static final String SERIALIZED_NAME_TV_MAZE = "TVMaze";
  @SerializedName(SERIALIZED_NAME_TV_MAZE)
  private String tvMaze;

  public static final String SERIALIZED_NAME_TRAKT = "Trakt";
  @SerializedName(SERIALIZED_NAME_TRAKT)
  private String trakt;

  public static final String SERIALIZED_NAME_IMDB_I_D = "imdbID";
  @SerializedName(SERIALIZED_NAME_IMDB_I_D)
  private String imdbID;

  public RatingItem() {
  }

  public RatingItem episoDate(String episoDate) {
    this.episoDate = episoDate;
    return this;
  }

  /**
   * Get episoDate
   * @return episoDate
   */
  @javax.annotation.Nullable
  public String getEpisoDate() {
    return episoDate;
  }

  public void setEpisoDate(String episoDate) {
    this.episoDate = episoDate;
  }


  public RatingItem IMDB(String IMDB) {
    this.IMDB = IMDB;
    return this;
  }

  /**
   * Get IMDB
   * @return IMDB
   */
  @javax.annotation.Nullable
  public String getIMDB() {
    return IMDB;
  }

  public void setIMDB(String IMDB) {
    this.IMDB = IMDB;
  }


  public RatingItem metaCritics(String metaCritics) {
    this.metaCritics = metaCritics;
    return this;
  }

  /**
   * Get metaCritics
   * @return metaCritics
   */
  @javax.annotation.Nullable
  public String getMetaCritics() {
    return metaCritics;
  }

  public void setMetaCritics(String metaCritics) {
    this.metaCritics = metaCritics;
  }


  public RatingItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RatingItem rottenTomatoes(String rottenTomatoes) {
    this.rottenTomatoes = rottenTomatoes;
    return this;
  }

  /**
   * Get rottenTomatoes
   * @return rottenTomatoes
   */
  @javax.annotation.Nullable
  public String getRottenTomatoes() {
    return rottenTomatoes;
  }

  public void setRottenTomatoes(String rottenTomatoes) {
    this.rottenTomatoes = rottenTomatoes;
  }


  public RatingItem rottenTomatoesAudienceScore(String rottenTomatoesAudienceScore) {
    this.rottenTomatoesAudienceScore = rottenTomatoesAudienceScore;
    return this;
  }

  /**
   * Get rottenTomatoesAudienceScore
   * @return rottenTomatoesAudienceScore
   */
  @javax.annotation.Nullable
  public String getRottenTomatoesAudienceScore() {
    return rottenTomatoesAudienceScore;
  }

  public void setRottenTomatoesAudienceScore(String rottenTomatoesAudienceScore) {
    this.rottenTomatoesAudienceScore = rottenTomatoesAudienceScore;
  }


  public RatingItem TVDB(String TVDB) {
    this.TVDB = TVDB;
    return this;
  }

  /**
   * Get TVDB
   * @return TVDB
   */
  @javax.annotation.Nullable
  public String getTVDB() {
    return TVDB;
  }

  public void setTVDB(String TVDB) {
    this.TVDB = TVDB;
  }


  public RatingItem tvMaze(String tvMaze) {
    this.tvMaze = tvMaze;
    return this;
  }

  /**
   * Get tvMaze
   * @return tvMaze
   */
  @javax.annotation.Nullable
  public String getTvMaze() {
    return tvMaze;
  }

  public void setTvMaze(String tvMaze) {
    this.tvMaze = tvMaze;
  }


  public RatingItem trakt(String trakt) {
    this.trakt = trakt;
    return this;
  }

  /**
   * Get trakt
   * @return trakt
   */
  @javax.annotation.Nullable
  public String getTrakt() {
    return trakt;
  }

  public void setTrakt(String trakt) {
    this.trakt = trakt;
  }


  public RatingItem imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

  /**
   * Get imdbID
   * @return imdbID
   */
  @javax.annotation.Nullable
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatingItem ratingItem = (RatingItem) o;
    return Objects.equals(this.episoDate, ratingItem.episoDate) &&
        Objects.equals(this.IMDB, ratingItem.IMDB) &&
        Objects.equals(this.metaCritics, ratingItem.metaCritics) &&
        Objects.equals(this.name, ratingItem.name) &&
        Objects.equals(this.rottenTomatoes, ratingItem.rottenTomatoes) &&
        Objects.equals(this.rottenTomatoesAudienceScore, ratingItem.rottenTomatoesAudienceScore) &&
        Objects.equals(this.TVDB, ratingItem.TVDB) &&
        Objects.equals(this.tvMaze, ratingItem.tvMaze) &&
        Objects.equals(this.trakt, ratingItem.trakt) &&
        Objects.equals(this.imdbID, ratingItem.imdbID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(episoDate, IMDB, metaCritics, name, rottenTomatoes, rottenTomatoesAudienceScore, TVDB, tvMaze, trakt, imdbID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatingItem {\n");
    sb.append("    episoDate: ").append(toIndentedString(episoDate)).append("\n");
    sb.append("    IMDB: ").append(toIndentedString(IMDB)).append("\n");
    sb.append("    metaCritics: ").append(toIndentedString(metaCritics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rottenTomatoes: ").append(toIndentedString(rottenTomatoes)).append("\n");
    sb.append("    rottenTomatoesAudienceScore: ").append(toIndentedString(rottenTomatoesAudienceScore)).append("\n");
    sb.append("    TVDB: ").append(toIndentedString(TVDB)).append("\n");
    sb.append("    tvMaze: ").append(toIndentedString(tvMaze)).append("\n");
    sb.append("    trakt: ").append(toIndentedString(trakt)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EpisoDate");
    openapiFields.add("IMDB");
    openapiFields.add("MetaCritics");
    openapiFields.add("Name");
    openapiFields.add("RottenTomatoes");
    openapiFields.add("RottenTomatoesAudienceScore");
    openapiFields.add("TVDB");
    openapiFields.add("TVMaze");
    openapiFields.add("Trakt");
    openapiFields.add("imdbID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatingItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatingItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatingItem is not found in the empty JSON string", RatingItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatingItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatingItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EpisoDate") != null && !jsonObj.get("EpisoDate").isJsonNull()) && !jsonObj.get("EpisoDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EpisoDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EpisoDate").toString()));
      }
      if ((jsonObj.get("IMDB") != null && !jsonObj.get("IMDB").isJsonNull()) && !jsonObj.get("IMDB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IMDB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IMDB").toString()));
      }
      if ((jsonObj.get("MetaCritics") != null && !jsonObj.get("MetaCritics").isJsonNull()) && !jsonObj.get("MetaCritics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetaCritics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetaCritics").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RottenTomatoes") != null && !jsonObj.get("RottenTomatoes").isJsonNull()) && !jsonObj.get("RottenTomatoes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RottenTomatoes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RottenTomatoes").toString()));
      }
      if ((jsonObj.get("RottenTomatoesAudienceScore") != null && !jsonObj.get("RottenTomatoesAudienceScore").isJsonNull()) && !jsonObj.get("RottenTomatoesAudienceScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RottenTomatoesAudienceScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RottenTomatoesAudienceScore").toString()));
      }
      if ((jsonObj.get("TVDB") != null && !jsonObj.get("TVDB").isJsonNull()) && !jsonObj.get("TVDB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TVDB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TVDB").toString()));
      }
      if ((jsonObj.get("TVMaze") != null && !jsonObj.get("TVMaze").isJsonNull()) && !jsonObj.get("TVMaze").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TVMaze` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TVMaze").toString()));
      }
      if ((jsonObj.get("Trakt") != null && !jsonObj.get("Trakt").isJsonNull()) && !jsonObj.get("Trakt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Trakt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Trakt").toString()));
      }
      if ((jsonObj.get("imdbID") != null && !jsonObj.get("imdbID").isJsonNull()) && !jsonObj.get("imdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imdbID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatingItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatingItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatingItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatingItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RatingItem>() {
           @Override
           public void write(JsonWriter out, RatingItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatingItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatingItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatingItem
   * @throws IOException if the JSON string is invalid with respect to RatingItem
   */
  public static RatingItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatingItem.class);
  }

  /**
   * Convert an instance of RatingItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

