/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MovieInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MovieInformation {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_IMDB_I_D = "ImdbID";
  @SerializedName(SERIALIZED_NAME_IMDB_I_D)
  private String imdbID;

  public static final String SERIALIZED_NAME_RELEASE_YEAR = "ReleaseYear";
  @SerializedName(SERIALIZED_NAME_RELEASE_YEAR)
  private String releaseYear;

  public static final String SERIALIZED_NAME_RUNTIME = "Runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private String runtime;

  public static final String SERIALIZED_NAME_SYNOPSIS = "Synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public MovieInformation() {
  }

  public MovieInformation ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public MovieInformation imdbID(String imdbID) {
    this.imdbID = imdbID;
    return this;
  }

  /**
   * Get imdbID
   * @return imdbID
   */
  @javax.annotation.Nullable
  public String getImdbID() {
    return imdbID;
  }

  public void setImdbID(String imdbID) {
    this.imdbID = imdbID;
  }


  public MovieInformation releaseYear(String releaseYear) {
    this.releaseYear = releaseYear;
    return this;
  }

  /**
   * Get releaseYear
   * @return releaseYear
   */
  @javax.annotation.Nullable
  public String getReleaseYear() {
    return releaseYear;
  }

  public void setReleaseYear(String releaseYear) {
    this.releaseYear = releaseYear;
  }


  public MovieInformation runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }


  public MovieInformation synopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  /**
   * Get synopsis
   * @return synopsis
   */
  @javax.annotation.Nullable
  public String getSynopsis() {
    return synopsis;
  }

  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public MovieInformation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MovieInformation movieInformation = (MovieInformation) o;
    return Objects.equals(this.ID, movieInformation.ID) &&
        Objects.equals(this.imdbID, movieInformation.imdbID) &&
        Objects.equals(this.releaseYear, movieInformation.releaseYear) &&
        Objects.equals(this.runtime, movieInformation.runtime) &&
        Objects.equals(this.synopsis, movieInformation.synopsis) &&
        Objects.equals(this.title, movieInformation.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, imdbID, releaseYear, runtime, synopsis, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MovieInformation {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    imdbID: ").append(toIndentedString(imdbID)).append("\n");
    sb.append("    releaseYear: ").append(toIndentedString(releaseYear)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("ImdbID");
    openapiFields.add("ReleaseYear");
    openapiFields.add("Runtime");
    openapiFields.add("Synopsis");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MovieInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MovieInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MovieInformation is not found in the empty JSON string", MovieInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MovieInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MovieInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("ImdbID") != null && !jsonObj.get("ImdbID").isJsonNull()) && !jsonObj.get("ImdbID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImdbID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImdbID").toString()));
      }
      if ((jsonObj.get("ReleaseYear") != null && !jsonObj.get("ReleaseYear").isJsonNull()) && !jsonObj.get("ReleaseYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReleaseYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReleaseYear").toString()));
      }
      if ((jsonObj.get("Runtime") != null && !jsonObj.get("Runtime").isJsonNull()) && !jsonObj.get("Runtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Runtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Runtime").toString()));
      }
      if ((jsonObj.get("Synopsis") != null && !jsonObj.get("Synopsis").isJsonNull()) && !jsonObj.get("Synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Synopsis").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MovieInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MovieInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MovieInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MovieInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<MovieInformation>() {
           @Override
           public void write(JsonWriter out, MovieInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MovieInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MovieInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MovieInformation
   * @throws IOException if the JSON string is invalid with respect to MovieInformation
   */
  public static MovieInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MovieInformation.class);
  }

  /**
   * Convert an instance of MovieInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

