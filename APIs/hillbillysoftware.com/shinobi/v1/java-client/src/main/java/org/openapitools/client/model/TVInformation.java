/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalIDs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TVInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TVInformation {
  public static final String SERIALIZED_NAME_EPISODE_COUNT = "EpisodeCount";
  @SerializedName(SERIALIZED_NAME_EPISODE_COUNT)
  private String episodeCount;

  public static final String SERIALIZED_NAME_EPISODE_RUNTIME = "EpisodeRuntime";
  @SerializedName(SERIALIZED_NAME_EPISODE_RUNTIME)
  private String episodeRuntime;

  public static final String SERIALIZED_NAME_EXTERNALS = "Externals";
  @SerializedName(SERIALIZED_NAME_EXTERNALS)
  private List<ExternalIDs> externals = new ArrayList<>();

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_RELEASE_YEAR = "ReleaseYear";
  @SerializedName(SERIALIZED_NAME_RELEASE_YEAR)
  private String releaseYear;

  public static final String SERIALIZED_NAME_SEASONS = "Seasons";
  @SerializedName(SERIALIZED_NAME_SEASONS)
  private String seasons;

  public static final String SERIALIZED_NAME_SHOW_IMAGE = "ShowImage";
  @SerializedName(SERIALIZED_NAME_SHOW_IMAGE)
  private String showImage;

  public static final String SERIALIZED_NAME_SHOW_STATUS = "ShowStatus";
  @SerializedName(SERIALIZED_NAME_SHOW_STATUS)
  private String showStatus;

  public static final String SERIALIZED_NAME_SYNOPSIS = "Synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public TVInformation() {
  }

  public TVInformation episodeCount(String episodeCount) {
    this.episodeCount = episodeCount;
    return this;
  }

  /**
   * Get episodeCount
   * @return episodeCount
   */
  @javax.annotation.Nullable
  public String getEpisodeCount() {
    return episodeCount;
  }

  public void setEpisodeCount(String episodeCount) {
    this.episodeCount = episodeCount;
  }


  public TVInformation episodeRuntime(String episodeRuntime) {
    this.episodeRuntime = episodeRuntime;
    return this;
  }

  /**
   * Get episodeRuntime
   * @return episodeRuntime
   */
  @javax.annotation.Nullable
  public String getEpisodeRuntime() {
    return episodeRuntime;
  }

  public void setEpisodeRuntime(String episodeRuntime) {
    this.episodeRuntime = episodeRuntime;
  }


  public TVInformation externals(List<ExternalIDs> externals) {
    this.externals = externals;
    return this;
  }

  public TVInformation addExternalsItem(ExternalIDs externalsItem) {
    if (this.externals == null) {
      this.externals = new ArrayList<>();
    }
    this.externals.add(externalsItem);
    return this;
  }

  /**
   * Get externals
   * @return externals
   */
  @javax.annotation.Nullable
  public List<ExternalIDs> getExternals() {
    return externals;
  }

  public void setExternals(List<ExternalIDs> externals) {
    this.externals = externals;
  }


  public TVInformation ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public TVInformation releaseYear(String releaseYear) {
    this.releaseYear = releaseYear;
    return this;
  }

  /**
   * Get releaseYear
   * @return releaseYear
   */
  @javax.annotation.Nullable
  public String getReleaseYear() {
    return releaseYear;
  }

  public void setReleaseYear(String releaseYear) {
    this.releaseYear = releaseYear;
  }


  public TVInformation seasons(String seasons) {
    this.seasons = seasons;
    return this;
  }

  /**
   * Get seasons
   * @return seasons
   */
  @javax.annotation.Nullable
  public String getSeasons() {
    return seasons;
  }

  public void setSeasons(String seasons) {
    this.seasons = seasons;
  }


  public TVInformation showImage(String showImage) {
    this.showImage = showImage;
    return this;
  }

  /**
   * Get showImage
   * @return showImage
   */
  @javax.annotation.Nullable
  public String getShowImage() {
    return showImage;
  }

  public void setShowImage(String showImage) {
    this.showImage = showImage;
  }


  public TVInformation showStatus(String showStatus) {
    this.showStatus = showStatus;
    return this;
  }

  /**
   * Get showStatus
   * @return showStatus
   */
  @javax.annotation.Nullable
  public String getShowStatus() {
    return showStatus;
  }

  public void setShowStatus(String showStatus) {
    this.showStatus = showStatus;
  }


  public TVInformation synopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  /**
   * Get synopsis
   * @return synopsis
   */
  @javax.annotation.Nullable
  public String getSynopsis() {
    return synopsis;
  }

  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public TVInformation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TVInformation tvInformation = (TVInformation) o;
    return Objects.equals(this.episodeCount, tvInformation.episodeCount) &&
        Objects.equals(this.episodeRuntime, tvInformation.episodeRuntime) &&
        Objects.equals(this.externals, tvInformation.externals) &&
        Objects.equals(this.ID, tvInformation.ID) &&
        Objects.equals(this.releaseYear, tvInformation.releaseYear) &&
        Objects.equals(this.seasons, tvInformation.seasons) &&
        Objects.equals(this.showImage, tvInformation.showImage) &&
        Objects.equals(this.showStatus, tvInformation.showStatus) &&
        Objects.equals(this.synopsis, tvInformation.synopsis) &&
        Objects.equals(this.title, tvInformation.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(episodeCount, episodeRuntime, externals, ID, releaseYear, seasons, showImage, showStatus, synopsis, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TVInformation {\n");
    sb.append("    episodeCount: ").append(toIndentedString(episodeCount)).append("\n");
    sb.append("    episodeRuntime: ").append(toIndentedString(episodeRuntime)).append("\n");
    sb.append("    externals: ").append(toIndentedString(externals)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    releaseYear: ").append(toIndentedString(releaseYear)).append("\n");
    sb.append("    seasons: ").append(toIndentedString(seasons)).append("\n");
    sb.append("    showImage: ").append(toIndentedString(showImage)).append("\n");
    sb.append("    showStatus: ").append(toIndentedString(showStatus)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EpisodeCount");
    openapiFields.add("EpisodeRuntime");
    openapiFields.add("Externals");
    openapiFields.add("ID");
    openapiFields.add("ReleaseYear");
    openapiFields.add("Seasons");
    openapiFields.add("ShowImage");
    openapiFields.add("ShowStatus");
    openapiFields.add("Synopsis");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TVInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TVInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TVInformation is not found in the empty JSON string", TVInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TVInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TVInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EpisodeCount") != null && !jsonObj.get("EpisodeCount").isJsonNull()) && !jsonObj.get("EpisodeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EpisodeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EpisodeCount").toString()));
      }
      if ((jsonObj.get("EpisodeRuntime") != null && !jsonObj.get("EpisodeRuntime").isJsonNull()) && !jsonObj.get("EpisodeRuntime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EpisodeRuntime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EpisodeRuntime").toString()));
      }
      if (jsonObj.get("Externals") != null && !jsonObj.get("Externals").isJsonNull()) {
        JsonArray jsonArrayexternals = jsonObj.getAsJsonArray("Externals");
        if (jsonArrayexternals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Externals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Externals` to be an array in the JSON string but got `%s`", jsonObj.get("Externals").toString()));
          }

          // validate the optional field `Externals` (array)
          for (int i = 0; i < jsonArrayexternals.size(); i++) {
            ExternalIDs.validateJsonElement(jsonArrayexternals.get(i));
          };
        }
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("ReleaseYear") != null && !jsonObj.get("ReleaseYear").isJsonNull()) && !jsonObj.get("ReleaseYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReleaseYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReleaseYear").toString()));
      }
      if ((jsonObj.get("Seasons") != null && !jsonObj.get("Seasons").isJsonNull()) && !jsonObj.get("Seasons").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Seasons` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Seasons").toString()));
      }
      if ((jsonObj.get("ShowImage") != null && !jsonObj.get("ShowImage").isJsonNull()) && !jsonObj.get("ShowImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShowImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShowImage").toString()));
      }
      if ((jsonObj.get("ShowStatus") != null && !jsonObj.get("ShowStatus").isJsonNull()) && !jsonObj.get("ShowStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShowStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShowStatus").toString()));
      }
      if ((jsonObj.get("Synopsis") != null && !jsonObj.get("Synopsis").isJsonNull()) && !jsonObj.get("Synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Synopsis").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TVInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TVInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TVInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TVInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<TVInformation>() {
           @Override
           public void write(JsonWriter out, TVInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TVInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TVInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TVInformation
   * @throws IOException if the JSON string is invalid with respect to TVInformation
   */
  public static TVInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TVInformation.class);
  }

  /**
   * Convert an instance of TVInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

