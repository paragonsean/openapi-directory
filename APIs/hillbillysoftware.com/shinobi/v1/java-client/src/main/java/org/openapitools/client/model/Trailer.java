/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trailer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trailer {
  public static final String SERIALIZED_NAME_EPISODE = "Episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private String episode;

  public static final String SERIALIZED_NAME_KEY = "Key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "MediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private String season;

  public static final String SERIALIZED_NAME_SITE = "Site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site;

  public static final String SERIALIZED_NAME_TRAILER_NAME = "TrailerName";
  @SerializedName(SERIALIZED_NAME_TRAILER_NAME)
  private String trailerName;

  public static final String SERIALIZED_NAME_TRAILER_SIZE = "TrailerSize";
  @SerializedName(SERIALIZED_NAME_TRAILER_SIZE)
  private String trailerSize;

  public static final String SERIALIZED_NAME_TRAILER_TYPE = "TrailerType";
  @SerializedName(SERIALIZED_NAME_TRAILER_TYPE)
  private String trailerType;

  public static final String SERIALIZED_NAME_YOU_TUBE_EMBEDDED_CODE = "YouTubeEmbeddedCode";
  @SerializedName(SERIALIZED_NAME_YOU_TUBE_EMBEDDED_CODE)
  private String youTubeEmbeddedCode;

  public static final String SERIALIZED_NAME_YOU_TUBE_U_R_L = "YouTubeURL";
  @SerializedName(SERIALIZED_NAME_YOU_TUBE_U_R_L)
  private String youTubeURL;

  public Trailer() {
  }

  public Trailer episode(String episode) {
    this.episode = episode;
    return this;
  }

  /**
   * Get episode
   * @return episode
   */
  @javax.annotation.Nullable
  public String getEpisode() {
    return episode;
  }

  public void setEpisode(String episode) {
    this.episode = episode;
  }


  public Trailer key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Key for trailer, usually end part of uri for youtube links
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Trailer mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Returns Media Type, either C (Channel) T (Television) or M (Movie)
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public Trailer season(String season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public String getSeason() {
    return season;
  }

  public void setSeason(String season) {
    this.season = season;
  }


  public Trailer site(String site) {
    this.site = site;
    return this;
  }

  /**
   * Get site
   * @return site
   */
  @javax.annotation.Nullable
  public String getSite() {
    return site;
  }

  public void setSite(String site) {
    this.site = site;
  }


  public Trailer trailerName(String trailerName) {
    this.trailerName = trailerName;
    return this;
  }

  /**
   * Get trailerName
   * @return trailerName
   */
  @javax.annotation.Nullable
  public String getTrailerName() {
    return trailerName;
  }

  public void setTrailerName(String trailerName) {
    this.trailerName = trailerName;
  }


  public Trailer trailerSize(String trailerSize) {
    this.trailerSize = trailerSize;
    return this;
  }

  /**
   * Get trailerSize
   * @return trailerSize
   */
  @javax.annotation.Nullable
  public String getTrailerSize() {
    return trailerSize;
  }

  public void setTrailerSize(String trailerSize) {
    this.trailerSize = trailerSize;
  }


  public Trailer trailerType(String trailerType) {
    this.trailerType = trailerType;
    return this;
  }

  /**
   * Returns Trailer type (trailer, teaser, channel, episode,credits, clip etc)
   * @return trailerType
   */
  @javax.annotation.Nullable
  public String getTrailerType() {
    return trailerType;
  }

  public void setTrailerType(String trailerType) {
    this.trailerType = trailerType;
  }


  public Trailer youTubeEmbeddedCode(String youTubeEmbeddedCode) {
    this.youTubeEmbeddedCode = youTubeEmbeddedCode;
    return this;
  }

  /**
   * Get youTubeEmbeddedCode
   * @return youTubeEmbeddedCode
   */
  @javax.annotation.Nullable
  public String getYouTubeEmbeddedCode() {
    return youTubeEmbeddedCode;
  }

  public void setYouTubeEmbeddedCode(String youTubeEmbeddedCode) {
    this.youTubeEmbeddedCode = youTubeEmbeddedCode;
  }


  public Trailer youTubeURL(String youTubeURL) {
    this.youTubeURL = youTubeURL;
    return this;
  }

  /**
   * Get youTubeURL
   * @return youTubeURL
   */
  @javax.annotation.Nullable
  public String getYouTubeURL() {
    return youTubeURL;
  }

  public void setYouTubeURL(String youTubeURL) {
    this.youTubeURL = youTubeURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trailer trailer = (Trailer) o;
    return Objects.equals(this.episode, trailer.episode) &&
        Objects.equals(this.key, trailer.key) &&
        Objects.equals(this.mediaType, trailer.mediaType) &&
        Objects.equals(this.season, trailer.season) &&
        Objects.equals(this.site, trailer.site) &&
        Objects.equals(this.trailerName, trailer.trailerName) &&
        Objects.equals(this.trailerSize, trailer.trailerSize) &&
        Objects.equals(this.trailerType, trailer.trailerType) &&
        Objects.equals(this.youTubeEmbeddedCode, trailer.youTubeEmbeddedCode) &&
        Objects.equals(this.youTubeURL, trailer.youTubeURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(episode, key, mediaType, season, site, trailerName, trailerSize, trailerType, youTubeEmbeddedCode, youTubeURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trailer {\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    trailerName: ").append(toIndentedString(trailerName)).append("\n");
    sb.append("    trailerSize: ").append(toIndentedString(trailerSize)).append("\n");
    sb.append("    trailerType: ").append(toIndentedString(trailerType)).append("\n");
    sb.append("    youTubeEmbeddedCode: ").append(toIndentedString(youTubeEmbeddedCode)).append("\n");
    sb.append("    youTubeURL: ").append(toIndentedString(youTubeURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Episode");
    openapiFields.add("Key");
    openapiFields.add("MediaType");
    openapiFields.add("Season");
    openapiFields.add("Site");
    openapiFields.add("TrailerName");
    openapiFields.add("TrailerSize");
    openapiFields.add("TrailerType");
    openapiFields.add("YouTubeEmbeddedCode");
    openapiFields.add("YouTubeURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trailer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trailer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trailer is not found in the empty JSON string", Trailer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trailer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trailer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Episode") != null && !jsonObj.get("Episode").isJsonNull()) && !jsonObj.get("Episode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Episode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Episode").toString()));
      }
      if ((jsonObj.get("Key") != null && !jsonObj.get("Key").isJsonNull()) && !jsonObj.get("Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Key").toString()));
      }
      if ((jsonObj.get("MediaType") != null && !jsonObj.get("MediaType").isJsonNull()) && !jsonObj.get("MediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MediaType").toString()));
      }
      if ((jsonObj.get("Season") != null && !jsonObj.get("Season").isJsonNull()) && !jsonObj.get("Season").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Season` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Season").toString()));
      }
      if ((jsonObj.get("Site") != null && !jsonObj.get("Site").isJsonNull()) && !jsonObj.get("Site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Site").toString()));
      }
      if ((jsonObj.get("TrailerName") != null && !jsonObj.get("TrailerName").isJsonNull()) && !jsonObj.get("TrailerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrailerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrailerName").toString()));
      }
      if ((jsonObj.get("TrailerSize") != null && !jsonObj.get("TrailerSize").isJsonNull()) && !jsonObj.get("TrailerSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrailerSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrailerSize").toString()));
      }
      if ((jsonObj.get("TrailerType") != null && !jsonObj.get("TrailerType").isJsonNull()) && !jsonObj.get("TrailerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrailerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrailerType").toString()));
      }
      if ((jsonObj.get("YouTubeEmbeddedCode") != null && !jsonObj.get("YouTubeEmbeddedCode").isJsonNull()) && !jsonObj.get("YouTubeEmbeddedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YouTubeEmbeddedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YouTubeEmbeddedCode").toString()));
      }
      if ((jsonObj.get("YouTubeURL") != null && !jsonObj.get("YouTubeURL").isJsonNull()) && !jsonObj.get("YouTubeURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YouTubeURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YouTubeURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trailer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trailer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trailer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trailer.class));

       return (TypeAdapter<T>) new TypeAdapter<Trailer>() {
           @Override
           public void write(JsonWriter out, Trailer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trailer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trailer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trailer
   * @throws IOException if the JSON string is invalid with respect to Trailer
   */
  public static Trailer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trailer.class);
  }

  /**
   * Convert an instance of Trailer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

