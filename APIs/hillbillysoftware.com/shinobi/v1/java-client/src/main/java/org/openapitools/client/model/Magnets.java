/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalIDs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Magnets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:59.717792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Magnets {
  public static final String SERIALIZED_NAME_EXTERNALS = "Externals";
  @SerializedName(SERIALIZED_NAME_EXTERNALS)
  private List<ExternalIDs> externals = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_SEEN_DATE = "FirstSeenDate";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN_DATE)
  private String firstSeenDate;

  public static final String SERIALIZED_NAME_HASH = "Hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_IMAGE = "Image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEERS = "Peers";
  @SerializedName(SERIALIZED_NAME_PEERS)
  private String peers;

  public static final String SERIALIZED_NAME_SEEDS = "Seeds";
  @SerializedName(SERIALIZED_NAME_SEEDS)
  private String seeds;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Magnets() {
  }

  public Magnets externals(List<ExternalIDs> externals) {
    this.externals = externals;
    return this;
  }

  public Magnets addExternalsItem(ExternalIDs externalsItem) {
    if (this.externals == null) {
      this.externals = new ArrayList<>();
    }
    this.externals.add(externalsItem);
    return this;
  }

  /**
   * Get externals
   * @return externals
   */
  @javax.annotation.Nullable
  public List<ExternalIDs> getExternals() {
    return externals;
  }

  public void setExternals(List<ExternalIDs> externals) {
    this.externals = externals;
  }


  public Magnets firstSeenDate(String firstSeenDate) {
    this.firstSeenDate = firstSeenDate;
    return this;
  }

  /**
   * Date this hash was first detected
   * @return firstSeenDate
   */
  @javax.annotation.Nullable
  public String getFirstSeenDate() {
    return firstSeenDate;
  }

  public void setFirstSeenDate(String firstSeenDate) {
    this.firstSeenDate = firstSeenDate;
  }


  public Magnets hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The actual hash you need to construct your magnet
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public Magnets image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Magnets name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Magnets peers(String peers) {
    this.peers = peers;
    return this;
  }

  /**
   * Number of Peers available at FirstSeenDate
   * @return peers
   */
  @javax.annotation.Nullable
  public String getPeers() {
    return peers;
  }

  public void setPeers(String peers) {
    this.peers = peers;
  }


  public Magnets seeds(String seeds) {
    this.seeds = seeds;
    return this;
  }

  /**
   * Number of Seeds available at FirstSeenDate
   * @return seeds
   */
  @javax.annotation.Nullable
  public String getSeeds() {
    return seeds;
  }

  public void setSeeds(String seeds) {
    this.seeds = seeds;
  }


  public Magnets size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public Magnets title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Magnets type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Magnets magnets = (Magnets) o;
    return Objects.equals(this.externals, magnets.externals) &&
        Objects.equals(this.firstSeenDate, magnets.firstSeenDate) &&
        Objects.equals(this.hash, magnets.hash) &&
        Objects.equals(this.image, magnets.image) &&
        Objects.equals(this.name, magnets.name) &&
        Objects.equals(this.peers, magnets.peers) &&
        Objects.equals(this.seeds, magnets.seeds) &&
        Objects.equals(this.size, magnets.size) &&
        Objects.equals(this.title, magnets.title) &&
        Objects.equals(this.type, magnets.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externals, firstSeenDate, hash, image, name, peers, seeds, size, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Magnets {\n");
    sb.append("    externals: ").append(toIndentedString(externals)).append("\n");
    sb.append("    firstSeenDate: ").append(toIndentedString(firstSeenDate)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peers: ").append(toIndentedString(peers)).append("\n");
    sb.append("    seeds: ").append(toIndentedString(seeds)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Externals");
    openapiFields.add("FirstSeenDate");
    openapiFields.add("Hash");
    openapiFields.add("Image");
    openapiFields.add("Name");
    openapiFields.add("Peers");
    openapiFields.add("Seeds");
    openapiFields.add("Size");
    openapiFields.add("Title");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Magnets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Magnets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Magnets is not found in the empty JSON string", Magnets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Magnets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Magnets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Externals") != null && !jsonObj.get("Externals").isJsonNull()) {
        JsonArray jsonArrayexternals = jsonObj.getAsJsonArray("Externals");
        if (jsonArrayexternals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Externals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Externals` to be an array in the JSON string but got `%s`", jsonObj.get("Externals").toString()));
          }

          // validate the optional field `Externals` (array)
          for (int i = 0; i < jsonArrayexternals.size(); i++) {
            ExternalIDs.validateJsonElement(jsonArrayexternals.get(i));
          };
        }
      }
      if ((jsonObj.get("FirstSeenDate") != null && !jsonObj.get("FirstSeenDate").isJsonNull()) && !jsonObj.get("FirstSeenDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstSeenDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstSeenDate").toString()));
      }
      if ((jsonObj.get("Hash") != null && !jsonObj.get("Hash").isJsonNull()) && !jsonObj.get("Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Hash").toString()));
      }
      if ((jsonObj.get("Image") != null && !jsonObj.get("Image").isJsonNull()) && !jsonObj.get("Image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Image").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Peers") != null && !jsonObj.get("Peers").isJsonNull()) && !jsonObj.get("Peers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Peers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Peers").toString()));
      }
      if ((jsonObj.get("Seeds") != null && !jsonObj.get("Seeds").isJsonNull()) && !jsonObj.get("Seeds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Seeds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Seeds").toString()));
      }
      if ((jsonObj.get("Size") != null && !jsonObj.get("Size").isJsonNull()) && !jsonObj.get("Size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Size").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Magnets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Magnets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Magnets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Magnets.class));

       return (TypeAdapter<T>) new TypeAdapter<Magnets>() {
           @Override
           public void write(JsonWriter out, Magnets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Magnets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Magnets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Magnets
   * @throws IOException if the JSON string is invalid with respect to Magnets
   */
  public static Magnets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Magnets.class);
  }

  /**
   * Convert an instance of Magnets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

