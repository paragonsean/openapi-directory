/*
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AlbumArt;
import org.openapitools.client.model.AlbumTracks;
import org.openapitools.client.model.ArtistArt;
import org.openapitools.client.model.BandAlbums;
import org.openapitools.client.model.BandInfo;
import org.openapitools.client.model.BandInfoExtended;
import org.openapitools.client.model.CDCoverArt;
import org.openapitools.client.model.Lyric;
import org.openapitools.client.model.MusicVideo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MusicArtistsBandsTracksAlbumArtCoverArtVideosApi
 */
@Disabled
public class MusicArtistsBandsTracksAlbumArtCoverArtVideosApiTest {

    private final MusicArtistsBandsTracksAlbumArtCoverArtVideosApi api = new MusicArtistsBandsTracksAlbumArtCoverArtVideosApi();

    /**
     * Lists all videos available for this Artist / Band
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musiVideosGetTest() throws ApiException {
        String accessToken = null;
        String artistID = null;
        List<MusicVideo> response = api.musiVideosGet(accessToken, artistID);
        // TODO: test validations
    }

    /**
     * Returns Albumart for passed AlbumID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicAlbumArtGetTest() throws ApiException {
        String accessToken = null;
        String albumID = null;
        AlbumArt response = api.musicAlbumArtGet(accessToken, albumID);
        // TODO: test validations
    }

    /**
     * Get albums from passed ArtistID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicAlbumsGetTest() throws ApiException {
        String accessToken = null;
        String artistID = null;
        List<BandAlbums> response = api.musicAlbumsGet(accessToken, artistID);
        // TODO: test validations
    }

    /**
     * Provides extended information, which includes all known albums and music videos of artist / band
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicArtistExtendedGetTest() throws ApiException {
        String accessToken = null;
        String name = null;
        List<BandInfoExtended> response = api.musicArtistExtendedGet(accessToken, name);
        // TODO: test validations
    }

    /**
     * Get Artist / Band information on MusicBrainzID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicByMusicBrainzGetTest() throws ApiException {
        String accessToken = null;
        String MBID = null;
        List<BandInfo> response = api.musicByMusicBrainzGet(accessToken, MBID);
        // TODO: test validations
    }

    /**
     * Gets CD art for passed MusicBrainzID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicCDCoversGetTest() throws ApiException {
        String accessToken = null;
        String MBID = null;
        List<CDCoverArt> response = api.musicCDCoversGet(accessToken, MBID);
        // TODO: test validations
    }

    /**
     * Retrieves artist / band Banner and logo based on artist or bandname
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicCoverArtByNameGetTest() throws ApiException {
        String accessToken = null;
        String name = null;
        ArtistArt response = api.musicCoverArtByNameGet(accessToken, name);
        // TODO: test validations
    }

    /**
     * Retrieves artist / band Banner and logo based on ArtistID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicCoverArtGetTest() throws ApiException {
        String accessToken = null;
        String artistID = null;
        ArtistArt response = api.musicCoverArtGet(accessToken, artistID);
        // TODO: test validations
    }

    /**
     * Get information about passed band name or artist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicGetTest() throws ApiException {
        String accessToken = null;
        String name = null;
        List<BandInfo> response = api.musicGet(accessToken, name);
        // TODO: test validations
    }

    /**
     * Get lyrics on song title
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicLyricsBySongGetTest() throws ApiException {
        String accessToken = null;
        String song = null;
        List<Lyric> response = api.musicLyricsBySongGet(accessToken, song);
        // TODO: test validations
    }

    /**
     * Get lyrics for band or artist (record set limited to 25)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicLyricsGetTest() throws ApiException {
        String accessToken = null;
        String name = null;
        List<Lyric> response = api.musicLyricsGet(accessToken, name);
        // TODO: test validations
    }

    /**
     * Returns all lyrics for requested AlbumID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicLyricsbyAlbumIDGetTest() throws ApiException {
        String accessToken = null;
        String albumID = null;
        List<Lyric> response = api.musicLyricsbyAlbumIDGet(accessToken, albumID);
        // TODO: test validations
    }

    /**
     * Get all tracks from requested album
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void musicTracksGetTest() throws ApiException {
        String accessToken = null;
        String albumID = null;
        List<AlbumTracks> response = api.musicTracksGet(accessToken, albumID);
        // TODO: test validations
    }

}
