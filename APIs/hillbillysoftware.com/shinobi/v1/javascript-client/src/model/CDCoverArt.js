/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CDCoverArt model module.
 * @module model/CDCoverArt
 * @version v1
 */
class CDCoverArt {
    /**
     * Constructs a new <code>CDCoverArt</code>.
     * @alias module:model/CDCoverArt
     */
    constructor() { 
        
        CDCoverArt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CDCoverArt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CDCoverArt} obj Optional instance to populate.
     * @return {module:model/CDCoverArt} The populated <code>CDCoverArt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CDCoverArt();

            if (data.hasOwnProperty('CoverImage')) {
                obj['CoverImage'] = ApiClient.convertToType(data['CoverImage'], 'String');
            }
            if (data.hasOwnProperty('CoverThumbMedium')) {
                obj['CoverThumbMedium'] = ApiClient.convertToType(data['CoverThumbMedium'], 'String');
            }
            if (data.hasOwnProperty('CoverThumbSmall')) {
                obj['CoverThumbSmall'] = ApiClient.convertToType(data['CoverThumbSmall'], 'String');
            }
            if (data.hasOwnProperty('CoverType')) {
                obj['CoverType'] = ApiClient.convertToType(data['CoverType'], 'String');
            }
            if (data.hasOwnProperty('MusicBrainzID')) {
                obj['MusicBrainzID'] = ApiClient.convertToType(data['MusicBrainzID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CDCoverArt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CDCoverArt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CoverImage'] && !(typeof data['CoverImage'] === 'string' || data['CoverImage'] instanceof String)) {
            throw new Error("Expected the field `CoverImage` to be a primitive type in the JSON string but got " + data['CoverImage']);
        }
        // ensure the json data is a string
        if (data['CoverThumbMedium'] && !(typeof data['CoverThumbMedium'] === 'string' || data['CoverThumbMedium'] instanceof String)) {
            throw new Error("Expected the field `CoverThumbMedium` to be a primitive type in the JSON string but got " + data['CoverThumbMedium']);
        }
        // ensure the json data is a string
        if (data['CoverThumbSmall'] && !(typeof data['CoverThumbSmall'] === 'string' || data['CoverThumbSmall'] instanceof String)) {
            throw new Error("Expected the field `CoverThumbSmall` to be a primitive type in the JSON string but got " + data['CoverThumbSmall']);
        }
        // ensure the json data is a string
        if (data['CoverType'] && !(typeof data['CoverType'] === 'string' || data['CoverType'] instanceof String)) {
            throw new Error("Expected the field `CoverType` to be a primitive type in the JSON string but got " + data['CoverType']);
        }
        // ensure the json data is a string
        if (data['MusicBrainzID'] && !(typeof data['MusicBrainzID'] === 'string' || data['MusicBrainzID'] instanceof String)) {
            throw new Error("Expected the field `MusicBrainzID` to be a primitive type in the JSON string but got " + data['MusicBrainzID']);
        }

        return true;
    }


}



/**
 * @member {String} CoverImage
 */
CDCoverArt.prototype['CoverImage'] = undefined;

/**
 * @member {String} CoverThumbMedium
 */
CDCoverArt.prototype['CoverThumbMedium'] = undefined;

/**
 * @member {String} CoverThumbSmall
 */
CDCoverArt.prototype['CoverThumbSmall'] = undefined;

/**
 * @member {String} CoverType
 */
CDCoverArt.prototype['CoverType'] = undefined;

/**
 * @member {String} MusicBrainzID
 */
CDCoverArt.prototype['MusicBrainzID'] = undefined;






export default CDCoverArt;

