/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalIDs from './ExternalIDs';

/**
 * The Crew model module.
 * @module model/Crew
 * @version v1
 */
class Crew {
    /**
     * Constructs a new <code>Crew</code>.
     * @alias module:model/Crew
     */
    constructor() { 
        
        Crew.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Crew</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crew} obj Optional instance to populate.
     * @return {module:model/Crew} The populated <code>Crew</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crew();

            if (data.hasOwnProperty('Externals')) {
                obj['Externals'] = ApiClient.convertToType(data['Externals'], [ExternalIDs]);
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ShowName')) {
                obj['ShowName'] = ApiClient.convertToType(data['ShowName'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crew</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crew</code>.
     */
    static validateJSON(data) {
        if (data['Externals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Externals'])) {
                throw new Error("Expected the field `Externals` to be an array in the JSON data but got " + data['Externals']);
            }
            // validate the optional field `Externals` (array)
            for (const item of data['Externals']) {
                ExternalIDs.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Image'] && !(typeof data['Image'] === 'string' || data['Image'] instanceof String)) {
            throw new Error("Expected the field `Image` to be a primitive type in the JSON string but got " + data['Image']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ShowName'] && !(typeof data['ShowName'] === 'string' || data['ShowName'] instanceof String)) {
            throw new Error("Expected the field `ShowName` to be a primitive type in the JSON string but got " + data['ShowName']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ExternalIDs>} Externals
 */
Crew.prototype['Externals'] = undefined;

/**
 * @member {String} Image
 */
Crew.prototype['Image'] = undefined;

/**
 * @member {String} Name
 */
Crew.prototype['Name'] = undefined;

/**
 * @member {String} ShowName
 */
Crew.prototype['ShowName'] = undefined;

/**
 * @member {String} Type
 */
Crew.prototype['Type'] = undefined;






export default Crew;

