/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Trailer model module.
 * @module model/Trailer
 * @version v1
 */
class Trailer {
    /**
     * Constructs a new <code>Trailer</code>.
     * @alias module:model/Trailer
     */
    constructor() { 
        
        Trailer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trailer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trailer} obj Optional instance to populate.
     * @return {module:model/Trailer} The populated <code>Trailer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trailer();

            if (data.hasOwnProperty('Episode')) {
                obj['Episode'] = ApiClient.convertToType(data['Episode'], 'String');
            }
            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('MediaType')) {
                obj['MediaType'] = ApiClient.convertToType(data['MediaType'], 'String');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'String');
            }
            if (data.hasOwnProperty('Site')) {
                obj['Site'] = ApiClient.convertToType(data['Site'], 'String');
            }
            if (data.hasOwnProperty('TrailerName')) {
                obj['TrailerName'] = ApiClient.convertToType(data['TrailerName'], 'String');
            }
            if (data.hasOwnProperty('TrailerSize')) {
                obj['TrailerSize'] = ApiClient.convertToType(data['TrailerSize'], 'String');
            }
            if (data.hasOwnProperty('TrailerType')) {
                obj['TrailerType'] = ApiClient.convertToType(data['TrailerType'], 'String');
            }
            if (data.hasOwnProperty('YouTubeEmbeddedCode')) {
                obj['YouTubeEmbeddedCode'] = ApiClient.convertToType(data['YouTubeEmbeddedCode'], 'String');
            }
            if (data.hasOwnProperty('YouTubeURL')) {
                obj['YouTubeURL'] = ApiClient.convertToType(data['YouTubeURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trailer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trailer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Episode'] && !(typeof data['Episode'] === 'string' || data['Episode'] instanceof String)) {
            throw new Error("Expected the field `Episode` to be a primitive type in the JSON string but got " + data['Episode']);
        }
        // ensure the json data is a string
        if (data['Key'] && !(typeof data['Key'] === 'string' || data['Key'] instanceof String)) {
            throw new Error("Expected the field `Key` to be a primitive type in the JSON string but got " + data['Key']);
        }
        // ensure the json data is a string
        if (data['MediaType'] && !(typeof data['MediaType'] === 'string' || data['MediaType'] instanceof String)) {
            throw new Error("Expected the field `MediaType` to be a primitive type in the JSON string but got " + data['MediaType']);
        }
        // ensure the json data is a string
        if (data['Season'] && !(typeof data['Season'] === 'string' || data['Season'] instanceof String)) {
            throw new Error("Expected the field `Season` to be a primitive type in the JSON string but got " + data['Season']);
        }
        // ensure the json data is a string
        if (data['Site'] && !(typeof data['Site'] === 'string' || data['Site'] instanceof String)) {
            throw new Error("Expected the field `Site` to be a primitive type in the JSON string but got " + data['Site']);
        }
        // ensure the json data is a string
        if (data['TrailerName'] && !(typeof data['TrailerName'] === 'string' || data['TrailerName'] instanceof String)) {
            throw new Error("Expected the field `TrailerName` to be a primitive type in the JSON string but got " + data['TrailerName']);
        }
        // ensure the json data is a string
        if (data['TrailerSize'] && !(typeof data['TrailerSize'] === 'string' || data['TrailerSize'] instanceof String)) {
            throw new Error("Expected the field `TrailerSize` to be a primitive type in the JSON string but got " + data['TrailerSize']);
        }
        // ensure the json data is a string
        if (data['TrailerType'] && !(typeof data['TrailerType'] === 'string' || data['TrailerType'] instanceof String)) {
            throw new Error("Expected the field `TrailerType` to be a primitive type in the JSON string but got " + data['TrailerType']);
        }
        // ensure the json data is a string
        if (data['YouTubeEmbeddedCode'] && !(typeof data['YouTubeEmbeddedCode'] === 'string' || data['YouTubeEmbeddedCode'] instanceof String)) {
            throw new Error("Expected the field `YouTubeEmbeddedCode` to be a primitive type in the JSON string but got " + data['YouTubeEmbeddedCode']);
        }
        // ensure the json data is a string
        if (data['YouTubeURL'] && !(typeof data['YouTubeURL'] === 'string' || data['YouTubeURL'] instanceof String)) {
            throw new Error("Expected the field `YouTubeURL` to be a primitive type in the JSON string but got " + data['YouTubeURL']);
        }

        return true;
    }


}



/**
 * @member {String} Episode
 */
Trailer.prototype['Episode'] = undefined;

/**
 * Key for trailer, usually end part of uri for youtube links
 * @member {String} Key
 */
Trailer.prototype['Key'] = undefined;

/**
 * Returns Media Type, either C (Channel) T (Television) or M (Movie)
 * @member {String} MediaType
 */
Trailer.prototype['MediaType'] = undefined;

/**
 * @member {String} Season
 */
Trailer.prototype['Season'] = undefined;

/**
 * @member {String} Site
 */
Trailer.prototype['Site'] = undefined;

/**
 * @member {String} TrailerName
 */
Trailer.prototype['TrailerName'] = undefined;

/**
 * @member {String} TrailerSize
 */
Trailer.prototype['TrailerSize'] = undefined;

/**
 * Returns Trailer type (trailer, teaser, channel, episode,credits, clip etc)
 * @member {String} TrailerType
 */
Trailer.prototype['TrailerType'] = undefined;

/**
 * @member {String} YouTubeEmbeddedCode
 */
Trailer.prototype['YouTubeEmbeddedCode'] = undefined;

/**
 * @member {String} YouTubeURL
 */
Trailer.prototype['YouTubeURL'] = undefined;






export default Trailer;

