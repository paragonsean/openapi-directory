/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BandAlbums from './BandAlbums';
import MusicVideo from './MusicVideo';

/**
 * The BandInfoExtended model module.
 * @module model/BandInfoExtended
 * @version v1
 */
class BandInfoExtended {
    /**
     * Constructs a new <code>BandInfoExtended</code>.
     * @alias module:model/BandInfoExtended
     */
    constructor() { 
        
        BandInfoExtended.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BandInfoExtended</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BandInfoExtended} obj Optional instance to populate.
     * @return {module:model/BandInfoExtended} The populated <code>BandInfoExtended</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BandInfoExtended();

            if (data.hasOwnProperty('Albums')) {
                obj['Albums'] = ApiClient.convertToType(data['Albums'], [BandAlbums]);
            }
            if (data.hasOwnProperty('ArtistID')) {
                obj['ArtistID'] = ApiClient.convertToType(data['ArtistID'], 'String');
            }
            if (data.hasOwnProperty('Banner')) {
                obj['Banner'] = ApiClient.convertToType(data['Banner'], 'String');
            }
            if (data.hasOwnProperty('Biography')) {
                obj['Biography'] = ApiClient.convertToType(data['Biography'], 'String');
            }
            if (data.hasOwnProperty('DisbandedYear')) {
                obj['DisbandedYear'] = ApiClient.convertToType(data['DisbandedYear'], 'String');
            }
            if (data.hasOwnProperty('FormationYear')) {
                obj['FormationYear'] = ApiClient.convertToType(data['FormationYear'], 'String');
            }
            if (data.hasOwnProperty('Genre')) {
                obj['Genre'] = ApiClient.convertToType(data['Genre'], 'String');
            }
            if (data.hasOwnProperty('Logo')) {
                obj['Logo'] = ApiClient.convertToType(data['Logo'], 'String');
            }
            if (data.hasOwnProperty('Members')) {
                obj['Members'] = ApiClient.convertToType(data['Members'], 'String');
            }
            if (data.hasOwnProperty('MusicBrainzID')) {
                obj['MusicBrainzID'] = ApiClient.convertToType(data['MusicBrainzID'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SocialMedia')) {
                obj['SocialMedia'] = ApiClient.convertToType(data['SocialMedia'], 'String');
            }
            if (data.hasOwnProperty('Videos')) {
                obj['Videos'] = ApiClient.convertToType(data['Videos'], [MusicVideo]);
            }
            if (data.hasOwnProperty('WebSite')) {
                obj['WebSite'] = ApiClient.convertToType(data['WebSite'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BandInfoExtended</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BandInfoExtended</code>.
     */
    static validateJSON(data) {
        if (data['Albums']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Albums'])) {
                throw new Error("Expected the field `Albums` to be an array in the JSON data but got " + data['Albums']);
            }
            // validate the optional field `Albums` (array)
            for (const item of data['Albums']) {
                BandAlbums.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ArtistID'] && !(typeof data['ArtistID'] === 'string' || data['ArtistID'] instanceof String)) {
            throw new Error("Expected the field `ArtistID` to be a primitive type in the JSON string but got " + data['ArtistID']);
        }
        // ensure the json data is a string
        if (data['Banner'] && !(typeof data['Banner'] === 'string' || data['Banner'] instanceof String)) {
            throw new Error("Expected the field `Banner` to be a primitive type in the JSON string but got " + data['Banner']);
        }
        // ensure the json data is a string
        if (data['Biography'] && !(typeof data['Biography'] === 'string' || data['Biography'] instanceof String)) {
            throw new Error("Expected the field `Biography` to be a primitive type in the JSON string but got " + data['Biography']);
        }
        // ensure the json data is a string
        if (data['DisbandedYear'] && !(typeof data['DisbandedYear'] === 'string' || data['DisbandedYear'] instanceof String)) {
            throw new Error("Expected the field `DisbandedYear` to be a primitive type in the JSON string but got " + data['DisbandedYear']);
        }
        // ensure the json data is a string
        if (data['FormationYear'] && !(typeof data['FormationYear'] === 'string' || data['FormationYear'] instanceof String)) {
            throw new Error("Expected the field `FormationYear` to be a primitive type in the JSON string but got " + data['FormationYear']);
        }
        // ensure the json data is a string
        if (data['Genre'] && !(typeof data['Genre'] === 'string' || data['Genre'] instanceof String)) {
            throw new Error("Expected the field `Genre` to be a primitive type in the JSON string but got " + data['Genre']);
        }
        // ensure the json data is a string
        if (data['Logo'] && !(typeof data['Logo'] === 'string' || data['Logo'] instanceof String)) {
            throw new Error("Expected the field `Logo` to be a primitive type in the JSON string but got " + data['Logo']);
        }
        // ensure the json data is a string
        if (data['Members'] && !(typeof data['Members'] === 'string' || data['Members'] instanceof String)) {
            throw new Error("Expected the field `Members` to be a primitive type in the JSON string but got " + data['Members']);
        }
        // ensure the json data is a string
        if (data['MusicBrainzID'] && !(typeof data['MusicBrainzID'] === 'string' || data['MusicBrainzID'] instanceof String)) {
            throw new Error("Expected the field `MusicBrainzID` to be a primitive type in the JSON string but got " + data['MusicBrainzID']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SocialMedia'] && !(typeof data['SocialMedia'] === 'string' || data['SocialMedia'] instanceof String)) {
            throw new Error("Expected the field `SocialMedia` to be a primitive type in the JSON string but got " + data['SocialMedia']);
        }
        if (data['Videos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Videos'])) {
                throw new Error("Expected the field `Videos` to be an array in the JSON data but got " + data['Videos']);
            }
            // validate the optional field `Videos` (array)
            for (const item of data['Videos']) {
                MusicVideo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['WebSite'] && !(typeof data['WebSite'] === 'string' || data['WebSite'] instanceof String)) {
            throw new Error("Expected the field `WebSite` to be a primitive type in the JSON string but got " + data['WebSite']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/BandAlbums>} Albums
 */
BandInfoExtended.prototype['Albums'] = undefined;

/**
 * @member {String} ArtistID
 */
BandInfoExtended.prototype['ArtistID'] = undefined;

/**
 * @member {String} Banner
 */
BandInfoExtended.prototype['Banner'] = undefined;

/**
 * @member {String} Biography
 */
BandInfoExtended.prototype['Biography'] = undefined;

/**
 * @member {String} DisbandedYear
 */
BandInfoExtended.prototype['DisbandedYear'] = undefined;

/**
 * @member {String} FormationYear
 */
BandInfoExtended.prototype['FormationYear'] = undefined;

/**
 * @member {String} Genre
 */
BandInfoExtended.prototype['Genre'] = undefined;

/**
 * @member {String} Logo
 */
BandInfoExtended.prototype['Logo'] = undefined;

/**
 * @member {String} Members
 */
BandInfoExtended.prototype['Members'] = undefined;

/**
 * @member {String} MusicBrainzID
 */
BandInfoExtended.prototype['MusicBrainzID'] = undefined;

/**
 * @member {String} Name
 */
BandInfoExtended.prototype['Name'] = undefined;

/**
 * @member {String} SocialMedia
 */
BandInfoExtended.prototype['SocialMedia'] = undefined;

/**
 * @member {Array.<module:model/MusicVideo>} Videos
 */
BandInfoExtended.prototype['Videos'] = undefined;

/**
 * @member {String} WebSite
 */
BandInfoExtended.prototype['WebSite'] = undefined;






export default BandInfoExtended;

