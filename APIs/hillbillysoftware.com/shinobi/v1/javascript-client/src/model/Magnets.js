/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalIDs from './ExternalIDs';

/**
 * The Magnets model module.
 * @module model/Magnets
 * @version v1
 */
class Magnets {
    /**
     * Constructs a new <code>Magnets</code>.
     * @alias module:model/Magnets
     */
    constructor() { 
        
        Magnets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Magnets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Magnets} obj Optional instance to populate.
     * @return {module:model/Magnets} The populated <code>Magnets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Magnets();

            if (data.hasOwnProperty('Externals')) {
                obj['Externals'] = ApiClient.convertToType(data['Externals'], [ExternalIDs]);
            }
            if (data.hasOwnProperty('FirstSeenDate')) {
                obj['FirstSeenDate'] = ApiClient.convertToType(data['FirstSeenDate'], 'String');
            }
            if (data.hasOwnProperty('Hash')) {
                obj['Hash'] = ApiClient.convertToType(data['Hash'], 'String');
            }
            if (data.hasOwnProperty('Image')) {
                obj['Image'] = ApiClient.convertToType(data['Image'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Peers')) {
                obj['Peers'] = ApiClient.convertToType(data['Peers'], 'String');
            }
            if (data.hasOwnProperty('Seeds')) {
                obj['Seeds'] = ApiClient.convertToType(data['Seeds'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Magnets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Magnets</code>.
     */
    static validateJSON(data) {
        if (data['Externals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Externals'])) {
                throw new Error("Expected the field `Externals` to be an array in the JSON data but got " + data['Externals']);
            }
            // validate the optional field `Externals` (array)
            for (const item of data['Externals']) {
                ExternalIDs.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['FirstSeenDate'] && !(typeof data['FirstSeenDate'] === 'string' || data['FirstSeenDate'] instanceof String)) {
            throw new Error("Expected the field `FirstSeenDate` to be a primitive type in the JSON string but got " + data['FirstSeenDate']);
        }
        // ensure the json data is a string
        if (data['Hash'] && !(typeof data['Hash'] === 'string' || data['Hash'] instanceof String)) {
            throw new Error("Expected the field `Hash` to be a primitive type in the JSON string but got " + data['Hash']);
        }
        // ensure the json data is a string
        if (data['Image'] && !(typeof data['Image'] === 'string' || data['Image'] instanceof String)) {
            throw new Error("Expected the field `Image` to be a primitive type in the JSON string but got " + data['Image']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Peers'] && !(typeof data['Peers'] === 'string' || data['Peers'] instanceof String)) {
            throw new Error("Expected the field `Peers` to be a primitive type in the JSON string but got " + data['Peers']);
        }
        // ensure the json data is a string
        if (data['Seeds'] && !(typeof data['Seeds'] === 'string' || data['Seeds'] instanceof String)) {
            throw new Error("Expected the field `Seeds` to be a primitive type in the JSON string but got " + data['Seeds']);
        }
        // ensure the json data is a string
        if (data['Size'] && !(typeof data['Size'] === 'string' || data['Size'] instanceof String)) {
            throw new Error("Expected the field `Size` to be a primitive type in the JSON string but got " + data['Size']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ExternalIDs>} Externals
 */
Magnets.prototype['Externals'] = undefined;

/**
 * Date this hash was first detected
 * @member {String} FirstSeenDate
 */
Magnets.prototype['FirstSeenDate'] = undefined;

/**
 * The actual hash you need to construct your magnet
 * @member {String} Hash
 */
Magnets.prototype['Hash'] = undefined;

/**
 * @member {String} Image
 */
Magnets.prototype['Image'] = undefined;

/**
 * @member {String} Name
 */
Magnets.prototype['Name'] = undefined;

/**
 * Number of Peers available at FirstSeenDate
 * @member {String} Peers
 */
Magnets.prototype['Peers'] = undefined;

/**
 * Number of Seeds available at FirstSeenDate
 * @member {String} Seeds
 */
Magnets.prototype['Seeds'] = undefined;

/**
 * @member {String} Size
 */
Magnets.prototype['Size'] = undefined;

/**
 * @member {String} Title
 */
Magnets.prototype['Title'] = undefined;

/**
 * @member {String} Type
 */
Magnets.prototype['Type'] = undefined;






export default Magnets;

