/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArtistArt model module.
 * @module model/ArtistArt
 * @version v1
 */
class ArtistArt {
    /**
     * Constructs a new <code>ArtistArt</code>.
     * @alias module:model/ArtistArt
     */
    constructor() { 
        
        ArtistArt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArtistArt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArtistArt} obj Optional instance to populate.
     * @return {module:model/ArtistArt} The populated <code>ArtistArt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArtistArt();

            if (data.hasOwnProperty('ArtistID')) {
                obj['ArtistID'] = ApiClient.convertToType(data['ArtistID'], 'String');
            }
            if (data.hasOwnProperty('Banner')) {
                obj['Banner'] = ApiClient.convertToType(data['Banner'], 'String');
            }
            if (data.hasOwnProperty('Logo')) {
                obj['Logo'] = ApiClient.convertToType(data['Logo'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArtistArt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArtistArt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ArtistID'] && !(typeof data['ArtistID'] === 'string' || data['ArtistID'] instanceof String)) {
            throw new Error("Expected the field `ArtistID` to be a primitive type in the JSON string but got " + data['ArtistID']);
        }
        // ensure the json data is a string
        if (data['Banner'] && !(typeof data['Banner'] === 'string' || data['Banner'] instanceof String)) {
            throw new Error("Expected the field `Banner` to be a primitive type in the JSON string but got " + data['Banner']);
        }
        // ensure the json data is a string
        if (data['Logo'] && !(typeof data['Logo'] === 'string' || data['Logo'] instanceof String)) {
            throw new Error("Expected the field `Logo` to be a primitive type in the JSON string but got " + data['Logo']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * @member {String} ArtistID
 */
ArtistArt.prototype['ArtistID'] = undefined;

/**
 * @member {String} Banner
 */
ArtistArt.prototype['Banner'] = undefined;

/**
 * @member {String} Logo
 */
ArtistArt.prototype['Logo'] = undefined;

/**
 * @member {String} Name
 */
ArtistArt.prototype['Name'] = undefined;






export default ArtistArt;

