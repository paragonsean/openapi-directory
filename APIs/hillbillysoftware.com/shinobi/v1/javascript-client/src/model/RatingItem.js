/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RatingItem model module.
 * @module model/RatingItem
 * @version v1
 */
class RatingItem {
    /**
     * Constructs a new <code>RatingItem</code>.
     * @alias module:model/RatingItem
     */
    constructor() { 
        
        RatingItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RatingItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RatingItem} obj Optional instance to populate.
     * @return {module:model/RatingItem} The populated <code>RatingItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RatingItem();

            if (data.hasOwnProperty('EpisoDate')) {
                obj['EpisoDate'] = ApiClient.convertToType(data['EpisoDate'], 'String');
            }
            if (data.hasOwnProperty('IMDB')) {
                obj['IMDB'] = ApiClient.convertToType(data['IMDB'], 'String');
            }
            if (data.hasOwnProperty('MetaCritics')) {
                obj['MetaCritics'] = ApiClient.convertToType(data['MetaCritics'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RottenTomatoes')) {
                obj['RottenTomatoes'] = ApiClient.convertToType(data['RottenTomatoes'], 'String');
            }
            if (data.hasOwnProperty('RottenTomatoesAudienceScore')) {
                obj['RottenTomatoesAudienceScore'] = ApiClient.convertToType(data['RottenTomatoesAudienceScore'], 'String');
            }
            if (data.hasOwnProperty('TVDB')) {
                obj['TVDB'] = ApiClient.convertToType(data['TVDB'], 'String');
            }
            if (data.hasOwnProperty('TVMaze')) {
                obj['TVMaze'] = ApiClient.convertToType(data['TVMaze'], 'String');
            }
            if (data.hasOwnProperty('Trakt')) {
                obj['Trakt'] = ApiClient.convertToType(data['Trakt'], 'String');
            }
            if (data.hasOwnProperty('imdbID')) {
                obj['imdbID'] = ApiClient.convertToType(data['imdbID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RatingItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RatingItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['EpisoDate'] && !(typeof data['EpisoDate'] === 'string' || data['EpisoDate'] instanceof String)) {
            throw new Error("Expected the field `EpisoDate` to be a primitive type in the JSON string but got " + data['EpisoDate']);
        }
        // ensure the json data is a string
        if (data['IMDB'] && !(typeof data['IMDB'] === 'string' || data['IMDB'] instanceof String)) {
            throw new Error("Expected the field `IMDB` to be a primitive type in the JSON string but got " + data['IMDB']);
        }
        // ensure the json data is a string
        if (data['MetaCritics'] && !(typeof data['MetaCritics'] === 'string' || data['MetaCritics'] instanceof String)) {
            throw new Error("Expected the field `MetaCritics` to be a primitive type in the JSON string but got " + data['MetaCritics']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['RottenTomatoes'] && !(typeof data['RottenTomatoes'] === 'string' || data['RottenTomatoes'] instanceof String)) {
            throw new Error("Expected the field `RottenTomatoes` to be a primitive type in the JSON string but got " + data['RottenTomatoes']);
        }
        // ensure the json data is a string
        if (data['RottenTomatoesAudienceScore'] && !(typeof data['RottenTomatoesAudienceScore'] === 'string' || data['RottenTomatoesAudienceScore'] instanceof String)) {
            throw new Error("Expected the field `RottenTomatoesAudienceScore` to be a primitive type in the JSON string but got " + data['RottenTomatoesAudienceScore']);
        }
        // ensure the json data is a string
        if (data['TVDB'] && !(typeof data['TVDB'] === 'string' || data['TVDB'] instanceof String)) {
            throw new Error("Expected the field `TVDB` to be a primitive type in the JSON string but got " + data['TVDB']);
        }
        // ensure the json data is a string
        if (data['TVMaze'] && !(typeof data['TVMaze'] === 'string' || data['TVMaze'] instanceof String)) {
            throw new Error("Expected the field `TVMaze` to be a primitive type in the JSON string but got " + data['TVMaze']);
        }
        // ensure the json data is a string
        if (data['Trakt'] && !(typeof data['Trakt'] === 'string' || data['Trakt'] instanceof String)) {
            throw new Error("Expected the field `Trakt` to be a primitive type in the JSON string but got " + data['Trakt']);
        }
        // ensure the json data is a string
        if (data['imdbID'] && !(typeof data['imdbID'] === 'string' || data['imdbID'] instanceof String)) {
            throw new Error("Expected the field `imdbID` to be a primitive type in the JSON string but got " + data['imdbID']);
        }

        return true;
    }


}



/**
 * @member {String} EpisoDate
 */
RatingItem.prototype['EpisoDate'] = undefined;

/**
 * @member {String} IMDB
 */
RatingItem.prototype['IMDB'] = undefined;

/**
 * @member {String} MetaCritics
 */
RatingItem.prototype['MetaCritics'] = undefined;

/**
 * @member {String} Name
 */
RatingItem.prototype['Name'] = undefined;

/**
 * @member {String} RottenTomatoes
 */
RatingItem.prototype['RottenTomatoes'] = undefined;

/**
 * @member {String} RottenTomatoesAudienceScore
 */
RatingItem.prototype['RottenTomatoesAudienceScore'] = undefined;

/**
 * @member {String} TVDB
 */
RatingItem.prototype['TVDB'] = undefined;

/**
 * @member {String} TVMaze
 */
RatingItem.prototype['TVMaze'] = undefined;

/**
 * @member {String} Trakt
 */
RatingItem.prototype['Trakt'] = undefined;

/**
 * @member {String} imdbID
 */
RatingItem.prototype['imdbID'] = undefined;






export default RatingItem;

