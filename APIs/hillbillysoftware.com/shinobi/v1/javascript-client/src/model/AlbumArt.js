/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlbumArt model module.
 * @module model/AlbumArt
 * @version v1
 */
class AlbumArt {
    /**
     * Constructs a new <code>AlbumArt</code>.
     * @alias module:model/AlbumArt
     */
    constructor() { 
        
        AlbumArt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlbumArt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlbumArt} obj Optional instance to populate.
     * @return {module:model/AlbumArt} The populated <code>AlbumArt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlbumArt();

            if (data.hasOwnProperty('AlbumID')) {
                obj['AlbumID'] = ApiClient.convertToType(data['AlbumID'], 'String');
            }
            if (data.hasOwnProperty('Albumname')) {
                obj['Albumname'] = ApiClient.convertToType(data['Albumname'], 'String');
            }
            if (data.hasOwnProperty('Art')) {
                obj['Art'] = ApiClient.convertToType(data['Art'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlbumArt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlbumArt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AlbumID'] && !(typeof data['AlbumID'] === 'string' || data['AlbumID'] instanceof String)) {
            throw new Error("Expected the field `AlbumID` to be a primitive type in the JSON string but got " + data['AlbumID']);
        }
        // ensure the json data is a string
        if (data['Albumname'] && !(typeof data['Albumname'] === 'string' || data['Albumname'] instanceof String)) {
            throw new Error("Expected the field `Albumname` to be a primitive type in the JSON string but got " + data['Albumname']);
        }
        // ensure the json data is a string
        if (data['Art'] && !(typeof data['Art'] === 'string' || data['Art'] instanceof String)) {
            throw new Error("Expected the field `Art` to be a primitive type in the JSON string but got " + data['Art']);
        }

        return true;
    }


}



/**
 * @member {String} AlbumID
 */
AlbumArt.prototype['AlbumID'] = undefined;

/**
 * @member {String} Albumname
 */
AlbumArt.prototype['Albumname'] = undefined;

/**
 * @member {String} Art
 */
AlbumArt.prototype['Art'] = undefined;






export default AlbumArt;

