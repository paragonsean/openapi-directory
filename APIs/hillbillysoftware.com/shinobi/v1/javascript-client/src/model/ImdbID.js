/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImdbID model module.
 * @module model/ImdbID
 * @version v1
 */
class ImdbID {
    /**
     * Constructs a new <code>ImdbID</code>.
     * @alias module:model/ImdbID
     */
    constructor() { 
        
        ImdbID.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImdbID</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImdbID} obj Optional instance to populate.
     * @return {module:model/ImdbID} The populated <code>ImdbID</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImdbID();

            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('ShinobiID')) {
                obj['ShinobiID'] = ApiClient.convertToType(data['ShinobiID'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImdbID</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImdbID</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ID'] && !(typeof data['ID'] === 'string' || data['ID'] instanceof String)) {
            throw new Error("Expected the field `ID` to be a primitive type in the JSON string but got " + data['ID']);
        }
        // ensure the json data is a string
        if (data['ShinobiID'] && !(typeof data['ShinobiID'] === 'string' || data['ShinobiID'] instanceof String)) {
            throw new Error("Expected the field `ShinobiID` to be a primitive type in the JSON string but got " + data['ShinobiID']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * @member {String} ID
 */
ImdbID.prototype['ID'] = undefined;

/**
 * @member {String} ShinobiID
 */
ImdbID.prototype['ShinobiID'] = undefined;

/**
 * @member {String} Title
 */
ImdbID.prototype['Title'] = undefined;

/**
 * @member {String} Type
 */
ImdbID.prototype['Type'] = undefined;






export default ImdbID;

