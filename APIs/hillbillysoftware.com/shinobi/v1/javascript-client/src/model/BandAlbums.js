/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BandAlbums model module.
 * @module model/BandAlbums
 * @version v1
 */
class BandAlbums {
    /**
     * Constructs a new <code>BandAlbums</code>.
     * @alias module:model/BandAlbums
     */
    constructor() { 
        
        BandAlbums.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BandAlbums</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BandAlbums} obj Optional instance to populate.
     * @return {module:model/BandAlbums} The populated <code>BandAlbums</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BandAlbums();

            if (data.hasOwnProperty('AlbumArt')) {
                obj['AlbumArt'] = ApiClient.convertToType(data['AlbumArt'], 'String');
            }
            if (data.hasOwnProperty('AlbumID')) {
                obj['AlbumID'] = ApiClient.convertToType(data['AlbumID'], 'String');
            }
            if (data.hasOwnProperty('ArtistID')) {
                obj['ArtistID'] = ApiClient.convertToType(data['ArtistID'], 'String');
            }
            if (data.hasOwnProperty('Bibliography')) {
                obj['Bibliography'] = ApiClient.convertToType(data['Bibliography'], 'String');
            }
            if (data.hasOwnProperty('Label')) {
                obj['Label'] = ApiClient.convertToType(data['Label'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Releaseyear')) {
                obj['Releaseyear'] = ApiClient.convertToType(data['Releaseyear'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BandAlbums</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BandAlbums</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AlbumArt'] && !(typeof data['AlbumArt'] === 'string' || data['AlbumArt'] instanceof String)) {
            throw new Error("Expected the field `AlbumArt` to be a primitive type in the JSON string but got " + data['AlbumArt']);
        }
        // ensure the json data is a string
        if (data['AlbumID'] && !(typeof data['AlbumID'] === 'string' || data['AlbumID'] instanceof String)) {
            throw new Error("Expected the field `AlbumID` to be a primitive type in the JSON string but got " + data['AlbumID']);
        }
        // ensure the json data is a string
        if (data['ArtistID'] && !(typeof data['ArtistID'] === 'string' || data['ArtistID'] instanceof String)) {
            throw new Error("Expected the field `ArtistID` to be a primitive type in the JSON string but got " + data['ArtistID']);
        }
        // ensure the json data is a string
        if (data['Bibliography'] && !(typeof data['Bibliography'] === 'string' || data['Bibliography'] instanceof String)) {
            throw new Error("Expected the field `Bibliography` to be a primitive type in the JSON string but got " + data['Bibliography']);
        }
        // ensure the json data is a string
        if (data['Label'] && !(typeof data['Label'] === 'string' || data['Label'] instanceof String)) {
            throw new Error("Expected the field `Label` to be a primitive type in the JSON string but got " + data['Label']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Releaseyear'] && !(typeof data['Releaseyear'] === 'string' || data['Releaseyear'] instanceof String)) {
            throw new Error("Expected the field `Releaseyear` to be a primitive type in the JSON string but got " + data['Releaseyear']);
        }

        return true;
    }


}



/**
 * @member {String} AlbumArt
 */
BandAlbums.prototype['AlbumArt'] = undefined;

/**
 * @member {String} AlbumID
 */
BandAlbums.prototype['AlbumID'] = undefined;

/**
 * @member {String} ArtistID
 */
BandAlbums.prototype['ArtistID'] = undefined;

/**
 * @member {String} Bibliography
 */
BandAlbums.prototype['Bibliography'] = undefined;

/**
 * @member {String} Label
 */
BandAlbums.prototype['Label'] = undefined;

/**
 * @member {String} Name
 */
BandAlbums.prototype['Name'] = undefined;

/**
 * @member {String} Releaseyear
 */
BandAlbums.prototype['Releaseyear'] = undefined;






export default BandAlbums;

