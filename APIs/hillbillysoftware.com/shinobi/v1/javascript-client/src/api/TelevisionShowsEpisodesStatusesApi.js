/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Episode from '../model/Episode';
import LastAvailableSeason from '../model/LastAvailableSeason';
import PostResult from '../model/PostResult';
import ShowStatus from '../model/ShowStatus';
import TVInformation from '../model/TVInformation';
import TVInformationPost from '../model/TVInformationPost';
import TVShowSeasons from '../model/TVShowSeasons';

/**
* TelevisionShowsEpisodesStatuses service.
* @module api/TelevisionShowsEpisodesStatusesApi
* @version v1
*/
export default class TelevisionShowsEpisodesStatusesApi {

    /**
    * Constructs a new TelevisionShowsEpisodesStatusesApi. 
    * @alias module:api/TelevisionShowsEpisodesStatusesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTVShowPost operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~addTVShowPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new show to database
     * @param {module:model/TVInformationPost} value 
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~addTVShowPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostResult}
     */
    addTVShowPost(value, callback) {
      let postBody = value;
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling addTVShowPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PostResult;
      return this.apiClient.callApi(
        '/AddTVShow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodesByIDGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~episodesByIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Episode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all episodes for selected ID
     * @param {String} accessToken 
     * @param {String} ID imdbID
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~episodesByIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Episode>}
     */
    episodesByIDGet(accessToken, ID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling episodesByIDGet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling episodesByIDGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Episode];
      return this.apiClient.callApi(
        '/Episodes/ByID/{AccessToken}/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodesBySeasonGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~episodesBySeasonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Episode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of episodes for specified imdbID and Season number
     * @param {String} accessToken 
     * @param {String} ID imdbID
     * @param {String} season Season number
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~episodesBySeasonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Episode>}
     */
    episodesBySeasonGet(accessToken, ID, season, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling episodesBySeasonGet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling episodesBySeasonGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling episodesBySeasonGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ID': ID,
        'Season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Episode];
      return this.apiClient.callApi(
        '/Episodes/BySeason/{AccessToken}/{ID}/{Season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodesGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~episodesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Episode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all episodes for selected show
     * @param {String} accessToken 
     * @param {String} showname 
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~episodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Episode>}
     */
    episodesGet(accessToken, showname, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling episodesGet");
      }
      // verify the required parameter 'showname' is set
      if (showname === undefined || showname === null) {
        throw new Error("Missing the required parameter 'showname' when calling episodesGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Showname': showname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Episode];
      return this.apiClient.callApi(
        '/Episodes/ByShowName/{AccessToken}/{Showname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodesLastAvailableSeasonGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~episodesLastAvailableSeasonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastAvailableSeason} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns last available season number in database, based on passed imdbID
     * @param {String} accessToken 
     * @param {String} ID imdbID
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~episodesLastAvailableSeasonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastAvailableSeason}
     */
    episodesLastAvailableSeasonGet(accessToken, ID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling episodesLastAvailableSeasonGet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling episodesLastAvailableSeasonGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = LastAvailableSeason;
      return this.apiClient.callApi(
        '/Episodes/LatestSeason/{AccessToken}/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodesLastAvailableSeasonbyNameGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~episodesLastAvailableSeasonbyNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastAvailableSeason} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets latest season number based on show name
     * @param {String} accessToken 
     * @param {String} name 
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~episodesLastAvailableSeasonbyNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastAvailableSeason}
     */
    episodesLastAvailableSeasonbyNameGet(accessToken, name, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling episodesLastAvailableSeasonbyNameGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling episodesLastAvailableSeasonbyNameGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = LastAvailableSeason;
      return this.apiClient.callApi(
        '/Episodes/LatestSeason/Show/{AccessToken}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the episodesSeasonCountGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~episodesSeasonCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TVShowSeasons} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns number of available seasons and episodes
     * @param {String} accessToken 
     * @param {String} ID imdbID
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~episodesSeasonCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TVShowSeasons}
     */
    episodesSeasonCountGet(accessToken, ID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling episodesSeasonCountGet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling episodesSeasonCountGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TVShowSeasons;
      return this.apiClient.callApi(
        '/Episodes/SeasonCount/{AccessToken}/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showStatusGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~showStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShowStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns status of queried show (query can be IMDB, TVDB, or showname)
     * @param {String} accessToken 
     * @param {String} query Query can be IMDB, TVDB, or Show name
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~showStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShowStatus>}
     */
    showStatusGet(accessToken, query, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling showStatusGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling showStatusGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [ShowStatus];
      return this.apiClient.callApi(
        '/Status/{AccessToken}/{Query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tVShowByNameGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~tVShowByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TVInformation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns results based on query, result set limited to 5 records
     * @param {String} accessToken 
     * @param {String} query 
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~tVShowByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TVInformation>}
     */
    tVShowByNameGet(accessToken, query, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling tVShowByNameGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling tVShowByNameGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [TVInformation];
      return this.apiClient.callApi(
        '/TV/ByName/{AccessToken}/{Query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tVShowIDGet operation.
     * @callback module:api/TelevisionShowsEpisodesStatusesApi~tVShowIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TVInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns TVShow information based on IMDBid
     * @param {String} accesstoken 
     * @param {String} id imdbID of show you want info on
     * @param {String} imdbID 
     * @param {module:api/TelevisionShowsEpisodesStatusesApi~tVShowIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TVInformation}
     */
    tVShowIDGet(accesstoken, id, imdbID, callback) {
      let postBody = null;
      // verify the required parameter 'accesstoken' is set
      if (accesstoken === undefined || accesstoken === null) {
        throw new Error("Missing the required parameter 'accesstoken' when calling tVShowIDGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tVShowIDGet");
      }
      // verify the required parameter 'imdbID' is set
      if (imdbID === undefined || imdbID === null) {
        throw new Error("Missing the required parameter 'imdbID' when calling tVShowIDGet");
      }

      let pathParams = {
        'accesstoken': accesstoken,
        'imdbID': imdbID
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TVInformation;
      return this.apiClient.callApi(
        '/TV/ByID/{accesstoken}/{imdbID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
