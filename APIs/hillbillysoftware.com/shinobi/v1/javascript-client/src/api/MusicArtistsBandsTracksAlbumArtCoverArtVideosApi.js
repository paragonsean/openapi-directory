/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlbumArt from '../model/AlbumArt';
import AlbumTracks from '../model/AlbumTracks';
import ArtistArt from '../model/ArtistArt';
import BandAlbums from '../model/BandAlbums';
import BandInfo from '../model/BandInfo';
import BandInfoExtended from '../model/BandInfoExtended';
import CDCoverArt from '../model/CDCoverArt';
import Lyric from '../model/Lyric';
import MusicVideo from '../model/MusicVideo';

/**
* MusicArtistsBandsTracksAlbumArtCoverArtVideos service.
* @module api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi
* @version v1
*/
export default class MusicArtistsBandsTracksAlbumArtCoverArtVideosApi {

    /**
    * Constructs a new MusicArtistsBandsTracksAlbumArtCoverArtVideosApi. 
    * @alias module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the musiVideosGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musiVideosGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MusicVideo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all videos available for this Artist / Band
     * @param {String} accessToken 
     * @param {String} artistID 
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musiVideosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MusicVideo>}
     */
    musiVideosGet(accessToken, artistID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musiVideosGet");
      }
      // verify the required parameter 'artistID' is set
      if (artistID === undefined || artistID === null) {
        throw new Error("Missing the required parameter 'artistID' when calling musiVideosGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ArtistID': artistID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [MusicVideo];
      return this.apiClient.callApi(
        '/Music/Videos/{AccessToken}/{ArtistID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicAlbumArtGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicAlbumArtGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumArt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Albumart for passed AlbumID
     * @param {String} accessToken 
     * @param {String} albumID 
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicAlbumArtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumArt}
     */
    musicAlbumArtGet(accessToken, albumID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicAlbumArtGet");
      }
      // verify the required parameter 'albumID' is set
      if (albumID === undefined || albumID === null) {
        throw new Error("Missing the required parameter 'albumID' when calling musicAlbumArtGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'AlbumID': albumID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = AlbumArt;
      return this.apiClient.callApi(
        '/Music/Albums/Art/{AccessToken}/{AlbumID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicAlbumsGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicAlbumsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BandAlbums>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get albums from passed ArtistID
     * @param {String} accessToken 
     * @param {String} artistID ID of artist or band to retrieve albums from
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicAlbumsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BandAlbums>}
     */
    musicAlbumsGet(accessToken, artistID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicAlbumsGet");
      }
      // verify the required parameter 'artistID' is set
      if (artistID === undefined || artistID === null) {
        throw new Error("Missing the required parameter 'artistID' when calling musicAlbumsGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ArtistID': artistID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [BandAlbums];
      return this.apiClient.callApi(
        '/Music/Albums/{AccessToken}/{ArtistID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicArtistExtendedGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicArtistExtendedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BandInfoExtended>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides extended information, which includes all known albums and music videos of artist / band
     * @param {String} accessToken 
     * @param {String} name 
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicArtistExtendedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BandInfoExtended>}
     */
    musicArtistExtendedGet(accessToken, name, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicArtistExtendedGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling musicArtistExtendedGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [BandInfoExtended];
      return this.apiClient.callApi(
        '/Music/Artist/Extended/{AccessToken}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicByMusicBrainzGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicByMusicBrainzGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BandInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artist / Band information on MusicBrainzID
     * @param {String} accessToken 
     * @param {String} MBID MusicBrainzID
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicByMusicBrainzGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BandInfo>}
     */
    musicByMusicBrainzGet(accessToken, MBID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicByMusicBrainzGet");
      }
      // verify the required parameter 'MBID' is set
      if (MBID === undefined || MBID === null) {
        throw new Error("Missing the required parameter 'MBID' when calling musicByMusicBrainzGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'MBID': MBID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [BandInfo];
      return this.apiClient.callApi(
        '/Music/Albums/MusicBrainzID/{AccessToken}/{MBID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicCDCoversGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicCDCoversGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CDCoverArt>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets CD art for passed MusicBrainzID
     * @param {String} accessToken 
     * @param {String} MBID MusicBrainzID
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicCDCoversGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CDCoverArt>}
     */
    musicCDCoversGet(accessToken, MBID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicCDCoversGet");
      }
      // verify the required parameter 'MBID' is set
      if (MBID === undefined || MBID === null) {
        throw new Error("Missing the required parameter 'MBID' when calling musicCDCoversGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'MBID': MBID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [CDCoverArt];
      return this.apiClient.callApi(
        '/Music/Albums/CoverArt/{AccessToken}/{MBID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicCoverArtByNameGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicCoverArtByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistArt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves artist / band Banner and logo based on artist or bandname
     * @param {String} accessToken 
     * @param {String} name Name of artist or band
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicCoverArtByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistArt}
     */
    musicCoverArtByNameGet(accessToken, name, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicCoverArtByNameGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling musicCoverArtByNameGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ArtistArt;
      return this.apiClient.callApi(
        '/Music/Artist/Art/Name/{AccessToken}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicCoverArtGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicCoverArtGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtistArt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves artist / band Banner and logo based on ArtistID
     * @param {String} accessToken 
     * @param {String} artistID ArtistID of artist or band
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicCoverArtGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtistArt}
     */
    musicCoverArtGet(accessToken, artistID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicCoverArtGet");
      }
      // verify the required parameter 'artistID' is set
      if (artistID === undefined || artistID === null) {
        throw new Error("Missing the required parameter 'artistID' when calling musicCoverArtGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ArtistID': artistID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ArtistArt;
      return this.apiClient.callApi(
        '/Music/Artist/Art/ID/{AccessToken}/{ArtistID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BandInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about passed band name or artist
     * @param {String} accessToken 
     * @param {String} name Name (or part) of band or artist name
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BandInfo>}
     */
    musicGet(accessToken, name, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling musicGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [BandInfo];
      return this.apiClient.callApi(
        '/Music/Artist/{AccessToken}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicLyricsBySongGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicLyricsBySongGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lyric>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lyrics on song title
     * @param {String} accessToken 
     * @param {String} song Name or part of song name
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicLyricsBySongGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Lyric>}
     */
    musicLyricsBySongGet(accessToken, song, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicLyricsBySongGet");
      }
      // verify the required parameter 'song' is set
      if (song === undefined || song === null) {
        throw new Error("Missing the required parameter 'song' when calling musicLyricsBySongGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Song': song
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Lyric];
      return this.apiClient.callApi(
        '/Music/Lyrics/BySong/{AccessToken}/{Song}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicLyricsGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicLyricsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lyric>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lyrics for band or artist (record set limited to 25)
     * @param {String} accessToken 
     * @param {String} name Name (or partial) of band or artist (record set limited to 25)
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicLyricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Lyric>}
     */
    musicLyricsGet(accessToken, name, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicLyricsGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling musicLyricsGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Lyric];
      return this.apiClient.callApi(
        '/Music/Lyrics/ByName/{AccessToken}/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicLyricsbyAlbumIDGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicLyricsbyAlbumIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lyric>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all lyrics for requested AlbumID
     * @param {String} accessToken 
     * @param {String} albumID 
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicLyricsbyAlbumIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Lyric>}
     */
    musicLyricsbyAlbumIDGet(accessToken, albumID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicLyricsbyAlbumIDGet");
      }
      // verify the required parameter 'albumID' is set
      if (albumID === undefined || albumID === null) {
        throw new Error("Missing the required parameter 'albumID' when calling musicLyricsbyAlbumIDGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'AlbumID': albumID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Lyric];
      return this.apiClient.callApi(
        '/Music/Lyrics/AlbumID/{AccessToken}/{AlbumID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the musicTracksGet operation.
     * @callback module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicTracksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlbumTracks>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all tracks from requested album
     * @param {String} accessToken 
     * @param {String} albumID AlbumID (can be retrieved via album endpoint)
     * @param {module:api/MusicArtistsBandsTracksAlbumArtCoverArtVideosApi~musicTracksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlbumTracks>}
     */
    musicTracksGet(accessToken, albumID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling musicTracksGet");
      }
      // verify the required parameter 'albumID' is set
      if (albumID === undefined || albumID === null) {
        throw new Error("Missing the required parameter 'albumID' when calling musicTracksGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'AlbumID': albumID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [AlbumTracks];
      return this.apiClient.callApi(
        '/Music/Tracks/{AccessToken}/{AlbumID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
