/**
 * shinobiapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Actor from '../model/Actor';
import ActorPost from '../model/ActorPost';
import Crew from '../model/Crew';
import PostResult from '../model/PostResult';
import TVShowActor from '../model/TVShowActor';

/**
* CastCrewCastCrewInMoviesTelevisionShows service.
* @module api/CastCrewCastCrewInMoviesTelevisionShowsApi
* @version v1
*/
export default class CastCrewCastCrewInMoviesTelevisionShowsApi {

    /**
    * Constructs a new CastCrewCastCrewInMoviesTelevisionShowsApi. 
    * @alias module:api/CastCrewCastCrewInMoviesTelevisionShowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actorGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~actorGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Actor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data on queried actor/actress. Result set limited to 5 records
     * @param {String} accesstoken 
     * @param {String} query 
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~actorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Actor>}
     */
    actorGet(accesstoken, query, callback) {
      let postBody = null;
      // verify the required parameter 'accesstoken' is set
      if (accesstoken === undefined || accesstoken === null) {
        throw new Error("Missing the required parameter 'accesstoken' when calling actorGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling actorGet");
      }

      let pathParams = {
        'accesstoken': accesstoken,
        'Query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Actor];
      return this.apiClient.callApi(
        '/Actors/Search/{accesstoken}/{Query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actorInShowsGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~actorInShowsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TVShowActor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all shows queried actor/actress is or has been in
     * @param {String} accessToken 
     * @param {String} actor Part of, or full name of actor
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~actorInShowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TVShowActor>}
     */
    actorInShowsGet(accessToken, actor, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling actorInShowsGet");
      }
      // verify the required parameter 'actor' is set
      if (actor === undefined || actor === null) {
        throw new Error("Missing the required parameter 'actor' when calling actorInShowsGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Actor': actor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [TVShowActor];
      return this.apiClient.callApi(
        '/Cast/ActorBySearch/{AccessToken}/{Actor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actorsInTVShowGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~actorsInTVShowGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TVShowActor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all actors in queried tvshow
     * @param {String} accesstoken 
     * @param {String} showName 
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~actorsInTVShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TVShowActor>}
     */
    actorsInTVShowGet(accesstoken, showName, callback) {
      let postBody = null;
      // verify the required parameter 'accesstoken' is set
      if (accesstoken === undefined || accesstoken === null) {
        throw new Error("Missing the required parameter 'accesstoken' when calling actorsInTVShowGet");
      }
      // verify the required parameter 'showName' is set
      if (showName === undefined || showName === null) {
        throw new Error("Missing the required parameter 'showName' when calling actorsInTVShowGet");
      }

      let pathParams = {
        'accesstoken': accesstoken,
        'ShowName': showName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [TVShowActor];
      return this.apiClient.callApi(
        '/Cast/ByTVShow/{accesstoken}/{ShowName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addActorPost operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~addActorPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new actor or actress to database
     * @param {module:model/ActorPost} value 
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~addActorPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostResult}
     */
    addActorPost(value, callback) {
      let postBody = value;
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling addActorPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PostResult;
      return this.apiClient.callApi(
        '/AddActor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the castByActorGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~castByActorGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TVShowActor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of show actor is appearing in
     * @param {String} accessToken 
     * @param {String} actor Full name of actor
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~castByActorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TVShowActor>}
     */
    castByActorGet(accessToken, actor, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling castByActorGet");
      }
      // verify the required parameter 'actor' is set
      if (actor === undefined || actor === null) {
        throw new Error("Missing the required parameter 'actor' when calling castByActorGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Actor': actor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [TVShowActor];
      return this.apiClient.callApi(
        '/Cast/ByActor/{AccessToken}/{Actor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crewByIDGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewByIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Crew>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get crew list by ID
     * @param {String} accessToken 
     * @param {String} ID IMDBID, TVmazeID, or TVDBID
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewByIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Crew>}
     */
    crewByIDGet(accessToken, ID, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling crewByIDGet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling crewByIDGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Crew];
      return this.apiClient.callApi(
        '/Crew/ByID/{AccessToken}/{ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crewByPersonGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewByPersonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Crew>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of productions searched person is/was involved in.
     * @param {String} accessToken 
     * @param {String} personName 
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewByPersonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Crew>}
     */
    crewByPersonGet(accessToken, personName, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling crewByPersonGet");
      }
      // verify the required parameter 'personName' is set
      if (personName === undefined || personName === null) {
        throw new Error("Missing the required parameter 'personName' when calling crewByPersonGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'PersonName': personName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Crew];
      return this.apiClient.callApi(
        '/Crew/ByPerson/{AccessToken}/{PersonName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crewGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Crew>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns crew for queried show.
     * @param {String} accessToken 
     * @param {String} phrase Part of, or full showname to search for
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Crew>}
     */
    crewGet(accessToken, phrase, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling crewGet");
      }
      // verify the required parameter 'phrase' is set
      if (phrase === undefined || phrase === null) {
        throw new Error("Missing the required parameter 'phrase' when calling crewGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'Phrase': phrase
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Crew];
      return this.apiClient.callApi(
        '/Crew/Search/{AccessToken}/{Phrase}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crewbyShownameGet operation.
     * @callback module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewbyShownameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Crew>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get crew list by showname
     * @param {String} accessToken 
     * @param {String} showName Full exact showname
     * @param {module:api/CastCrewCastCrewInMoviesTelevisionShowsApi~crewbyShownameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Crew>}
     */
    crewbyShownameGet(accessToken, showName, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling crewbyShownameGet");
      }
      // verify the required parameter 'showName' is set
      if (showName === undefined || showName === null) {
        throw new Error("Missing the required parameter 'showName' when calling crewbyShownameGet");
      }

      let pathParams = {
        'AccessToken': accessToken,
        'ShowName': showName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Crew];
      return this.apiClient.callApi(
        '/Crew/ByShowName/{AccessToken}/{ShowName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
