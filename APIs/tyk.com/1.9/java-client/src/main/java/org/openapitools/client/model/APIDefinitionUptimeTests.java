/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.APIDefinitionUptimeTestsCORS;
import org.openapitools.client.model.APIDefinitionUptimeTestsCacheOptions;
import org.openapitools.client.model.APIDefinitionUptimeTestsCheckListInner;
import org.openapitools.client.model.APIDefinitionUptimeTestsConfig;
import org.openapitools.client.model.APIDefinitionUptimeTestsCustomMiddleware;
import org.openapitools.client.model.APIDefinitionUptimeTestsProxy;
import org.openapitools.client.model.APIDefinitionUptimeTestsResponseProcessorsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIDefinitionUptimeTests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIDefinitionUptimeTests {
  public static final String SERIALIZED_NAME_C_O_R_S = "CORS";
  @SerializedName(SERIALIZED_NAME_C_O_R_S)
  private APIDefinitionUptimeTestsCORS CORS;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ALLOWED_IPS = "allowed_ips";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IPS)
  private List<String> allowedIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHE_OPTIONS = "cache_options";
  @SerializedName(SERIALIZED_NAME_CACHE_OPTIONS)
  private APIDefinitionUptimeTestsCacheOptions cacheOptions;

  public static final String SERIALIZED_NAME_CHECK_LIST = "check_list";
  @SerializedName(SERIALIZED_NAME_CHECK_LIST)
  private List<APIDefinitionUptimeTestsCheckListInner> checkList = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private APIDefinitionUptimeTestsConfig config;

  public static final String SERIALIZED_NAME_CUSTOM_MIDDLEWARE = "custom_middleware";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MIDDLEWARE)
  private APIDefinitionUptimeTestsCustomMiddleware customMiddleware;

  public static final String SERIALIZED_NAME_DO_NOT_TRACK = "do_not_track";
  @SerializedName(SERIALIZED_NAME_DO_NOT_TRACK)
  private String doNotTrack;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DONT_SET_QUOTA_ON_CREATE = "dont_set_quota_on_create";
  @SerializedName(SERIALIZED_NAME_DONT_SET_QUOTA_ON_CREATE)
  private Boolean dontSetQuotaOnCreate;

  public static final String SERIALIZED_NAME_ENABLE_BATCH_REQUEST_SUPPORT = "enable_batch_request_support";
  @SerializedName(SERIALIZED_NAME_ENABLE_BATCH_REQUEST_SUPPORT)
  private Boolean enableBatchRequestSupport;

  public static final String SERIALIZED_NAME_ENABLE_IP_WHITELISTING = "enable_ip_whitelisting";
  @SerializedName(SERIALIZED_NAME_ENABLE_IP_WHITELISTING)
  private Boolean enableIpWhitelisting;

  public static final String SERIALIZED_NAME_EVENT_HANDLERS = "event_handlers";
  @SerializedName(SERIALIZED_NAME_EVENT_HANDLERS)
  private Object eventHandlers;

  public static final String SERIALIZED_NAME_EXPIRE_ANALYTICS_AFTER = "expire_analytics_after";
  @SerializedName(SERIALIZED_NAME_EXPIRE_ANALYTICS_AFTER)
  private BigDecimal expireAnalyticsAfter;

  public static final String SERIALIZED_NAME_PROXY = "proxy";
  @SerializedName(SERIALIZED_NAME_PROXY)
  private APIDefinitionUptimeTestsProxy proxy;

  public static final String SERIALIZED_NAME_RESPONSE_PROCESSORS = "response_processors";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PROCESSORS)
  private List<APIDefinitionUptimeTestsResponseProcessorsInner> responseProcessors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_LIFETIME = "session_lifetime";
  @SerializedName(SERIALIZED_NAME_SESSION_LIFETIME)
  private BigDecimal sessionLifetime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public APIDefinitionUptimeTests() {
  }

  public APIDefinitionUptimeTests CORS(APIDefinitionUptimeTestsCORS CORS) {
    this.CORS = CORS;
    return this;
  }

  /**
   * Get CORS
   * @return CORS
   */
  @javax.annotation.Nullable
  public APIDefinitionUptimeTestsCORS getCORS() {
    return CORS;
  }

  public void setCORS(APIDefinitionUptimeTestsCORS CORS) {
    this.CORS = CORS;
  }


  public APIDefinitionUptimeTests active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public APIDefinitionUptimeTests allowedIps(List<String> allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  public APIDefinitionUptimeTests addAllowedIpsItem(String allowedIpsItem) {
    if (this.allowedIps == null) {
      this.allowedIps = new ArrayList<>();
    }
    this.allowedIps.add(allowedIpsItem);
    return this;
  }

  /**
   * Get allowedIps
   * @return allowedIps
   */
  @javax.annotation.Nullable
  public List<String> getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(List<String> allowedIps) {
    this.allowedIps = allowedIps;
  }


  public APIDefinitionUptimeTests cacheOptions(APIDefinitionUptimeTestsCacheOptions cacheOptions) {
    this.cacheOptions = cacheOptions;
    return this;
  }

  /**
   * Get cacheOptions
   * @return cacheOptions
   */
  @javax.annotation.Nullable
  public APIDefinitionUptimeTestsCacheOptions getCacheOptions() {
    return cacheOptions;
  }

  public void setCacheOptions(APIDefinitionUptimeTestsCacheOptions cacheOptions) {
    this.cacheOptions = cacheOptions;
  }


  public APIDefinitionUptimeTests checkList(List<APIDefinitionUptimeTestsCheckListInner> checkList) {
    this.checkList = checkList;
    return this;
  }

  public APIDefinitionUptimeTests addCheckListItem(APIDefinitionUptimeTestsCheckListInner checkListItem) {
    if (this.checkList == null) {
      this.checkList = new ArrayList<>();
    }
    this.checkList.add(checkListItem);
    return this;
  }

  /**
   * Get checkList
   * @return checkList
   */
  @javax.annotation.Nullable
  public List<APIDefinitionUptimeTestsCheckListInner> getCheckList() {
    return checkList;
  }

  public void setCheckList(List<APIDefinitionUptimeTestsCheckListInner> checkList) {
    this.checkList = checkList;
  }


  public APIDefinitionUptimeTests config(APIDefinitionUptimeTestsConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public APIDefinitionUptimeTestsConfig getConfig() {
    return config;
  }

  public void setConfig(APIDefinitionUptimeTestsConfig config) {
    this.config = config;
  }


  public APIDefinitionUptimeTests customMiddleware(APIDefinitionUptimeTestsCustomMiddleware customMiddleware) {
    this.customMiddleware = customMiddleware;
    return this;
  }

  /**
   * Get customMiddleware
   * @return customMiddleware
   */
  @javax.annotation.Nullable
  public APIDefinitionUptimeTestsCustomMiddleware getCustomMiddleware() {
    return customMiddleware;
  }

  public void setCustomMiddleware(APIDefinitionUptimeTestsCustomMiddleware customMiddleware) {
    this.customMiddleware = customMiddleware;
  }


  public APIDefinitionUptimeTests doNotTrack(String doNotTrack) {
    this.doNotTrack = doNotTrack;
    return this;
  }

  /**
   * Get doNotTrack
   * @return doNotTrack
   */
  @javax.annotation.Nullable
  public String getDoNotTrack() {
    return doNotTrack;
  }

  public void setDoNotTrack(String doNotTrack) {
    this.doNotTrack = doNotTrack;
  }


  public APIDefinitionUptimeTests domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public APIDefinitionUptimeTests dontSetQuotaOnCreate(Boolean dontSetQuotaOnCreate) {
    this.dontSetQuotaOnCreate = dontSetQuotaOnCreate;
    return this;
  }

  /**
   * Get dontSetQuotaOnCreate
   * @return dontSetQuotaOnCreate
   */
  @javax.annotation.Nullable
  public Boolean getDontSetQuotaOnCreate() {
    return dontSetQuotaOnCreate;
  }

  public void setDontSetQuotaOnCreate(Boolean dontSetQuotaOnCreate) {
    this.dontSetQuotaOnCreate = dontSetQuotaOnCreate;
  }


  public APIDefinitionUptimeTests enableBatchRequestSupport(Boolean enableBatchRequestSupport) {
    this.enableBatchRequestSupport = enableBatchRequestSupport;
    return this;
  }

  /**
   * Get enableBatchRequestSupport
   * @return enableBatchRequestSupport
   */
  @javax.annotation.Nullable
  public Boolean getEnableBatchRequestSupport() {
    return enableBatchRequestSupport;
  }

  public void setEnableBatchRequestSupport(Boolean enableBatchRequestSupport) {
    this.enableBatchRequestSupport = enableBatchRequestSupport;
  }


  public APIDefinitionUptimeTests enableIpWhitelisting(Boolean enableIpWhitelisting) {
    this.enableIpWhitelisting = enableIpWhitelisting;
    return this;
  }

  /**
   * Get enableIpWhitelisting
   * @return enableIpWhitelisting
   */
  @javax.annotation.Nullable
  public Boolean getEnableIpWhitelisting() {
    return enableIpWhitelisting;
  }

  public void setEnableIpWhitelisting(Boolean enableIpWhitelisting) {
    this.enableIpWhitelisting = enableIpWhitelisting;
  }


  public APIDefinitionUptimeTests eventHandlers(Object eventHandlers) {
    this.eventHandlers = eventHandlers;
    return this;
  }

  /**
   * Get eventHandlers
   * @return eventHandlers
   */
  @javax.annotation.Nullable
  public Object getEventHandlers() {
    return eventHandlers;
  }

  public void setEventHandlers(Object eventHandlers) {
    this.eventHandlers = eventHandlers;
  }


  public APIDefinitionUptimeTests expireAnalyticsAfter(BigDecimal expireAnalyticsAfter) {
    this.expireAnalyticsAfter = expireAnalyticsAfter;
    return this;
  }

  /**
   * Get expireAnalyticsAfter
   * @return expireAnalyticsAfter
   */
  @javax.annotation.Nullable
  public BigDecimal getExpireAnalyticsAfter() {
    return expireAnalyticsAfter;
  }

  public void setExpireAnalyticsAfter(BigDecimal expireAnalyticsAfter) {
    this.expireAnalyticsAfter = expireAnalyticsAfter;
  }


  public APIDefinitionUptimeTests proxy(APIDefinitionUptimeTestsProxy proxy) {
    this.proxy = proxy;
    return this;
  }

  /**
   * Get proxy
   * @return proxy
   */
  @javax.annotation.Nullable
  public APIDefinitionUptimeTestsProxy getProxy() {
    return proxy;
  }

  public void setProxy(APIDefinitionUptimeTestsProxy proxy) {
    this.proxy = proxy;
  }


  public APIDefinitionUptimeTests responseProcessors(List<APIDefinitionUptimeTestsResponseProcessorsInner> responseProcessors) {
    this.responseProcessors = responseProcessors;
    return this;
  }

  public APIDefinitionUptimeTests addResponseProcessorsItem(APIDefinitionUptimeTestsResponseProcessorsInner responseProcessorsItem) {
    if (this.responseProcessors == null) {
      this.responseProcessors = new ArrayList<>();
    }
    this.responseProcessors.add(responseProcessorsItem);
    return this;
  }

  /**
   * Get responseProcessors
   * @return responseProcessors
   */
  @javax.annotation.Nullable
  public List<APIDefinitionUptimeTestsResponseProcessorsInner> getResponseProcessors() {
    return responseProcessors;
  }

  public void setResponseProcessors(List<APIDefinitionUptimeTestsResponseProcessorsInner> responseProcessors) {
    this.responseProcessors = responseProcessors;
  }


  public APIDefinitionUptimeTests sessionLifetime(BigDecimal sessionLifetime) {
    this.sessionLifetime = sessionLifetime;
    return this;
  }

  /**
   * Get sessionLifetime
   * @return sessionLifetime
   */
  @javax.annotation.Nullable
  public BigDecimal getSessionLifetime() {
    return sessionLifetime;
  }

  public void setSessionLifetime(BigDecimal sessionLifetime) {
    this.sessionLifetime = sessionLifetime;
  }


  public APIDefinitionUptimeTests tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public APIDefinitionUptimeTests addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIDefinitionUptimeTests apIDefinitionUptimeTests = (APIDefinitionUptimeTests) o;
    return Objects.equals(this.CORS, apIDefinitionUptimeTests.CORS) &&
        Objects.equals(this.active, apIDefinitionUptimeTests.active) &&
        Objects.equals(this.allowedIps, apIDefinitionUptimeTests.allowedIps) &&
        Objects.equals(this.cacheOptions, apIDefinitionUptimeTests.cacheOptions) &&
        Objects.equals(this.checkList, apIDefinitionUptimeTests.checkList) &&
        Objects.equals(this.config, apIDefinitionUptimeTests.config) &&
        Objects.equals(this.customMiddleware, apIDefinitionUptimeTests.customMiddleware) &&
        Objects.equals(this.doNotTrack, apIDefinitionUptimeTests.doNotTrack) &&
        Objects.equals(this.domain, apIDefinitionUptimeTests.domain) &&
        Objects.equals(this.dontSetQuotaOnCreate, apIDefinitionUptimeTests.dontSetQuotaOnCreate) &&
        Objects.equals(this.enableBatchRequestSupport, apIDefinitionUptimeTests.enableBatchRequestSupport) &&
        Objects.equals(this.enableIpWhitelisting, apIDefinitionUptimeTests.enableIpWhitelisting) &&
        Objects.equals(this.eventHandlers, apIDefinitionUptimeTests.eventHandlers) &&
        Objects.equals(this.expireAnalyticsAfter, apIDefinitionUptimeTests.expireAnalyticsAfter) &&
        Objects.equals(this.proxy, apIDefinitionUptimeTests.proxy) &&
        Objects.equals(this.responseProcessors, apIDefinitionUptimeTests.responseProcessors) &&
        Objects.equals(this.sessionLifetime, apIDefinitionUptimeTests.sessionLifetime) &&
        Objects.equals(this.tags, apIDefinitionUptimeTests.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CORS, active, allowedIps, cacheOptions, checkList, config, customMiddleware, doNotTrack, domain, dontSetQuotaOnCreate, enableBatchRequestSupport, enableIpWhitelisting, eventHandlers, expireAnalyticsAfter, proxy, responseProcessors, sessionLifetime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIDefinitionUptimeTests {\n");
    sb.append("    CORS: ").append(toIndentedString(CORS)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    cacheOptions: ").append(toIndentedString(cacheOptions)).append("\n");
    sb.append("    checkList: ").append(toIndentedString(checkList)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    customMiddleware: ").append(toIndentedString(customMiddleware)).append("\n");
    sb.append("    doNotTrack: ").append(toIndentedString(doNotTrack)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    dontSetQuotaOnCreate: ").append(toIndentedString(dontSetQuotaOnCreate)).append("\n");
    sb.append("    enableBatchRequestSupport: ").append(toIndentedString(enableBatchRequestSupport)).append("\n");
    sb.append("    enableIpWhitelisting: ").append(toIndentedString(enableIpWhitelisting)).append("\n");
    sb.append("    eventHandlers: ").append(toIndentedString(eventHandlers)).append("\n");
    sb.append("    expireAnalyticsAfter: ").append(toIndentedString(expireAnalyticsAfter)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    responseProcessors: ").append(toIndentedString(responseProcessors)).append("\n");
    sb.append("    sessionLifetime: ").append(toIndentedString(sessionLifetime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CORS");
    openapiFields.add("active");
    openapiFields.add("allowed_ips");
    openapiFields.add("cache_options");
    openapiFields.add("check_list");
    openapiFields.add("config");
    openapiFields.add("custom_middleware");
    openapiFields.add("do_not_track");
    openapiFields.add("domain");
    openapiFields.add("dont_set_quota_on_create");
    openapiFields.add("enable_batch_request_support");
    openapiFields.add("enable_ip_whitelisting");
    openapiFields.add("event_handlers");
    openapiFields.add("expire_analytics_after");
    openapiFields.add("proxy");
    openapiFields.add("response_processors");
    openapiFields.add("session_lifetime");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIDefinitionUptimeTests
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIDefinitionUptimeTests.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIDefinitionUptimeTests is not found in the empty JSON string", APIDefinitionUptimeTests.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIDefinitionUptimeTests.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIDefinitionUptimeTests` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CORS`
      if (jsonObj.get("CORS") != null && !jsonObj.get("CORS").isJsonNull()) {
        APIDefinitionUptimeTestsCORS.validateJsonElement(jsonObj.get("CORS"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_ips") != null && !jsonObj.get("allowed_ips").isJsonNull() && !jsonObj.get("allowed_ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_ips` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_ips").toString()));
      }
      // validate the optional field `cache_options`
      if (jsonObj.get("cache_options") != null && !jsonObj.get("cache_options").isJsonNull()) {
        APIDefinitionUptimeTestsCacheOptions.validateJsonElement(jsonObj.get("cache_options"));
      }
      if (jsonObj.get("check_list") != null && !jsonObj.get("check_list").isJsonNull()) {
        JsonArray jsonArraycheckList = jsonObj.getAsJsonArray("check_list");
        if (jsonArraycheckList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("check_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `check_list` to be an array in the JSON string but got `%s`", jsonObj.get("check_list").toString()));
          }

          // validate the optional field `check_list` (array)
          for (int i = 0; i < jsonArraycheckList.size(); i++) {
            APIDefinitionUptimeTestsCheckListInner.validateJsonElement(jsonArraycheckList.get(i));
          };
        }
      }
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        APIDefinitionUptimeTestsConfig.validateJsonElement(jsonObj.get("config"));
      }
      // validate the optional field `custom_middleware`
      if (jsonObj.get("custom_middleware") != null && !jsonObj.get("custom_middleware").isJsonNull()) {
        APIDefinitionUptimeTestsCustomMiddleware.validateJsonElement(jsonObj.get("custom_middleware"));
      }
      if ((jsonObj.get("do_not_track") != null && !jsonObj.get("do_not_track").isJsonNull()) && !jsonObj.get("do_not_track").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `do_not_track` to be a primitive type in the JSON string but got `%s`", jsonObj.get("do_not_track").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // validate the optional field `proxy`
      if (jsonObj.get("proxy") != null && !jsonObj.get("proxy").isJsonNull()) {
        APIDefinitionUptimeTestsProxy.validateJsonElement(jsonObj.get("proxy"));
      }
      if (jsonObj.get("response_processors") != null && !jsonObj.get("response_processors").isJsonNull()) {
        JsonArray jsonArrayresponseProcessors = jsonObj.getAsJsonArray("response_processors");
        if (jsonArrayresponseProcessors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("response_processors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `response_processors` to be an array in the JSON string but got `%s`", jsonObj.get("response_processors").toString()));
          }

          // validate the optional field `response_processors` (array)
          for (int i = 0; i < jsonArrayresponseProcessors.size(); i++) {
            APIDefinitionUptimeTestsResponseProcessorsInner.validateJsonElement(jsonArrayresponseProcessors.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIDefinitionUptimeTests.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIDefinitionUptimeTests' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIDefinitionUptimeTests> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIDefinitionUptimeTests.class));

       return (TypeAdapter<T>) new TypeAdapter<APIDefinitionUptimeTests>() {
           @Override
           public void write(JsonWriter out, APIDefinitionUptimeTests value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIDefinitionUptimeTests read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIDefinitionUptimeTests given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIDefinitionUptimeTests
   * @throws IOException if the JSON string is invalid with respect to APIDefinitionUptimeTests
   */
  public static APIDefinitionUptimeTests fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIDefinitionUptimeTests.class);
  }

  /**
   * Convert an instance of APIDefinitionUptimeTests to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

