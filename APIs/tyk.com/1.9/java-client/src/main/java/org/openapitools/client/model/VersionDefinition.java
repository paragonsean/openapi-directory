/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VersionDefinitionExtendedPaths;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VersionDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionDefinition {
  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private String expires;

  public static final String SERIALIZED_NAME_EXTENDED_PATHS = "extended_paths";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PATHS)
  private VersionDefinitionExtendedPaths extendedPaths;

  public static final String SERIALIZED_NAME_GLOBAL_HEADERS = "global_headers";
  @SerializedName(SERIALIZED_NAME_GLOBAL_HEADERS)
  private Object globalHeaders;

  public static final String SERIALIZED_NAME_GLOBAL_HEADERS_REMOVE = "global_headers_remove";
  @SerializedName(SERIALIZED_NAME_GLOBAL_HEADERS_REMOVE)
  private List<String> globalHeadersRemove = new ArrayList<>();

  public static final String SERIALIZED_NAME_GLOBAL_SIZE_LIMIT = "global_size_limit";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SIZE_LIMIT)
  private BigDecimal globalSizeLimit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERRIDE_TARGET = "override_target";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_TARGET)
  private String overrideTarget;

  public static final String SERIALIZED_NAME_USE_EXTENDED_PATHS = "use_extended_paths";
  @SerializedName(SERIALIZED_NAME_USE_EXTENDED_PATHS)
  private Boolean useExtendedPaths;

  public VersionDefinition() {
  }

  public VersionDefinition expires(String expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Get expires
   * @return expires
   */
  @javax.annotation.Nullable
  public String getExpires() {
    return expires;
  }

  public void setExpires(String expires) {
    this.expires = expires;
  }


  public VersionDefinition extendedPaths(VersionDefinitionExtendedPaths extendedPaths) {
    this.extendedPaths = extendedPaths;
    return this;
  }

  /**
   * Get extendedPaths
   * @return extendedPaths
   */
  @javax.annotation.Nullable
  public VersionDefinitionExtendedPaths getExtendedPaths() {
    return extendedPaths;
  }

  public void setExtendedPaths(VersionDefinitionExtendedPaths extendedPaths) {
    this.extendedPaths = extendedPaths;
  }


  public VersionDefinition globalHeaders(Object globalHeaders) {
    this.globalHeaders = globalHeaders;
    return this;
  }

  /**
   * Get globalHeaders
   * @return globalHeaders
   */
  @javax.annotation.Nullable
  public Object getGlobalHeaders() {
    return globalHeaders;
  }

  public void setGlobalHeaders(Object globalHeaders) {
    this.globalHeaders = globalHeaders;
  }


  public VersionDefinition globalHeadersRemove(List<String> globalHeadersRemove) {
    this.globalHeadersRemove = globalHeadersRemove;
    return this;
  }

  public VersionDefinition addGlobalHeadersRemoveItem(String globalHeadersRemoveItem) {
    if (this.globalHeadersRemove == null) {
      this.globalHeadersRemove = new ArrayList<>();
    }
    this.globalHeadersRemove.add(globalHeadersRemoveItem);
    return this;
  }

  /**
   * Get globalHeadersRemove
   * @return globalHeadersRemove
   */
  @javax.annotation.Nullable
  public List<String> getGlobalHeadersRemove() {
    return globalHeadersRemove;
  }

  public void setGlobalHeadersRemove(List<String> globalHeadersRemove) {
    this.globalHeadersRemove = globalHeadersRemove;
  }


  public VersionDefinition globalSizeLimit(BigDecimal globalSizeLimit) {
    this.globalSizeLimit = globalSizeLimit;
    return this;
  }

  /**
   * Get globalSizeLimit
   * @return globalSizeLimit
   */
  @javax.annotation.Nullable
  public BigDecimal getGlobalSizeLimit() {
    return globalSizeLimit;
  }

  public void setGlobalSizeLimit(BigDecimal globalSizeLimit) {
    this.globalSizeLimit = globalSizeLimit;
  }


  public VersionDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VersionDefinition overrideTarget(String overrideTarget) {
    this.overrideTarget = overrideTarget;
    return this;
  }

  /**
   * Get overrideTarget
   * @return overrideTarget
   */
  @javax.annotation.Nullable
  public String getOverrideTarget() {
    return overrideTarget;
  }

  public void setOverrideTarget(String overrideTarget) {
    this.overrideTarget = overrideTarget;
  }


  public VersionDefinition useExtendedPaths(Boolean useExtendedPaths) {
    this.useExtendedPaths = useExtendedPaths;
    return this;
  }

  /**
   * Get useExtendedPaths
   * @return useExtendedPaths
   */
  @javax.annotation.Nullable
  public Boolean getUseExtendedPaths() {
    return useExtendedPaths;
  }

  public void setUseExtendedPaths(Boolean useExtendedPaths) {
    this.useExtendedPaths = useExtendedPaths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionDefinition versionDefinition = (VersionDefinition) o;
    return Objects.equals(this.expires, versionDefinition.expires) &&
        Objects.equals(this.extendedPaths, versionDefinition.extendedPaths) &&
        Objects.equals(this.globalHeaders, versionDefinition.globalHeaders) &&
        Objects.equals(this.globalHeadersRemove, versionDefinition.globalHeadersRemove) &&
        Objects.equals(this.globalSizeLimit, versionDefinition.globalSizeLimit) &&
        Objects.equals(this.name, versionDefinition.name) &&
        Objects.equals(this.overrideTarget, versionDefinition.overrideTarget) &&
        Objects.equals(this.useExtendedPaths, versionDefinition.useExtendedPaths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expires, extendedPaths, globalHeaders, globalHeadersRemove, globalSizeLimit, name, overrideTarget, useExtendedPaths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionDefinition {\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    extendedPaths: ").append(toIndentedString(extendedPaths)).append("\n");
    sb.append("    globalHeaders: ").append(toIndentedString(globalHeaders)).append("\n");
    sb.append("    globalHeadersRemove: ").append(toIndentedString(globalHeadersRemove)).append("\n");
    sb.append("    globalSizeLimit: ").append(toIndentedString(globalSizeLimit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overrideTarget: ").append(toIndentedString(overrideTarget)).append("\n");
    sb.append("    useExtendedPaths: ").append(toIndentedString(useExtendedPaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expires");
    openapiFields.add("extended_paths");
    openapiFields.add("global_headers");
    openapiFields.add("global_headers_remove");
    openapiFields.add("global_size_limit");
    openapiFields.add("name");
    openapiFields.add("override_target");
    openapiFields.add("use_extended_paths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionDefinition is not found in the empty JSON string", VersionDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expires") != null && !jsonObj.get("expires").isJsonNull()) && !jsonObj.get("expires").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires").toString()));
      }
      // validate the optional field `extended_paths`
      if (jsonObj.get("extended_paths") != null && !jsonObj.get("extended_paths").isJsonNull()) {
        VersionDefinitionExtendedPaths.validateJsonElement(jsonObj.get("extended_paths"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("global_headers_remove") != null && !jsonObj.get("global_headers_remove").isJsonNull() && !jsonObj.get("global_headers_remove").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `global_headers_remove` to be an array in the JSON string but got `%s`", jsonObj.get("global_headers_remove").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("override_target") != null && !jsonObj.get("override_target").isJsonNull()) && !jsonObj.get("override_target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `override_target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("override_target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionDefinition>() {
           @Override
           public void write(JsonWriter out, VersionDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionDefinition
   * @throws IOException if the JSON string is invalid with respect to VersionDefinition
   */
  public static VersionDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionDefinition.class);
  }

  /**
   * Convert an instance of VersionDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

