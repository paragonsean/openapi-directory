/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceDiscoverConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceDiscoverConfiguration {
  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cache_timeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private BigDecimal cacheTimeout;

  public static final String SERIALIZED_NAME_DATA_PATH = "data_path";
  @SerializedName(SERIALIZED_NAME_DATA_PATH)
  private String dataPath;

  public static final String SERIALIZED_NAME_ENDPOINT_RETURNS_LIST = "endpoint_returns_list";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_RETURNS_LIST)
  private Boolean endpointReturnsList;

  public static final String SERIALIZED_NAME_PARENT_DATA_PATH = "parent_data_path";
  @SerializedName(SERIALIZED_NAME_PARENT_DATA_PATH)
  private String parentDataPath;

  public static final String SERIALIZED_NAME_PORT_DATA_PATH = "port_data_path";
  @SerializedName(SERIALIZED_NAME_PORT_DATA_PATH)
  private String portDataPath;

  public static final String SERIALIZED_NAME_QUERY_ENDPOINT = "query_endpoint";
  @SerializedName(SERIALIZED_NAME_QUERY_ENDPOINT)
  private String queryEndpoint;

  public static final String SERIALIZED_NAME_USE_DISCOVERY_SERVICE = "use_discovery_service";
  @SerializedName(SERIALIZED_NAME_USE_DISCOVERY_SERVICE)
  private String useDiscoveryService;

  public static final String SERIALIZED_NAME_USE_NESTED_QUERY = "use_nested_query";
  @SerializedName(SERIALIZED_NAME_USE_NESTED_QUERY)
  private Boolean useNestedQuery;

  public static final String SERIALIZED_NAME_USE_TARGET_LIST = "use_target_list";
  @SerializedName(SERIALIZED_NAME_USE_TARGET_LIST)
  private Boolean useTargetList;

  public ServiceDiscoverConfiguration() {
  }

  public ServiceDiscoverConfiguration cacheTimeout(BigDecimal cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

  /**
   * Get cacheTimeout
   * @return cacheTimeout
   */
  @javax.annotation.Nullable
  public BigDecimal getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(BigDecimal cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public ServiceDiscoverConfiguration dataPath(String dataPath) {
    this.dataPath = dataPath;
    return this;
  }

  /**
   * Get dataPath
   * @return dataPath
   */
  @javax.annotation.Nullable
  public String getDataPath() {
    return dataPath;
  }

  public void setDataPath(String dataPath) {
    this.dataPath = dataPath;
  }


  public ServiceDiscoverConfiguration endpointReturnsList(Boolean endpointReturnsList) {
    this.endpointReturnsList = endpointReturnsList;
    return this;
  }

  /**
   * Get endpointReturnsList
   * @return endpointReturnsList
   */
  @javax.annotation.Nullable
  public Boolean getEndpointReturnsList() {
    return endpointReturnsList;
  }

  public void setEndpointReturnsList(Boolean endpointReturnsList) {
    this.endpointReturnsList = endpointReturnsList;
  }


  public ServiceDiscoverConfiguration parentDataPath(String parentDataPath) {
    this.parentDataPath = parentDataPath;
    return this;
  }

  /**
   * Get parentDataPath
   * @return parentDataPath
   */
  @javax.annotation.Nullable
  public String getParentDataPath() {
    return parentDataPath;
  }

  public void setParentDataPath(String parentDataPath) {
    this.parentDataPath = parentDataPath;
  }


  public ServiceDiscoverConfiguration portDataPath(String portDataPath) {
    this.portDataPath = portDataPath;
    return this;
  }

  /**
   * Get portDataPath
   * @return portDataPath
   */
  @javax.annotation.Nullable
  public String getPortDataPath() {
    return portDataPath;
  }

  public void setPortDataPath(String portDataPath) {
    this.portDataPath = portDataPath;
  }


  public ServiceDiscoverConfiguration queryEndpoint(String queryEndpoint) {
    this.queryEndpoint = queryEndpoint;
    return this;
  }

  /**
   * Get queryEndpoint
   * @return queryEndpoint
   */
  @javax.annotation.Nullable
  public String getQueryEndpoint() {
    return queryEndpoint;
  }

  public void setQueryEndpoint(String queryEndpoint) {
    this.queryEndpoint = queryEndpoint;
  }


  public ServiceDiscoverConfiguration useDiscoveryService(String useDiscoveryService) {
    this.useDiscoveryService = useDiscoveryService;
    return this;
  }

  /**
   * Get useDiscoveryService
   * @return useDiscoveryService
   */
  @javax.annotation.Nullable
  public String getUseDiscoveryService() {
    return useDiscoveryService;
  }

  public void setUseDiscoveryService(String useDiscoveryService) {
    this.useDiscoveryService = useDiscoveryService;
  }


  public ServiceDiscoverConfiguration useNestedQuery(Boolean useNestedQuery) {
    this.useNestedQuery = useNestedQuery;
    return this;
  }

  /**
   * Get useNestedQuery
   * @return useNestedQuery
   */
  @javax.annotation.Nullable
  public Boolean getUseNestedQuery() {
    return useNestedQuery;
  }

  public void setUseNestedQuery(Boolean useNestedQuery) {
    this.useNestedQuery = useNestedQuery;
  }


  public ServiceDiscoverConfiguration useTargetList(Boolean useTargetList) {
    this.useTargetList = useTargetList;
    return this;
  }

  /**
   * Get useTargetList
   * @return useTargetList
   */
  @javax.annotation.Nullable
  public Boolean getUseTargetList() {
    return useTargetList;
  }

  public void setUseTargetList(Boolean useTargetList) {
    this.useTargetList = useTargetList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDiscoverConfiguration serviceDiscoverConfiguration = (ServiceDiscoverConfiguration) o;
    return Objects.equals(this.cacheTimeout, serviceDiscoverConfiguration.cacheTimeout) &&
        Objects.equals(this.dataPath, serviceDiscoverConfiguration.dataPath) &&
        Objects.equals(this.endpointReturnsList, serviceDiscoverConfiguration.endpointReturnsList) &&
        Objects.equals(this.parentDataPath, serviceDiscoverConfiguration.parentDataPath) &&
        Objects.equals(this.portDataPath, serviceDiscoverConfiguration.portDataPath) &&
        Objects.equals(this.queryEndpoint, serviceDiscoverConfiguration.queryEndpoint) &&
        Objects.equals(this.useDiscoveryService, serviceDiscoverConfiguration.useDiscoveryService) &&
        Objects.equals(this.useNestedQuery, serviceDiscoverConfiguration.useNestedQuery) &&
        Objects.equals(this.useTargetList, serviceDiscoverConfiguration.useTargetList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheTimeout, dataPath, endpointReturnsList, parentDataPath, portDataPath, queryEndpoint, useDiscoveryService, useNestedQuery, useTargetList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDiscoverConfiguration {\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    dataPath: ").append(toIndentedString(dataPath)).append("\n");
    sb.append("    endpointReturnsList: ").append(toIndentedString(endpointReturnsList)).append("\n");
    sb.append("    parentDataPath: ").append(toIndentedString(parentDataPath)).append("\n");
    sb.append("    portDataPath: ").append(toIndentedString(portDataPath)).append("\n");
    sb.append("    queryEndpoint: ").append(toIndentedString(queryEndpoint)).append("\n");
    sb.append("    useDiscoveryService: ").append(toIndentedString(useDiscoveryService)).append("\n");
    sb.append("    useNestedQuery: ").append(toIndentedString(useNestedQuery)).append("\n");
    sb.append("    useTargetList: ").append(toIndentedString(useTargetList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cache_timeout");
    openapiFields.add("data_path");
    openapiFields.add("endpoint_returns_list");
    openapiFields.add("parent_data_path");
    openapiFields.add("port_data_path");
    openapiFields.add("query_endpoint");
    openapiFields.add("use_discovery_service");
    openapiFields.add("use_nested_query");
    openapiFields.add("use_target_list");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceDiscoverConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceDiscoverConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceDiscoverConfiguration is not found in the empty JSON string", ServiceDiscoverConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceDiscoverConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceDiscoverConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("data_path") != null && !jsonObj.get("data_path").isJsonNull()) && !jsonObj.get("data_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_path").toString()));
      }
      if ((jsonObj.get("parent_data_path") != null && !jsonObj.get("parent_data_path").isJsonNull()) && !jsonObj.get("parent_data_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_data_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_data_path").toString()));
      }
      if ((jsonObj.get("port_data_path") != null && !jsonObj.get("port_data_path").isJsonNull()) && !jsonObj.get("port_data_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `port_data_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("port_data_path").toString()));
      }
      if ((jsonObj.get("query_endpoint") != null && !jsonObj.get("query_endpoint").isJsonNull()) && !jsonObj.get("query_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_endpoint").toString()));
      }
      if ((jsonObj.get("use_discovery_service") != null && !jsonObj.get("use_discovery_service").isJsonNull()) && !jsonObj.get("use_discovery_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use_discovery_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use_discovery_service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceDiscoverConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceDiscoverConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceDiscoverConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceDiscoverConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceDiscoverConfiguration>() {
           @Override
           public void write(JsonWriter out, ServiceDiscoverConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceDiscoverConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceDiscoverConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceDiscoverConfiguration
   * @throws IOException if the JSON string is invalid with respect to ServiceDiscoverConfiguration
   */
  public static ServiceDiscoverConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceDiscoverConfiguration.class);
  }

  /**
   * Convert an instance of ServiceDiscoverConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

