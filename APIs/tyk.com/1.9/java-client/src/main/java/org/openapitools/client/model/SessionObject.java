/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccessRights;
import org.openapitools.client.model.SessionObjectBasicAuthData;
import org.openapitools.client.model.SessionObjectJwtData;
import org.openapitools.client.model.SessionObjectMonitor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SessionObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionObject {
  public static final String SERIALIZED_NAME_ACCESS_RIGHTS = "access_rights";
  @SerializedName(SERIALIZED_NAME_ACCESS_RIGHTS)
  private Map<String, AccessRights> accessRights = new HashMap<>();

  public static final String SERIALIZED_NAME_ALLOWANCE = "allowance";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE)
  private BigDecimal allowance;

  public static final String SERIALIZED_NAME_APPLY_POLICY_ID = "apply_policy_id";
  @SerializedName(SERIALIZED_NAME_APPLY_POLICY_ID)
  private String applyPolicyId;

  public static final String SERIALIZED_NAME_BASIC_AUTH_DATA = "basic_auth_data";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_DATA)
  private SessionObjectBasicAuthData basicAuthData;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private BigDecimal expires;

  public static final String SERIALIZED_NAME_HMAC_ENABLED = "hmac_enabled";
  @SerializedName(SERIALIZED_NAME_HMAC_ENABLED)
  private Boolean hmacEnabled;

  public static final String SERIALIZED_NAME_HMAC_STRING = "hmac_string";
  @SerializedName(SERIALIZED_NAME_HMAC_STRING)
  private String hmacString;

  public static final String SERIALIZED_NAME_IS_INACTIVE = "is_inactive";
  @SerializedName(SERIALIZED_NAME_IS_INACTIVE)
  private Boolean isInactive;

  public static final String SERIALIZED_NAME_JWT_DATA = "jwt_data";
  @SerializedName(SERIALIZED_NAME_JWT_DATA)
  private SessionObjectJwtData jwtData;

  public static final String SERIALIZED_NAME_META_DATA = "meta_data";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private SessionObjectMonitor monitor;

  public static final String SERIALIZED_NAME_OAUTH_CLIENT_ID = "oauth_client_id";
  @SerializedName(SERIALIZED_NAME_OAUTH_CLIENT_ID)
  private String oauthClientId;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_PER = "per";
  @SerializedName(SERIALIZED_NAME_PER)
  private BigDecimal per;

  public static final String SERIALIZED_NAME_QUOTA_MAX = "quota_max";
  @SerializedName(SERIALIZED_NAME_QUOTA_MAX)
  private BigDecimal quotaMax;

  public static final String SERIALIZED_NAME_QUOTA_REMAINING = "quota_remaining";
  @SerializedName(SERIALIZED_NAME_QUOTA_REMAINING)
  private BigDecimal quotaRemaining;

  public static final String SERIALIZED_NAME_QUOTA_RENEWAL_RATE = "quota_renewal_rate";
  @SerializedName(SERIALIZED_NAME_QUOTA_RENEWAL_RATE)
  private String quotaRenewalRate;

  public static final String SERIALIZED_NAME_QUOTA_RENEWS = "quota_renews";
  @SerializedName(SERIALIZED_NAME_QUOTA_RENEWS)
  private BigDecimal quotaRenews;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BigDecimal rate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public SessionObject() {
  }

  public SessionObject accessRights(Map<String, AccessRights> accessRights) {
    this.accessRights = accessRights;
    return this;
  }

  public SessionObject putAccessRightsItem(String key, AccessRights accessRightsItem) {
    if (this.accessRights == null) {
      this.accessRights = new HashMap<>();
    }
    this.accessRights.put(key, accessRightsItem);
    return this;
  }

  /**
   * Get accessRights
   * @return accessRights
   */
  @javax.annotation.Nullable
  public Map<String, AccessRights> getAccessRights() {
    return accessRights;
  }

  public void setAccessRights(Map<String, AccessRights> accessRights) {
    this.accessRights = accessRights;
  }


  public SessionObject allowance(BigDecimal allowance) {
    this.allowance = allowance;
    return this;
  }

  /**
   * Get allowance
   * @return allowance
   */
  @javax.annotation.Nullable
  public BigDecimal getAllowance() {
    return allowance;
  }

  public void setAllowance(BigDecimal allowance) {
    this.allowance = allowance;
  }


  public SessionObject applyPolicyId(String applyPolicyId) {
    this.applyPolicyId = applyPolicyId;
    return this;
  }

  /**
   * Get applyPolicyId
   * @return applyPolicyId
   */
  @javax.annotation.Nullable
  public String getApplyPolicyId() {
    return applyPolicyId;
  }

  public void setApplyPolicyId(String applyPolicyId) {
    this.applyPolicyId = applyPolicyId;
  }


  public SessionObject basicAuthData(SessionObjectBasicAuthData basicAuthData) {
    this.basicAuthData = basicAuthData;
    return this;
  }

  /**
   * Get basicAuthData
   * @return basicAuthData
   */
  @javax.annotation.Nullable
  public SessionObjectBasicAuthData getBasicAuthData() {
    return basicAuthData;
  }

  public void setBasicAuthData(SessionObjectBasicAuthData basicAuthData) {
    this.basicAuthData = basicAuthData;
  }


  public SessionObject expires(BigDecimal expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Get expires
   * @return expires
   */
  @javax.annotation.Nullable
  public BigDecimal getExpires() {
    return expires;
  }

  public void setExpires(BigDecimal expires) {
    this.expires = expires;
  }


  public SessionObject hmacEnabled(Boolean hmacEnabled) {
    this.hmacEnabled = hmacEnabled;
    return this;
  }

  /**
   * Get hmacEnabled
   * @return hmacEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHmacEnabled() {
    return hmacEnabled;
  }

  public void setHmacEnabled(Boolean hmacEnabled) {
    this.hmacEnabled = hmacEnabled;
  }


  public SessionObject hmacString(String hmacString) {
    this.hmacString = hmacString;
    return this;
  }

  /**
   * Get hmacString
   * @return hmacString
   */
  @javax.annotation.Nullable
  public String getHmacString() {
    return hmacString;
  }

  public void setHmacString(String hmacString) {
    this.hmacString = hmacString;
  }


  public SessionObject isInactive(Boolean isInactive) {
    this.isInactive = isInactive;
    return this;
  }

  /**
   * Get isInactive
   * @return isInactive
   */
  @javax.annotation.Nullable
  public Boolean getIsInactive() {
    return isInactive;
  }

  public void setIsInactive(Boolean isInactive) {
    this.isInactive = isInactive;
  }


  public SessionObject jwtData(SessionObjectJwtData jwtData) {
    this.jwtData = jwtData;
    return this;
  }

  /**
   * Get jwtData
   * @return jwtData
   */
  @javax.annotation.Nullable
  public SessionObjectJwtData getJwtData() {
    return jwtData;
  }

  public void setJwtData(SessionObjectJwtData jwtData) {
    this.jwtData = jwtData;
  }


  public SessionObject metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * Get metaData
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public SessionObject monitor(SessionObjectMonitor monitor) {
    this.monitor = monitor;
    return this;
  }

  /**
   * Get monitor
   * @return monitor
   */
  @javax.annotation.Nullable
  public SessionObjectMonitor getMonitor() {
    return monitor;
  }

  public void setMonitor(SessionObjectMonitor monitor) {
    this.monitor = monitor;
  }


  public SessionObject oauthClientId(String oauthClientId) {
    this.oauthClientId = oauthClientId;
    return this;
  }

  /**
   * Get oauthClientId
   * @return oauthClientId
   */
  @javax.annotation.Nullable
  public String getOauthClientId() {
    return oauthClientId;
  }

  public void setOauthClientId(String oauthClientId) {
    this.oauthClientId = oauthClientId;
  }


  public SessionObject orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Get orgId
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public SessionObject per(BigDecimal per) {
    this.per = per;
    return this;
  }

  /**
   * Get per
   * @return per
   */
  @javax.annotation.Nullable
  public BigDecimal getPer() {
    return per;
  }

  public void setPer(BigDecimal per) {
    this.per = per;
  }


  public SessionObject quotaMax(BigDecimal quotaMax) {
    this.quotaMax = quotaMax;
    return this;
  }

  /**
   * Get quotaMax
   * @return quotaMax
   */
  @javax.annotation.Nullable
  public BigDecimal getQuotaMax() {
    return quotaMax;
  }

  public void setQuotaMax(BigDecimal quotaMax) {
    this.quotaMax = quotaMax;
  }


  public SessionObject quotaRemaining(BigDecimal quotaRemaining) {
    this.quotaRemaining = quotaRemaining;
    return this;
  }

  /**
   * Get quotaRemaining
   * @return quotaRemaining
   */
  @javax.annotation.Nullable
  public BigDecimal getQuotaRemaining() {
    return quotaRemaining;
  }

  public void setQuotaRemaining(BigDecimal quotaRemaining) {
    this.quotaRemaining = quotaRemaining;
  }


  public SessionObject quotaRenewalRate(String quotaRenewalRate) {
    this.quotaRenewalRate = quotaRenewalRate;
    return this;
  }

  /**
   * Get quotaRenewalRate
   * @return quotaRenewalRate
   */
  @javax.annotation.Nullable
  public String getQuotaRenewalRate() {
    return quotaRenewalRate;
  }

  public void setQuotaRenewalRate(String quotaRenewalRate) {
    this.quotaRenewalRate = quotaRenewalRate;
  }


  public SessionObject quotaRenews(BigDecimal quotaRenews) {
    this.quotaRenews = quotaRenews;
    return this;
  }

  /**
   * Get quotaRenews
   * @return quotaRenews
   */
  @javax.annotation.Nullable
  public BigDecimal getQuotaRenews() {
    return quotaRenews;
  }

  public void setQuotaRenews(BigDecimal quotaRenews) {
    this.quotaRenews = quotaRenews;
  }


  public SessionObject rate(BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }


  public SessionObject tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public SessionObject addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionObject sessionObject = (SessionObject) o;
    return Objects.equals(this.accessRights, sessionObject.accessRights) &&
        Objects.equals(this.allowance, sessionObject.allowance) &&
        Objects.equals(this.applyPolicyId, sessionObject.applyPolicyId) &&
        Objects.equals(this.basicAuthData, sessionObject.basicAuthData) &&
        Objects.equals(this.expires, sessionObject.expires) &&
        Objects.equals(this.hmacEnabled, sessionObject.hmacEnabled) &&
        Objects.equals(this.hmacString, sessionObject.hmacString) &&
        Objects.equals(this.isInactive, sessionObject.isInactive) &&
        Objects.equals(this.jwtData, sessionObject.jwtData) &&
        Objects.equals(this.metaData, sessionObject.metaData) &&
        Objects.equals(this.monitor, sessionObject.monitor) &&
        Objects.equals(this.oauthClientId, sessionObject.oauthClientId) &&
        Objects.equals(this.orgId, sessionObject.orgId) &&
        Objects.equals(this.per, sessionObject.per) &&
        Objects.equals(this.quotaMax, sessionObject.quotaMax) &&
        Objects.equals(this.quotaRemaining, sessionObject.quotaRemaining) &&
        Objects.equals(this.quotaRenewalRate, sessionObject.quotaRenewalRate) &&
        Objects.equals(this.quotaRenews, sessionObject.quotaRenews) &&
        Objects.equals(this.rate, sessionObject.rate) &&
        Objects.equals(this.tags, sessionObject.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessRights, allowance, applyPolicyId, basicAuthData, expires, hmacEnabled, hmacString, isInactive, jwtData, metaData, monitor, oauthClientId, orgId, per, quotaMax, quotaRemaining, quotaRenewalRate, quotaRenews, rate, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionObject {\n");
    sb.append("    accessRights: ").append(toIndentedString(accessRights)).append("\n");
    sb.append("    allowance: ").append(toIndentedString(allowance)).append("\n");
    sb.append("    applyPolicyId: ").append(toIndentedString(applyPolicyId)).append("\n");
    sb.append("    basicAuthData: ").append(toIndentedString(basicAuthData)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    hmacEnabled: ").append(toIndentedString(hmacEnabled)).append("\n");
    sb.append("    hmacString: ").append(toIndentedString(hmacString)).append("\n");
    sb.append("    isInactive: ").append(toIndentedString(isInactive)).append("\n");
    sb.append("    jwtData: ").append(toIndentedString(jwtData)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    oauthClientId: ").append(toIndentedString(oauthClientId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    per: ").append(toIndentedString(per)).append("\n");
    sb.append("    quotaMax: ").append(toIndentedString(quotaMax)).append("\n");
    sb.append("    quotaRemaining: ").append(toIndentedString(quotaRemaining)).append("\n");
    sb.append("    quotaRenewalRate: ").append(toIndentedString(quotaRenewalRate)).append("\n");
    sb.append("    quotaRenews: ").append(toIndentedString(quotaRenews)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_rights");
    openapiFields.add("allowance");
    openapiFields.add("apply_policy_id");
    openapiFields.add("basic_auth_data");
    openapiFields.add("expires");
    openapiFields.add("hmac_enabled");
    openapiFields.add("hmac_string");
    openapiFields.add("is_inactive");
    openapiFields.add("jwt_data");
    openapiFields.add("meta_data");
    openapiFields.add("monitor");
    openapiFields.add("oauth_client_id");
    openapiFields.add("org_id");
    openapiFields.add("per");
    openapiFields.add("quota_max");
    openapiFields.add("quota_remaining");
    openapiFields.add("quota_renewal_rate");
    openapiFields.add("quota_renews");
    openapiFields.add("rate");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionObject is not found in the empty JSON string", SessionObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apply_policy_id") != null && !jsonObj.get("apply_policy_id").isJsonNull()) && !jsonObj.get("apply_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apply_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apply_policy_id").toString()));
      }
      // validate the optional field `basic_auth_data`
      if (jsonObj.get("basic_auth_data") != null && !jsonObj.get("basic_auth_data").isJsonNull()) {
        SessionObjectBasicAuthData.validateJsonElement(jsonObj.get("basic_auth_data"));
      }
      if ((jsonObj.get("hmac_string") != null && !jsonObj.get("hmac_string").isJsonNull()) && !jsonObj.get("hmac_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hmac_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hmac_string").toString()));
      }
      // validate the optional field `jwt_data`
      if (jsonObj.get("jwt_data") != null && !jsonObj.get("jwt_data").isJsonNull()) {
        SessionObjectJwtData.validateJsonElement(jsonObj.get("jwt_data"));
      }
      // validate the optional field `monitor`
      if (jsonObj.get("monitor") != null && !jsonObj.get("monitor").isJsonNull()) {
        SessionObjectMonitor.validateJsonElement(jsonObj.get("monitor"));
      }
      if ((jsonObj.get("oauth_client_id") != null && !jsonObj.get("oauth_client_id").isJsonNull()) && !jsonObj.get("oauth_client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth_client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth_client_id").toString()));
      }
      if ((jsonObj.get("org_id") != null && !jsonObj.get("org_id").isJsonNull()) && !jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if ((jsonObj.get("quota_renewal_rate") != null && !jsonObj.get("quota_renewal_rate").isJsonNull()) && !jsonObj.get("quota_renewal_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quota_renewal_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quota_renewal_rate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionObject.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionObject>() {
           @Override
           public void write(JsonWriter out, SessionObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionObject
   * @throws IOException if the JSON string is invalid with respect to SessionObject
   */
  public static SessionObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionObject.class);
  }

  /**
   * Convert an instance of SessionObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

