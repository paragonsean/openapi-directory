/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIDefinitionOauthMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIDefinitionOauthMeta {
  public static final String SERIALIZED_NAME_ALLOWED_ACCESS_TYPES = "allowed_access_types";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ACCESS_TYPES)
  private List<String> allowedAccessTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_AUTHORIZE_TYPES = "allowed_authorize_types";
  @SerializedName(SERIALIZED_NAME_ALLOWED_AUTHORIZE_TYPES)
  private List<String> allowedAuthorizeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_LOGIN_REDIRECT = "auth_login_redirect";
  @SerializedName(SERIALIZED_NAME_AUTH_LOGIN_REDIRECT)
  private String authLoginRedirect;

  public APIDefinitionOauthMeta() {
  }

  public APIDefinitionOauthMeta allowedAccessTypes(List<String> allowedAccessTypes) {
    this.allowedAccessTypes = allowedAccessTypes;
    return this;
  }

  public APIDefinitionOauthMeta addAllowedAccessTypesItem(String allowedAccessTypesItem) {
    if (this.allowedAccessTypes == null) {
      this.allowedAccessTypes = new ArrayList<>();
    }
    this.allowedAccessTypes.add(allowedAccessTypesItem);
    return this;
  }

  /**
   * Get allowedAccessTypes
   * @return allowedAccessTypes
   */
  @javax.annotation.Nullable
  public List<String> getAllowedAccessTypes() {
    return allowedAccessTypes;
  }

  public void setAllowedAccessTypes(List<String> allowedAccessTypes) {
    this.allowedAccessTypes = allowedAccessTypes;
  }


  public APIDefinitionOauthMeta allowedAuthorizeTypes(List<String> allowedAuthorizeTypes) {
    this.allowedAuthorizeTypes = allowedAuthorizeTypes;
    return this;
  }

  public APIDefinitionOauthMeta addAllowedAuthorizeTypesItem(String allowedAuthorizeTypesItem) {
    if (this.allowedAuthorizeTypes == null) {
      this.allowedAuthorizeTypes = new ArrayList<>();
    }
    this.allowedAuthorizeTypes.add(allowedAuthorizeTypesItem);
    return this;
  }

  /**
   * Get allowedAuthorizeTypes
   * @return allowedAuthorizeTypes
   */
  @javax.annotation.Nullable
  public List<String> getAllowedAuthorizeTypes() {
    return allowedAuthorizeTypes;
  }

  public void setAllowedAuthorizeTypes(List<String> allowedAuthorizeTypes) {
    this.allowedAuthorizeTypes = allowedAuthorizeTypes;
  }


  public APIDefinitionOauthMeta authLoginRedirect(String authLoginRedirect) {
    this.authLoginRedirect = authLoginRedirect;
    return this;
  }

  /**
   * Get authLoginRedirect
   * @return authLoginRedirect
   */
  @javax.annotation.Nullable
  public String getAuthLoginRedirect() {
    return authLoginRedirect;
  }

  public void setAuthLoginRedirect(String authLoginRedirect) {
    this.authLoginRedirect = authLoginRedirect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIDefinitionOauthMeta apIDefinitionOauthMeta = (APIDefinitionOauthMeta) o;
    return Objects.equals(this.allowedAccessTypes, apIDefinitionOauthMeta.allowedAccessTypes) &&
        Objects.equals(this.allowedAuthorizeTypes, apIDefinitionOauthMeta.allowedAuthorizeTypes) &&
        Objects.equals(this.authLoginRedirect, apIDefinitionOauthMeta.authLoginRedirect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedAccessTypes, allowedAuthorizeTypes, authLoginRedirect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIDefinitionOauthMeta {\n");
    sb.append("    allowedAccessTypes: ").append(toIndentedString(allowedAccessTypes)).append("\n");
    sb.append("    allowedAuthorizeTypes: ").append(toIndentedString(allowedAuthorizeTypes)).append("\n");
    sb.append("    authLoginRedirect: ").append(toIndentedString(authLoginRedirect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_access_types");
    openapiFields.add("allowed_authorize_types");
    openapiFields.add("auth_login_redirect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIDefinitionOauthMeta
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIDefinitionOauthMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIDefinitionOauthMeta is not found in the empty JSON string", APIDefinitionOauthMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIDefinitionOauthMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIDefinitionOauthMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_access_types") != null && !jsonObj.get("allowed_access_types").isJsonNull() && !jsonObj.get("allowed_access_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_access_types` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_access_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_authorize_types") != null && !jsonObj.get("allowed_authorize_types").isJsonNull() && !jsonObj.get("allowed_authorize_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_authorize_types` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_authorize_types").toString()));
      }
      if ((jsonObj.get("auth_login_redirect") != null && !jsonObj.get("auth_login_redirect").isJsonNull()) && !jsonObj.get("auth_login_redirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_login_redirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_login_redirect").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIDefinitionOauthMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIDefinitionOauthMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIDefinitionOauthMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIDefinitionOauthMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<APIDefinitionOauthMeta>() {
           @Override
           public void write(JsonWriter out, APIDefinitionOauthMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIDefinitionOauthMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIDefinitionOauthMeta given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIDefinitionOauthMeta
   * @throws IOException if the JSON string is invalid with respect to APIDefinitionOauthMeta
   */
  public static APIDefinitionOauthMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIDefinitionOauthMeta.class);
  }

  /**
   * Convert an instance of APIDefinitionOauthMeta to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

