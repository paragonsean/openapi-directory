/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VersionDefinitionExtendedPathsVirtualInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionDefinitionExtendedPathsVirtualInner {
  public static final String SERIALIZED_NAME_FUNCTION_SOURCE_TYPE = "function_source_type";
  @SerializedName(SERIALIZED_NAME_FUNCTION_SOURCE_TYPE)
  private String functionSourceType;

  public static final String SERIALIZED_NAME_FUNCTION_SOURCE_URI = "function_source_uri";
  @SerializedName(SERIALIZED_NAME_FUNCTION_SOURCE_URI)
  private String functionSourceUri;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RESPONSE_FUNCTION_NAME = "response_function_name";
  @SerializedName(SERIALIZED_NAME_RESPONSE_FUNCTION_NAME)
  private String responseFunctionName;

  public static final String SERIALIZED_NAME_USE_SESSION = "use_session";
  @SerializedName(SERIALIZED_NAME_USE_SESSION)
  private Boolean useSession;

  public VersionDefinitionExtendedPathsVirtualInner() {
  }

  public VersionDefinitionExtendedPathsVirtualInner functionSourceType(String functionSourceType) {
    this.functionSourceType = functionSourceType;
    return this;
  }

  /**
   * Get functionSourceType
   * @return functionSourceType
   */
  @javax.annotation.Nullable
  public String getFunctionSourceType() {
    return functionSourceType;
  }

  public void setFunctionSourceType(String functionSourceType) {
    this.functionSourceType = functionSourceType;
  }


  public VersionDefinitionExtendedPathsVirtualInner functionSourceUri(String functionSourceUri) {
    this.functionSourceUri = functionSourceUri;
    return this;
  }

  /**
   * Get functionSourceUri
   * @return functionSourceUri
   */
  @javax.annotation.Nullable
  public String getFunctionSourceUri() {
    return functionSourceUri;
  }

  public void setFunctionSourceUri(String functionSourceUri) {
    this.functionSourceUri = functionSourceUri;
  }


  public VersionDefinitionExtendedPathsVirtualInner method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public VersionDefinitionExtendedPathsVirtualInner path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public VersionDefinitionExtendedPathsVirtualInner responseFunctionName(String responseFunctionName) {
    this.responseFunctionName = responseFunctionName;
    return this;
  }

  /**
   * Get responseFunctionName
   * @return responseFunctionName
   */
  @javax.annotation.Nullable
  public String getResponseFunctionName() {
    return responseFunctionName;
  }

  public void setResponseFunctionName(String responseFunctionName) {
    this.responseFunctionName = responseFunctionName;
  }


  public VersionDefinitionExtendedPathsVirtualInner useSession(Boolean useSession) {
    this.useSession = useSession;
    return this;
  }

  /**
   * Get useSession
   * @return useSession
   */
  @javax.annotation.Nullable
  public Boolean getUseSession() {
    return useSession;
  }

  public void setUseSession(Boolean useSession) {
    this.useSession = useSession;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionDefinitionExtendedPathsVirtualInner versionDefinitionExtendedPathsVirtualInner = (VersionDefinitionExtendedPathsVirtualInner) o;
    return Objects.equals(this.functionSourceType, versionDefinitionExtendedPathsVirtualInner.functionSourceType) &&
        Objects.equals(this.functionSourceUri, versionDefinitionExtendedPathsVirtualInner.functionSourceUri) &&
        Objects.equals(this.method, versionDefinitionExtendedPathsVirtualInner.method) &&
        Objects.equals(this.path, versionDefinitionExtendedPathsVirtualInner.path) &&
        Objects.equals(this.responseFunctionName, versionDefinitionExtendedPathsVirtualInner.responseFunctionName) &&
        Objects.equals(this.useSession, versionDefinitionExtendedPathsVirtualInner.useSession);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionSourceType, functionSourceUri, method, path, responseFunctionName, useSession);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionDefinitionExtendedPathsVirtualInner {\n");
    sb.append("    functionSourceType: ").append(toIndentedString(functionSourceType)).append("\n");
    sb.append("    functionSourceUri: ").append(toIndentedString(functionSourceUri)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    responseFunctionName: ").append(toIndentedString(responseFunctionName)).append("\n");
    sb.append("    useSession: ").append(toIndentedString(useSession)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("function_source_type");
    openapiFields.add("function_source_uri");
    openapiFields.add("method");
    openapiFields.add("path");
    openapiFields.add("response_function_name");
    openapiFields.add("use_session");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionDefinitionExtendedPathsVirtualInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionDefinitionExtendedPathsVirtualInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionDefinitionExtendedPathsVirtualInner is not found in the empty JSON string", VersionDefinitionExtendedPathsVirtualInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionDefinitionExtendedPathsVirtualInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionDefinitionExtendedPathsVirtualInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("function_source_type") != null && !jsonObj.get("function_source_type").isJsonNull()) && !jsonObj.get("function_source_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function_source_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function_source_type").toString()));
      }
      if ((jsonObj.get("function_source_uri") != null && !jsonObj.get("function_source_uri").isJsonNull()) && !jsonObj.get("function_source_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function_source_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function_source_uri").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("response_function_name") != null && !jsonObj.get("response_function_name").isJsonNull()) && !jsonObj.get("response_function_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_function_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_function_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionDefinitionExtendedPathsVirtualInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionDefinitionExtendedPathsVirtualInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionDefinitionExtendedPathsVirtualInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionDefinitionExtendedPathsVirtualInner.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionDefinitionExtendedPathsVirtualInner>() {
           @Override
           public void write(JsonWriter out, VersionDefinitionExtendedPathsVirtualInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionDefinitionExtendedPathsVirtualInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionDefinitionExtendedPathsVirtualInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionDefinitionExtendedPathsVirtualInner
   * @throws IOException if the JSON string is invalid with respect to VersionDefinitionExtendedPathsVirtualInner
   */
  public static VersionDefinitionExtendedPathsVirtualInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionDefinitionExtendedPathsVirtualInner.class);
  }

  /**
   * Convert an instance of VersionDefinitionExtendedPathsVirtualInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

