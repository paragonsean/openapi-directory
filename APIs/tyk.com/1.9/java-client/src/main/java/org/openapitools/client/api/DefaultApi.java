/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIDefinition;
import java.math.BigDecimal;
import org.openapitools.client.model.OAuthClient;
import org.openapitools.client.model.SessionObject;
import org.openapitools.client.model.TykApisApiIDDelete200Response;
import org.openapitools.client.model.TykApisPost200Response;
import org.openapitools.client.model.TykHealthGet200Response;
import org.openapitools.client.model.TykKeysCreatePost200Response;
import org.openapitools.client.model.TykKeysGet200Response;
import org.openapitools.client.model.TykKeysKeyIdPost200Response;
import org.openapitools.client.model.TykKeysKeyIdPut200Response;
import org.openapitools.client.model.TykOauthAuthorizeClientPost200Response;
import org.openapitools.client.model.TykOauthClientsCreatePostRequest;
import org.openapitools.client.model.TykReloadGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tykApisApiIDDelete
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisApiIDDeleteCall(String xTykAuthorization, String apiID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/apis/{apiID}"
            .replace("{" + "apiID" + "}", localVarApiClient.escapeString(apiID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykApisApiIDDeleteValidateBeforeCall(String xTykAuthorization, String apiID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykApisApiIDDelete(Async)");
        }

        // verify the required parameter 'apiID' is set
        if (apiID == null) {
            throw new ApiException("Missing the required parameter 'apiID' when calling tykApisApiIDDelete(Async)");
        }

        return tykApisApiIDDeleteCall(xTykAuthorization, apiID, _callback);

    }

    /**
     * 
     * Deletes an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @return TykApisApiIDDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public TykApisApiIDDelete200Response tykApisApiIDDelete(String xTykAuthorization, String apiID) throws ApiException {
        ApiResponse<TykApisApiIDDelete200Response> localVarResp = tykApisApiIDDeleteWithHttpInfo(xTykAuthorization, apiID);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @return ApiResponse&lt;TykApisApiIDDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykApisApiIDDelete200Response> tykApisApiIDDeleteWithHttpInfo(String xTykAuthorization, String apiID) throws ApiException {
        okhttp3.Call localVarCall = tykApisApiIDDeleteValidateBeforeCall(xTykAuthorization, apiID, null);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisApiIDDeleteAsync(String xTykAuthorization, String apiID, final ApiCallback<TykApisApiIDDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykApisApiIDDeleteValidateBeforeCall(xTykAuthorization, apiID, _callback);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykApisApiIDGet
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisApiIDGetCall(String xTykAuthorization, String apiID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/apis/{apiID}"
            .replace("{" + "apiID" + "}", localVarApiClient.escapeString(apiID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykApisApiIDGetValidateBeforeCall(String xTykAuthorization, String apiID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykApisApiIDGet(Async)");
        }

        // verify the required parameter 'apiID' is set
        if (apiID == null) {
            throw new ApiException("Missing the required parameter 'apiID' when calling tykApisApiIDGet(Async)");
        }

        return tykApisApiIDGetCall(xTykAuthorization, apiID, _callback);

    }

    /**
     * 
     * Gets an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @return APIDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API response </td><td>  -  </td></tr>
     </table>
     */
    public APIDefinition tykApisApiIDGet(String xTykAuthorization, String apiID) throws ApiException {
        ApiResponse<APIDefinition> localVarResp = tykApisApiIDGetWithHttpInfo(xTykAuthorization, apiID);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @return ApiResponse&lt;APIDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIDefinition> tykApisApiIDGetWithHttpInfo(String xTykAuthorization, String apiID) throws ApiException {
        okhttp3.Call localVarCall = tykApisApiIDGetValidateBeforeCall(xTykAuthorization, apiID, null);
        Type localVarReturnType = new TypeToken<APIDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisApiIDGetAsync(String xTykAuthorization, String apiID, final ApiCallback<APIDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykApisApiIDGetValidateBeforeCall(xTykAuthorization, apiID, _callback);
        Type localVarReturnType = new TypeToken<APIDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykApisApiIDPut
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param apiDefinition  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisApiIDPutCall(String xTykAuthorization, String apiID, APIDefinition apiDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiDefinition;

        // create path and map variables
        String localVarPath = "/tyk/apis/{apiID}"
            .replace("{" + "apiID" + "}", localVarApiClient.escapeString(apiID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykApisApiIDPutValidateBeforeCall(String xTykAuthorization, String apiID, APIDefinition apiDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykApisApiIDPut(Async)");
        }

        // verify the required parameter 'apiID' is set
        if (apiID == null) {
            throw new ApiException("Missing the required parameter 'apiID' when calling tykApisApiIDPut(Async)");
        }

        return tykApisApiIDPutCall(xTykAuthorization, apiID, apiDefinition, _callback);

    }

    /**
     * 
     * Updates an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param apiDefinition  (optional)
     * @return TykApisPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public TykApisPost200Response tykApisApiIDPut(String xTykAuthorization, String apiID, APIDefinition apiDefinition) throws ApiException {
        ApiResponse<TykApisPost200Response> localVarResp = tykApisApiIDPutWithHttpInfo(xTykAuthorization, apiID, apiDefinition);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param apiDefinition  (optional)
     * @return ApiResponse&lt;TykApisPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykApisPost200Response> tykApisApiIDPutWithHttpInfo(String xTykAuthorization, String apiID, APIDefinition apiDefinition) throws ApiException {
        okhttp3.Call localVarCall = tykApisApiIDPutValidateBeforeCall(xTykAuthorization, apiID, apiDefinition, null);
        Type localVarReturnType = new TypeToken<TykApisPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an *API Definition* object, if it exists 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiID API ID (required)
     * @param apiDefinition  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisApiIDPutAsync(String xTykAuthorization, String apiID, APIDefinition apiDefinition, final ApiCallback<TykApisPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykApisApiIDPutValidateBeforeCall(xTykAuthorization, apiID, apiDefinition, _callback);
        Type localVarReturnType = new TypeToken<TykApisPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykApisGet
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisGetCall(String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/apis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykApisGetValidateBeforeCall(String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykApisGet(Async)");
        }

        return tykApisGetCall(xTykAuthorization, _callback);

    }

    /**
     * 
     * Gets a list of *API Definition* objects that are currently live on the gateway  
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return List&lt;APIDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful list response </td><td>  -  </td></tr>
     </table>
     */
    public List<APIDefinition> tykApisGet(String xTykAuthorization) throws ApiException {
        ApiResponse<List<APIDefinition>> localVarResp = tykApisGetWithHttpInfo(xTykAuthorization);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of *API Definition* objects that are currently live on the gateway  
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return ApiResponse&lt;List&lt;APIDefinition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful list response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<APIDefinition>> tykApisGetWithHttpInfo(String xTykAuthorization) throws ApiException {
        okhttp3.Call localVarCall = tykApisGetValidateBeforeCall(xTykAuthorization, null);
        Type localVarReturnType = new TypeToken<List<APIDefinition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of *API Definition* objects that are currently live on the gateway  
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful list response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisGetAsync(String xTykAuthorization, final ApiCallback<List<APIDefinition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykApisGetValidateBeforeCall(xTykAuthorization, _callback);
        Type localVarReturnType = new TypeToken<List<APIDefinition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykApisPost
     * @param apiDefinition  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisPostCall(APIDefinition apiDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiDefinition;

        // create path and map variables
        String localVarPath = "/tyk/apis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykApisPostValidateBeforeCall(APIDefinition apiDefinition, final ApiCallback _callback) throws ApiException {
        return tykApisPostCall(apiDefinition, _callback);

    }

    /**
     * 
     * Create an *API Definition* object 
     * @param apiDefinition  (optional)
     * @return TykApisPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public TykApisPost200Response tykApisPost(APIDefinition apiDefinition) throws ApiException {
        ApiResponse<TykApisPost200Response> localVarResp = tykApisPostWithHttpInfo(apiDefinition);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an *API Definition* object 
     * @param apiDefinition  (optional)
     * @return ApiResponse&lt;TykApisPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykApisPost200Response> tykApisPostWithHttpInfo(APIDefinition apiDefinition) throws ApiException {
        okhttp3.Call localVarCall = tykApisPostValidateBeforeCall(apiDefinition, null);
        Type localVarReturnType = new TypeToken<TykApisPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an *API Definition* object 
     * @param apiDefinition  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful API Deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykApisPostAsync(APIDefinition apiDefinition, final ApiCallback<TykApisPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykApisPostValidateBeforeCall(apiDefinition, _callback);
        Type localVarReturnType = new TypeToken<TykApisPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykHealthGet
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID to query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful healthcheck response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykHealthGetCall(String xTykAuthorization, String apiId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/health/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_id", apiId));
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykHealthGetValidateBeforeCall(String xTykAuthorization, String apiId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykHealthGet(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling tykHealthGet(Async)");
        }

        return tykHealthGetCall(xTykAuthorization, apiId, _callback);

    }

    /**
     * 
     * Gets the health check values for an API if it is being recorded 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID to query (required)
     * @return TykHealthGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful healthcheck response </td><td>  -  </td></tr>
     </table>
     */
    public TykHealthGet200Response tykHealthGet(String xTykAuthorization, String apiId) throws ApiException {
        ApiResponse<TykHealthGet200Response> localVarResp = tykHealthGetWithHttpInfo(xTykAuthorization, apiId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the health check values for an API if it is being recorded 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID to query (required)
     * @return ApiResponse&lt;TykHealthGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful healthcheck response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykHealthGet200Response> tykHealthGetWithHttpInfo(String xTykAuthorization, String apiId) throws ApiException {
        okhttp3.Call localVarCall = tykHealthGetValidateBeforeCall(xTykAuthorization, apiId, null);
        Type localVarReturnType = new TypeToken<TykHealthGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the health check values for an API if it is being recorded 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID to query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful healthcheck response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykHealthGetAsync(String xTykAuthorization, String apiId, final ApiCallback<TykHealthGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykHealthGetValidateBeforeCall(xTykAuthorization, apiId, _callback);
        Type localVarReturnType = new TypeToken<TykHealthGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykKeysCreatePost
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Created Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysCreatePostCall(String xTykAuthorization, BigDecimal suppressReset, SessionObject sessionObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionObject;

        // create path and map variables
        String localVarPath = "/tyk/keys/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (suppressReset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suppress_reset", suppressReset));
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykKeysCreatePostValidateBeforeCall(String xTykAuthorization, BigDecimal suppressReset, SessionObject sessionObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykKeysCreatePost(Async)");
        }

        return tykKeysCreatePostCall(xTykAuthorization, suppressReset, sessionObject, _callback);

    }

    /**
     * 
     * Create a new *API token* with the *session object* defined in the body 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @return TykKeysCreatePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Created Response </td><td>  -  </td></tr>
     </table>
     */
    public TykKeysCreatePost200Response tykKeysCreatePost(String xTykAuthorization, BigDecimal suppressReset, SessionObject sessionObject) throws ApiException {
        ApiResponse<TykKeysCreatePost200Response> localVarResp = tykKeysCreatePostWithHttpInfo(xTykAuthorization, suppressReset, sessionObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new *API token* with the *session object* defined in the body 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @return ApiResponse&lt;TykKeysCreatePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Created Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykKeysCreatePost200Response> tykKeysCreatePostWithHttpInfo(String xTykAuthorization, BigDecimal suppressReset, SessionObject sessionObject) throws ApiException {
        okhttp3.Call localVarCall = tykKeysCreatePostValidateBeforeCall(xTykAuthorization, suppressReset, sessionObject, null);
        Type localVarReturnType = new TypeToken<TykKeysCreatePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new *API token* with the *session object* defined in the body 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Created Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysCreatePostAsync(String xTykAuthorization, BigDecimal suppressReset, SessionObject sessionObject, final ApiCallback<TykKeysCreatePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykKeysCreatePostValidateBeforeCall(xTykAuthorization, suppressReset, sessionObject, _callback);
        Type localVarReturnType = new TypeToken<TykKeysCreatePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykKeysGet
     * @param apiId Back-end to target (required)
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysGetCall(String apiId, String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/keys/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_id", apiId));
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykKeysGetValidateBeforeCall(String apiId, String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling tykKeysGet(Async)");
        }

        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykKeysGet(Async)");
        }

        return tykKeysGetCall(apiId, xTykAuthorization, _callback);

    }

    /**
     * 
     * Gets a list of *key* IDs (will only work with non-hashed installations) 
     * @param apiId Back-end to target (required)
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return TykKeysGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public TykKeysGet200Response tykKeysGet(String apiId, String xTykAuthorization) throws ApiException {
        ApiResponse<TykKeysGet200Response> localVarResp = tykKeysGetWithHttpInfo(apiId, xTykAuthorization);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of *key* IDs (will only work with non-hashed installations) 
     * @param apiId Back-end to target (required)
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return ApiResponse&lt;TykKeysGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykKeysGet200Response> tykKeysGetWithHttpInfo(String apiId, String xTykAuthorization) throws ApiException {
        okhttp3.Call localVarCall = tykKeysGetValidateBeforeCall(apiId, xTykAuthorization, null);
        Type localVarReturnType = new TypeToken<TykKeysGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of *key* IDs (will only work with non-hashed installations) 
     * @param apiId Back-end to target (required)
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysGetAsync(String apiId, String xTykAuthorization, final ApiCallback<TykKeysGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykKeysGetValidateBeforeCall(apiId, xTykAuthorization, _callback);
        Type localVarReturnType = new TypeToken<TykKeysGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykKeysKeyIdDelete
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Deleted Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysKeyIdDeleteCall(String xTykAuthorization, String keyId, String apiId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_id", apiId));
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykKeysKeyIdDeleteValidateBeforeCall(String xTykAuthorization, String keyId, String apiId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykKeysKeyIdDelete(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling tykKeysKeyIdDelete(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling tykKeysKeyIdDelete(Async)");
        }

        return tykKeysKeyIdDeleteCall(xTykAuthorization, keyId, apiId, _callback);

    }

    /**
     * 
     * Remove this *API token* from the gateway, this will completely destroy the token and metadata associated with the token and instantly stop access from being granted 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @return TykApisApiIDDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Deleted Response </td><td>  -  </td></tr>
     </table>
     */
    public TykApisApiIDDelete200Response tykKeysKeyIdDelete(String xTykAuthorization, String keyId, String apiId) throws ApiException {
        ApiResponse<TykApisApiIDDelete200Response> localVarResp = tykKeysKeyIdDeleteWithHttpInfo(xTykAuthorization, keyId, apiId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove this *API token* from the gateway, this will completely destroy the token and metadata associated with the token and instantly stop access from being granted 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @return ApiResponse&lt;TykApisApiIDDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Deleted Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykApisApiIDDelete200Response> tykKeysKeyIdDeleteWithHttpInfo(String xTykAuthorization, String keyId, String apiId) throws ApiException {
        okhttp3.Call localVarCall = tykKeysKeyIdDeleteValidateBeforeCall(xTykAuthorization, keyId, apiId, null);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove this *API token* from the gateway, this will completely destroy the token and metadata associated with the token and instantly stop access from being granted 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Deleted Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysKeyIdDeleteAsync(String xTykAuthorization, String keyId, String apiId, final ApiCallback<TykApisApiIDDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykKeysKeyIdDeleteValidateBeforeCall(xTykAuthorization, keyId, apiId, _callback);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykKeysKeyIdPost
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param sessionObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Added Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysKeyIdPostCall(String xTykAuthorization, String keyId, SessionObject sessionObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionObject;

        // create path and map variables
        String localVarPath = "/tyk/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykKeysKeyIdPostValidateBeforeCall(String xTykAuthorization, String keyId, SessionObject sessionObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykKeysKeyIdPost(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling tykKeysKeyIdPost(Async)");
        }

        return tykKeysKeyIdPostCall(xTykAuthorization, keyId, sessionObject, _callback);

    }

    /**
     * 
     * Add a pre-specified *API token* with the *session object* defined in the body, this operatin creates a custom token that dsoes not use the gateway naming convention for tokens 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param sessionObject  (optional)
     * @return TykKeysKeyIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Added Response </td><td>  -  </td></tr>
     </table>
     */
    public TykKeysKeyIdPost200Response tykKeysKeyIdPost(String xTykAuthorization, String keyId, SessionObject sessionObject) throws ApiException {
        ApiResponse<TykKeysKeyIdPost200Response> localVarResp = tykKeysKeyIdPostWithHttpInfo(xTykAuthorization, keyId, sessionObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a pre-specified *API token* with the *session object* defined in the body, this operatin creates a custom token that dsoes not use the gateway naming convention for tokens 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param sessionObject  (optional)
     * @return ApiResponse&lt;TykKeysKeyIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Added Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykKeysKeyIdPost200Response> tykKeysKeyIdPostWithHttpInfo(String xTykAuthorization, String keyId, SessionObject sessionObject) throws ApiException {
        okhttp3.Call localVarCall = tykKeysKeyIdPostValidateBeforeCall(xTykAuthorization, keyId, sessionObject, null);
        Type localVarReturnType = new TypeToken<TykKeysKeyIdPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a pre-specified *API token* with the *session object* defined in the body, this operatin creates a custom token that dsoes not use the gateway naming convention for tokens 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param sessionObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Added Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysKeyIdPostAsync(String xTykAuthorization, String keyId, SessionObject sessionObject, final ApiCallback<TykKeysKeyIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykKeysKeyIdPostValidateBeforeCall(xTykAuthorization, keyId, sessionObject, _callback);
        Type localVarReturnType = new TypeToken<TykKeysKeyIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykKeysKeyIdPut
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Updated Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysKeyIdPutCall(String xTykAuthorization, String keyId, String apiId, BigDecimal suppressReset, SessionObject sessionObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sessionObject;

        // create path and map variables
        String localVarPath = "/tyk/keys/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (suppressReset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suppress_reset", suppressReset));
        }

        if (apiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_id", apiId));
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykKeysKeyIdPutValidateBeforeCall(String xTykAuthorization, String keyId, String apiId, BigDecimal suppressReset, SessionObject sessionObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykKeysKeyIdPut(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling tykKeysKeyIdPut(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling tykKeysKeyIdPut(Async)");
        }

        return tykKeysKeyIdPutCall(xTykAuthorization, keyId, apiId, suppressReset, sessionObject, _callback);

    }

    /**
     * 
     * Update an *API token* with the *session object* defined in the body, this operatin overwrites the existing object 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @return TykKeysKeyIdPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Updated Response </td><td>  -  </td></tr>
     </table>
     */
    public TykKeysKeyIdPut200Response tykKeysKeyIdPut(String xTykAuthorization, String keyId, String apiId, BigDecimal suppressReset, SessionObject sessionObject) throws ApiException {
        ApiResponse<TykKeysKeyIdPut200Response> localVarResp = tykKeysKeyIdPutWithHttpInfo(xTykAuthorization, keyId, apiId, suppressReset, sessionObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an *API token* with the *session object* defined in the body, this operatin overwrites the existing object 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @return ApiResponse&lt;TykKeysKeyIdPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Updated Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykKeysKeyIdPut200Response> tykKeysKeyIdPutWithHttpInfo(String xTykAuthorization, String keyId, String apiId, BigDecimal suppressReset, SessionObject sessionObject) throws ApiException {
        okhttp3.Call localVarCall = tykKeysKeyIdPutValidateBeforeCall(xTykAuthorization, keyId, apiId, suppressReset, sessionObject, null);
        Type localVarReturnType = new TypeToken<TykKeysKeyIdPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an *API token* with the *session object* defined in the body, this operatin overwrites the existing object 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiId Back-end to target (required)
     * @param suppressReset Adding the &#x60;suppress_reset&#x60; parameter and setting it to &#x60;1&#x60;, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the &#x60;suppress_reset&#x60; flag to the URL parameters will avoid this behaviour. (optional)
     * @param sessionObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key Updated Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykKeysKeyIdPutAsync(String xTykAuthorization, String keyId, String apiId, BigDecimal suppressReset, SessionObject sessionObject, final ApiCallback<TykKeysKeyIdPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykKeysKeyIdPutValidateBeforeCall(xTykAuthorization, keyId, apiId, suppressReset, sessionObject, _callback);
        Type localVarReturnType = new TypeToken<TykKeysKeyIdPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykOauthAuthorizeClientPost
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param responseType Should be provided by requesting client as part of authorisation request, this should be either &#x60;code&#x60; or &#x60;token&#x60; depending on the methods you have specified for the API (required)
     * @param clientId Should be provided by requesting client as part of authorisation request. The Client ID that is making the request (required)
     * @param redirectUri Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk (required)
     * @param keyRules A string representation of a *Session Object (form-encoded)*. This should be provided by your application in order to apply any quotas or rules to the key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthAuthorizeClientPostCall(String xTykAuthorization, String responseType, String clientId, String redirectUri, String keyRules, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/oauth/authorize-client/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseType != null) {
            localVarFormParams.put("response_type", responseType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (keyRules != null) {
            localVarFormParams.put("key_rules", keyRules);
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykOauthAuthorizeClientPostValidateBeforeCall(String xTykAuthorization, String responseType, String clientId, String redirectUri, String keyRules, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykOauthAuthorizeClientPost(Async)");
        }

        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling tykOauthAuthorizeClientPost(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling tykOauthAuthorizeClientPost(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling tykOauthAuthorizeClientPost(Async)");
        }

        // verify the required parameter 'keyRules' is set
        if (keyRules == null) {
            throw new ApiException("Missing the required parameter 'keyRules' when calling tykOauthAuthorizeClientPost(Async)");
        }

        return tykOauthAuthorizeClientPostCall(xTykAuthorization, responseType, clientId, redirectUri, keyRules, _callback);

    }

    /**
     * 
     * The final request from an authorising party for a redirect URI during the Tyk OAuth flow 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param responseType Should be provided by requesting client as part of authorisation request, this should be either &#x60;code&#x60; or &#x60;token&#x60; depending on the methods you have specified for the API (required)
     * @param clientId Should be provided by requesting client as part of authorisation request. The Client ID that is making the request (required)
     * @param redirectUri Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk (required)
     * @param keyRules A string representation of a *Session Object (form-encoded)*. This should be provided by your application in order to apply any quotas or rules to the key (required)
     * @return TykOauthAuthorizeClientPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token response </td><td>  -  </td></tr>
     </table>
     */
    public TykOauthAuthorizeClientPost200Response tykOauthAuthorizeClientPost(String xTykAuthorization, String responseType, String clientId, String redirectUri, String keyRules) throws ApiException {
        ApiResponse<TykOauthAuthorizeClientPost200Response> localVarResp = tykOauthAuthorizeClientPostWithHttpInfo(xTykAuthorization, responseType, clientId, redirectUri, keyRules);
        return localVarResp.getData();
    }

    /**
     * 
     * The final request from an authorising party for a redirect URI during the Tyk OAuth flow 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param responseType Should be provided by requesting client as part of authorisation request, this should be either &#x60;code&#x60; or &#x60;token&#x60; depending on the methods you have specified for the API (required)
     * @param clientId Should be provided by requesting client as part of authorisation request. The Client ID that is making the request (required)
     * @param redirectUri Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk (required)
     * @param keyRules A string representation of a *Session Object (form-encoded)*. This should be provided by your application in order to apply any quotas or rules to the key (required)
     * @return ApiResponse&lt;TykOauthAuthorizeClientPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykOauthAuthorizeClientPost200Response> tykOauthAuthorizeClientPostWithHttpInfo(String xTykAuthorization, String responseType, String clientId, String redirectUri, String keyRules) throws ApiException {
        okhttp3.Call localVarCall = tykOauthAuthorizeClientPostValidateBeforeCall(xTykAuthorization, responseType, clientId, redirectUri, keyRules, null);
        Type localVarReturnType = new TypeToken<TykOauthAuthorizeClientPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The final request from an authorising party for a redirect URI during the Tyk OAuth flow 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param responseType Should be provided by requesting client as part of authorisation request, this should be either &#x60;code&#x60; or &#x60;token&#x60; depending on the methods you have specified for the API (required)
     * @param clientId Should be provided by requesting client as part of authorisation request. The Client ID that is making the request (required)
     * @param redirectUri Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk (required)
     * @param keyRules A string representation of a *Session Object (form-encoded)*. This should be provided by your application in order to apply any quotas or rules to the key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthAuthorizeClientPostAsync(String xTykAuthorization, String responseType, String clientId, String redirectUri, String keyRules, final ApiCallback<TykOauthAuthorizeClientPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykOauthAuthorizeClientPostValidateBeforeCall(xTykAuthorization, responseType, clientId, redirectUri, keyRules, _callback);
        Type localVarReturnType = new TypeToken<TykOauthAuthorizeClientPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykOauthClientsApiIdClientIdDelete
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @param clientId OAuth Client ID to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful OAuth client deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthClientsApiIdClientIdDeleteCall(String xTykAuthorization, String apiId, String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/oauth/clients/{apiId}/{clientId}"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "clientId" + "}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykOauthClientsApiIdClientIdDeleteValidateBeforeCall(String xTykAuthorization, String apiId, String clientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykOauthClientsApiIdClientIdDelete(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling tykOauthClientsApiIdClientIdDelete(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling tykOauthClientsApiIdClientIdDelete(Async)");
        }

        return tykOauthClientsApiIdClientIdDeleteCall(xTykAuthorization, apiId, clientId, _callback);

    }

    /**
     * 
     * Delete the OAuth client 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @param clientId OAuth Client ID to delete (required)
     * @return TykApisApiIDDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful OAuth client deletion </td><td>  -  </td></tr>
     </table>
     */
    public TykApisApiIDDelete200Response tykOauthClientsApiIdClientIdDelete(String xTykAuthorization, String apiId, String clientId) throws ApiException {
        ApiResponse<TykApisApiIDDelete200Response> localVarResp = tykOauthClientsApiIdClientIdDeleteWithHttpInfo(xTykAuthorization, apiId, clientId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the OAuth client 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @param clientId OAuth Client ID to delete (required)
     * @return ApiResponse&lt;TykApisApiIDDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful OAuth client deletion </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykApisApiIDDelete200Response> tykOauthClientsApiIdClientIdDeleteWithHttpInfo(String xTykAuthorization, String apiId, String clientId) throws ApiException {
        okhttp3.Call localVarCall = tykOauthClientsApiIdClientIdDeleteValidateBeforeCall(xTykAuthorization, apiId, clientId, null);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the OAuth client 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @param clientId OAuth Client ID to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful OAuth client deletion </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthClientsApiIdClientIdDeleteAsync(String xTykAuthorization, String apiId, String clientId, final ApiCallback<TykApisApiIDDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykOauthClientsApiIdClientIdDeleteValidateBeforeCall(xTykAuthorization, apiId, clientId, _callback);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykOauthClientsApiIdGet
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful listy response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthClientsApiIdGetCall(String xTykAuthorization, String apiId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/oauth/clients/{apiId}"
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykOauthClientsApiIdGetValidateBeforeCall(String xTykAuthorization, String apiId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykOauthClientsApiIdGet(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling tykOauthClientsApiIdGet(Async)");
        }

        return tykOauthClientsApiIdGetCall(xTykAuthorization, apiId, _callback);

    }

    /**
     * 
     * Get a list of OAuth clients bound to this back end  
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @return List&lt;OAuthClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful listy response </td><td>  -  </td></tr>
     </table>
     */
    public List<OAuthClient> tykOauthClientsApiIdGet(String xTykAuthorization, String apiId) throws ApiException {
        ApiResponse<List<OAuthClient>> localVarResp = tykOauthClientsApiIdGetWithHttpInfo(xTykAuthorization, apiId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of OAuth clients bound to this back end  
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @return ApiResponse&lt;List&lt;OAuthClient&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful listy response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OAuthClient>> tykOauthClientsApiIdGetWithHttpInfo(String xTykAuthorization, String apiId) throws ApiException {
        okhttp3.Call localVarCall = tykOauthClientsApiIdGetValidateBeforeCall(xTykAuthorization, apiId, null);
        Type localVarReturnType = new TypeToken<List<OAuthClient>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of OAuth clients bound to this back end  
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param apiId API ID that owns this client (back end) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful listy response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthClientsApiIdGetAsync(String xTykAuthorization, String apiId, final ApiCallback<List<OAuthClient>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykOauthClientsApiIdGetValidateBeforeCall(xTykAuthorization, apiId, _callback);
        Type localVarReturnType = new TypeToken<List<OAuthClient>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykOauthClientsCreatePost
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param oauthClient  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful create response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthClientsCreatePostCall(String xTykAuthorization, TykOauthClientsCreatePostRequest oauthClient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthClient;

        // create path and map variables
        String localVarPath = "/tyk/oauth/clients/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykOauthClientsCreatePostValidateBeforeCall(String xTykAuthorization, TykOauthClientsCreatePostRequest oauthClient, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykOauthClientsCreatePost(Async)");
        }

        return tykOauthClientsCreatePostCall(xTykAuthorization, oauthClient, _callback);

    }

    /**
     * 
     * Create a new OAuth client 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param oauthClient  (optional)
     * @return OAuthClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful create response </td><td>  -  </td></tr>
     </table>
     */
    public OAuthClient tykOauthClientsCreatePost(String xTykAuthorization, TykOauthClientsCreatePostRequest oauthClient) throws ApiException {
        ApiResponse<OAuthClient> localVarResp = tykOauthClientsCreatePostWithHttpInfo(xTykAuthorization, oauthClient);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new OAuth client 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param oauthClient  (optional)
     * @return ApiResponse&lt;OAuthClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful create response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuthClient> tykOauthClientsCreatePostWithHttpInfo(String xTykAuthorization, TykOauthClientsCreatePostRequest oauthClient) throws ApiException {
        okhttp3.Call localVarCall = tykOauthClientsCreatePostValidateBeforeCall(xTykAuthorization, oauthClient, null);
        Type localVarReturnType = new TypeToken<OAuthClient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new OAuth client 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param oauthClient  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful create response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthClientsCreatePostAsync(String xTykAuthorization, TykOauthClientsCreatePostRequest oauthClient, final ApiCallback<OAuthClient> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykOauthClientsCreatePostValidateBeforeCall(xTykAuthorization, oauthClient, _callback);
        Type localVarReturnType = new TypeToken<OAuthClient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykOauthRefreshKeyIdDelete
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiID API ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token revoked </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthRefreshKeyIdDeleteCall(String xTykAuthorization, String keyId, String apiID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/oauth/refresh/{keyId}"
            .replace("{" + "keyId" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiID", apiID));
        }

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykOauthRefreshKeyIdDeleteValidateBeforeCall(String xTykAuthorization, String keyId, String apiID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykOauthRefreshKeyIdDelete(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling tykOauthRefreshKeyIdDelete(Async)");
        }

        // verify the required parameter 'apiID' is set
        if (apiID == null) {
            throw new ApiException("Missing the required parameter 'apiID' when calling tykOauthRefreshKeyIdDelete(Async)");
        }

        return tykOauthRefreshKeyIdDeleteCall(xTykAuthorization, keyId, apiID, _callback);

    }

    /**
     * 
     * Invalidate a refresh token 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiID API ID (required)
     * @return TykApisApiIDDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token revoked </td><td>  -  </td></tr>
     </table>
     */
    public TykApisApiIDDelete200Response tykOauthRefreshKeyIdDelete(String xTykAuthorization, String keyId, String apiID) throws ApiException {
        ApiResponse<TykApisApiIDDelete200Response> localVarResp = tykOauthRefreshKeyIdDeleteWithHttpInfo(xTykAuthorization, keyId, apiID);
        return localVarResp.getData();
    }

    /**
     * 
     * Invalidate a refresh token 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiID API ID (required)
     * @return ApiResponse&lt;TykApisApiIDDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token revoked </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykApisApiIDDelete200Response> tykOauthRefreshKeyIdDeleteWithHttpInfo(String xTykAuthorization, String keyId, String apiID) throws ApiException {
        okhttp3.Call localVarCall = tykOauthRefreshKeyIdDeleteValidateBeforeCall(xTykAuthorization, keyId, apiID, null);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invalidate a refresh token 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param keyId Access Token (required)
     * @param apiID API ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful token revoked </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykOauthRefreshKeyIdDeleteAsync(String xTykAuthorization, String keyId, String apiID, final ApiCallback<TykApisApiIDDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykOauthRefreshKeyIdDeleteValidateBeforeCall(xTykAuthorization, keyId, apiID, _callback);
        Type localVarReturnType = new TypeToken<TykApisApiIDDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykReloadGet
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykReloadGetCall(String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/reload/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykReloadGetValidateBeforeCall(String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykReloadGet(Async)");
        }

        return tykReloadGetCall(xTykAuthorization, _callback);

    }

    /**
     * 
     * Will reload the targetted gateway 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return TykReloadGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public TykReloadGet200Response tykReloadGet(String xTykAuthorization) throws ApiException {
        ApiResponse<TykReloadGet200Response> localVarResp = tykReloadGetWithHttpInfo(xTykAuthorization);
        return localVarResp.getData();
    }

    /**
     * 
     * Will reload the targetted gateway 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return ApiResponse&lt;TykReloadGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykReloadGet200Response> tykReloadGetWithHttpInfo(String xTykAuthorization) throws ApiException {
        okhttp3.Call localVarCall = tykReloadGetValidateBeforeCall(xTykAuthorization, null);
        Type localVarReturnType = new TypeToken<TykReloadGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Will reload the targetted gateway 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykReloadGetAsync(String xTykAuthorization, final ApiCallback<TykReloadGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykReloadGetValidateBeforeCall(xTykAuthorization, _callback);
        Type localVarReturnType = new TypeToken<TykReloadGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tykReloadGroupGet
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykReloadGroupGetCall(String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tyk/reload/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTykAuthorization != null) {
            localVarHeaderParams.put("x-tyk-authorization", localVarApiClient.parameterToString(xTykAuthorization));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tykReloadGroupGetValidateBeforeCall(String xTykAuthorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTykAuthorization' is set
        if (xTykAuthorization == null) {
            throw new ApiException("Missing the required parameter 'xTykAuthorization' when calling tykReloadGroupGet(Async)");
        }

        return tykReloadGroupGetCall(xTykAuthorization, _callback);

    }

    /**
     * 
     * Will reload the cluster via the targeted gateway 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return TykReloadGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public TykReloadGet200Response tykReloadGroupGet(String xTykAuthorization) throws ApiException {
        ApiResponse<TykReloadGet200Response> localVarResp = tykReloadGroupGetWithHttpInfo(xTykAuthorization);
        return localVarResp.getData();
    }

    /**
     * 
     * Will reload the cluster via the targeted gateway 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @return ApiResponse&lt;TykReloadGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TykReloadGet200Response> tykReloadGroupGetWithHttpInfo(String xTykAuthorization) throws ApiException {
        okhttp3.Call localVarCall = tykReloadGroupGetValidateBeforeCall(xTykAuthorization, null);
        Type localVarReturnType = new TypeToken<TykReloadGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Will reload the cluster via the targeted gateway 
     * @param xTykAuthorization tyk gateway shared secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesful reload response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tykReloadGroupGetAsync(String xTykAuthorization, final ApiCallback<TykReloadGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tykReloadGroupGetValidateBeforeCall(xTykAuthorization, _callback);
        Type localVarReturnType = new TypeToken<TykReloadGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
