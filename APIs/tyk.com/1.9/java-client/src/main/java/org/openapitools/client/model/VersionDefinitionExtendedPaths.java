/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndPointMeta;
import org.openapitools.client.model.HeaderInjectionMeta;
import org.openapitools.client.model.TemplateMeta;
import org.openapitools.client.model.VersionDefinitionExtendedPathsCircuitBreakersInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsHardTimeoutsInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsSizeLimitsInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsUrlRewritesInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsVirtualInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VersionDefinitionExtendedPaths
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionDefinitionExtendedPaths {
  public static final String SERIALIZED_NAME_BLACK_LIST = "black_list";
  @SerializedName(SERIALIZED_NAME_BLACK_LIST)
  private List<EndPointMeta> blackList = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private List<String> cache = new ArrayList<>();

  public static final String SERIALIZED_NAME_CIRCUIT_BREAKERS = "circuit_breakers";
  @SerializedName(SERIALIZED_NAME_CIRCUIT_BREAKERS)
  private List<VersionDefinitionExtendedPathsCircuitBreakersInner> circuitBreakers = new ArrayList<>();

  public static final String SERIALIZED_NAME_HARD_TIMEOUTS = "hard_timeouts";
  @SerializedName(SERIALIZED_NAME_HARD_TIMEOUTS)
  private List<VersionDefinitionExtendedPathsHardTimeoutsInner> hardTimeouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORED = "ignored";
  @SerializedName(SERIALIZED_NAME_IGNORED)
  private List<EndPointMeta> ignored = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIZE_LIMITS = "size_limits";
  @SerializedName(SERIALIZED_NAME_SIZE_LIMITS)
  private List<VersionDefinitionExtendedPathsSizeLimitsInner> sizeLimits = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORM = "transform";
  @SerializedName(SERIALIZED_NAME_TRANSFORM)
  private List<TemplateMeta> transform = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORM_HEADERS = "transform_headers";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_HEADERS)
  private List<HeaderInjectionMeta> transformHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORM_RESPONSE = "transform_response";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_RESPONSE)
  private List<TemplateMeta> transformResponse = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORM_RESPONSE_HEADERS = "transform_response_headers";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_RESPONSE_HEADERS)
  private List<HeaderInjectionMeta> transformResponseHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL_REWRITES = "url_rewrites";
  @SerializedName(SERIALIZED_NAME_URL_REWRITES)
  private List<VersionDefinitionExtendedPathsUrlRewritesInner> urlRewrites = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL = "virtual";
  @SerializedName(SERIALIZED_NAME_VIRTUAL)
  private List<VersionDefinitionExtendedPathsVirtualInner> virtual = new ArrayList<>();

  public static final String SERIALIZED_NAME_WHITE_LIST = "white_list";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST)
  private List<EndPointMeta> whiteList = new ArrayList<>();

  public VersionDefinitionExtendedPaths() {
  }

  public VersionDefinitionExtendedPaths blackList(List<EndPointMeta> blackList) {
    this.blackList = blackList;
    return this;
  }

  public VersionDefinitionExtendedPaths addBlackListItem(EndPointMeta blackListItem) {
    if (this.blackList == null) {
      this.blackList = new ArrayList<>();
    }
    this.blackList.add(blackListItem);
    return this;
  }

  /**
   * Get blackList
   * @return blackList
   */
  @javax.annotation.Nullable
  public List<EndPointMeta> getBlackList() {
    return blackList;
  }

  public void setBlackList(List<EndPointMeta> blackList) {
    this.blackList = blackList;
  }


  public VersionDefinitionExtendedPaths cache(List<String> cache) {
    this.cache = cache;
    return this;
  }

  public VersionDefinitionExtendedPaths addCacheItem(String cacheItem) {
    if (this.cache == null) {
      this.cache = new ArrayList<>();
    }
    this.cache.add(cacheItem);
    return this;
  }

  /**
   * Get cache
   * @return cache
   */
  @javax.annotation.Nullable
  public List<String> getCache() {
    return cache;
  }

  public void setCache(List<String> cache) {
    this.cache = cache;
  }


  public VersionDefinitionExtendedPaths circuitBreakers(List<VersionDefinitionExtendedPathsCircuitBreakersInner> circuitBreakers) {
    this.circuitBreakers = circuitBreakers;
    return this;
  }

  public VersionDefinitionExtendedPaths addCircuitBreakersItem(VersionDefinitionExtendedPathsCircuitBreakersInner circuitBreakersItem) {
    if (this.circuitBreakers == null) {
      this.circuitBreakers = new ArrayList<>();
    }
    this.circuitBreakers.add(circuitBreakersItem);
    return this;
  }

  /**
   * Get circuitBreakers
   * @return circuitBreakers
   */
  @javax.annotation.Nullable
  public List<VersionDefinitionExtendedPathsCircuitBreakersInner> getCircuitBreakers() {
    return circuitBreakers;
  }

  public void setCircuitBreakers(List<VersionDefinitionExtendedPathsCircuitBreakersInner> circuitBreakers) {
    this.circuitBreakers = circuitBreakers;
  }


  public VersionDefinitionExtendedPaths hardTimeouts(List<VersionDefinitionExtendedPathsHardTimeoutsInner> hardTimeouts) {
    this.hardTimeouts = hardTimeouts;
    return this;
  }

  public VersionDefinitionExtendedPaths addHardTimeoutsItem(VersionDefinitionExtendedPathsHardTimeoutsInner hardTimeoutsItem) {
    if (this.hardTimeouts == null) {
      this.hardTimeouts = new ArrayList<>();
    }
    this.hardTimeouts.add(hardTimeoutsItem);
    return this;
  }

  /**
   * Get hardTimeouts
   * @return hardTimeouts
   */
  @javax.annotation.Nullable
  public List<VersionDefinitionExtendedPathsHardTimeoutsInner> getHardTimeouts() {
    return hardTimeouts;
  }

  public void setHardTimeouts(List<VersionDefinitionExtendedPathsHardTimeoutsInner> hardTimeouts) {
    this.hardTimeouts = hardTimeouts;
  }


  public VersionDefinitionExtendedPaths ignored(List<EndPointMeta> ignored) {
    this.ignored = ignored;
    return this;
  }

  public VersionDefinitionExtendedPaths addIgnoredItem(EndPointMeta ignoredItem) {
    if (this.ignored == null) {
      this.ignored = new ArrayList<>();
    }
    this.ignored.add(ignoredItem);
    return this;
  }

  /**
   * Get ignored
   * @return ignored
   */
  @javax.annotation.Nullable
  public List<EndPointMeta> getIgnored() {
    return ignored;
  }

  public void setIgnored(List<EndPointMeta> ignored) {
    this.ignored = ignored;
  }


  public VersionDefinitionExtendedPaths sizeLimits(List<VersionDefinitionExtendedPathsSizeLimitsInner> sizeLimits) {
    this.sizeLimits = sizeLimits;
    return this;
  }

  public VersionDefinitionExtendedPaths addSizeLimitsItem(VersionDefinitionExtendedPathsSizeLimitsInner sizeLimitsItem) {
    if (this.sizeLimits == null) {
      this.sizeLimits = new ArrayList<>();
    }
    this.sizeLimits.add(sizeLimitsItem);
    return this;
  }

  /**
   * Get sizeLimits
   * @return sizeLimits
   */
  @javax.annotation.Nullable
  public List<VersionDefinitionExtendedPathsSizeLimitsInner> getSizeLimits() {
    return sizeLimits;
  }

  public void setSizeLimits(List<VersionDefinitionExtendedPathsSizeLimitsInner> sizeLimits) {
    this.sizeLimits = sizeLimits;
  }


  public VersionDefinitionExtendedPaths transform(List<TemplateMeta> transform) {
    this.transform = transform;
    return this;
  }

  public VersionDefinitionExtendedPaths addTransformItem(TemplateMeta transformItem) {
    if (this.transform == null) {
      this.transform = new ArrayList<>();
    }
    this.transform.add(transformItem);
    return this;
  }

  /**
   * Get transform
   * @return transform
   */
  @javax.annotation.Nullable
  public List<TemplateMeta> getTransform() {
    return transform;
  }

  public void setTransform(List<TemplateMeta> transform) {
    this.transform = transform;
  }


  public VersionDefinitionExtendedPaths transformHeaders(List<HeaderInjectionMeta> transformHeaders) {
    this.transformHeaders = transformHeaders;
    return this;
  }

  public VersionDefinitionExtendedPaths addTransformHeadersItem(HeaderInjectionMeta transformHeadersItem) {
    if (this.transformHeaders == null) {
      this.transformHeaders = new ArrayList<>();
    }
    this.transformHeaders.add(transformHeadersItem);
    return this;
  }

  /**
   * Get transformHeaders
   * @return transformHeaders
   */
  @javax.annotation.Nullable
  public List<HeaderInjectionMeta> getTransformHeaders() {
    return transformHeaders;
  }

  public void setTransformHeaders(List<HeaderInjectionMeta> transformHeaders) {
    this.transformHeaders = transformHeaders;
  }


  public VersionDefinitionExtendedPaths transformResponse(List<TemplateMeta> transformResponse) {
    this.transformResponse = transformResponse;
    return this;
  }

  public VersionDefinitionExtendedPaths addTransformResponseItem(TemplateMeta transformResponseItem) {
    if (this.transformResponse == null) {
      this.transformResponse = new ArrayList<>();
    }
    this.transformResponse.add(transformResponseItem);
    return this;
  }

  /**
   * Get transformResponse
   * @return transformResponse
   */
  @javax.annotation.Nullable
  public List<TemplateMeta> getTransformResponse() {
    return transformResponse;
  }

  public void setTransformResponse(List<TemplateMeta> transformResponse) {
    this.transformResponse = transformResponse;
  }


  public VersionDefinitionExtendedPaths transformResponseHeaders(List<HeaderInjectionMeta> transformResponseHeaders) {
    this.transformResponseHeaders = transformResponseHeaders;
    return this;
  }

  public VersionDefinitionExtendedPaths addTransformResponseHeadersItem(HeaderInjectionMeta transformResponseHeadersItem) {
    if (this.transformResponseHeaders == null) {
      this.transformResponseHeaders = new ArrayList<>();
    }
    this.transformResponseHeaders.add(transformResponseHeadersItem);
    return this;
  }

  /**
   * Get transformResponseHeaders
   * @return transformResponseHeaders
   */
  @javax.annotation.Nullable
  public List<HeaderInjectionMeta> getTransformResponseHeaders() {
    return transformResponseHeaders;
  }

  public void setTransformResponseHeaders(List<HeaderInjectionMeta> transformResponseHeaders) {
    this.transformResponseHeaders = transformResponseHeaders;
  }


  public VersionDefinitionExtendedPaths urlRewrites(List<VersionDefinitionExtendedPathsUrlRewritesInner> urlRewrites) {
    this.urlRewrites = urlRewrites;
    return this;
  }

  public VersionDefinitionExtendedPaths addUrlRewritesItem(VersionDefinitionExtendedPathsUrlRewritesInner urlRewritesItem) {
    if (this.urlRewrites == null) {
      this.urlRewrites = new ArrayList<>();
    }
    this.urlRewrites.add(urlRewritesItem);
    return this;
  }

  /**
   * Get urlRewrites
   * @return urlRewrites
   */
  @javax.annotation.Nullable
  public List<VersionDefinitionExtendedPathsUrlRewritesInner> getUrlRewrites() {
    return urlRewrites;
  }

  public void setUrlRewrites(List<VersionDefinitionExtendedPathsUrlRewritesInner> urlRewrites) {
    this.urlRewrites = urlRewrites;
  }


  public VersionDefinitionExtendedPaths virtual(List<VersionDefinitionExtendedPathsVirtualInner> virtual) {
    this.virtual = virtual;
    return this;
  }

  public VersionDefinitionExtendedPaths addVirtualItem(VersionDefinitionExtendedPathsVirtualInner virtualItem) {
    if (this.virtual == null) {
      this.virtual = new ArrayList<>();
    }
    this.virtual.add(virtualItem);
    return this;
  }

  /**
   * Get virtual
   * @return virtual
   */
  @javax.annotation.Nullable
  public List<VersionDefinitionExtendedPathsVirtualInner> getVirtual() {
    return virtual;
  }

  public void setVirtual(List<VersionDefinitionExtendedPathsVirtualInner> virtual) {
    this.virtual = virtual;
  }


  public VersionDefinitionExtendedPaths whiteList(List<EndPointMeta> whiteList) {
    this.whiteList = whiteList;
    return this;
  }

  public VersionDefinitionExtendedPaths addWhiteListItem(EndPointMeta whiteListItem) {
    if (this.whiteList == null) {
      this.whiteList = new ArrayList<>();
    }
    this.whiteList.add(whiteListItem);
    return this;
  }

  /**
   * Get whiteList
   * @return whiteList
   */
  @javax.annotation.Nullable
  public List<EndPointMeta> getWhiteList() {
    return whiteList;
  }

  public void setWhiteList(List<EndPointMeta> whiteList) {
    this.whiteList = whiteList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionDefinitionExtendedPaths versionDefinitionExtendedPaths = (VersionDefinitionExtendedPaths) o;
    return Objects.equals(this.blackList, versionDefinitionExtendedPaths.blackList) &&
        Objects.equals(this.cache, versionDefinitionExtendedPaths.cache) &&
        Objects.equals(this.circuitBreakers, versionDefinitionExtendedPaths.circuitBreakers) &&
        Objects.equals(this.hardTimeouts, versionDefinitionExtendedPaths.hardTimeouts) &&
        Objects.equals(this.ignored, versionDefinitionExtendedPaths.ignored) &&
        Objects.equals(this.sizeLimits, versionDefinitionExtendedPaths.sizeLimits) &&
        Objects.equals(this.transform, versionDefinitionExtendedPaths.transform) &&
        Objects.equals(this.transformHeaders, versionDefinitionExtendedPaths.transformHeaders) &&
        Objects.equals(this.transformResponse, versionDefinitionExtendedPaths.transformResponse) &&
        Objects.equals(this.transformResponseHeaders, versionDefinitionExtendedPaths.transformResponseHeaders) &&
        Objects.equals(this.urlRewrites, versionDefinitionExtendedPaths.urlRewrites) &&
        Objects.equals(this.virtual, versionDefinitionExtendedPaths.virtual) &&
        Objects.equals(this.whiteList, versionDefinitionExtendedPaths.whiteList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackList, cache, circuitBreakers, hardTimeouts, ignored, sizeLimits, transform, transformHeaders, transformResponse, transformResponseHeaders, urlRewrites, virtual, whiteList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionDefinitionExtendedPaths {\n");
    sb.append("    blackList: ").append(toIndentedString(blackList)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    circuitBreakers: ").append(toIndentedString(circuitBreakers)).append("\n");
    sb.append("    hardTimeouts: ").append(toIndentedString(hardTimeouts)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("    sizeLimits: ").append(toIndentedString(sizeLimits)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("    transformHeaders: ").append(toIndentedString(transformHeaders)).append("\n");
    sb.append("    transformResponse: ").append(toIndentedString(transformResponse)).append("\n");
    sb.append("    transformResponseHeaders: ").append(toIndentedString(transformResponseHeaders)).append("\n");
    sb.append("    urlRewrites: ").append(toIndentedString(urlRewrites)).append("\n");
    sb.append("    virtual: ").append(toIndentedString(virtual)).append("\n");
    sb.append("    whiteList: ").append(toIndentedString(whiteList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("black_list");
    openapiFields.add("cache");
    openapiFields.add("circuit_breakers");
    openapiFields.add("hard_timeouts");
    openapiFields.add("ignored");
    openapiFields.add("size_limits");
    openapiFields.add("transform");
    openapiFields.add("transform_headers");
    openapiFields.add("transform_response");
    openapiFields.add("transform_response_headers");
    openapiFields.add("url_rewrites");
    openapiFields.add("virtual");
    openapiFields.add("white_list");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionDefinitionExtendedPaths
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionDefinitionExtendedPaths.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionDefinitionExtendedPaths is not found in the empty JSON string", VersionDefinitionExtendedPaths.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionDefinitionExtendedPaths.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionDefinitionExtendedPaths` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("black_list") != null && !jsonObj.get("black_list").isJsonNull()) {
        JsonArray jsonArrayblackList = jsonObj.getAsJsonArray("black_list");
        if (jsonArrayblackList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("black_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `black_list` to be an array in the JSON string but got `%s`", jsonObj.get("black_list").toString()));
          }

          // validate the optional field `black_list` (array)
          for (int i = 0; i < jsonArrayblackList.size(); i++) {
            EndPointMeta.validateJsonElement(jsonArrayblackList.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cache") != null && !jsonObj.get("cache").isJsonNull() && !jsonObj.get("cache").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cache` to be an array in the JSON string but got `%s`", jsonObj.get("cache").toString()));
      }
      if (jsonObj.get("circuit_breakers") != null && !jsonObj.get("circuit_breakers").isJsonNull()) {
        JsonArray jsonArraycircuitBreakers = jsonObj.getAsJsonArray("circuit_breakers");
        if (jsonArraycircuitBreakers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("circuit_breakers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `circuit_breakers` to be an array in the JSON string but got `%s`", jsonObj.get("circuit_breakers").toString()));
          }

          // validate the optional field `circuit_breakers` (array)
          for (int i = 0; i < jsonArraycircuitBreakers.size(); i++) {
            VersionDefinitionExtendedPathsCircuitBreakersInner.validateJsonElement(jsonArraycircuitBreakers.get(i));
          };
        }
      }
      if (jsonObj.get("hard_timeouts") != null && !jsonObj.get("hard_timeouts").isJsonNull()) {
        JsonArray jsonArrayhardTimeouts = jsonObj.getAsJsonArray("hard_timeouts");
        if (jsonArrayhardTimeouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hard_timeouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hard_timeouts` to be an array in the JSON string but got `%s`", jsonObj.get("hard_timeouts").toString()));
          }

          // validate the optional field `hard_timeouts` (array)
          for (int i = 0; i < jsonArrayhardTimeouts.size(); i++) {
            VersionDefinitionExtendedPathsHardTimeoutsInner.validateJsonElement(jsonArrayhardTimeouts.get(i));
          };
        }
      }
      if (jsonObj.get("ignored") != null && !jsonObj.get("ignored").isJsonNull()) {
        JsonArray jsonArrayignored = jsonObj.getAsJsonArray("ignored");
        if (jsonArrayignored != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ignored").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ignored` to be an array in the JSON string but got `%s`", jsonObj.get("ignored").toString()));
          }

          // validate the optional field `ignored` (array)
          for (int i = 0; i < jsonArrayignored.size(); i++) {
            EndPointMeta.validateJsonElement(jsonArrayignored.get(i));
          };
        }
      }
      if (jsonObj.get("size_limits") != null && !jsonObj.get("size_limits").isJsonNull()) {
        JsonArray jsonArraysizeLimits = jsonObj.getAsJsonArray("size_limits");
        if (jsonArraysizeLimits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("size_limits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `size_limits` to be an array in the JSON string but got `%s`", jsonObj.get("size_limits").toString()));
          }

          // validate the optional field `size_limits` (array)
          for (int i = 0; i < jsonArraysizeLimits.size(); i++) {
            VersionDefinitionExtendedPathsSizeLimitsInner.validateJsonElement(jsonArraysizeLimits.get(i));
          };
        }
      }
      if (jsonObj.get("transform") != null && !jsonObj.get("transform").isJsonNull()) {
        JsonArray jsonArraytransform = jsonObj.getAsJsonArray("transform");
        if (jsonArraytransform != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transform").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transform` to be an array in the JSON string but got `%s`", jsonObj.get("transform").toString()));
          }

          // validate the optional field `transform` (array)
          for (int i = 0; i < jsonArraytransform.size(); i++) {
            TemplateMeta.validateJsonElement(jsonArraytransform.get(i));
          };
        }
      }
      if (jsonObj.get("transform_headers") != null && !jsonObj.get("transform_headers").isJsonNull()) {
        JsonArray jsonArraytransformHeaders = jsonObj.getAsJsonArray("transform_headers");
        if (jsonArraytransformHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transform_headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transform_headers` to be an array in the JSON string but got `%s`", jsonObj.get("transform_headers").toString()));
          }

          // validate the optional field `transform_headers` (array)
          for (int i = 0; i < jsonArraytransformHeaders.size(); i++) {
            HeaderInjectionMeta.validateJsonElement(jsonArraytransformHeaders.get(i));
          };
        }
      }
      if (jsonObj.get("transform_response") != null && !jsonObj.get("transform_response").isJsonNull()) {
        JsonArray jsonArraytransformResponse = jsonObj.getAsJsonArray("transform_response");
        if (jsonArraytransformResponse != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transform_response").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transform_response` to be an array in the JSON string but got `%s`", jsonObj.get("transform_response").toString()));
          }

          // validate the optional field `transform_response` (array)
          for (int i = 0; i < jsonArraytransformResponse.size(); i++) {
            TemplateMeta.validateJsonElement(jsonArraytransformResponse.get(i));
          };
        }
      }
      if (jsonObj.get("transform_response_headers") != null && !jsonObj.get("transform_response_headers").isJsonNull()) {
        JsonArray jsonArraytransformResponseHeaders = jsonObj.getAsJsonArray("transform_response_headers");
        if (jsonArraytransformResponseHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transform_response_headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transform_response_headers` to be an array in the JSON string but got `%s`", jsonObj.get("transform_response_headers").toString()));
          }

          // validate the optional field `transform_response_headers` (array)
          for (int i = 0; i < jsonArraytransformResponseHeaders.size(); i++) {
            HeaderInjectionMeta.validateJsonElement(jsonArraytransformResponseHeaders.get(i));
          };
        }
      }
      if (jsonObj.get("url_rewrites") != null && !jsonObj.get("url_rewrites").isJsonNull()) {
        JsonArray jsonArrayurlRewrites = jsonObj.getAsJsonArray("url_rewrites");
        if (jsonArrayurlRewrites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("url_rewrites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `url_rewrites` to be an array in the JSON string but got `%s`", jsonObj.get("url_rewrites").toString()));
          }

          // validate the optional field `url_rewrites` (array)
          for (int i = 0; i < jsonArrayurlRewrites.size(); i++) {
            VersionDefinitionExtendedPathsUrlRewritesInner.validateJsonElement(jsonArrayurlRewrites.get(i));
          };
        }
      }
      if (jsonObj.get("virtual") != null && !jsonObj.get("virtual").isJsonNull()) {
        JsonArray jsonArrayvirtual = jsonObj.getAsJsonArray("virtual");
        if (jsonArrayvirtual != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtual").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtual` to be an array in the JSON string but got `%s`", jsonObj.get("virtual").toString()));
          }

          // validate the optional field `virtual` (array)
          for (int i = 0; i < jsonArrayvirtual.size(); i++) {
            VersionDefinitionExtendedPathsVirtualInner.validateJsonElement(jsonArrayvirtual.get(i));
          };
        }
      }
      if (jsonObj.get("white_list") != null && !jsonObj.get("white_list").isJsonNull()) {
        JsonArray jsonArraywhiteList = jsonObj.getAsJsonArray("white_list");
        if (jsonArraywhiteList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("white_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `white_list` to be an array in the JSON string but got `%s`", jsonObj.get("white_list").toString()));
          }

          // validate the optional field `white_list` (array)
          for (int i = 0; i < jsonArraywhiteList.size(); i++) {
            EndPointMeta.validateJsonElement(jsonArraywhiteList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionDefinitionExtendedPaths.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionDefinitionExtendedPaths' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionDefinitionExtendedPaths> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionDefinitionExtendedPaths.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionDefinitionExtendedPaths>() {
           @Override
           public void write(JsonWriter out, VersionDefinitionExtendedPaths value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionDefinitionExtendedPaths read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionDefinitionExtendedPaths given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionDefinitionExtendedPaths
   * @throws IOException if the JSON string is invalid with respect to VersionDefinitionExtendedPaths
   */
  public static VersionDefinitionExtendedPaths fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionDefinitionExtendedPaths.class);
  }

  /**
   * Convert an instance of VersionDefinitionExtendedPaths to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

