/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.APIDefinitionAuth;
import org.openapitools.client.model.APIDefinitionDefinition;
import org.openapitools.client.model.APIDefinitionNotifications;
import org.openapitools.client.model.APIDefinitionOauthMeta;
import org.openapitools.client.model.APIDefinitionUptimeTests;
import org.openapitools.client.model.APIDefinitionVersionData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APIDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:33.218202-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APIDefinition {
  public static final String SERIALIZED_NAME_API_ID = "api_id";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private APIDefinitionAuth auth;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private APIDefinitionDefinition definition;

  public static final String SERIALIZED_NAME_ENABLE_JWT = "enable_jwt";
  @SerializedName(SERIALIZED_NAME_ENABLE_JWT)
  private Boolean enableJwt;

  public static final String SERIALIZED_NAME_ENABLE_SIGNATURE_CHECKING = "enable_signature_checking";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNATURE_CHECKING)
  private Boolean enableSignatureChecking;

  public static final String SERIALIZED_NAME_HMAC_ALLOWED_CLOCK_SKEW = "hmac_allowed_clock_skew";
  @SerializedName(SERIALIZED_NAME_HMAC_ALLOWED_CLOCK_SKEW)
  private BigDecimal hmacAllowedClockSkew;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JWT_IDENTITY_BASE_FIELD = "jwt_identity_base_field";
  @SerializedName(SERIALIZED_NAME_JWT_IDENTITY_BASE_FIELD)
  private String jwtIdentityBaseField;

  public static final String SERIALIZED_NAME_JWT_POLICY_FIELD_NAME = "jwt_policy_field_name";
  @SerializedName(SERIALIZED_NAME_JWT_POLICY_FIELD_NAME)
  private String jwtPolicyFieldName;

  public static final String SERIALIZED_NAME_JWT_SIGNING_METHOD = "jwt_signing_method";
  @SerializedName(SERIALIZED_NAME_JWT_SIGNING_METHOD)
  private String jwtSigningMethod;

  public static final String SERIALIZED_NAME_JWT_SOURCE = "jwt_source";
  @SerializedName(SERIALIZED_NAME_JWT_SOURCE)
  private String jwtSource;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private APIDefinitionNotifications notifications;

  public static final String SERIALIZED_NAME_OAUTH_META = "oauth_meta";
  @SerializedName(SERIALIZED_NAME_OAUTH_META)
  private APIDefinitionOauthMeta oauthMeta;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_UPTIME_TESTS = "uptime_tests";
  @SerializedName(SERIALIZED_NAME_UPTIME_TESTS)
  private APIDefinitionUptimeTests uptimeTests;

  public static final String SERIALIZED_NAME_USE_BASIC_AUTH = "use_basic_auth";
  @SerializedName(SERIALIZED_NAME_USE_BASIC_AUTH)
  private Boolean useBasicAuth;

  public static final String SERIALIZED_NAME_USE_KEYLESS = "use_keyless";
  @SerializedName(SERIALIZED_NAME_USE_KEYLESS)
  private Boolean useKeyless;

  public static final String SERIALIZED_NAME_USE_OAUTH2 = "use_oauth2";
  @SerializedName(SERIALIZED_NAME_USE_OAUTH2)
  private Boolean useOauth2;

  public static final String SERIALIZED_NAME_VERSION_DATA = "version_data";
  @SerializedName(SERIALIZED_NAME_VERSION_DATA)
  private APIDefinitionVersionData versionData;

  public APIDefinition() {
  }

  public APIDefinition apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * Get apiId
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public APIDefinition auth(APIDefinitionAuth auth) {
    this.auth = auth;
    return this;
  }

  /**
   * Get auth
   * @return auth
   */
  @javax.annotation.Nullable
  public APIDefinitionAuth getAuth() {
    return auth;
  }

  public void setAuth(APIDefinitionAuth auth) {
    this.auth = auth;
  }


  public APIDefinition definition(APIDefinitionDefinition definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public APIDefinitionDefinition getDefinition() {
    return definition;
  }

  public void setDefinition(APIDefinitionDefinition definition) {
    this.definition = definition;
  }


  public APIDefinition enableJwt(Boolean enableJwt) {
    this.enableJwt = enableJwt;
    return this;
  }

  /**
   * Get enableJwt
   * @return enableJwt
   */
  @javax.annotation.Nullable
  public Boolean getEnableJwt() {
    return enableJwt;
  }

  public void setEnableJwt(Boolean enableJwt) {
    this.enableJwt = enableJwt;
  }


  public APIDefinition enableSignatureChecking(Boolean enableSignatureChecking) {
    this.enableSignatureChecking = enableSignatureChecking;
    return this;
  }

  /**
   * Get enableSignatureChecking
   * @return enableSignatureChecking
   */
  @javax.annotation.Nullable
  public Boolean getEnableSignatureChecking() {
    return enableSignatureChecking;
  }

  public void setEnableSignatureChecking(Boolean enableSignatureChecking) {
    this.enableSignatureChecking = enableSignatureChecking;
  }


  public APIDefinition hmacAllowedClockSkew(BigDecimal hmacAllowedClockSkew) {
    this.hmacAllowedClockSkew = hmacAllowedClockSkew;
    return this;
  }

  /**
   * Get hmacAllowedClockSkew
   * @return hmacAllowedClockSkew
   */
  @javax.annotation.Nullable
  public BigDecimal getHmacAllowedClockSkew() {
    return hmacAllowedClockSkew;
  }

  public void setHmacAllowedClockSkew(BigDecimal hmacAllowedClockSkew) {
    this.hmacAllowedClockSkew = hmacAllowedClockSkew;
  }


  public APIDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public APIDefinition jwtIdentityBaseField(String jwtIdentityBaseField) {
    this.jwtIdentityBaseField = jwtIdentityBaseField;
    return this;
  }

  /**
   * Get jwtIdentityBaseField
   * @return jwtIdentityBaseField
   */
  @javax.annotation.Nullable
  public String getJwtIdentityBaseField() {
    return jwtIdentityBaseField;
  }

  public void setJwtIdentityBaseField(String jwtIdentityBaseField) {
    this.jwtIdentityBaseField = jwtIdentityBaseField;
  }


  public APIDefinition jwtPolicyFieldName(String jwtPolicyFieldName) {
    this.jwtPolicyFieldName = jwtPolicyFieldName;
    return this;
  }

  /**
   * Get jwtPolicyFieldName
   * @return jwtPolicyFieldName
   */
  @javax.annotation.Nullable
  public String getJwtPolicyFieldName() {
    return jwtPolicyFieldName;
  }

  public void setJwtPolicyFieldName(String jwtPolicyFieldName) {
    this.jwtPolicyFieldName = jwtPolicyFieldName;
  }


  public APIDefinition jwtSigningMethod(String jwtSigningMethod) {
    this.jwtSigningMethod = jwtSigningMethod;
    return this;
  }

  /**
   * Get jwtSigningMethod
   * @return jwtSigningMethod
   */
  @javax.annotation.Nullable
  public String getJwtSigningMethod() {
    return jwtSigningMethod;
  }

  public void setJwtSigningMethod(String jwtSigningMethod) {
    this.jwtSigningMethod = jwtSigningMethod;
  }


  public APIDefinition jwtSource(String jwtSource) {
    this.jwtSource = jwtSource;
    return this;
  }

  /**
   * Get jwtSource
   * @return jwtSource
   */
  @javax.annotation.Nullable
  public String getJwtSource() {
    return jwtSource;
  }

  public void setJwtSource(String jwtSource) {
    this.jwtSource = jwtSource;
  }


  public APIDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public APIDefinition notifications(APIDefinitionNotifications notifications) {
    this.notifications = notifications;
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public APIDefinitionNotifications getNotifications() {
    return notifications;
  }

  public void setNotifications(APIDefinitionNotifications notifications) {
    this.notifications = notifications;
  }


  public APIDefinition oauthMeta(APIDefinitionOauthMeta oauthMeta) {
    this.oauthMeta = oauthMeta;
    return this;
  }

  /**
   * Get oauthMeta
   * @return oauthMeta
   */
  @javax.annotation.Nullable
  public APIDefinitionOauthMeta getOauthMeta() {
    return oauthMeta;
  }

  public void setOauthMeta(APIDefinitionOauthMeta oauthMeta) {
    this.oauthMeta = oauthMeta;
  }


  public APIDefinition orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Get orgId
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public APIDefinition slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public APIDefinition uptimeTests(APIDefinitionUptimeTests uptimeTests) {
    this.uptimeTests = uptimeTests;
    return this;
  }

  /**
   * Get uptimeTests
   * @return uptimeTests
   */
  @javax.annotation.Nullable
  public APIDefinitionUptimeTests getUptimeTests() {
    return uptimeTests;
  }

  public void setUptimeTests(APIDefinitionUptimeTests uptimeTests) {
    this.uptimeTests = uptimeTests;
  }


  public APIDefinition useBasicAuth(Boolean useBasicAuth) {
    this.useBasicAuth = useBasicAuth;
    return this;
  }

  /**
   * Get useBasicAuth
   * @return useBasicAuth
   */
  @javax.annotation.Nullable
  public Boolean getUseBasicAuth() {
    return useBasicAuth;
  }

  public void setUseBasicAuth(Boolean useBasicAuth) {
    this.useBasicAuth = useBasicAuth;
  }


  public APIDefinition useKeyless(Boolean useKeyless) {
    this.useKeyless = useKeyless;
    return this;
  }

  /**
   * Get useKeyless
   * @return useKeyless
   */
  @javax.annotation.Nullable
  public Boolean getUseKeyless() {
    return useKeyless;
  }

  public void setUseKeyless(Boolean useKeyless) {
    this.useKeyless = useKeyless;
  }


  public APIDefinition useOauth2(Boolean useOauth2) {
    this.useOauth2 = useOauth2;
    return this;
  }

  /**
   * Get useOauth2
   * @return useOauth2
   */
  @javax.annotation.Nullable
  public Boolean getUseOauth2() {
    return useOauth2;
  }

  public void setUseOauth2(Boolean useOauth2) {
    this.useOauth2 = useOauth2;
  }


  public APIDefinition versionData(APIDefinitionVersionData versionData) {
    this.versionData = versionData;
    return this;
  }

  /**
   * Get versionData
   * @return versionData
   */
  @javax.annotation.Nullable
  public APIDefinitionVersionData getVersionData() {
    return versionData;
  }

  public void setVersionData(APIDefinitionVersionData versionData) {
    this.versionData = versionData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIDefinition apIDefinition = (APIDefinition) o;
    return Objects.equals(this.apiId, apIDefinition.apiId) &&
        Objects.equals(this.auth, apIDefinition.auth) &&
        Objects.equals(this.definition, apIDefinition.definition) &&
        Objects.equals(this.enableJwt, apIDefinition.enableJwt) &&
        Objects.equals(this.enableSignatureChecking, apIDefinition.enableSignatureChecking) &&
        Objects.equals(this.hmacAllowedClockSkew, apIDefinition.hmacAllowedClockSkew) &&
        Objects.equals(this.id, apIDefinition.id) &&
        Objects.equals(this.jwtIdentityBaseField, apIDefinition.jwtIdentityBaseField) &&
        Objects.equals(this.jwtPolicyFieldName, apIDefinition.jwtPolicyFieldName) &&
        Objects.equals(this.jwtSigningMethod, apIDefinition.jwtSigningMethod) &&
        Objects.equals(this.jwtSource, apIDefinition.jwtSource) &&
        Objects.equals(this.name, apIDefinition.name) &&
        Objects.equals(this.notifications, apIDefinition.notifications) &&
        Objects.equals(this.oauthMeta, apIDefinition.oauthMeta) &&
        Objects.equals(this.orgId, apIDefinition.orgId) &&
        Objects.equals(this.slug, apIDefinition.slug) &&
        Objects.equals(this.uptimeTests, apIDefinition.uptimeTests) &&
        Objects.equals(this.useBasicAuth, apIDefinition.useBasicAuth) &&
        Objects.equals(this.useKeyless, apIDefinition.useKeyless) &&
        Objects.equals(this.useOauth2, apIDefinition.useOauth2) &&
        Objects.equals(this.versionData, apIDefinition.versionData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiId, auth, definition, enableJwt, enableSignatureChecking, hmacAllowedClockSkew, id, jwtIdentityBaseField, jwtPolicyFieldName, jwtSigningMethod, jwtSource, name, notifications, oauthMeta, orgId, slug, uptimeTests, useBasicAuth, useKeyless, useOauth2, versionData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIDefinition {\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    enableJwt: ").append(toIndentedString(enableJwt)).append("\n");
    sb.append("    enableSignatureChecking: ").append(toIndentedString(enableSignatureChecking)).append("\n");
    sb.append("    hmacAllowedClockSkew: ").append(toIndentedString(hmacAllowedClockSkew)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jwtIdentityBaseField: ").append(toIndentedString(jwtIdentityBaseField)).append("\n");
    sb.append("    jwtPolicyFieldName: ").append(toIndentedString(jwtPolicyFieldName)).append("\n");
    sb.append("    jwtSigningMethod: ").append(toIndentedString(jwtSigningMethod)).append("\n");
    sb.append("    jwtSource: ").append(toIndentedString(jwtSource)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    oauthMeta: ").append(toIndentedString(oauthMeta)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    uptimeTests: ").append(toIndentedString(uptimeTests)).append("\n");
    sb.append("    useBasicAuth: ").append(toIndentedString(useBasicAuth)).append("\n");
    sb.append("    useKeyless: ").append(toIndentedString(useKeyless)).append("\n");
    sb.append("    useOauth2: ").append(toIndentedString(useOauth2)).append("\n");
    sb.append("    versionData: ").append(toIndentedString(versionData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_id");
    openapiFields.add("auth");
    openapiFields.add("definition");
    openapiFields.add("enable_jwt");
    openapiFields.add("enable_signature_checking");
    openapiFields.add("hmac_allowed_clock_skew");
    openapiFields.add("id");
    openapiFields.add("jwt_identity_base_field");
    openapiFields.add("jwt_policy_field_name");
    openapiFields.add("jwt_signing_method");
    openapiFields.add("jwt_source");
    openapiFields.add("name");
    openapiFields.add("notifications");
    openapiFields.add("oauth_meta");
    openapiFields.add("org_id");
    openapiFields.add("slug");
    openapiFields.add("uptime_tests");
    openapiFields.add("use_basic_auth");
    openapiFields.add("use_keyless");
    openapiFields.add("use_oauth2");
    openapiFields.add("version_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APIDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APIDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIDefinition is not found in the empty JSON string", APIDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APIDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api_id") != null && !jsonObj.get("api_id").isJsonNull()) && !jsonObj.get("api_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_id").toString()));
      }
      // validate the optional field `auth`
      if (jsonObj.get("auth") != null && !jsonObj.get("auth").isJsonNull()) {
        APIDefinitionAuth.validateJsonElement(jsonObj.get("auth"));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        APIDefinitionDefinition.validateJsonElement(jsonObj.get("definition"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("jwt_identity_base_field") != null && !jsonObj.get("jwt_identity_base_field").isJsonNull()) && !jsonObj.get("jwt_identity_base_field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwt_identity_base_field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwt_identity_base_field").toString()));
      }
      if ((jsonObj.get("jwt_policy_field_name") != null && !jsonObj.get("jwt_policy_field_name").isJsonNull()) && !jsonObj.get("jwt_policy_field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwt_policy_field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwt_policy_field_name").toString()));
      }
      if ((jsonObj.get("jwt_signing_method") != null && !jsonObj.get("jwt_signing_method").isJsonNull()) && !jsonObj.get("jwt_signing_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwt_signing_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwt_signing_method").toString()));
      }
      if ((jsonObj.get("jwt_source") != null && !jsonObj.get("jwt_source").isJsonNull()) && !jsonObj.get("jwt_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwt_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwt_source").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notifications`
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        APIDefinitionNotifications.validateJsonElement(jsonObj.get("notifications"));
      }
      // validate the optional field `oauth_meta`
      if (jsonObj.get("oauth_meta") != null && !jsonObj.get("oauth_meta").isJsonNull()) {
        APIDefinitionOauthMeta.validateJsonElement(jsonObj.get("oauth_meta"));
      }
      if ((jsonObj.get("org_id") != null && !jsonObj.get("org_id").isJsonNull()) && !jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // validate the optional field `uptime_tests`
      if (jsonObj.get("uptime_tests") != null && !jsonObj.get("uptime_tests").isJsonNull()) {
        APIDefinitionUptimeTests.validateJsonElement(jsonObj.get("uptime_tests"));
      }
      // validate the optional field `version_data`
      if (jsonObj.get("version_data") != null && !jsonObj.get("version_data").isJsonNull()) {
        APIDefinitionVersionData.validateJsonElement(jsonObj.get("version_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<APIDefinition>() {
           @Override
           public void write(JsonWriter out, APIDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APIDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APIDefinition
   * @throws IOException if the JSON string is invalid with respect to APIDefinition
   */
  public static APIDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIDefinition.class);
  }

  /**
   * Convert an instance of APIDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

