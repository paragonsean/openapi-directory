/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIDefinition;
import java.math.BigDecimal;
import org.openapitools.client.model.OAuthClient;
import org.openapitools.client.model.SessionObject;
import org.openapitools.client.model.TykApisApiIDDelete200Response;
import org.openapitools.client.model.TykApisPost200Response;
import org.openapitools.client.model.TykHealthGet200Response;
import org.openapitools.client.model.TykKeysCreatePost200Response;
import org.openapitools.client.model.TykKeysGet200Response;
import org.openapitools.client.model.TykKeysKeyIdPost200Response;
import org.openapitools.client.model.TykKeysKeyIdPut200Response;
import org.openapitools.client.model.TykOauthAuthorizeClientPost200Response;
import org.openapitools.client.model.TykOauthClientsCreatePostRequest;
import org.openapitools.client.model.TykReloadGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Deletes an *API Definition* object, if it exists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykApisApiIDDeleteTest() throws ApiException {
        String xTykAuthorization = null;
        String apiID = null;
        TykApisApiIDDelete200Response response = api.tykApisApiIDDelete(xTykAuthorization, apiID);
        // TODO: test validations
    }

    /**
     * Gets an *API Definition* object, if it exists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykApisApiIDGetTest() throws ApiException {
        String xTykAuthorization = null;
        String apiID = null;
        APIDefinition response = api.tykApisApiIDGet(xTykAuthorization, apiID);
        // TODO: test validations
    }

    /**
     * Updates an *API Definition* object, if it exists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykApisApiIDPutTest() throws ApiException {
        String xTykAuthorization = null;
        String apiID = null;
        APIDefinition apiDefinition = null;
        TykApisPost200Response response = api.tykApisApiIDPut(xTykAuthorization, apiID, apiDefinition);
        // TODO: test validations
    }

    /**
     * Gets a list of *API Definition* objects that are currently live on the gateway  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykApisGetTest() throws ApiException {
        String xTykAuthorization = null;
        List<APIDefinition> response = api.tykApisGet(xTykAuthorization);
        // TODO: test validations
    }

    /**
     * Create an *API Definition* object 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykApisPostTest() throws ApiException {
        APIDefinition apiDefinition = null;
        TykApisPost200Response response = api.tykApisPost(apiDefinition);
        // TODO: test validations
    }

    /**
     * Gets the health check values for an API if it is being recorded 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykHealthGetTest() throws ApiException {
        String xTykAuthorization = null;
        String apiId = null;
        TykHealthGet200Response response = api.tykHealthGet(xTykAuthorization, apiId);
        // TODO: test validations
    }

    /**
     * Create a new *API token* with the *session object* defined in the body 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykKeysCreatePostTest() throws ApiException {
        String xTykAuthorization = null;
        BigDecimal suppressReset = null;
        SessionObject sessionObject = null;
        TykKeysCreatePost200Response response = api.tykKeysCreatePost(xTykAuthorization, suppressReset, sessionObject);
        // TODO: test validations
    }

    /**
     * Gets a list of *key* IDs (will only work with non-hashed installations) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykKeysGetTest() throws ApiException {
        String apiId = null;
        String xTykAuthorization = null;
        TykKeysGet200Response response = api.tykKeysGet(apiId, xTykAuthorization);
        // TODO: test validations
    }

    /**
     * Remove this *API token* from the gateway, this will completely destroy the token and metadata associated with the token and instantly stop access from being granted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykKeysKeyIdDeleteTest() throws ApiException {
        String xTykAuthorization = null;
        String keyId = null;
        String apiId = null;
        TykApisApiIDDelete200Response response = api.tykKeysKeyIdDelete(xTykAuthorization, keyId, apiId);
        // TODO: test validations
    }

    /**
     * Add a pre-specified *API token* with the *session object* defined in the body, this operatin creates a custom token that dsoes not use the gateway naming convention for tokens 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykKeysKeyIdPostTest() throws ApiException {
        String xTykAuthorization = null;
        String keyId = null;
        SessionObject sessionObject = null;
        TykKeysKeyIdPost200Response response = api.tykKeysKeyIdPost(xTykAuthorization, keyId, sessionObject);
        // TODO: test validations
    }

    /**
     * Update an *API token* with the *session object* defined in the body, this operatin overwrites the existing object 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykKeysKeyIdPutTest() throws ApiException {
        String xTykAuthorization = null;
        String keyId = null;
        String apiId = null;
        BigDecimal suppressReset = null;
        SessionObject sessionObject = null;
        TykKeysKeyIdPut200Response response = api.tykKeysKeyIdPut(xTykAuthorization, keyId, apiId, suppressReset, sessionObject);
        // TODO: test validations
    }

    /**
     * The final request from an authorising party for a redirect URI during the Tyk OAuth flow 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykOauthAuthorizeClientPostTest() throws ApiException {
        String xTykAuthorization = null;
        String responseType = null;
        String clientId = null;
        String redirectUri = null;
        String keyRules = null;
        TykOauthAuthorizeClientPost200Response response = api.tykOauthAuthorizeClientPost(xTykAuthorization, responseType, clientId, redirectUri, keyRules);
        // TODO: test validations
    }

    /**
     * Delete the OAuth client 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykOauthClientsApiIdClientIdDeleteTest() throws ApiException {
        String xTykAuthorization = null;
        String apiId = null;
        String clientId = null;
        TykApisApiIDDelete200Response response = api.tykOauthClientsApiIdClientIdDelete(xTykAuthorization, apiId, clientId);
        // TODO: test validations
    }

    /**
     * Get a list of OAuth clients bound to this back end  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykOauthClientsApiIdGetTest() throws ApiException {
        String xTykAuthorization = null;
        String apiId = null;
        List<OAuthClient> response = api.tykOauthClientsApiIdGet(xTykAuthorization, apiId);
        // TODO: test validations
    }

    /**
     * Create a new OAuth client 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykOauthClientsCreatePostTest() throws ApiException {
        String xTykAuthorization = null;
        TykOauthClientsCreatePostRequest oauthClient = null;
        OAuthClient response = api.tykOauthClientsCreatePost(xTykAuthorization, oauthClient);
        // TODO: test validations
    }

    /**
     * Invalidate a refresh token 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykOauthRefreshKeyIdDeleteTest() throws ApiException {
        String xTykAuthorization = null;
        String keyId = null;
        String apiID = null;
        TykApisApiIDDelete200Response response = api.tykOauthRefreshKeyIdDelete(xTykAuthorization, keyId, apiID);
        // TODO: test validations
    }

    /**
     * Will reload the targetted gateway 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykReloadGetTest() throws ApiException {
        String xTykAuthorization = null;
        TykReloadGet200Response response = api.tykReloadGet(xTykAuthorization);
        // TODO: test validations
    }

    /**
     * Will reload the cluster via the targeted gateway 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tykReloadGroupGetTest() throws ApiException {
        String xTykAuthorization = null;
        TykReloadGet200Response response = api.tykReloadGroupGet(xTykAuthorization);
        // TODO: test validations
    }

}
