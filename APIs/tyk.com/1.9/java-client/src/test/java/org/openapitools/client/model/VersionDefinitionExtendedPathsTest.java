/*
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndPointMeta;
import org.openapitools.client.model.HeaderInjectionMeta;
import org.openapitools.client.model.TemplateMeta;
import org.openapitools.client.model.VersionDefinitionExtendedPathsCircuitBreakersInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsHardTimeoutsInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsSizeLimitsInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsUrlRewritesInner;
import org.openapitools.client.model.VersionDefinitionExtendedPathsVirtualInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VersionDefinitionExtendedPaths
 */
public class VersionDefinitionExtendedPathsTest {
    private final VersionDefinitionExtendedPaths model = new VersionDefinitionExtendedPaths();

    /**
     * Model tests for VersionDefinitionExtendedPaths
     */
    @Test
    public void testVersionDefinitionExtendedPaths() {
        // TODO: test VersionDefinitionExtendedPaths
    }

    /**
     * Test the property 'blackList'
     */
    @Test
    public void blackListTest() {
        // TODO: test blackList
    }

    /**
     * Test the property 'cache'
     */
    @Test
    public void cacheTest() {
        // TODO: test cache
    }

    /**
     * Test the property 'circuitBreakers'
     */
    @Test
    public void circuitBreakersTest() {
        // TODO: test circuitBreakers
    }

    /**
     * Test the property 'hardTimeouts'
     */
    @Test
    public void hardTimeoutsTest() {
        // TODO: test hardTimeouts
    }

    /**
     * Test the property 'ignored'
     */
    @Test
    public void ignoredTest() {
        // TODO: test ignored
    }

    /**
     * Test the property 'sizeLimits'
     */
    @Test
    public void sizeLimitsTest() {
        // TODO: test sizeLimits
    }

    /**
     * Test the property 'transform'
     */
    @Test
    public void transformTest() {
        // TODO: test transform
    }

    /**
     * Test the property 'transformHeaders'
     */
    @Test
    public void transformHeadersTest() {
        // TODO: test transformHeaders
    }

    /**
     * Test the property 'transformResponse'
     */
    @Test
    public void transformResponseTest() {
        // TODO: test transformResponse
    }

    /**
     * Test the property 'transformResponseHeaders'
     */
    @Test
    public void transformResponseHeadersTest() {
        // TODO: test transformResponseHeaders
    }

    /**
     * Test the property 'urlRewrites'
     */
    @Test
    public void urlRewritesTest() {
        // TODO: test urlRewrites
    }

    /**
     * Test the property 'virtual'
     */
    @Test
    public void virtualTest() {
        // TODO: test virtual
    }

    /**
     * Test the property 'whiteList'
     */
    @Test
    public void whiteListTest() {
        // TODO: test whiteList
    }

}
