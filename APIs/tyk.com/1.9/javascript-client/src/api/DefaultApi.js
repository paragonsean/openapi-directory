/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIDefinition from '../model/APIDefinition';
import OAuthClient from '../model/OAuthClient';
import SessionObject from '../model/SessionObject';
import TykApisApiIDDelete200Response from '../model/TykApisApiIDDelete200Response';
import TykApisPost200Response from '../model/TykApisPost200Response';
import TykHealthGet200Response from '../model/TykHealthGet200Response';
import TykKeysCreatePost200Response from '../model/TykKeysCreatePost200Response';
import TykKeysGet200Response from '../model/TykKeysGet200Response';
import TykKeysKeyIdPost200Response from '../model/TykKeysKeyIdPost200Response';
import TykKeysKeyIdPut200Response from '../model/TykKeysKeyIdPut200Response';
import TykOauthAuthorizeClientPost200Response from '../model/TykOauthAuthorizeClientPost200Response';
import TykOauthClientsCreatePostRequest from '../model/TykOauthClientsCreatePostRequest';
import TykReloadGet200Response from '../model/TykReloadGet200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.9
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tykApisApiIDDelete operation.
     * @callback module:api/DefaultApi~tykApisApiIDDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykApisApiIDDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an *API Definition* object, if it exists 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} apiID API ID
     * @param {module:api/DefaultApi~tykApisApiIDDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykApisApiIDDelete200Response}
     */
    tykApisApiIDDelete(xTykAuthorization, apiID, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykApisApiIDDelete");
      }
      // verify the required parameter 'apiID' is set
      if (apiID === undefined || apiID === null) {
        throw new Error("Missing the required parameter 'apiID' when calling tykApisApiIDDelete");
      }

      let pathParams = {
        'apiID': apiID
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykApisApiIDDelete200Response;
      return this.apiClient.callApi(
        '/tyk/apis/{apiID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykApisApiIDGet operation.
     * @callback module:api/DefaultApi~tykApisApiIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an *API Definition* object, if it exists 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} apiID API ID
     * @param {module:api/DefaultApi~tykApisApiIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIDefinition}
     */
    tykApisApiIDGet(xTykAuthorization, apiID, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykApisApiIDGet");
      }
      // verify the required parameter 'apiID' is set
      if (apiID === undefined || apiID === null) {
        throw new Error("Missing the required parameter 'apiID' when calling tykApisApiIDGet");
      }

      let pathParams = {
        'apiID': apiID
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIDefinition;
      return this.apiClient.callApi(
        '/tyk/apis/{apiID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykApisApiIDPut operation.
     * @callback module:api/DefaultApi~tykApisApiIDPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykApisPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an *API Definition* object, if it exists 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} apiID API ID
     * @param {Object} opts Optional parameters
     * @param {module:model/APIDefinition} [apiDefinition] 
     * @param {module:api/DefaultApi~tykApisApiIDPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykApisPost200Response}
     */
    tykApisApiIDPut(xTykAuthorization, apiID, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDefinition'];
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykApisApiIDPut");
      }
      // verify the required parameter 'apiID' is set
      if (apiID === undefined || apiID === null) {
        throw new Error("Missing the required parameter 'apiID' when calling tykApisApiIDPut");
      }

      let pathParams = {
        'apiID': apiID
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykApisPost200Response;
      return this.apiClient.callApi(
        '/tyk/apis/{apiID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykApisGet operation.
     * @callback module:api/DefaultApi~tykApisGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIDefinition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of *API Definition* objects that are currently live on the gateway  
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {module:api/DefaultApi~tykApisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIDefinition>}
     */
    tykApisGet(xTykAuthorization, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykApisGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [APIDefinition];
      return this.apiClient.callApi(
        '/tyk/apis/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykApisPost operation.
     * @callback module:api/DefaultApi~tykApisPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykApisPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an *API Definition* object 
     * @param {Object} opts Optional parameters
     * @param {module:model/APIDefinition} [apiDefinition] 
     * @param {module:api/DefaultApi~tykApisPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykApisPost200Response}
     */
    tykApisPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDefinition'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykApisPost200Response;
      return this.apiClient.callApi(
        '/tyk/apis/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykHealthGet operation.
     * @callback module:api/DefaultApi~tykHealthGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykHealthGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the health check values for an API if it is being recorded 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} apiId API ID to query
     * @param {module:api/DefaultApi~tykHealthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykHealthGet200Response}
     */
    tykHealthGet(xTykAuthorization, apiId, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykHealthGet");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling tykHealthGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_id': apiId
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykHealthGet200Response;
      return this.apiClient.callApi(
        '/tyk/health/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykKeysCreatePost operation.
     * @callback module:api/DefaultApi~tykKeysCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykKeysCreatePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new *API token* with the *session object* defined in the body 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {Object} opts Optional parameters
     * @param {Number} [suppressReset] Adding the `suppress_reset` parameter and setting it to `1`, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the `suppress_reset` flag to the URL parameters will avoid this behaviour.
     * @param {module:model/SessionObject} [sessionObject] 
     * @param {module:api/DefaultApi~tykKeysCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykKeysCreatePost200Response}
     */
    tykKeysCreatePost(xTykAuthorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['sessionObject'];
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykKeysCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'suppress_reset': opts['suppressReset']
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykKeysCreatePost200Response;
      return this.apiClient.callApi(
        '/tyk/keys/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykKeysGet operation.
     * @callback module:api/DefaultApi~tykKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykKeysGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of *key* IDs (will only work with non-hashed installations) 
     * @param {String} apiId Back-end to target
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {module:api/DefaultApi~tykKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykKeysGet200Response}
     */
    tykKeysGet(apiId, xTykAuthorization, callback) {
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling tykKeysGet");
      }
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykKeysGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_id': apiId
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykKeysGet200Response;
      return this.apiClient.callApi(
        '/tyk/keys/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykKeysKeyIdDelete operation.
     * @callback module:api/DefaultApi~tykKeysKeyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykApisApiIDDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove this *API token* from the gateway, this will completely destroy the token and metadata associated with the token and instantly stop access from being granted 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} keyId Access Token
     * @param {String} apiId Back-end to target
     * @param {module:api/DefaultApi~tykKeysKeyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykApisApiIDDelete200Response}
     */
    tykKeysKeyIdDelete(xTykAuthorization, keyId, apiId, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykKeysKeyIdDelete");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling tykKeysKeyIdDelete");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling tykKeysKeyIdDelete");
      }

      let pathParams = {
        'keyId': keyId
      };
      let queryParams = {
        'api_id': apiId
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykApisApiIDDelete200Response;
      return this.apiClient.callApi(
        '/tyk/keys/{keyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykKeysKeyIdPost operation.
     * @callback module:api/DefaultApi~tykKeysKeyIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykKeysKeyIdPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a pre-specified *API token* with the *session object* defined in the body, this operatin creates a custom token that dsoes not use the gateway naming convention for tokens 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} keyId Access Token
     * @param {Object} opts Optional parameters
     * @param {module:model/SessionObject} [sessionObject] 
     * @param {module:api/DefaultApi~tykKeysKeyIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykKeysKeyIdPost200Response}
     */
    tykKeysKeyIdPost(xTykAuthorization, keyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['sessionObject'];
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykKeysKeyIdPost");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling tykKeysKeyIdPost");
      }

      let pathParams = {
        'keyId': keyId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykKeysKeyIdPost200Response;
      return this.apiClient.callApi(
        '/tyk/keys/{keyId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykKeysKeyIdPut operation.
     * @callback module:api/DefaultApi~tykKeysKeyIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykKeysKeyIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an *API token* with the *session object* defined in the body, this operatin overwrites the existing object 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} keyId Access Token
     * @param {String} apiId Back-end to target
     * @param {Object} opts Optional parameters
     * @param {Number} [suppressReset] Adding the `suppress_reset` parameter and setting it to `1`, will cause Tyk to not reset the quota limit that is in the current live quota manager. By default Tyk will reset the quota in the live quota manager (initialising it) when ADDing a key. Adding the `suppress_reset` flag to the URL parameters will avoid this behaviour.
     * @param {module:model/SessionObject} [sessionObject] 
     * @param {module:api/DefaultApi~tykKeysKeyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykKeysKeyIdPut200Response}
     */
    tykKeysKeyIdPut(xTykAuthorization, keyId, apiId, opts, callback) {
      opts = opts || {};
      let postBody = opts['sessionObject'];
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykKeysKeyIdPut");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling tykKeysKeyIdPut");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling tykKeysKeyIdPut");
      }

      let pathParams = {
        'keyId': keyId
      };
      let queryParams = {
        'suppress_reset': opts['suppressReset'],
        'api_id': apiId
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykKeysKeyIdPut200Response;
      return this.apiClient.callApi(
        '/tyk/keys/{keyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykOauthAuthorizeClientPost operation.
     * @callback module:api/DefaultApi~tykOauthAuthorizeClientPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykOauthAuthorizeClientPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The final request from an authorising party for a redirect URI during the Tyk OAuth flow 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} responseType Should be provided by requesting client as part of authorisation request, this should be either `code` or `token` depending on the methods you have specified for the API
     * @param {String} clientId Should be provided by requesting client as part of authorisation request. The Client ID that is making the request
     * @param {String} redirectUri Should be provided by requesting client as part of authorisation request. Must match with the record stored with Tyk
     * @param {String} keyRules A string representation of a *Session Object (form-encoded)*. This should be provided by your application in order to apply any quotas or rules to the key
     * @param {module:api/DefaultApi~tykOauthAuthorizeClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykOauthAuthorizeClientPost200Response}
     */
    tykOauthAuthorizeClientPost(xTykAuthorization, responseType, clientId, redirectUri, keyRules, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykOauthAuthorizeClientPost");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling tykOauthAuthorizeClientPost");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling tykOauthAuthorizeClientPost");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling tykOauthAuthorizeClientPost");
      }
      // verify the required parameter 'keyRules' is set
      if (keyRules === undefined || keyRules === null) {
        throw new Error("Missing the required parameter 'keyRules' when calling tykOauthAuthorizeClientPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
        'response_type': responseType,
        'client_id': clientId,
        'redirect_uri': redirectUri,
        'key_rules': keyRules
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = TykOauthAuthorizeClientPost200Response;
      return this.apiClient.callApi(
        '/tyk/oauth/authorize-client/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykOauthClientsApiIdClientIdDelete operation.
     * @callback module:api/DefaultApi~tykOauthClientsApiIdClientIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykApisApiIDDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the OAuth client 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} apiId API ID that owns this client (back end)
     * @param {String} clientId OAuth Client ID to delete
     * @param {module:api/DefaultApi~tykOauthClientsApiIdClientIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykApisApiIDDelete200Response}
     */
    tykOauthClientsApiIdClientIdDelete(xTykAuthorization, apiId, clientId, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykOauthClientsApiIdClientIdDelete");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling tykOauthClientsApiIdClientIdDelete");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling tykOauthClientsApiIdClientIdDelete");
      }

      let pathParams = {
        'apiId': apiId,
        'clientId': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykApisApiIDDelete200Response;
      return this.apiClient.callApi(
        '/tyk/oauth/clients/{apiId}/{clientId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykOauthClientsApiIdGet operation.
     * @callback module:api/DefaultApi~tykOauthClientsApiIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuthClient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of OAuth clients bound to this back end  
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} apiId API ID that owns this client (back end)
     * @param {module:api/DefaultApi~tykOauthClientsApiIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OAuthClient>}
     */
    tykOauthClientsApiIdGet(xTykAuthorization, apiId, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykOauthClientsApiIdGet");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling tykOauthClientsApiIdGet");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [OAuthClient];
      return this.apiClient.callApi(
        '/tyk/oauth/clients/{apiId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykOauthClientsCreatePost operation.
     * @callback module:api/DefaultApi~tykOauthClientsCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuthClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new OAuth client 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {Object} opts Optional parameters
     * @param {module:model/TykOauthClientsCreatePostRequest} [oauthClient] 
     * @param {module:api/DefaultApi~tykOauthClientsCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthClient}
     */
    tykOauthClientsCreatePost(xTykAuthorization, opts, callback) {
      opts = opts || {};
      let postBody = opts['oauthClient'];
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykOauthClientsCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OAuthClient;
      return this.apiClient.callApi(
        '/tyk/oauth/clients/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykOauthRefreshKeyIdDelete operation.
     * @callback module:api/DefaultApi~tykOauthRefreshKeyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykApisApiIDDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate a refresh token 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {String} keyId Access Token
     * @param {String} apiID API ID
     * @param {module:api/DefaultApi~tykOauthRefreshKeyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykApisApiIDDelete200Response}
     */
    tykOauthRefreshKeyIdDelete(xTykAuthorization, keyId, apiID, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykOauthRefreshKeyIdDelete");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling tykOauthRefreshKeyIdDelete");
      }
      // verify the required parameter 'apiID' is set
      if (apiID === undefined || apiID === null) {
        throw new Error("Missing the required parameter 'apiID' when calling tykOauthRefreshKeyIdDelete");
      }

      let pathParams = {
        'keyId': keyId
      };
      let queryParams = {
        'apiID': apiID
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykApisApiIDDelete200Response;
      return this.apiClient.callApi(
        '/tyk/oauth/refresh/{keyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykReloadGet operation.
     * @callback module:api/DefaultApi~tykReloadGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykReloadGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Will reload the targetted gateway 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {module:api/DefaultApi~tykReloadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykReloadGet200Response}
     */
    tykReloadGet(xTykAuthorization, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykReloadGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykReloadGet200Response;
      return this.apiClient.callApi(
        '/tyk/reload/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tykReloadGroupGet operation.
     * @callback module:api/DefaultApi~tykReloadGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TykReloadGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Will reload the cluster via the targeted gateway 
     * @param {String} xTykAuthorization tyk gateway shared secret
     * @param {module:api/DefaultApi~tykReloadGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TykReloadGet200Response}
     */
    tykReloadGroupGet(xTykAuthorization, callback) {
      let postBody = null;
      // verify the required parameter 'xTykAuthorization' is set
      if (xTykAuthorization === undefined || xTykAuthorization === null) {
        throw new Error("Missing the required parameter 'xTykAuthorization' when calling tykReloadGroupGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-tyk-authorization': xTykAuthorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TykReloadGet200Response;
      return this.apiClient.callApi(
        '/tyk/reload/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
