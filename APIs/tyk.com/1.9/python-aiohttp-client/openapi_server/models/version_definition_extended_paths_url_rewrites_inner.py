# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VersionDefinitionExtendedPathsUrlRewritesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_pattern: str=None, method: str=None, path: str=None, rewrite_to: str=None):
        """VersionDefinitionExtendedPathsUrlRewritesInner - a model defined in OpenAPI

        :param match_pattern: The match_pattern of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :param method: The method of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :param path: The path of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :param rewrite_to: The rewrite_to of this VersionDefinitionExtendedPathsUrlRewritesInner.
        """
        self.openapi_types = {
            'match_pattern': str,
            'method': str,
            'path': str,
            'rewrite_to': str
        }

        self.attribute_map = {
            'match_pattern': 'match_pattern',
            'method': 'method',
            'path': 'path',
            'rewrite_to': 'rewrite_to'
        }

        self._match_pattern = match_pattern
        self._method = method
        self._path = path
        self._rewrite_to = rewrite_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionDefinitionExtendedPathsUrlRewritesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionDefinition_extended_paths_url_rewrites_inner of this VersionDefinitionExtendedPathsUrlRewritesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_pattern(self):
        """Gets the match_pattern of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :return: The match_pattern of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :rtype: str
        """
        return self._match_pattern

    @match_pattern.setter
    def match_pattern(self, match_pattern):
        """Sets the match_pattern of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :param match_pattern: The match_pattern of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :type match_pattern: str
        """

        self._match_pattern = match_pattern

    @property
    def method(self):
        """Gets the method of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :return: The method of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :param method: The method of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :return: The path of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :param path: The path of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :type path: str
        """

        self._path = path

    @property
    def rewrite_to(self):
        """Gets the rewrite_to of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :return: The rewrite_to of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :rtype: str
        """
        return self._rewrite_to

    @rewrite_to.setter
    def rewrite_to(self, rewrite_to):
        """Sets the rewrite_to of this VersionDefinitionExtendedPathsUrlRewritesInner.


        :param rewrite_to: The rewrite_to of this VersionDefinitionExtendedPathsUrlRewritesInner.
        :type rewrite_to: str
        """

        self._rewrite_to = rewrite_to
