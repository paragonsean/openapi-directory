# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_definition_auth import APIDefinitionAuth
from openapi_server.models.api_definition_definition import APIDefinitionDefinition
from openapi_server.models.api_definition_notifications import APIDefinitionNotifications
from openapi_server.models.api_definition_oauth_meta import APIDefinitionOauthMeta
from openapi_server.models.api_definition_uptime_tests import APIDefinitionUptimeTests
from openapi_server.models.api_definition_version_data import APIDefinitionVersionData
from openapi_server import util


class APIDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_id: str=None, auth: APIDefinitionAuth=None, definition: APIDefinitionDefinition=None, enable_jwt: bool=None, enable_signature_checking: bool=None, hmac_allowed_clock_skew: float=None, id: str=None, jwt_identity_base_field: str=None, jwt_policy_field_name: str=None, jwt_signing_method: str=None, jwt_source: str=None, name: str=None, notifications: APIDefinitionNotifications=None, oauth_meta: APIDefinitionOauthMeta=None, org_id: str=None, slug: str=None, uptime_tests: APIDefinitionUptimeTests=None, use_basic_auth: bool=None, use_keyless: bool=None, use_oauth2: bool=None, version_data: APIDefinitionVersionData=None):
        """APIDefinition - a model defined in OpenAPI

        :param api_id: The api_id of this APIDefinition.
        :param auth: The auth of this APIDefinition.
        :param definition: The definition of this APIDefinition.
        :param enable_jwt: The enable_jwt of this APIDefinition.
        :param enable_signature_checking: The enable_signature_checking of this APIDefinition.
        :param hmac_allowed_clock_skew: The hmac_allowed_clock_skew of this APIDefinition.
        :param id: The id of this APIDefinition.
        :param jwt_identity_base_field: The jwt_identity_base_field of this APIDefinition.
        :param jwt_policy_field_name: The jwt_policy_field_name of this APIDefinition.
        :param jwt_signing_method: The jwt_signing_method of this APIDefinition.
        :param jwt_source: The jwt_source of this APIDefinition.
        :param name: The name of this APIDefinition.
        :param notifications: The notifications of this APIDefinition.
        :param oauth_meta: The oauth_meta of this APIDefinition.
        :param org_id: The org_id of this APIDefinition.
        :param slug: The slug of this APIDefinition.
        :param uptime_tests: The uptime_tests of this APIDefinition.
        :param use_basic_auth: The use_basic_auth of this APIDefinition.
        :param use_keyless: The use_keyless of this APIDefinition.
        :param use_oauth2: The use_oauth2 of this APIDefinition.
        :param version_data: The version_data of this APIDefinition.
        """
        self.openapi_types = {
            'api_id': str,
            'auth': APIDefinitionAuth,
            'definition': APIDefinitionDefinition,
            'enable_jwt': bool,
            'enable_signature_checking': bool,
            'hmac_allowed_clock_skew': float,
            'id': str,
            'jwt_identity_base_field': str,
            'jwt_policy_field_name': str,
            'jwt_signing_method': str,
            'jwt_source': str,
            'name': str,
            'notifications': APIDefinitionNotifications,
            'oauth_meta': APIDefinitionOauthMeta,
            'org_id': str,
            'slug': str,
            'uptime_tests': APIDefinitionUptimeTests,
            'use_basic_auth': bool,
            'use_keyless': bool,
            'use_oauth2': bool,
            'version_data': APIDefinitionVersionData
        }

        self.attribute_map = {
            'api_id': 'api_id',
            'auth': 'auth',
            'definition': 'definition',
            'enable_jwt': 'enable_jwt',
            'enable_signature_checking': 'enable_signature_checking',
            'hmac_allowed_clock_skew': 'hmac_allowed_clock_skew',
            'id': 'id',
            'jwt_identity_base_field': 'jwt_identity_base_field',
            'jwt_policy_field_name': 'jwt_policy_field_name',
            'jwt_signing_method': 'jwt_signing_method',
            'jwt_source': 'jwt_source',
            'name': 'name',
            'notifications': 'notifications',
            'oauth_meta': 'oauth_meta',
            'org_id': 'org_id',
            'slug': 'slug',
            'uptime_tests': 'uptime_tests',
            'use_basic_auth': 'use_basic_auth',
            'use_keyless': 'use_keyless',
            'use_oauth2': 'use_oauth2',
            'version_data': 'version_data'
        }

        self._api_id = api_id
        self._auth = auth
        self._definition = definition
        self._enable_jwt = enable_jwt
        self._enable_signature_checking = enable_signature_checking
        self._hmac_allowed_clock_skew = hmac_allowed_clock_skew
        self._id = id
        self._jwt_identity_base_field = jwt_identity_base_field
        self._jwt_policy_field_name = jwt_policy_field_name
        self._jwt_signing_method = jwt_signing_method
        self._jwt_source = jwt_source
        self._name = name
        self._notifications = notifications
        self._oauth_meta = oauth_meta
        self._org_id = org_id
        self._slug = slug
        self._uptime_tests = uptime_tests
        self._use_basic_auth = use_basic_auth
        self._use_keyless = use_keyless
        self._use_oauth2 = use_oauth2
        self._version_data = version_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIDefinition of this APIDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_id(self):
        """Gets the api_id of this APIDefinition.


        :return: The api_id of this APIDefinition.
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this APIDefinition.


        :param api_id: The api_id of this APIDefinition.
        :type api_id: str
        """

        self._api_id = api_id

    @property
    def auth(self):
        """Gets the auth of this APIDefinition.


        :return: The auth of this APIDefinition.
        :rtype: APIDefinitionAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this APIDefinition.


        :param auth: The auth of this APIDefinition.
        :type auth: APIDefinitionAuth
        """

        self._auth = auth

    @property
    def definition(self):
        """Gets the definition of this APIDefinition.


        :return: The definition of this APIDefinition.
        :rtype: APIDefinitionDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this APIDefinition.


        :param definition: The definition of this APIDefinition.
        :type definition: APIDefinitionDefinition
        """

        self._definition = definition

    @property
    def enable_jwt(self):
        """Gets the enable_jwt of this APIDefinition.


        :return: The enable_jwt of this APIDefinition.
        :rtype: bool
        """
        return self._enable_jwt

    @enable_jwt.setter
    def enable_jwt(self, enable_jwt):
        """Sets the enable_jwt of this APIDefinition.


        :param enable_jwt: The enable_jwt of this APIDefinition.
        :type enable_jwt: bool
        """

        self._enable_jwt = enable_jwt

    @property
    def enable_signature_checking(self):
        """Gets the enable_signature_checking of this APIDefinition.


        :return: The enable_signature_checking of this APIDefinition.
        :rtype: bool
        """
        return self._enable_signature_checking

    @enable_signature_checking.setter
    def enable_signature_checking(self, enable_signature_checking):
        """Sets the enable_signature_checking of this APIDefinition.


        :param enable_signature_checking: The enable_signature_checking of this APIDefinition.
        :type enable_signature_checking: bool
        """

        self._enable_signature_checking = enable_signature_checking

    @property
    def hmac_allowed_clock_skew(self):
        """Gets the hmac_allowed_clock_skew of this APIDefinition.


        :return: The hmac_allowed_clock_skew of this APIDefinition.
        :rtype: float
        """
        return self._hmac_allowed_clock_skew

    @hmac_allowed_clock_skew.setter
    def hmac_allowed_clock_skew(self, hmac_allowed_clock_skew):
        """Sets the hmac_allowed_clock_skew of this APIDefinition.


        :param hmac_allowed_clock_skew: The hmac_allowed_clock_skew of this APIDefinition.
        :type hmac_allowed_clock_skew: float
        """

        self._hmac_allowed_clock_skew = hmac_allowed_clock_skew

    @property
    def id(self):
        """Gets the id of this APIDefinition.


        :return: The id of this APIDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIDefinition.


        :param id: The id of this APIDefinition.
        :type id: str
        """

        self._id = id

    @property
    def jwt_identity_base_field(self):
        """Gets the jwt_identity_base_field of this APIDefinition.


        :return: The jwt_identity_base_field of this APIDefinition.
        :rtype: str
        """
        return self._jwt_identity_base_field

    @jwt_identity_base_field.setter
    def jwt_identity_base_field(self, jwt_identity_base_field):
        """Sets the jwt_identity_base_field of this APIDefinition.


        :param jwt_identity_base_field: The jwt_identity_base_field of this APIDefinition.
        :type jwt_identity_base_field: str
        """

        self._jwt_identity_base_field = jwt_identity_base_field

    @property
    def jwt_policy_field_name(self):
        """Gets the jwt_policy_field_name of this APIDefinition.


        :return: The jwt_policy_field_name of this APIDefinition.
        :rtype: str
        """
        return self._jwt_policy_field_name

    @jwt_policy_field_name.setter
    def jwt_policy_field_name(self, jwt_policy_field_name):
        """Sets the jwt_policy_field_name of this APIDefinition.


        :param jwt_policy_field_name: The jwt_policy_field_name of this APIDefinition.
        :type jwt_policy_field_name: str
        """

        self._jwt_policy_field_name = jwt_policy_field_name

    @property
    def jwt_signing_method(self):
        """Gets the jwt_signing_method of this APIDefinition.


        :return: The jwt_signing_method of this APIDefinition.
        :rtype: str
        """
        return self._jwt_signing_method

    @jwt_signing_method.setter
    def jwt_signing_method(self, jwt_signing_method):
        """Sets the jwt_signing_method of this APIDefinition.


        :param jwt_signing_method: The jwt_signing_method of this APIDefinition.
        :type jwt_signing_method: str
        """

        self._jwt_signing_method = jwt_signing_method

    @property
    def jwt_source(self):
        """Gets the jwt_source of this APIDefinition.


        :return: The jwt_source of this APIDefinition.
        :rtype: str
        """
        return self._jwt_source

    @jwt_source.setter
    def jwt_source(self, jwt_source):
        """Sets the jwt_source of this APIDefinition.


        :param jwt_source: The jwt_source of this APIDefinition.
        :type jwt_source: str
        """

        self._jwt_source = jwt_source

    @property
    def name(self):
        """Gets the name of this APIDefinition.


        :return: The name of this APIDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIDefinition.


        :param name: The name of this APIDefinition.
        :type name: str
        """

        self._name = name

    @property
    def notifications(self):
        """Gets the notifications of this APIDefinition.


        :return: The notifications of this APIDefinition.
        :rtype: APIDefinitionNotifications
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this APIDefinition.


        :param notifications: The notifications of this APIDefinition.
        :type notifications: APIDefinitionNotifications
        """

        self._notifications = notifications

    @property
    def oauth_meta(self):
        """Gets the oauth_meta of this APIDefinition.


        :return: The oauth_meta of this APIDefinition.
        :rtype: APIDefinitionOauthMeta
        """
        return self._oauth_meta

    @oauth_meta.setter
    def oauth_meta(self, oauth_meta):
        """Sets the oauth_meta of this APIDefinition.


        :param oauth_meta: The oauth_meta of this APIDefinition.
        :type oauth_meta: APIDefinitionOauthMeta
        """

        self._oauth_meta = oauth_meta

    @property
    def org_id(self):
        """Gets the org_id of this APIDefinition.


        :return: The org_id of this APIDefinition.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this APIDefinition.


        :param org_id: The org_id of this APIDefinition.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def slug(self):
        """Gets the slug of this APIDefinition.


        :return: The slug of this APIDefinition.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this APIDefinition.


        :param slug: The slug of this APIDefinition.
        :type slug: str
        """

        self._slug = slug

    @property
    def uptime_tests(self):
        """Gets the uptime_tests of this APIDefinition.


        :return: The uptime_tests of this APIDefinition.
        :rtype: APIDefinitionUptimeTests
        """
        return self._uptime_tests

    @uptime_tests.setter
    def uptime_tests(self, uptime_tests):
        """Sets the uptime_tests of this APIDefinition.


        :param uptime_tests: The uptime_tests of this APIDefinition.
        :type uptime_tests: APIDefinitionUptimeTests
        """

        self._uptime_tests = uptime_tests

    @property
    def use_basic_auth(self):
        """Gets the use_basic_auth of this APIDefinition.


        :return: The use_basic_auth of this APIDefinition.
        :rtype: bool
        """
        return self._use_basic_auth

    @use_basic_auth.setter
    def use_basic_auth(self, use_basic_auth):
        """Sets the use_basic_auth of this APIDefinition.


        :param use_basic_auth: The use_basic_auth of this APIDefinition.
        :type use_basic_auth: bool
        """

        self._use_basic_auth = use_basic_auth

    @property
    def use_keyless(self):
        """Gets the use_keyless of this APIDefinition.


        :return: The use_keyless of this APIDefinition.
        :rtype: bool
        """
        return self._use_keyless

    @use_keyless.setter
    def use_keyless(self, use_keyless):
        """Sets the use_keyless of this APIDefinition.


        :param use_keyless: The use_keyless of this APIDefinition.
        :type use_keyless: bool
        """

        self._use_keyless = use_keyless

    @property
    def use_oauth2(self):
        """Gets the use_oauth2 of this APIDefinition.


        :return: The use_oauth2 of this APIDefinition.
        :rtype: bool
        """
        return self._use_oauth2

    @use_oauth2.setter
    def use_oauth2(self, use_oauth2):
        """Sets the use_oauth2 of this APIDefinition.


        :param use_oauth2: The use_oauth2 of this APIDefinition.
        :type use_oauth2: bool
        """

        self._use_oauth2 = use_oauth2

    @property
    def version_data(self):
        """Gets the version_data of this APIDefinition.


        :return: The version_data of this APIDefinition.
        :rtype: APIDefinitionVersionData
        """
        return self._version_data

    @version_data.setter
    def version_data(self, version_data):
        """Sets the version_data of this APIDefinition.


        :param version_data: The version_data of this APIDefinition.
        :type version_data: APIDefinitionVersionData
        """

        self._version_data = version_data
