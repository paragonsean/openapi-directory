# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIDefinitionUptimeTestsCacheOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_all_safe_requests: bool=None, cache_timeout: float=None, enable_cache: bool=None, enable_upstream_cache_control: bool=None):
        """APIDefinitionUptimeTestsCacheOptions - a model defined in OpenAPI

        :param cache_all_safe_requests: The cache_all_safe_requests of this APIDefinitionUptimeTestsCacheOptions.
        :param cache_timeout: The cache_timeout of this APIDefinitionUptimeTestsCacheOptions.
        :param enable_cache: The enable_cache of this APIDefinitionUptimeTestsCacheOptions.
        :param enable_upstream_cache_control: The enable_upstream_cache_control of this APIDefinitionUptimeTestsCacheOptions.
        """
        self.openapi_types = {
            'cache_all_safe_requests': bool,
            'cache_timeout': float,
            'enable_cache': bool,
            'enable_upstream_cache_control': bool
        }

        self.attribute_map = {
            'cache_all_safe_requests': 'cache_all_safe_requests',
            'cache_timeout': 'cache_timeout',
            'enable_cache': 'enable_cache',
            'enable_upstream_cache_control': 'enable_upstream_cache_control'
        }

        self._cache_all_safe_requests = cache_all_safe_requests
        self._cache_timeout = cache_timeout
        self._enable_cache = enable_cache
        self._enable_upstream_cache_control = enable_upstream_cache_control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIDefinitionUptimeTestsCacheOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIDefinition_uptime_tests_cache_options of this APIDefinitionUptimeTestsCacheOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_all_safe_requests(self):
        """Gets the cache_all_safe_requests of this APIDefinitionUptimeTestsCacheOptions.


        :return: The cache_all_safe_requests of this APIDefinitionUptimeTestsCacheOptions.
        :rtype: bool
        """
        return self._cache_all_safe_requests

    @cache_all_safe_requests.setter
    def cache_all_safe_requests(self, cache_all_safe_requests):
        """Sets the cache_all_safe_requests of this APIDefinitionUptimeTestsCacheOptions.


        :param cache_all_safe_requests: The cache_all_safe_requests of this APIDefinitionUptimeTestsCacheOptions.
        :type cache_all_safe_requests: bool
        """

        self._cache_all_safe_requests = cache_all_safe_requests

    @property
    def cache_timeout(self):
        """Gets the cache_timeout of this APIDefinitionUptimeTestsCacheOptions.


        :return: The cache_timeout of this APIDefinitionUptimeTestsCacheOptions.
        :rtype: float
        """
        return self._cache_timeout

    @cache_timeout.setter
    def cache_timeout(self, cache_timeout):
        """Sets the cache_timeout of this APIDefinitionUptimeTestsCacheOptions.


        :param cache_timeout: The cache_timeout of this APIDefinitionUptimeTestsCacheOptions.
        :type cache_timeout: float
        """

        self._cache_timeout = cache_timeout

    @property
    def enable_cache(self):
        """Gets the enable_cache of this APIDefinitionUptimeTestsCacheOptions.


        :return: The enable_cache of this APIDefinitionUptimeTestsCacheOptions.
        :rtype: bool
        """
        return self._enable_cache

    @enable_cache.setter
    def enable_cache(self, enable_cache):
        """Sets the enable_cache of this APIDefinitionUptimeTestsCacheOptions.


        :param enable_cache: The enable_cache of this APIDefinitionUptimeTestsCacheOptions.
        :type enable_cache: bool
        """

        self._enable_cache = enable_cache

    @property
    def enable_upstream_cache_control(self):
        """Gets the enable_upstream_cache_control of this APIDefinitionUptimeTestsCacheOptions.


        :return: The enable_upstream_cache_control of this APIDefinitionUptimeTestsCacheOptions.
        :rtype: bool
        """
        return self._enable_upstream_cache_control

    @enable_upstream_cache_control.setter
    def enable_upstream_cache_control(self, enable_upstream_cache_control):
        """Sets the enable_upstream_cache_control of this APIDefinitionUptimeTestsCacheOptions.


        :param enable_upstream_cache_control: The enable_upstream_cache_control of this APIDefinitionUptimeTestsCacheOptions.
        :type enable_upstream_cache_control: bool
        """

        self._enable_upstream_cache_control = enable_upstream_cache_control
