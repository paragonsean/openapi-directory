# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIDefinitionAuth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_header_name: str=None, use_cookie: bool=None, use_param: bool=None):
        """APIDefinitionAuth - a model defined in OpenAPI

        :param auth_header_name: The auth_header_name of this APIDefinitionAuth.
        :param use_cookie: The use_cookie of this APIDefinitionAuth.
        :param use_param: The use_param of this APIDefinitionAuth.
        """
        self.openapi_types = {
            'auth_header_name': str,
            'use_cookie': bool,
            'use_param': bool
        }

        self.attribute_map = {
            'auth_header_name': 'auth_header_name',
            'use_cookie': 'use_cookie',
            'use_param': 'use_param'
        }

        self._auth_header_name = auth_header_name
        self._use_cookie = use_cookie
        self._use_param = use_param

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIDefinitionAuth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIDefinition_auth of this APIDefinitionAuth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_header_name(self):
        """Gets the auth_header_name of this APIDefinitionAuth.


        :return: The auth_header_name of this APIDefinitionAuth.
        :rtype: str
        """
        return self._auth_header_name

    @auth_header_name.setter
    def auth_header_name(self, auth_header_name):
        """Sets the auth_header_name of this APIDefinitionAuth.


        :param auth_header_name: The auth_header_name of this APIDefinitionAuth.
        :type auth_header_name: str
        """

        self._auth_header_name = auth_header_name

    @property
    def use_cookie(self):
        """Gets the use_cookie of this APIDefinitionAuth.


        :return: The use_cookie of this APIDefinitionAuth.
        :rtype: bool
        """
        return self._use_cookie

    @use_cookie.setter
    def use_cookie(self, use_cookie):
        """Sets the use_cookie of this APIDefinitionAuth.


        :param use_cookie: The use_cookie of this APIDefinitionAuth.
        :type use_cookie: bool
        """

        self._use_cookie = use_cookie

    @property
    def use_param(self):
        """Gets the use_param of this APIDefinitionAuth.


        :return: The use_param of this APIDefinitionAuth.
        :rtype: bool
        """
        return self._use_param

    @use_param.setter
    def use_param(self, use_param):
        """Sets the use_param of this APIDefinitionAuth.


        :param use_param: The use_param of this APIDefinitionAuth.
        :type use_param: bool
        """

        self._use_param = use_param
