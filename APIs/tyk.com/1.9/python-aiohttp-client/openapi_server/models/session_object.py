# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_rights import AccessRights
from openapi_server.models.session_object_basic_auth_data import SessionObjectBasicAuthData
from openapi_server.models.session_object_jwt_data import SessionObjectJwtData
from openapi_server.models.session_object_monitor import SessionObjectMonitor
from openapi_server import util


class SessionObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_rights: Dict[str, AccessRights]=None, allowance: float=None, apply_policy_id: str=None, basic_auth_data: SessionObjectBasicAuthData=None, expires: float=None, hmac_enabled: bool=None, hmac_string: str=None, is_inactive: bool=None, jwt_data: SessionObjectJwtData=None, meta_data: object=None, monitor: SessionObjectMonitor=None, oauth_client_id: str=None, org_id: str=None, per: float=None, quota_max: float=None, quota_remaining: float=None, quota_renewal_rate: str=None, quota_renews: float=None, rate: float=None, tags: List[str]=None):
        """SessionObject - a model defined in OpenAPI

        :param access_rights: The access_rights of this SessionObject.
        :param allowance: The allowance of this SessionObject.
        :param apply_policy_id: The apply_policy_id of this SessionObject.
        :param basic_auth_data: The basic_auth_data of this SessionObject.
        :param expires: The expires of this SessionObject.
        :param hmac_enabled: The hmac_enabled of this SessionObject.
        :param hmac_string: The hmac_string of this SessionObject.
        :param is_inactive: The is_inactive of this SessionObject.
        :param jwt_data: The jwt_data of this SessionObject.
        :param meta_data: The meta_data of this SessionObject.
        :param monitor: The monitor of this SessionObject.
        :param oauth_client_id: The oauth_client_id of this SessionObject.
        :param org_id: The org_id of this SessionObject.
        :param per: The per of this SessionObject.
        :param quota_max: The quota_max of this SessionObject.
        :param quota_remaining: The quota_remaining of this SessionObject.
        :param quota_renewal_rate: The quota_renewal_rate of this SessionObject.
        :param quota_renews: The quota_renews of this SessionObject.
        :param rate: The rate of this SessionObject.
        :param tags: The tags of this SessionObject.
        """
        self.openapi_types = {
            'access_rights': Dict[str, AccessRights],
            'allowance': float,
            'apply_policy_id': str,
            'basic_auth_data': SessionObjectBasicAuthData,
            'expires': float,
            'hmac_enabled': bool,
            'hmac_string': str,
            'is_inactive': bool,
            'jwt_data': SessionObjectJwtData,
            'meta_data': object,
            'monitor': SessionObjectMonitor,
            'oauth_client_id': str,
            'org_id': str,
            'per': float,
            'quota_max': float,
            'quota_remaining': float,
            'quota_renewal_rate': str,
            'quota_renews': float,
            'rate': float,
            'tags': List[str]
        }

        self.attribute_map = {
            'access_rights': 'access_rights',
            'allowance': 'allowance',
            'apply_policy_id': 'apply_policy_id',
            'basic_auth_data': 'basic_auth_data',
            'expires': 'expires',
            'hmac_enabled': 'hmac_enabled',
            'hmac_string': 'hmac_string',
            'is_inactive': 'is_inactive',
            'jwt_data': 'jwt_data',
            'meta_data': 'meta_data',
            'monitor': 'monitor',
            'oauth_client_id': 'oauth_client_id',
            'org_id': 'org_id',
            'per': 'per',
            'quota_max': 'quota_max',
            'quota_remaining': 'quota_remaining',
            'quota_renewal_rate': 'quota_renewal_rate',
            'quota_renews': 'quota_renews',
            'rate': 'rate',
            'tags': 'tags'
        }

        self._access_rights = access_rights
        self._allowance = allowance
        self._apply_policy_id = apply_policy_id
        self._basic_auth_data = basic_auth_data
        self._expires = expires
        self._hmac_enabled = hmac_enabled
        self._hmac_string = hmac_string
        self._is_inactive = is_inactive
        self._jwt_data = jwt_data
        self._meta_data = meta_data
        self._monitor = monitor
        self._oauth_client_id = oauth_client_id
        self._org_id = org_id
        self._per = per
        self._quota_max = quota_max
        self._quota_remaining = quota_remaining
        self._quota_renewal_rate = quota_renewal_rate
        self._quota_renews = quota_renews
        self._rate = rate
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionObject of this SessionObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_rights(self):
        """Gets the access_rights of this SessionObject.


        :return: The access_rights of this SessionObject.
        :rtype: Dict[str, AccessRights]
        """
        return self._access_rights

    @access_rights.setter
    def access_rights(self, access_rights):
        """Sets the access_rights of this SessionObject.


        :param access_rights: The access_rights of this SessionObject.
        :type access_rights: Dict[str, AccessRights]
        """

        self._access_rights = access_rights

    @property
    def allowance(self):
        """Gets the allowance of this SessionObject.


        :return: The allowance of this SessionObject.
        :rtype: float
        """
        return self._allowance

    @allowance.setter
    def allowance(self, allowance):
        """Sets the allowance of this SessionObject.


        :param allowance: The allowance of this SessionObject.
        :type allowance: float
        """

        self._allowance = allowance

    @property
    def apply_policy_id(self):
        """Gets the apply_policy_id of this SessionObject.


        :return: The apply_policy_id of this SessionObject.
        :rtype: str
        """
        return self._apply_policy_id

    @apply_policy_id.setter
    def apply_policy_id(self, apply_policy_id):
        """Sets the apply_policy_id of this SessionObject.


        :param apply_policy_id: The apply_policy_id of this SessionObject.
        :type apply_policy_id: str
        """

        self._apply_policy_id = apply_policy_id

    @property
    def basic_auth_data(self):
        """Gets the basic_auth_data of this SessionObject.


        :return: The basic_auth_data of this SessionObject.
        :rtype: SessionObjectBasicAuthData
        """
        return self._basic_auth_data

    @basic_auth_data.setter
    def basic_auth_data(self, basic_auth_data):
        """Sets the basic_auth_data of this SessionObject.


        :param basic_auth_data: The basic_auth_data of this SessionObject.
        :type basic_auth_data: SessionObjectBasicAuthData
        """

        self._basic_auth_data = basic_auth_data

    @property
    def expires(self):
        """Gets the expires of this SessionObject.


        :return: The expires of this SessionObject.
        :rtype: float
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this SessionObject.


        :param expires: The expires of this SessionObject.
        :type expires: float
        """

        self._expires = expires

    @property
    def hmac_enabled(self):
        """Gets the hmac_enabled of this SessionObject.


        :return: The hmac_enabled of this SessionObject.
        :rtype: bool
        """
        return self._hmac_enabled

    @hmac_enabled.setter
    def hmac_enabled(self, hmac_enabled):
        """Sets the hmac_enabled of this SessionObject.


        :param hmac_enabled: The hmac_enabled of this SessionObject.
        :type hmac_enabled: bool
        """

        self._hmac_enabled = hmac_enabled

    @property
    def hmac_string(self):
        """Gets the hmac_string of this SessionObject.


        :return: The hmac_string of this SessionObject.
        :rtype: str
        """
        return self._hmac_string

    @hmac_string.setter
    def hmac_string(self, hmac_string):
        """Sets the hmac_string of this SessionObject.


        :param hmac_string: The hmac_string of this SessionObject.
        :type hmac_string: str
        """

        self._hmac_string = hmac_string

    @property
    def is_inactive(self):
        """Gets the is_inactive of this SessionObject.


        :return: The is_inactive of this SessionObject.
        :rtype: bool
        """
        return self._is_inactive

    @is_inactive.setter
    def is_inactive(self, is_inactive):
        """Sets the is_inactive of this SessionObject.


        :param is_inactive: The is_inactive of this SessionObject.
        :type is_inactive: bool
        """

        self._is_inactive = is_inactive

    @property
    def jwt_data(self):
        """Gets the jwt_data of this SessionObject.


        :return: The jwt_data of this SessionObject.
        :rtype: SessionObjectJwtData
        """
        return self._jwt_data

    @jwt_data.setter
    def jwt_data(self, jwt_data):
        """Sets the jwt_data of this SessionObject.


        :param jwt_data: The jwt_data of this SessionObject.
        :type jwt_data: SessionObjectJwtData
        """

        self._jwt_data = jwt_data

    @property
    def meta_data(self):
        """Gets the meta_data of this SessionObject.


        :return: The meta_data of this SessionObject.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this SessionObject.


        :param meta_data: The meta_data of this SessionObject.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def monitor(self):
        """Gets the monitor of this SessionObject.


        :return: The monitor of this SessionObject.
        :rtype: SessionObjectMonitor
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this SessionObject.


        :param monitor: The monitor of this SessionObject.
        :type monitor: SessionObjectMonitor
        """

        self._monitor = monitor

    @property
    def oauth_client_id(self):
        """Gets the oauth_client_id of this SessionObject.


        :return: The oauth_client_id of this SessionObject.
        :rtype: str
        """
        return self._oauth_client_id

    @oauth_client_id.setter
    def oauth_client_id(self, oauth_client_id):
        """Sets the oauth_client_id of this SessionObject.


        :param oauth_client_id: The oauth_client_id of this SessionObject.
        :type oauth_client_id: str
        """

        self._oauth_client_id = oauth_client_id

    @property
    def org_id(self):
        """Gets the org_id of this SessionObject.


        :return: The org_id of this SessionObject.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SessionObject.


        :param org_id: The org_id of this SessionObject.
        :type org_id: str
        """

        self._org_id = org_id

    @property
    def per(self):
        """Gets the per of this SessionObject.


        :return: The per of this SessionObject.
        :rtype: float
        """
        return self._per

    @per.setter
    def per(self, per):
        """Sets the per of this SessionObject.


        :param per: The per of this SessionObject.
        :type per: float
        """

        self._per = per

    @property
    def quota_max(self):
        """Gets the quota_max of this SessionObject.


        :return: The quota_max of this SessionObject.
        :rtype: float
        """
        return self._quota_max

    @quota_max.setter
    def quota_max(self, quota_max):
        """Sets the quota_max of this SessionObject.


        :param quota_max: The quota_max of this SessionObject.
        :type quota_max: float
        """

        self._quota_max = quota_max

    @property
    def quota_remaining(self):
        """Gets the quota_remaining of this SessionObject.


        :return: The quota_remaining of this SessionObject.
        :rtype: float
        """
        return self._quota_remaining

    @quota_remaining.setter
    def quota_remaining(self, quota_remaining):
        """Sets the quota_remaining of this SessionObject.


        :param quota_remaining: The quota_remaining of this SessionObject.
        :type quota_remaining: float
        """

        self._quota_remaining = quota_remaining

    @property
    def quota_renewal_rate(self):
        """Gets the quota_renewal_rate of this SessionObject.


        :return: The quota_renewal_rate of this SessionObject.
        :rtype: str
        """
        return self._quota_renewal_rate

    @quota_renewal_rate.setter
    def quota_renewal_rate(self, quota_renewal_rate):
        """Sets the quota_renewal_rate of this SessionObject.


        :param quota_renewal_rate: The quota_renewal_rate of this SessionObject.
        :type quota_renewal_rate: str
        """

        self._quota_renewal_rate = quota_renewal_rate

    @property
    def quota_renews(self):
        """Gets the quota_renews of this SessionObject.


        :return: The quota_renews of this SessionObject.
        :rtype: float
        """
        return self._quota_renews

    @quota_renews.setter
    def quota_renews(self, quota_renews):
        """Sets the quota_renews of this SessionObject.


        :param quota_renews: The quota_renews of this SessionObject.
        :type quota_renews: float
        """

        self._quota_renews = quota_renews

    @property
    def rate(self):
        """Gets the rate of this SessionObject.


        :return: The rate of this SessionObject.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this SessionObject.


        :param rate: The rate of this SessionObject.
        :type rate: float
        """

        self._rate = rate

    @property
    def tags(self):
        """Gets the tags of this SessionObject.


        :return: The tags of this SessionObject.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SessionObject.


        :param tags: The tags of this SessionObject.
        :type tags: List[str]
        """

        self._tags = tags
