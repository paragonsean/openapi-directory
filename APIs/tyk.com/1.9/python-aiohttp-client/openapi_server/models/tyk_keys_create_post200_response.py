# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TykKeysCreatePost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, key: str=None, status: str=None):
        """TykKeysCreatePost200Response - a model defined in OpenAPI

        :param action: The action of this TykKeysCreatePost200Response.
        :param key: The key of this TykKeysCreatePost200Response.
        :param status: The status of this TykKeysCreatePost200Response.
        """
        self.openapi_types = {
            'action': str,
            'key': str,
            'status': str
        }

        self.attribute_map = {
            'action': 'action',
            'key': 'key',
            'status': 'status'
        }

        self._action = action
        self._key = key
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TykKeysCreatePost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _tyk_keys_create_post_200_response of this TykKeysCreatePost200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this TykKeysCreatePost200Response.


        :return: The action of this TykKeysCreatePost200Response.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TykKeysCreatePost200Response.


        :param action: The action of this TykKeysCreatePost200Response.
        :type action: str
        """
        allowed_values = ["create"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def key(self):
        """Gets the key of this TykKeysCreatePost200Response.


        :return: The key of this TykKeysCreatePost200Response.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TykKeysCreatePost200Response.


        :param key: The key of this TykKeysCreatePost200Response.
        :type key: str
        """

        self._key = key

    @property
    def status(self):
        """Gets the status of this TykKeysCreatePost200Response.


        :return: The status of this TykKeysCreatePost200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TykKeysCreatePost200Response.


        :param status: The status of this TykKeysCreatePost200Response.
        :type status: str
        """
        allowed_values = ["ok", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
