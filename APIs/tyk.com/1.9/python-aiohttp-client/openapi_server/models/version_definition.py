# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_definition_extended_paths import VersionDefinitionExtendedPaths
from openapi_server import util


class VersionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires: str=None, extended_paths: VersionDefinitionExtendedPaths=None, global_headers: object=None, global_headers_remove: List[str]=None, global_size_limit: float=None, name: str=None, override_target: str=None, use_extended_paths: bool=None):
        """VersionDefinition - a model defined in OpenAPI

        :param expires: The expires of this VersionDefinition.
        :param extended_paths: The extended_paths of this VersionDefinition.
        :param global_headers: The global_headers of this VersionDefinition.
        :param global_headers_remove: The global_headers_remove of this VersionDefinition.
        :param global_size_limit: The global_size_limit of this VersionDefinition.
        :param name: The name of this VersionDefinition.
        :param override_target: The override_target of this VersionDefinition.
        :param use_extended_paths: The use_extended_paths of this VersionDefinition.
        """
        self.openapi_types = {
            'expires': str,
            'extended_paths': VersionDefinitionExtendedPaths,
            'global_headers': object,
            'global_headers_remove': List[str],
            'global_size_limit': float,
            'name': str,
            'override_target': str,
            'use_extended_paths': bool
        }

        self.attribute_map = {
            'expires': 'expires',
            'extended_paths': 'extended_paths',
            'global_headers': 'global_headers',
            'global_headers_remove': 'global_headers_remove',
            'global_size_limit': 'global_size_limit',
            'name': 'name',
            'override_target': 'override_target',
            'use_extended_paths': 'use_extended_paths'
        }

        self._expires = expires
        self._extended_paths = extended_paths
        self._global_headers = global_headers
        self._global_headers_remove = global_headers_remove
        self._global_size_limit = global_size_limit
        self._name = name
        self._override_target = override_target
        self._use_extended_paths = use_extended_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionDefinition of this VersionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires(self):
        """Gets the expires of this VersionDefinition.


        :return: The expires of this VersionDefinition.
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this VersionDefinition.


        :param expires: The expires of this VersionDefinition.
        :type expires: str
        """

        self._expires = expires

    @property
    def extended_paths(self):
        """Gets the extended_paths of this VersionDefinition.


        :return: The extended_paths of this VersionDefinition.
        :rtype: VersionDefinitionExtendedPaths
        """
        return self._extended_paths

    @extended_paths.setter
    def extended_paths(self, extended_paths):
        """Sets the extended_paths of this VersionDefinition.


        :param extended_paths: The extended_paths of this VersionDefinition.
        :type extended_paths: VersionDefinitionExtendedPaths
        """

        self._extended_paths = extended_paths

    @property
    def global_headers(self):
        """Gets the global_headers of this VersionDefinition.


        :return: The global_headers of this VersionDefinition.
        :rtype: object
        """
        return self._global_headers

    @global_headers.setter
    def global_headers(self, global_headers):
        """Sets the global_headers of this VersionDefinition.


        :param global_headers: The global_headers of this VersionDefinition.
        :type global_headers: object
        """

        self._global_headers = global_headers

    @property
    def global_headers_remove(self):
        """Gets the global_headers_remove of this VersionDefinition.


        :return: The global_headers_remove of this VersionDefinition.
        :rtype: List[str]
        """
        return self._global_headers_remove

    @global_headers_remove.setter
    def global_headers_remove(self, global_headers_remove):
        """Sets the global_headers_remove of this VersionDefinition.


        :param global_headers_remove: The global_headers_remove of this VersionDefinition.
        :type global_headers_remove: List[str]
        """

        self._global_headers_remove = global_headers_remove

    @property
    def global_size_limit(self):
        """Gets the global_size_limit of this VersionDefinition.


        :return: The global_size_limit of this VersionDefinition.
        :rtype: float
        """
        return self._global_size_limit

    @global_size_limit.setter
    def global_size_limit(self, global_size_limit):
        """Sets the global_size_limit of this VersionDefinition.


        :param global_size_limit: The global_size_limit of this VersionDefinition.
        :type global_size_limit: float
        """

        self._global_size_limit = global_size_limit

    @property
    def name(self):
        """Gets the name of this VersionDefinition.


        :return: The name of this VersionDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VersionDefinition.


        :param name: The name of this VersionDefinition.
        :type name: str
        """

        self._name = name

    @property
    def override_target(self):
        """Gets the override_target of this VersionDefinition.


        :return: The override_target of this VersionDefinition.
        :rtype: str
        """
        return self._override_target

    @override_target.setter
    def override_target(self, override_target):
        """Sets the override_target of this VersionDefinition.


        :param override_target: The override_target of this VersionDefinition.
        :type override_target: str
        """

        self._override_target = override_target

    @property
    def use_extended_paths(self):
        """Gets the use_extended_paths of this VersionDefinition.


        :return: The use_extended_paths of this VersionDefinition.
        :rtype: bool
        """
        return self._use_extended_paths

    @use_extended_paths.setter
    def use_extended_paths(self, use_extended_paths):
        """Sets the use_extended_paths of this VersionDefinition.


        :param use_extended_paths: The use_extended_paths of this VersionDefinition.
        :type use_extended_paths: bool
        """

        self._use_extended_paths = use_extended_paths
