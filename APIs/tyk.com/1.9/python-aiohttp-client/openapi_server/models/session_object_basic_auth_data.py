# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionObjectBasicAuthData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hash_type: str=None, password: str=None):
        """SessionObjectBasicAuthData - a model defined in OpenAPI

        :param hash_type: The hash_type of this SessionObjectBasicAuthData.
        :param password: The password of this SessionObjectBasicAuthData.
        """
        self.openapi_types = {
            'hash_type': str,
            'password': str
        }

        self.attribute_map = {
            'hash_type': 'hash_type',
            'password': 'password'
        }

        self._hash_type = hash_type
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionObjectBasicAuthData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionObject_basic_auth_data of this SessionObjectBasicAuthData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash_type(self):
        """Gets the hash_type of this SessionObjectBasicAuthData.


        :return: The hash_type of this SessionObjectBasicAuthData.
        :rtype: str
        """
        return self._hash_type

    @hash_type.setter
    def hash_type(self, hash_type):
        """Sets the hash_type of this SessionObjectBasicAuthData.


        :param hash_type: The hash_type of this SessionObjectBasicAuthData.
        :type hash_type: str
        """
        allowed_values = ["", "bcrypt"]  # noqa: E501
        if hash_type not in allowed_values:
            raise ValueError(
                "Invalid value for `hash_type` ({0}), must be one of {1}"
                .format(hash_type, allowed_values)
            )

        self._hash_type = hash_type

    @property
    def password(self):
        """Gets the password of this SessionObjectBasicAuthData.


        :return: The password of this SessionObjectBasicAuthData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SessionObjectBasicAuthData.


        :param password: The password of this SessionObjectBasicAuthData.
        :type password: str
        """

        self._password = password
