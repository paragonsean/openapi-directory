# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointMethodMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, code: float=None, data: str=None, headers: object=None):
        """EndpointMethodMeta - a model defined in OpenAPI

        :param action: The action of this EndpointMethodMeta.
        :param code: The code of this EndpointMethodMeta.
        :param data: The data of this EndpointMethodMeta.
        :param headers: The headers of this EndpointMethodMeta.
        """
        self.openapi_types = {
            'action': str,
            'code': float,
            'data': str,
            'headers': object
        }

        self.attribute_map = {
            'action': 'action',
            'code': 'code',
            'data': 'data',
            'headers': 'headers'
        }

        self._action = action
        self._code = code
        self._data = data
        self._headers = headers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointMethodMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointMethodMeta of this EndpointMethodMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this EndpointMethodMeta.


        :return: The action of this EndpointMethodMeta.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EndpointMethodMeta.


        :param action: The action of this EndpointMethodMeta.
        :type action: str
        """

        self._action = action

    @property
    def code(self):
        """Gets the code of this EndpointMethodMeta.


        :return: The code of this EndpointMethodMeta.
        :rtype: float
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EndpointMethodMeta.


        :param code: The code of this EndpointMethodMeta.
        :type code: float
        """

        self._code = code

    @property
    def data(self):
        """Gets the data of this EndpointMethodMeta.


        :return: The data of this EndpointMethodMeta.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EndpointMethodMeta.


        :param data: The data of this EndpointMethodMeta.
        :type data: str
        """

        self._data = data

    @property
    def headers(self):
        """Gets the headers of this EndpointMethodMeta.


        :return: The headers of this EndpointMethodMeta.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EndpointMethodMeta.


        :param headers: The headers of this EndpointMethodMeta.
        :type headers: object
        """

        self._headers = headers
