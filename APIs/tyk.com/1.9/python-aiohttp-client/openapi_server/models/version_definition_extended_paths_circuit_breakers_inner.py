# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VersionDefinitionExtendedPathsCircuitBreakersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, path: str=None, return_to_service_after: float=None, samples: float=None, threshold_percent: float=None):
        """VersionDefinitionExtendedPathsCircuitBreakersInner - a model defined in OpenAPI

        :param method: The method of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :param path: The path of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :param return_to_service_after: The return_to_service_after of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :param samples: The samples of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :param threshold_percent: The threshold_percent of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        """
        self.openapi_types = {
            'method': str,
            'path': str,
            'return_to_service_after': float,
            'samples': float,
            'threshold_percent': float
        }

        self.attribute_map = {
            'method': 'method',
            'path': 'path',
            'return_to_service_after': 'return_to_service_after',
            'samples': 'samples',
            'threshold_percent': 'threshold_percent'
        }

        self._method = method
        self._path = path
        self._return_to_service_after = return_to_service_after
        self._samples = samples
        self._threshold_percent = threshold_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionDefinitionExtendedPathsCircuitBreakersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionDefinition_extended_paths_circuit_breakers_inner of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :return: The method of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :param method: The method of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :return: The path of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :param path: The path of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :type path: str
        """

        self._path = path

    @property
    def return_to_service_after(self):
        """Gets the return_to_service_after of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :return: The return_to_service_after of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :rtype: float
        """
        return self._return_to_service_after

    @return_to_service_after.setter
    def return_to_service_after(self, return_to_service_after):
        """Sets the return_to_service_after of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :param return_to_service_after: The return_to_service_after of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :type return_to_service_after: float
        """

        self._return_to_service_after = return_to_service_after

    @property
    def samples(self):
        """Gets the samples of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :return: The samples of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :rtype: float
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :param samples: The samples of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :type samples: float
        """

        self._samples = samples

    @property
    def threshold_percent(self):
        """Gets the threshold_percent of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :return: The threshold_percent of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :rtype: float
        """
        return self._threshold_percent

    @threshold_percent.setter
    def threshold_percent(self, threshold_percent):
        """Sets the threshold_percent of this VersionDefinitionExtendedPathsCircuitBreakersInner.


        :param threshold_percent: The threshold_percent of this VersionDefinitionExtendedPathsCircuitBreakersInner.
        :type threshold_percent: float
        """

        self._threshold_percent = threshold_percent
