/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceDiscoverConfiguration.h
 *
 * 
 */

#ifndef OAIServiceDiscoverConfiguration_H
#define OAIServiceDiscoverConfiguration_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIServiceDiscoverConfiguration : public OAIObject {
public:
    OAIServiceDiscoverConfiguration();
    OAIServiceDiscoverConfiguration(QString json);
    ~OAIServiceDiscoverConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCacheTimeout() const;
    void setCacheTimeout(const double &cache_timeout);
    bool is_cache_timeout_Set() const;
    bool is_cache_timeout_Valid() const;

    QString getDataPath() const;
    void setDataPath(const QString &data_path);
    bool is_data_path_Set() const;
    bool is_data_path_Valid() const;

    bool isEndpointReturnsList() const;
    void setEndpointReturnsList(const bool &endpoint_returns_list);
    bool is_endpoint_returns_list_Set() const;
    bool is_endpoint_returns_list_Valid() const;

    QString getParentDataPath() const;
    void setParentDataPath(const QString &parent_data_path);
    bool is_parent_data_path_Set() const;
    bool is_parent_data_path_Valid() const;

    QString getPortDataPath() const;
    void setPortDataPath(const QString &port_data_path);
    bool is_port_data_path_Set() const;
    bool is_port_data_path_Valid() const;

    QString getQueryEndpoint() const;
    void setQueryEndpoint(const QString &query_endpoint);
    bool is_query_endpoint_Set() const;
    bool is_query_endpoint_Valid() const;

    QString getUseDiscoveryService() const;
    void setUseDiscoveryService(const QString &use_discovery_service);
    bool is_use_discovery_service_Set() const;
    bool is_use_discovery_service_Valid() const;

    bool isUseNestedQuery() const;
    void setUseNestedQuery(const bool &use_nested_query);
    bool is_use_nested_query_Set() const;
    bool is_use_nested_query_Valid() const;

    bool isUseTargetList() const;
    void setUseTargetList(const bool &use_target_list);
    bool is_use_target_list_Set() const;
    bool is_use_target_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cache_timeout;
    bool m_cache_timeout_isSet;
    bool m_cache_timeout_isValid;

    QString m_data_path;
    bool m_data_path_isSet;
    bool m_data_path_isValid;

    bool m_endpoint_returns_list;
    bool m_endpoint_returns_list_isSet;
    bool m_endpoint_returns_list_isValid;

    QString m_parent_data_path;
    bool m_parent_data_path_isSet;
    bool m_parent_data_path_isValid;

    QString m_port_data_path;
    bool m_port_data_path_isSet;
    bool m_port_data_path_isValid;

    QString m_query_endpoint;
    bool m_query_endpoint_isSet;
    bool m_query_endpoint_isValid;

    QString m_use_discovery_service;
    bool m_use_discovery_service_isSet;
    bool m_use_discovery_service_isValid;

    bool m_use_nested_query;
    bool m_use_nested_query_isSet;
    bool m_use_nested_query_isValid;

    bool m_use_target_list;
    bool m_use_target_list_isSet;
    bool m_use_target_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceDiscoverConfiguration)

#endif // OAIServiceDiscoverConfiguration_H
