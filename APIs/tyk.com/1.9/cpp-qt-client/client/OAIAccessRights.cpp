/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessRights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessRights::OAIAccessRights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessRights::OAIAccessRights() {
    this->initializeModel();
}

OAIAccessRights::~OAIAccessRights() {}

void OAIAccessRights::initializeModel() {

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_api_name_isSet = false;
    m_api_name_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIAccessRights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessRights::fromJsonObject(QJsonObject json) {

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("api_id")]);
    m_api_id_isSet = !json[QString("api_id")].isNull() && m_api_id_isValid;

    m_api_name_isValid = ::OpenAPI::fromJsonValue(m_api_name, json[QString("api_name")]);
    m_api_name_isSet = !json[QString("api_name")].isNull() && m_api_name_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIAccessRights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessRights::asJsonObject() const {
    QJsonObject obj;
    if (m_api_id_isSet) {
        obj.insert(QString("api_id"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_api_name_isSet) {
        obj.insert(QString("api_name"), ::OpenAPI::toJsonValue(m_api_name));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QString OAIAccessRights::getApiId() const {
    return m_api_id;
}
void OAIAccessRights::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIAccessRights::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIAccessRights::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIAccessRights::getApiName() const {
    return m_api_name;
}
void OAIAccessRights::setApiName(const QString &api_name) {
    m_api_name = api_name;
    m_api_name_isSet = true;
}

bool OAIAccessRights::is_api_name_Set() const{
    return m_api_name_isSet;
}

bool OAIAccessRights::is_api_name_Valid() const{
    return m_api_name_isValid;
}

QList<QString> OAIAccessRights::getVersions() const {
    return m_versions;
}
void OAIAccessRights::setVersions(const QList<QString> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIAccessRights::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIAccessRights::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIAccessRights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessRights::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
