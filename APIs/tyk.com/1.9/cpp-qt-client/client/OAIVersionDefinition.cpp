/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionDefinition::OAIVersionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionDefinition::OAIVersionDefinition() {
    this->initializeModel();
}

OAIVersionDefinition::~OAIVersionDefinition() {}

void OAIVersionDefinition::initializeModel() {

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_extended_paths_isSet = false;
    m_extended_paths_isValid = false;

    m_global_headers_isSet = false;
    m_global_headers_isValid = false;

    m_global_headers_remove_isSet = false;
    m_global_headers_remove_isValid = false;

    m_global_size_limit_isSet = false;
    m_global_size_limit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_override_target_isSet = false;
    m_override_target_isValid = false;

    m_use_extended_paths_isSet = false;
    m_use_extended_paths_isValid = false;
}

void OAIVersionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionDefinition::fromJsonObject(QJsonObject json) {

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_extended_paths_isValid = ::OpenAPI::fromJsonValue(m_extended_paths, json[QString("extended_paths")]);
    m_extended_paths_isSet = !json[QString("extended_paths")].isNull() && m_extended_paths_isValid;

    m_global_headers_isValid = ::OpenAPI::fromJsonValue(m_global_headers, json[QString("global_headers")]);
    m_global_headers_isSet = !json[QString("global_headers")].isNull() && m_global_headers_isValid;

    m_global_headers_remove_isValid = ::OpenAPI::fromJsonValue(m_global_headers_remove, json[QString("global_headers_remove")]);
    m_global_headers_remove_isSet = !json[QString("global_headers_remove")].isNull() && m_global_headers_remove_isValid;

    m_global_size_limit_isValid = ::OpenAPI::fromJsonValue(m_global_size_limit, json[QString("global_size_limit")]);
    m_global_size_limit_isSet = !json[QString("global_size_limit")].isNull() && m_global_size_limit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_override_target_isValid = ::OpenAPI::fromJsonValue(m_override_target, json[QString("override_target")]);
    m_override_target_isSet = !json[QString("override_target")].isNull() && m_override_target_isValid;

    m_use_extended_paths_isValid = ::OpenAPI::fromJsonValue(m_use_extended_paths, json[QString("use_extended_paths")]);
    m_use_extended_paths_isSet = !json[QString("use_extended_paths")].isNull() && m_use_extended_paths_isValid;
}

QString OAIVersionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_extended_paths.isSet()) {
        obj.insert(QString("extended_paths"), ::OpenAPI::toJsonValue(m_extended_paths));
    }
    if (m_global_headers_isSet) {
        obj.insert(QString("global_headers"), ::OpenAPI::toJsonValue(m_global_headers));
    }
    if (m_global_headers_remove.size() > 0) {
        obj.insert(QString("global_headers_remove"), ::OpenAPI::toJsonValue(m_global_headers_remove));
    }
    if (m_global_size_limit_isSet) {
        obj.insert(QString("global_size_limit"), ::OpenAPI::toJsonValue(m_global_size_limit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_override_target_isSet) {
        obj.insert(QString("override_target"), ::OpenAPI::toJsonValue(m_override_target));
    }
    if (m_use_extended_paths_isSet) {
        obj.insert(QString("use_extended_paths"), ::OpenAPI::toJsonValue(m_use_extended_paths));
    }
    return obj;
}

QString OAIVersionDefinition::getExpires() const {
    return m_expires;
}
void OAIVersionDefinition::setExpires(const QString &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIVersionDefinition::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIVersionDefinition::is_expires_Valid() const{
    return m_expires_isValid;
}

OAIVersionDefinition_extended_paths OAIVersionDefinition::getExtendedPaths() const {
    return m_extended_paths;
}
void OAIVersionDefinition::setExtendedPaths(const OAIVersionDefinition_extended_paths &extended_paths) {
    m_extended_paths = extended_paths;
    m_extended_paths_isSet = true;
}

bool OAIVersionDefinition::is_extended_paths_Set() const{
    return m_extended_paths_isSet;
}

bool OAIVersionDefinition::is_extended_paths_Valid() const{
    return m_extended_paths_isValid;
}

OAIObject OAIVersionDefinition::getGlobalHeaders() const {
    return m_global_headers;
}
void OAIVersionDefinition::setGlobalHeaders(const OAIObject &global_headers) {
    m_global_headers = global_headers;
    m_global_headers_isSet = true;
}

bool OAIVersionDefinition::is_global_headers_Set() const{
    return m_global_headers_isSet;
}

bool OAIVersionDefinition::is_global_headers_Valid() const{
    return m_global_headers_isValid;
}

QList<QString> OAIVersionDefinition::getGlobalHeadersRemove() const {
    return m_global_headers_remove;
}
void OAIVersionDefinition::setGlobalHeadersRemove(const QList<QString> &global_headers_remove) {
    m_global_headers_remove = global_headers_remove;
    m_global_headers_remove_isSet = true;
}

bool OAIVersionDefinition::is_global_headers_remove_Set() const{
    return m_global_headers_remove_isSet;
}

bool OAIVersionDefinition::is_global_headers_remove_Valid() const{
    return m_global_headers_remove_isValid;
}

double OAIVersionDefinition::getGlobalSizeLimit() const {
    return m_global_size_limit;
}
void OAIVersionDefinition::setGlobalSizeLimit(const double &global_size_limit) {
    m_global_size_limit = global_size_limit;
    m_global_size_limit_isSet = true;
}

bool OAIVersionDefinition::is_global_size_limit_Set() const{
    return m_global_size_limit_isSet;
}

bool OAIVersionDefinition::is_global_size_limit_Valid() const{
    return m_global_size_limit_isValid;
}

QString OAIVersionDefinition::getName() const {
    return m_name;
}
void OAIVersionDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVersionDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVersionDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVersionDefinition::getOverrideTarget() const {
    return m_override_target;
}
void OAIVersionDefinition::setOverrideTarget(const QString &override_target) {
    m_override_target = override_target;
    m_override_target_isSet = true;
}

bool OAIVersionDefinition::is_override_target_Set() const{
    return m_override_target_isSet;
}

bool OAIVersionDefinition::is_override_target_Valid() const{
    return m_override_target_isValid;
}

bool OAIVersionDefinition::isUseExtendedPaths() const {
    return m_use_extended_paths;
}
void OAIVersionDefinition::setUseExtendedPaths(const bool &use_extended_paths) {
    m_use_extended_paths = use_extended_paths;
    m_use_extended_paths_isSet = true;
}

bool OAIVersionDefinition::is_use_extended_paths_Set() const{
    return m_use_extended_paths_isSet;
}

bool OAIVersionDefinition::is_use_extended_paths_Valid() const{
    return m_use_extended_paths_isValid;
}

bool OAIVersionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_headers_remove.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_size_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_extended_paths_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
