/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_tyk_health__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_tyk_health__get_200_response::OAI_tyk_health__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_tyk_health__get_200_response::OAI_tyk_health__get_200_response() {
    this->initializeModel();
}

OAI_tyk_health__get_200_response::~OAI_tyk_health__get_200_response() {}

void OAI_tyk_health__get_200_response::initializeModel() {

    m_average_requests_per_second_isSet = false;
    m_average_requests_per_second_isValid = false;

    m_average_upstream_latency_isSet = false;
    m_average_upstream_latency_isValid = false;

    m_key_failures_per_second_isSet = false;
    m_key_failures_per_second_isValid = false;

    m_quota_violations_per_second_isSet = false;
    m_quota_violations_per_second_isValid = false;

    m_throttle_requests_per_second_isSet = false;
    m_throttle_requests_per_second_isValid = false;
}

void OAI_tyk_health__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_tyk_health__get_200_response::fromJsonObject(QJsonObject json) {

    m_average_requests_per_second_isValid = ::OpenAPI::fromJsonValue(m_average_requests_per_second, json[QString("average_requests_per_second")]);
    m_average_requests_per_second_isSet = !json[QString("average_requests_per_second")].isNull() && m_average_requests_per_second_isValid;

    m_average_upstream_latency_isValid = ::OpenAPI::fromJsonValue(m_average_upstream_latency, json[QString("average_upstream_latency")]);
    m_average_upstream_latency_isSet = !json[QString("average_upstream_latency")].isNull() && m_average_upstream_latency_isValid;

    m_key_failures_per_second_isValid = ::OpenAPI::fromJsonValue(m_key_failures_per_second, json[QString("key_failures_per_second")]);
    m_key_failures_per_second_isSet = !json[QString("key_failures_per_second")].isNull() && m_key_failures_per_second_isValid;

    m_quota_violations_per_second_isValid = ::OpenAPI::fromJsonValue(m_quota_violations_per_second, json[QString("quota_violations_per_second")]);
    m_quota_violations_per_second_isSet = !json[QString("quota_violations_per_second")].isNull() && m_quota_violations_per_second_isValid;

    m_throttle_requests_per_second_isValid = ::OpenAPI::fromJsonValue(m_throttle_requests_per_second, json[QString("throttle_requests_per_second")]);
    m_throttle_requests_per_second_isSet = !json[QString("throttle_requests_per_second")].isNull() && m_throttle_requests_per_second_isValid;
}

QString OAI_tyk_health__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_tyk_health__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_average_requests_per_second_isSet) {
        obj.insert(QString("average_requests_per_second"), ::OpenAPI::toJsonValue(m_average_requests_per_second));
    }
    if (m_average_upstream_latency_isSet) {
        obj.insert(QString("average_upstream_latency"), ::OpenAPI::toJsonValue(m_average_upstream_latency));
    }
    if (m_key_failures_per_second_isSet) {
        obj.insert(QString("key_failures_per_second"), ::OpenAPI::toJsonValue(m_key_failures_per_second));
    }
    if (m_quota_violations_per_second_isSet) {
        obj.insert(QString("quota_violations_per_second"), ::OpenAPI::toJsonValue(m_quota_violations_per_second));
    }
    if (m_throttle_requests_per_second_isSet) {
        obj.insert(QString("throttle_requests_per_second"), ::OpenAPI::toJsonValue(m_throttle_requests_per_second));
    }
    return obj;
}

double OAI_tyk_health__get_200_response::getAverageRequestsPerSecond() const {
    return m_average_requests_per_second;
}
void OAI_tyk_health__get_200_response::setAverageRequestsPerSecond(const double &average_requests_per_second) {
    m_average_requests_per_second = average_requests_per_second;
    m_average_requests_per_second_isSet = true;
}

bool OAI_tyk_health__get_200_response::is_average_requests_per_second_Set() const{
    return m_average_requests_per_second_isSet;
}

bool OAI_tyk_health__get_200_response::is_average_requests_per_second_Valid() const{
    return m_average_requests_per_second_isValid;
}

double OAI_tyk_health__get_200_response::getAverageUpstreamLatency() const {
    return m_average_upstream_latency;
}
void OAI_tyk_health__get_200_response::setAverageUpstreamLatency(const double &average_upstream_latency) {
    m_average_upstream_latency = average_upstream_latency;
    m_average_upstream_latency_isSet = true;
}

bool OAI_tyk_health__get_200_response::is_average_upstream_latency_Set() const{
    return m_average_upstream_latency_isSet;
}

bool OAI_tyk_health__get_200_response::is_average_upstream_latency_Valid() const{
    return m_average_upstream_latency_isValid;
}

double OAI_tyk_health__get_200_response::getKeyFailuresPerSecond() const {
    return m_key_failures_per_second;
}
void OAI_tyk_health__get_200_response::setKeyFailuresPerSecond(const double &key_failures_per_second) {
    m_key_failures_per_second = key_failures_per_second;
    m_key_failures_per_second_isSet = true;
}

bool OAI_tyk_health__get_200_response::is_key_failures_per_second_Set() const{
    return m_key_failures_per_second_isSet;
}

bool OAI_tyk_health__get_200_response::is_key_failures_per_second_Valid() const{
    return m_key_failures_per_second_isValid;
}

double OAI_tyk_health__get_200_response::getQuotaViolationsPerSecond() const {
    return m_quota_violations_per_second;
}
void OAI_tyk_health__get_200_response::setQuotaViolationsPerSecond(const double &quota_violations_per_second) {
    m_quota_violations_per_second = quota_violations_per_second;
    m_quota_violations_per_second_isSet = true;
}

bool OAI_tyk_health__get_200_response::is_quota_violations_per_second_Set() const{
    return m_quota_violations_per_second_isSet;
}

bool OAI_tyk_health__get_200_response::is_quota_violations_per_second_Valid() const{
    return m_quota_violations_per_second_isValid;
}

double OAI_tyk_health__get_200_response::getThrottleRequestsPerSecond() const {
    return m_throttle_requests_per_second;
}
void OAI_tyk_health__get_200_response::setThrottleRequestsPerSecond(const double &throttle_requests_per_second) {
    m_throttle_requests_per_second = throttle_requests_per_second;
    m_throttle_requests_per_second_isSet = true;
}

bool OAI_tyk_health__get_200_response::is_throttle_requests_per_second_Set() const{
    return m_throttle_requests_per_second_isSet;
}

bool OAI_tyk_health__get_200_response::is_throttle_requests_per_second_Valid() const{
    return m_throttle_requests_per_second_isValid;
}

bool OAI_tyk_health__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_requests_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_upstream_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_failures_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_violations_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttle_requests_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_tyk_health__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
