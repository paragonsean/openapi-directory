/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition::OAIAPIDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition::OAIAPIDefinition() {
    this->initializeModel();
}

OAIAPIDefinition::~OAIAPIDefinition() {}

void OAIAPIDefinition::initializeModel() {

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_enable_jwt_isSet = false;
    m_enable_jwt_isValid = false;

    m_enable_signature_checking_isSet = false;
    m_enable_signature_checking_isValid = false;

    m_hmac_allowed_clock_skew_isSet = false;
    m_hmac_allowed_clock_skew_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jwt_identity_base_field_isSet = false;
    m_jwt_identity_base_field_isValid = false;

    m_jwt_policy_field_name_isSet = false;
    m_jwt_policy_field_name_isValid = false;

    m_jwt_signing_method_isSet = false;
    m_jwt_signing_method_isValid = false;

    m_jwt_source_isSet = false;
    m_jwt_source_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_oauth_meta_isSet = false;
    m_oauth_meta_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_uptime_tests_isSet = false;
    m_uptime_tests_isValid = false;

    m_use_basic_auth_isSet = false;
    m_use_basic_auth_isValid = false;

    m_use_keyless_isSet = false;
    m_use_keyless_isValid = false;

    m_use_oauth2_isSet = false;
    m_use_oauth2_isValid = false;

    m_version_data_isSet = false;
    m_version_data_isValid = false;
}

void OAIAPIDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition::fromJsonObject(QJsonObject json) {

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("api_id")]);
    m_api_id_isSet = !json[QString("api_id")].isNull() && m_api_id_isValid;

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_enable_jwt_isValid = ::OpenAPI::fromJsonValue(m_enable_jwt, json[QString("enable_jwt")]);
    m_enable_jwt_isSet = !json[QString("enable_jwt")].isNull() && m_enable_jwt_isValid;

    m_enable_signature_checking_isValid = ::OpenAPI::fromJsonValue(m_enable_signature_checking, json[QString("enable_signature_checking")]);
    m_enable_signature_checking_isSet = !json[QString("enable_signature_checking")].isNull() && m_enable_signature_checking_isValid;

    m_hmac_allowed_clock_skew_isValid = ::OpenAPI::fromJsonValue(m_hmac_allowed_clock_skew, json[QString("hmac_allowed_clock_skew")]);
    m_hmac_allowed_clock_skew_isSet = !json[QString("hmac_allowed_clock_skew")].isNull() && m_hmac_allowed_clock_skew_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jwt_identity_base_field_isValid = ::OpenAPI::fromJsonValue(m_jwt_identity_base_field, json[QString("jwt_identity_base_field")]);
    m_jwt_identity_base_field_isSet = !json[QString("jwt_identity_base_field")].isNull() && m_jwt_identity_base_field_isValid;

    m_jwt_policy_field_name_isValid = ::OpenAPI::fromJsonValue(m_jwt_policy_field_name, json[QString("jwt_policy_field_name")]);
    m_jwt_policy_field_name_isSet = !json[QString("jwt_policy_field_name")].isNull() && m_jwt_policy_field_name_isValid;

    m_jwt_signing_method_isValid = ::OpenAPI::fromJsonValue(m_jwt_signing_method, json[QString("jwt_signing_method")]);
    m_jwt_signing_method_isSet = !json[QString("jwt_signing_method")].isNull() && m_jwt_signing_method_isValid;

    m_jwt_source_isValid = ::OpenAPI::fromJsonValue(m_jwt_source, json[QString("jwt_source")]);
    m_jwt_source_isSet = !json[QString("jwt_source")].isNull() && m_jwt_source_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_oauth_meta_isValid = ::OpenAPI::fromJsonValue(m_oauth_meta, json[QString("oauth_meta")]);
    m_oauth_meta_isSet = !json[QString("oauth_meta")].isNull() && m_oauth_meta_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("org_id")]);
    m_org_id_isSet = !json[QString("org_id")].isNull() && m_org_id_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_uptime_tests_isValid = ::OpenAPI::fromJsonValue(m_uptime_tests, json[QString("uptime_tests")]);
    m_uptime_tests_isSet = !json[QString("uptime_tests")].isNull() && m_uptime_tests_isValid;

    m_use_basic_auth_isValid = ::OpenAPI::fromJsonValue(m_use_basic_auth, json[QString("use_basic_auth")]);
    m_use_basic_auth_isSet = !json[QString("use_basic_auth")].isNull() && m_use_basic_auth_isValid;

    m_use_keyless_isValid = ::OpenAPI::fromJsonValue(m_use_keyless, json[QString("use_keyless")]);
    m_use_keyless_isSet = !json[QString("use_keyless")].isNull() && m_use_keyless_isValid;

    m_use_oauth2_isValid = ::OpenAPI::fromJsonValue(m_use_oauth2, json[QString("use_oauth2")]);
    m_use_oauth2_isSet = !json[QString("use_oauth2")].isNull() && m_use_oauth2_isValid;

    m_version_data_isValid = ::OpenAPI::fromJsonValue(m_version_data, json[QString("version_data")]);
    m_version_data_isSet = !json[QString("version_data")].isNull() && m_version_data_isValid;
}

QString OAIAPIDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_api_id_isSet) {
        obj.insert(QString("api_id"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_enable_jwt_isSet) {
        obj.insert(QString("enable_jwt"), ::OpenAPI::toJsonValue(m_enable_jwt));
    }
    if (m_enable_signature_checking_isSet) {
        obj.insert(QString("enable_signature_checking"), ::OpenAPI::toJsonValue(m_enable_signature_checking));
    }
    if (m_hmac_allowed_clock_skew_isSet) {
        obj.insert(QString("hmac_allowed_clock_skew"), ::OpenAPI::toJsonValue(m_hmac_allowed_clock_skew));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jwt_identity_base_field_isSet) {
        obj.insert(QString("jwt_identity_base_field"), ::OpenAPI::toJsonValue(m_jwt_identity_base_field));
    }
    if (m_jwt_policy_field_name_isSet) {
        obj.insert(QString("jwt_policy_field_name"), ::OpenAPI::toJsonValue(m_jwt_policy_field_name));
    }
    if (m_jwt_signing_method_isSet) {
        obj.insert(QString("jwt_signing_method"), ::OpenAPI::toJsonValue(m_jwt_signing_method));
    }
    if (m_jwt_source_isSet) {
        obj.insert(QString("jwt_source"), ::OpenAPI::toJsonValue(m_jwt_source));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notifications.isSet()) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_oauth_meta.isSet()) {
        obj.insert(QString("oauth_meta"), ::OpenAPI::toJsonValue(m_oauth_meta));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("org_id"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_uptime_tests.isSet()) {
        obj.insert(QString("uptime_tests"), ::OpenAPI::toJsonValue(m_uptime_tests));
    }
    if (m_use_basic_auth_isSet) {
        obj.insert(QString("use_basic_auth"), ::OpenAPI::toJsonValue(m_use_basic_auth));
    }
    if (m_use_keyless_isSet) {
        obj.insert(QString("use_keyless"), ::OpenAPI::toJsonValue(m_use_keyless));
    }
    if (m_use_oauth2_isSet) {
        obj.insert(QString("use_oauth2"), ::OpenAPI::toJsonValue(m_use_oauth2));
    }
    if (m_version_data.isSet()) {
        obj.insert(QString("version_data"), ::OpenAPI::toJsonValue(m_version_data));
    }
    return obj;
}

QString OAIAPIDefinition::getApiId() const {
    return m_api_id;
}
void OAIAPIDefinition::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIAPIDefinition::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIAPIDefinition::is_api_id_Valid() const{
    return m_api_id_isValid;
}

OAIAPIDefinition_auth OAIAPIDefinition::getAuth() const {
    return m_auth;
}
void OAIAPIDefinition::setAuth(const OAIAPIDefinition_auth &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIAPIDefinition::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIAPIDefinition::is_auth_Valid() const{
    return m_auth_isValid;
}

OAIAPIDefinition_definition OAIAPIDefinition::getDefinition() const {
    return m_definition;
}
void OAIAPIDefinition::setDefinition(const OAIAPIDefinition_definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIAPIDefinition::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIAPIDefinition::is_definition_Valid() const{
    return m_definition_isValid;
}

bool OAIAPIDefinition::isEnableJwt() const {
    return m_enable_jwt;
}
void OAIAPIDefinition::setEnableJwt(const bool &enable_jwt) {
    m_enable_jwt = enable_jwt;
    m_enable_jwt_isSet = true;
}

bool OAIAPIDefinition::is_enable_jwt_Set() const{
    return m_enable_jwt_isSet;
}

bool OAIAPIDefinition::is_enable_jwt_Valid() const{
    return m_enable_jwt_isValid;
}

bool OAIAPIDefinition::isEnableSignatureChecking() const {
    return m_enable_signature_checking;
}
void OAIAPIDefinition::setEnableSignatureChecking(const bool &enable_signature_checking) {
    m_enable_signature_checking = enable_signature_checking;
    m_enable_signature_checking_isSet = true;
}

bool OAIAPIDefinition::is_enable_signature_checking_Set() const{
    return m_enable_signature_checking_isSet;
}

bool OAIAPIDefinition::is_enable_signature_checking_Valid() const{
    return m_enable_signature_checking_isValid;
}

double OAIAPIDefinition::getHmacAllowedClockSkew() const {
    return m_hmac_allowed_clock_skew;
}
void OAIAPIDefinition::setHmacAllowedClockSkew(const double &hmac_allowed_clock_skew) {
    m_hmac_allowed_clock_skew = hmac_allowed_clock_skew;
    m_hmac_allowed_clock_skew_isSet = true;
}

bool OAIAPIDefinition::is_hmac_allowed_clock_skew_Set() const{
    return m_hmac_allowed_clock_skew_isSet;
}

bool OAIAPIDefinition::is_hmac_allowed_clock_skew_Valid() const{
    return m_hmac_allowed_clock_skew_isValid;
}

QString OAIAPIDefinition::getId() const {
    return m_id;
}
void OAIAPIDefinition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAPIDefinition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAPIDefinition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAPIDefinition::getJwtIdentityBaseField() const {
    return m_jwt_identity_base_field;
}
void OAIAPIDefinition::setJwtIdentityBaseField(const QString &jwt_identity_base_field) {
    m_jwt_identity_base_field = jwt_identity_base_field;
    m_jwt_identity_base_field_isSet = true;
}

bool OAIAPIDefinition::is_jwt_identity_base_field_Set() const{
    return m_jwt_identity_base_field_isSet;
}

bool OAIAPIDefinition::is_jwt_identity_base_field_Valid() const{
    return m_jwt_identity_base_field_isValid;
}

QString OAIAPIDefinition::getJwtPolicyFieldName() const {
    return m_jwt_policy_field_name;
}
void OAIAPIDefinition::setJwtPolicyFieldName(const QString &jwt_policy_field_name) {
    m_jwt_policy_field_name = jwt_policy_field_name;
    m_jwt_policy_field_name_isSet = true;
}

bool OAIAPIDefinition::is_jwt_policy_field_name_Set() const{
    return m_jwt_policy_field_name_isSet;
}

bool OAIAPIDefinition::is_jwt_policy_field_name_Valid() const{
    return m_jwt_policy_field_name_isValid;
}

QString OAIAPIDefinition::getJwtSigningMethod() const {
    return m_jwt_signing_method;
}
void OAIAPIDefinition::setJwtSigningMethod(const QString &jwt_signing_method) {
    m_jwt_signing_method = jwt_signing_method;
    m_jwt_signing_method_isSet = true;
}

bool OAIAPIDefinition::is_jwt_signing_method_Set() const{
    return m_jwt_signing_method_isSet;
}

bool OAIAPIDefinition::is_jwt_signing_method_Valid() const{
    return m_jwt_signing_method_isValid;
}

QString OAIAPIDefinition::getJwtSource() const {
    return m_jwt_source;
}
void OAIAPIDefinition::setJwtSource(const QString &jwt_source) {
    m_jwt_source = jwt_source;
    m_jwt_source_isSet = true;
}

bool OAIAPIDefinition::is_jwt_source_Set() const{
    return m_jwt_source_isSet;
}

bool OAIAPIDefinition::is_jwt_source_Valid() const{
    return m_jwt_source_isValid;
}

QString OAIAPIDefinition::getName() const {
    return m_name;
}
void OAIAPIDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAPIDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAPIDefinition::is_name_Valid() const{
    return m_name_isValid;
}

OAIAPIDefinition_notifications OAIAPIDefinition::getNotifications() const {
    return m_notifications;
}
void OAIAPIDefinition::setNotifications(const OAIAPIDefinition_notifications &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIAPIDefinition::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIAPIDefinition::is_notifications_Valid() const{
    return m_notifications_isValid;
}

OAIAPIDefinition_oauth_meta OAIAPIDefinition::getOauthMeta() const {
    return m_oauth_meta;
}
void OAIAPIDefinition::setOauthMeta(const OAIAPIDefinition_oauth_meta &oauth_meta) {
    m_oauth_meta = oauth_meta;
    m_oauth_meta_isSet = true;
}

bool OAIAPIDefinition::is_oauth_meta_Set() const{
    return m_oauth_meta_isSet;
}

bool OAIAPIDefinition::is_oauth_meta_Valid() const{
    return m_oauth_meta_isValid;
}

QString OAIAPIDefinition::getOrgId() const {
    return m_org_id;
}
void OAIAPIDefinition::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIAPIDefinition::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIAPIDefinition::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIAPIDefinition::getSlug() const {
    return m_slug;
}
void OAIAPIDefinition::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIAPIDefinition::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIAPIDefinition::is_slug_Valid() const{
    return m_slug_isValid;
}

OAIAPIDefinition_uptime_tests OAIAPIDefinition::getUptimeTests() const {
    return m_uptime_tests;
}
void OAIAPIDefinition::setUptimeTests(const OAIAPIDefinition_uptime_tests &uptime_tests) {
    m_uptime_tests = uptime_tests;
    m_uptime_tests_isSet = true;
}

bool OAIAPIDefinition::is_uptime_tests_Set() const{
    return m_uptime_tests_isSet;
}

bool OAIAPIDefinition::is_uptime_tests_Valid() const{
    return m_uptime_tests_isValid;
}

bool OAIAPIDefinition::isUseBasicAuth() const {
    return m_use_basic_auth;
}
void OAIAPIDefinition::setUseBasicAuth(const bool &use_basic_auth) {
    m_use_basic_auth = use_basic_auth;
    m_use_basic_auth_isSet = true;
}

bool OAIAPIDefinition::is_use_basic_auth_Set() const{
    return m_use_basic_auth_isSet;
}

bool OAIAPIDefinition::is_use_basic_auth_Valid() const{
    return m_use_basic_auth_isValid;
}

bool OAIAPIDefinition::isUseKeyless() const {
    return m_use_keyless;
}
void OAIAPIDefinition::setUseKeyless(const bool &use_keyless) {
    m_use_keyless = use_keyless;
    m_use_keyless_isSet = true;
}

bool OAIAPIDefinition::is_use_keyless_Set() const{
    return m_use_keyless_isSet;
}

bool OAIAPIDefinition::is_use_keyless_Valid() const{
    return m_use_keyless_isValid;
}

bool OAIAPIDefinition::isUseOauth2() const {
    return m_use_oauth2;
}
void OAIAPIDefinition::setUseOauth2(const bool &use_oauth2) {
    m_use_oauth2 = use_oauth2;
    m_use_oauth2_isSet = true;
}

bool OAIAPIDefinition::is_use_oauth2_Set() const{
    return m_use_oauth2_isSet;
}

bool OAIAPIDefinition::is_use_oauth2_Valid() const{
    return m_use_oauth2_isValid;
}

OAIAPIDefinition_version_data OAIAPIDefinition::getVersionData() const {
    return m_version_data;
}
void OAIAPIDefinition::setVersionData(const OAIAPIDefinition_version_data &version_data) {
    m_version_data = version_data;
    m_version_data_isSet = true;
}

bool OAIAPIDefinition::is_version_data_Set() const{
    return m_version_data_isSet;
}

bool OAIAPIDefinition::is_version_data_Valid() const{
    return m_version_data_isValid;
}

bool OAIAPIDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_jwt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_signature_checking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hmac_allowed_clock_skew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_identity_base_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_policy_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_signing_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uptime_tests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_basic_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_keyless_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_oauth2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
