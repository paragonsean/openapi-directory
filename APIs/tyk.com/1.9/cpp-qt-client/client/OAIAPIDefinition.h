/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAPIDefinition.h
 *
 * 
 */

#ifndef OAIAPIDefinition_H
#define OAIAPIDefinition_H

#include <QJsonObject>

#include "OAIAPIDefinition_auth.h"
#include "OAIAPIDefinition_definition.h"
#include "OAIAPIDefinition_notifications.h"
#include "OAIAPIDefinition_oauth_meta.h"
#include "OAIAPIDefinition_uptime_tests.h"
#include "OAIAPIDefinition_version_data.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAPIDefinition_auth;
class OAIAPIDefinition_definition;
class OAIAPIDefinition_notifications;
class OAIAPIDefinition_oauth_meta;
class OAIAPIDefinition_uptime_tests;
class OAIAPIDefinition_version_data;

class OAIAPIDefinition : public OAIObject {
public:
    OAIAPIDefinition();
    OAIAPIDefinition(QString json);
    ~OAIAPIDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiId() const;
    void setApiId(const QString &api_id);
    bool is_api_id_Set() const;
    bool is_api_id_Valid() const;

    OAIAPIDefinition_auth getAuth() const;
    void setAuth(const OAIAPIDefinition_auth &auth);
    bool is_auth_Set() const;
    bool is_auth_Valid() const;

    OAIAPIDefinition_definition getDefinition() const;
    void setDefinition(const OAIAPIDefinition_definition &definition);
    bool is_definition_Set() const;
    bool is_definition_Valid() const;

    bool isEnableJwt() const;
    void setEnableJwt(const bool &enable_jwt);
    bool is_enable_jwt_Set() const;
    bool is_enable_jwt_Valid() const;

    bool isEnableSignatureChecking() const;
    void setEnableSignatureChecking(const bool &enable_signature_checking);
    bool is_enable_signature_checking_Set() const;
    bool is_enable_signature_checking_Valid() const;

    double getHmacAllowedClockSkew() const;
    void setHmacAllowedClockSkew(const double &hmac_allowed_clock_skew);
    bool is_hmac_allowed_clock_skew_Set() const;
    bool is_hmac_allowed_clock_skew_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getJwtIdentityBaseField() const;
    void setJwtIdentityBaseField(const QString &jwt_identity_base_field);
    bool is_jwt_identity_base_field_Set() const;
    bool is_jwt_identity_base_field_Valid() const;

    QString getJwtPolicyFieldName() const;
    void setJwtPolicyFieldName(const QString &jwt_policy_field_name);
    bool is_jwt_policy_field_name_Set() const;
    bool is_jwt_policy_field_name_Valid() const;

    QString getJwtSigningMethod() const;
    void setJwtSigningMethod(const QString &jwt_signing_method);
    bool is_jwt_signing_method_Set() const;
    bool is_jwt_signing_method_Valid() const;

    QString getJwtSource() const;
    void setJwtSource(const QString &jwt_source);
    bool is_jwt_source_Set() const;
    bool is_jwt_source_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIAPIDefinition_notifications getNotifications() const;
    void setNotifications(const OAIAPIDefinition_notifications &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    OAIAPIDefinition_oauth_meta getOauthMeta() const;
    void setOauthMeta(const OAIAPIDefinition_oauth_meta &oauth_meta);
    bool is_oauth_meta_Set() const;
    bool is_oauth_meta_Valid() const;

    QString getOrgId() const;
    void setOrgId(const QString &org_id);
    bool is_org_id_Set() const;
    bool is_org_id_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    OAIAPIDefinition_uptime_tests getUptimeTests() const;
    void setUptimeTests(const OAIAPIDefinition_uptime_tests &uptime_tests);
    bool is_uptime_tests_Set() const;
    bool is_uptime_tests_Valid() const;

    bool isUseBasicAuth() const;
    void setUseBasicAuth(const bool &use_basic_auth);
    bool is_use_basic_auth_Set() const;
    bool is_use_basic_auth_Valid() const;

    bool isUseKeyless() const;
    void setUseKeyless(const bool &use_keyless);
    bool is_use_keyless_Set() const;
    bool is_use_keyless_Valid() const;

    bool isUseOauth2() const;
    void setUseOauth2(const bool &use_oauth2);
    bool is_use_oauth2_Set() const;
    bool is_use_oauth2_Valid() const;

    OAIAPIDefinition_version_data getVersionData() const;
    void setVersionData(const OAIAPIDefinition_version_data &version_data);
    bool is_version_data_Set() const;
    bool is_version_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_id;
    bool m_api_id_isSet;
    bool m_api_id_isValid;

    OAIAPIDefinition_auth m_auth;
    bool m_auth_isSet;
    bool m_auth_isValid;

    OAIAPIDefinition_definition m_definition;
    bool m_definition_isSet;
    bool m_definition_isValid;

    bool m_enable_jwt;
    bool m_enable_jwt_isSet;
    bool m_enable_jwt_isValid;

    bool m_enable_signature_checking;
    bool m_enable_signature_checking_isSet;
    bool m_enable_signature_checking_isValid;

    double m_hmac_allowed_clock_skew;
    bool m_hmac_allowed_clock_skew_isSet;
    bool m_hmac_allowed_clock_skew_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_jwt_identity_base_field;
    bool m_jwt_identity_base_field_isSet;
    bool m_jwt_identity_base_field_isValid;

    QString m_jwt_policy_field_name;
    bool m_jwt_policy_field_name_isSet;
    bool m_jwt_policy_field_name_isValid;

    QString m_jwt_signing_method;
    bool m_jwt_signing_method_isSet;
    bool m_jwt_signing_method_isValid;

    QString m_jwt_source;
    bool m_jwt_source_isSet;
    bool m_jwt_source_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIAPIDefinition_notifications m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    OAIAPIDefinition_oauth_meta m_oauth_meta;
    bool m_oauth_meta_isSet;
    bool m_oauth_meta_isValid;

    QString m_org_id;
    bool m_org_id_isSet;
    bool m_org_id_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    OAIAPIDefinition_uptime_tests m_uptime_tests;
    bool m_uptime_tests_isSet;
    bool m_uptime_tests_isValid;

    bool m_use_basic_auth;
    bool m_use_basic_auth_isSet;
    bool m_use_basic_auth_isValid;

    bool m_use_keyless;
    bool m_use_keyless_isSet;
    bool m_use_keyless_isValid;

    bool m_use_oauth2;
    bool m_use_oauth2_isSet;
    bool m_use_oauth2_isValid;

    OAIAPIDefinition_version_data m_version_data;
    bool m_version_data_isSet;
    bool m_version_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAPIDefinition)

#endif // OAIAPIDefinition_H
