/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_notifications.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_notifications::OAIAPIDefinition_notifications(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_notifications::OAIAPIDefinition_notifications() {
    this->initializeModel();
}

OAIAPIDefinition_notifications::~OAIAPIDefinition_notifications() {}

void OAIAPIDefinition_notifications::initializeModel() {

    m_oauth_on_keychange_url_isSet = false;
    m_oauth_on_keychange_url_isValid = false;

    m_shared_secret_isSet = false;
    m_shared_secret_isValid = false;
}

void OAIAPIDefinition_notifications::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_notifications::fromJsonObject(QJsonObject json) {

    m_oauth_on_keychange_url_isValid = ::OpenAPI::fromJsonValue(m_oauth_on_keychange_url, json[QString("oauth_on_keychange_url")]);
    m_oauth_on_keychange_url_isSet = !json[QString("oauth_on_keychange_url")].isNull() && m_oauth_on_keychange_url_isValid;

    m_shared_secret_isValid = ::OpenAPI::fromJsonValue(m_shared_secret, json[QString("shared_secret")]);
    m_shared_secret_isSet = !json[QString("shared_secret")].isNull() && m_shared_secret_isValid;
}

QString OAIAPIDefinition_notifications::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_notifications::asJsonObject() const {
    QJsonObject obj;
    if (m_oauth_on_keychange_url_isSet) {
        obj.insert(QString("oauth_on_keychange_url"), ::OpenAPI::toJsonValue(m_oauth_on_keychange_url));
    }
    if (m_shared_secret_isSet) {
        obj.insert(QString("shared_secret"), ::OpenAPI::toJsonValue(m_shared_secret));
    }
    return obj;
}

QString OAIAPIDefinition_notifications::getOauthOnKeychangeUrl() const {
    return m_oauth_on_keychange_url;
}
void OAIAPIDefinition_notifications::setOauthOnKeychangeUrl(const QString &oauth_on_keychange_url) {
    m_oauth_on_keychange_url = oauth_on_keychange_url;
    m_oauth_on_keychange_url_isSet = true;
}

bool OAIAPIDefinition_notifications::is_oauth_on_keychange_url_Set() const{
    return m_oauth_on_keychange_url_isSet;
}

bool OAIAPIDefinition_notifications::is_oauth_on_keychange_url_Valid() const{
    return m_oauth_on_keychange_url_isValid;
}

QString OAIAPIDefinition_notifications::getSharedSecret() const {
    return m_shared_secret;
}
void OAIAPIDefinition_notifications::setSharedSecret(const QString &shared_secret) {
    m_shared_secret = shared_secret;
    m_shared_secret_isSet = true;
}

bool OAIAPIDefinition_notifications::is_shared_secret_Set() const{
    return m_shared_secret_isSet;
}

bool OAIAPIDefinition_notifications::is_shared_secret_Valid() const{
    return m_shared_secret_isValid;
}

bool OAIAPIDefinition_notifications::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oauth_on_keychange_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_notifications::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
