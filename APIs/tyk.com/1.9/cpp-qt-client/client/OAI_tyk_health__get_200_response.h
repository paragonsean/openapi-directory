/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_tyk_health__get_200_response.h
 *
 * 
 */

#ifndef OAI_tyk_health__get_200_response_H
#define OAI_tyk_health__get_200_response_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_tyk_health__get_200_response : public OAIObject {
public:
    OAI_tyk_health__get_200_response();
    OAI_tyk_health__get_200_response(QString json);
    ~OAI_tyk_health__get_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAverageRequestsPerSecond() const;
    void setAverageRequestsPerSecond(const double &average_requests_per_second);
    bool is_average_requests_per_second_Set() const;
    bool is_average_requests_per_second_Valid() const;

    double getAverageUpstreamLatency() const;
    void setAverageUpstreamLatency(const double &average_upstream_latency);
    bool is_average_upstream_latency_Set() const;
    bool is_average_upstream_latency_Valid() const;

    double getKeyFailuresPerSecond() const;
    void setKeyFailuresPerSecond(const double &key_failures_per_second);
    bool is_key_failures_per_second_Set() const;
    bool is_key_failures_per_second_Valid() const;

    double getQuotaViolationsPerSecond() const;
    void setQuotaViolationsPerSecond(const double &quota_violations_per_second);
    bool is_quota_violations_per_second_Set() const;
    bool is_quota_violations_per_second_Valid() const;

    double getThrottleRequestsPerSecond() const;
    void setThrottleRequestsPerSecond(const double &throttle_requests_per_second);
    bool is_throttle_requests_per_second_Set() const;
    bool is_throttle_requests_per_second_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_average_requests_per_second;
    bool m_average_requests_per_second_isSet;
    bool m_average_requests_per_second_isValid;

    double m_average_upstream_latency;
    bool m_average_upstream_latency_isSet;
    bool m_average_upstream_latency_isValid;

    double m_key_failures_per_second;
    bool m_key_failures_per_second_isSet;
    bool m_key_failures_per_second_isValid;

    double m_quota_violations_per_second;
    bool m_quota_violations_per_second_isSet;
    bool m_quota_violations_per_second_isValid;

    double m_throttle_requests_per_second;
    bool m_throttle_requests_per_second_isSet;
    bool m_throttle_requests_per_second_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_tyk_health__get_200_response)

#endif // OAI_tyk_health__get_200_response_H
