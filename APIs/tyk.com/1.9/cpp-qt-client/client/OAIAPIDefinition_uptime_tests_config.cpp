/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_uptime_tests_config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_uptime_tests_config::OAIAPIDefinition_uptime_tests_config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_uptime_tests_config::OAIAPIDefinition_uptime_tests_config() {
    this->initializeModel();
}

OAIAPIDefinition_uptime_tests_config::~OAIAPIDefinition_uptime_tests_config() {}

void OAIAPIDefinition_uptime_tests_config::initializeModel() {

    m_expire_utime_after_isSet = false;
    m_expire_utime_after_isValid = false;

    m_recheck_wait_isSet = false;
    m_recheck_wait_isValid = false;

    m_service_discovery_isSet = false;
    m_service_discovery_isValid = false;
}

void OAIAPIDefinition_uptime_tests_config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_uptime_tests_config::fromJsonObject(QJsonObject json) {

    m_expire_utime_after_isValid = ::OpenAPI::fromJsonValue(m_expire_utime_after, json[QString("expire_utime_after")]);
    m_expire_utime_after_isSet = !json[QString("expire_utime_after")].isNull() && m_expire_utime_after_isValid;

    m_recheck_wait_isValid = ::OpenAPI::fromJsonValue(m_recheck_wait, json[QString("recheck_wait")]);
    m_recheck_wait_isSet = !json[QString("recheck_wait")].isNull() && m_recheck_wait_isValid;

    m_service_discovery_isValid = ::OpenAPI::fromJsonValue(m_service_discovery, json[QString("service_discovery")]);
    m_service_discovery_isSet = !json[QString("service_discovery")].isNull() && m_service_discovery_isValid;
}

QString OAIAPIDefinition_uptime_tests_config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_uptime_tests_config::asJsonObject() const {
    QJsonObject obj;
    if (m_expire_utime_after_isSet) {
        obj.insert(QString("expire_utime_after"), ::OpenAPI::toJsonValue(m_expire_utime_after));
    }
    if (m_recheck_wait_isSet) {
        obj.insert(QString("recheck_wait"), ::OpenAPI::toJsonValue(m_recheck_wait));
    }
    if (m_service_discovery.isSet()) {
        obj.insert(QString("service_discovery"), ::OpenAPI::toJsonValue(m_service_discovery));
    }
    return obj;
}

double OAIAPIDefinition_uptime_tests_config::getExpireUtimeAfter() const {
    return m_expire_utime_after;
}
void OAIAPIDefinition_uptime_tests_config::setExpireUtimeAfter(const double &expire_utime_after) {
    m_expire_utime_after = expire_utime_after;
    m_expire_utime_after_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_config::is_expire_utime_after_Set() const{
    return m_expire_utime_after_isSet;
}

bool OAIAPIDefinition_uptime_tests_config::is_expire_utime_after_Valid() const{
    return m_expire_utime_after_isValid;
}

double OAIAPIDefinition_uptime_tests_config::getRecheckWait() const {
    return m_recheck_wait;
}
void OAIAPIDefinition_uptime_tests_config::setRecheckWait(const double &recheck_wait) {
    m_recheck_wait = recheck_wait;
    m_recheck_wait_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_config::is_recheck_wait_Set() const{
    return m_recheck_wait_isSet;
}

bool OAIAPIDefinition_uptime_tests_config::is_recheck_wait_Valid() const{
    return m_recheck_wait_isValid;
}

OAIServiceDiscoverConfiguration OAIAPIDefinition_uptime_tests_config::getServiceDiscovery() const {
    return m_service_discovery;
}
void OAIAPIDefinition_uptime_tests_config::setServiceDiscovery(const OAIServiceDiscoverConfiguration &service_discovery) {
    m_service_discovery = service_discovery;
    m_service_discovery_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_config::is_service_discovery_Set() const{
    return m_service_discovery_isSet;
}

bool OAIAPIDefinition_uptime_tests_config::is_service_discovery_Valid() const{
    return m_service_discovery_isValid;
}

bool OAIAPIDefinition_uptime_tests_config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expire_utime_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recheck_wait_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_uptime_tests_config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
