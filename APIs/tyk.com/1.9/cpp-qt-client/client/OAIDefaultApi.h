/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIDefinition.h"
#include "OAIOAuthClient.h"
#include "OAISessionObject.h"
#include "OAI_tyk_apis__apiID__delete_200_response.h"
#include "OAI_tyk_apis__post_200_response.h"
#include "OAI_tyk_health__get_200_response.h"
#include "OAI_tyk_keys__get_200_response.h"
#include "OAI_tyk_keys__keyId__post_200_response.h"
#include "OAI_tyk_keys__keyId__put_200_response.h"
#include "OAI_tyk_keys_create_post_200_response.h"
#include "OAI_tyk_oauth_authorize_client__post_200_response.h"
#include "OAI_tyk_oauth_clients_create_post_request.h"
#include "OAI_tyk_reload__get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  api_id QString [required]
    */
    virtual void tykApisApiIDDelete(const QString &x_tyk_authorization, const QString &api_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  api_id QString [required]
    */
    virtual void tykApisApiIDGet(const QString &x_tyk_authorization, const QString &api_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_definition OAIAPIDefinition [optional]
    */
    virtual void tykApisApiIDPut(const QString &x_tyk_authorization, const QString &api_id, const ::OpenAPI::OptionalParam<OAIAPIDefinition> &api_definition = ::OpenAPI::OptionalParam<OAIAPIDefinition>());

    /**
    * @param[in]  x_tyk_authorization QString [required]
    */
    virtual void tykApisGet(const QString &x_tyk_authorization);

    /**
    * @param[in]  api_definition OAIAPIDefinition [optional]
    */
    virtual void tykApisPost(const ::OpenAPI::OptionalParam<OAIAPIDefinition> &api_definition = ::OpenAPI::OptionalParam<OAIAPIDefinition>());

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  api_id QString [required]
    */
    virtual void tykHealthGet(const QString &x_tyk_authorization, const QString &api_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  suppress_reset double [optional]
    * @param[in]  session_object OAISessionObject [optional]
    */
    virtual void tykKeysCreatePost(const QString &x_tyk_authorization, const ::OpenAPI::OptionalParam<double> &suppress_reset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<OAISessionObject> &session_object = ::OpenAPI::OptionalParam<OAISessionObject>());

    /**
    * @param[in]  api_id QString [required]
    * @param[in]  x_tyk_authorization QString [required]
    */
    virtual void tykKeysGet(const QString &api_id, const QString &x_tyk_authorization);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  key_id QString [required]
    * @param[in]  api_id QString [required]
    */
    virtual void tykKeysKeyIdDelete(const QString &x_tyk_authorization, const QString &key_id, const QString &api_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  key_id QString [required]
    * @param[in]  session_object OAISessionObject [optional]
    */
    virtual void tykKeysKeyIdPost(const QString &x_tyk_authorization, const QString &key_id, const ::OpenAPI::OptionalParam<OAISessionObject> &session_object = ::OpenAPI::OptionalParam<OAISessionObject>());

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  key_id QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  suppress_reset double [optional]
    * @param[in]  session_object OAISessionObject [optional]
    */
    virtual void tykKeysKeyIdPut(const QString &x_tyk_authorization, const QString &key_id, const QString &api_id, const ::OpenAPI::OptionalParam<double> &suppress_reset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<OAISessionObject> &session_object = ::OpenAPI::OptionalParam<OAISessionObject>());

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  response_type QString [required]
    * @param[in]  client_id QString [required]
    * @param[in]  redirect_uri QString [required]
    * @param[in]  key_rules QString [required]
    */
    virtual void tykOauthAuthorizeClientPost(const QString &x_tyk_authorization, const QString &response_type, const QString &client_id, const QString &redirect_uri, const QString &key_rules);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  client_id QString [required]
    */
    virtual void tykOauthClientsApiIdClientIdDelete(const QString &x_tyk_authorization, const QString &api_id, const QString &client_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  api_id QString [required]
    */
    virtual void tykOauthClientsApiIdGet(const QString &x_tyk_authorization, const QString &api_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  oauth_client OAI_tyk_oauth_clients_create_post_request [optional]
    */
    virtual void tykOauthClientsCreatePost(const QString &x_tyk_authorization, const ::OpenAPI::OptionalParam<OAI_tyk_oauth_clients_create_post_request> &oauth_client = ::OpenAPI::OptionalParam<OAI_tyk_oauth_clients_create_post_request>());

    /**
    * @param[in]  x_tyk_authorization QString [required]
    * @param[in]  key_id QString [required]
    * @param[in]  api_id QString [required]
    */
    virtual void tykOauthRefreshKeyIdDelete(const QString &x_tyk_authorization, const QString &key_id, const QString &api_id);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    */
    virtual void tykReloadGet(const QString &x_tyk_authorization);

    /**
    * @param[in]  x_tyk_authorization QString [required]
    */
    virtual void tykReloadGroupGet(const QString &x_tyk_authorization);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tykApisApiIDDeleteCallback(OAIHttpRequestWorker *worker);
    void tykApisApiIDGetCallback(OAIHttpRequestWorker *worker);
    void tykApisApiIDPutCallback(OAIHttpRequestWorker *worker);
    void tykApisGetCallback(OAIHttpRequestWorker *worker);
    void tykApisPostCallback(OAIHttpRequestWorker *worker);
    void tykHealthGetCallback(OAIHttpRequestWorker *worker);
    void tykKeysCreatePostCallback(OAIHttpRequestWorker *worker);
    void tykKeysGetCallback(OAIHttpRequestWorker *worker);
    void tykKeysKeyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void tykKeysKeyIdPostCallback(OAIHttpRequestWorker *worker);
    void tykKeysKeyIdPutCallback(OAIHttpRequestWorker *worker);
    void tykOauthAuthorizeClientPostCallback(OAIHttpRequestWorker *worker);
    void tykOauthClientsApiIdClientIdDeleteCallback(OAIHttpRequestWorker *worker);
    void tykOauthClientsApiIdGetCallback(OAIHttpRequestWorker *worker);
    void tykOauthClientsCreatePostCallback(OAIHttpRequestWorker *worker);
    void tykOauthRefreshKeyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void tykReloadGetCallback(OAIHttpRequestWorker *worker);
    void tykReloadGroupGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tykApisApiIDDeleteSignal(OAI_tyk_apis__apiID__delete_200_response summary);
    void tykApisApiIDGetSignal(OAIAPIDefinition summary);
    void tykApisApiIDPutSignal(OAI_tyk_apis__post_200_response summary);
    void tykApisGetSignal(QList<OAIAPIDefinition> summary);
    void tykApisPostSignal(OAI_tyk_apis__post_200_response summary);
    void tykHealthGetSignal(OAI_tyk_health__get_200_response summary);
    void tykKeysCreatePostSignal(OAI_tyk_keys_create_post_200_response summary);
    void tykKeysGetSignal(OAI_tyk_keys__get_200_response summary);
    void tykKeysKeyIdDeleteSignal(OAI_tyk_apis__apiID__delete_200_response summary);
    void tykKeysKeyIdPostSignal(OAI_tyk_keys__keyId__post_200_response summary);
    void tykKeysKeyIdPutSignal(OAI_tyk_keys__keyId__put_200_response summary);
    void tykOauthAuthorizeClientPostSignal(OAI_tyk_oauth_authorize_client__post_200_response summary);
    void tykOauthClientsApiIdClientIdDeleteSignal(OAI_tyk_apis__apiID__delete_200_response summary);
    void tykOauthClientsApiIdGetSignal(QList<OAIOAuthClient> summary);
    void tykOauthClientsCreatePostSignal(OAIOAuthClient summary);
    void tykOauthRefreshKeyIdDeleteSignal(OAI_tyk_apis__apiID__delete_200_response summary);
    void tykReloadGetSignal(OAI_tyk_reload__get_200_response summary);
    void tykReloadGroupGetSignal(OAI_tyk_reload__get_200_response summary);


    void tykApisApiIDDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_apis__apiID__delete_200_response summary);
    void tykApisApiIDGetSignalFull(OAIHttpRequestWorker *worker, OAIAPIDefinition summary);
    void tykApisApiIDPutSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_apis__post_200_response summary);
    void tykApisGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAPIDefinition> summary);
    void tykApisPostSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_apis__post_200_response summary);
    void tykHealthGetSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_health__get_200_response summary);
    void tykKeysCreatePostSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_keys_create_post_200_response summary);
    void tykKeysGetSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_keys__get_200_response summary);
    void tykKeysKeyIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_apis__apiID__delete_200_response summary);
    void tykKeysKeyIdPostSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_keys__keyId__post_200_response summary);
    void tykKeysKeyIdPutSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_keys__keyId__put_200_response summary);
    void tykOauthAuthorizeClientPostSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_oauth_authorize_client__post_200_response summary);
    void tykOauthClientsApiIdClientIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_apis__apiID__delete_200_response summary);
    void tykOauthClientsApiIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOAuthClient> summary);
    void tykOauthClientsCreatePostSignalFull(OAIHttpRequestWorker *worker, OAIOAuthClient summary);
    void tykOauthRefreshKeyIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_apis__apiID__delete_200_response summary);
    void tykReloadGetSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_reload__get_200_response summary);
    void tykReloadGroupGetSignalFull(OAIHttpRequestWorker *worker, OAI_tyk_reload__get_200_response summary);

    Q_DECL_DEPRECATED_X("Use tykApisApiIDDeleteSignalError() instead")
    void tykApisApiIDDeleteSignalE(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisApiIDDeleteSignalError(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisApiIDGetSignalError() instead")
    void tykApisApiIDGetSignalE(OAIAPIDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisApiIDGetSignalError(OAIAPIDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisApiIDPutSignalError() instead")
    void tykApisApiIDPutSignalE(OAI_tyk_apis__post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisApiIDPutSignalError(OAI_tyk_apis__post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisGetSignalError() instead")
    void tykApisGetSignalE(QList<OAIAPIDefinition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisGetSignalError(QList<OAIAPIDefinition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisPostSignalError() instead")
    void tykApisPostSignalE(OAI_tyk_apis__post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisPostSignalError(OAI_tyk_apis__post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykHealthGetSignalError() instead")
    void tykHealthGetSignalE(OAI_tyk_health__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykHealthGetSignalError(OAI_tyk_health__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysCreatePostSignalError() instead")
    void tykKeysCreatePostSignalE(OAI_tyk_keys_create_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysCreatePostSignalError(OAI_tyk_keys_create_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysGetSignalError() instead")
    void tykKeysGetSignalE(OAI_tyk_keys__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysGetSignalError(OAI_tyk_keys__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysKeyIdDeleteSignalError() instead")
    void tykKeysKeyIdDeleteSignalE(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysKeyIdDeleteSignalError(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysKeyIdPostSignalError() instead")
    void tykKeysKeyIdPostSignalE(OAI_tyk_keys__keyId__post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysKeyIdPostSignalError(OAI_tyk_keys__keyId__post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysKeyIdPutSignalError() instead")
    void tykKeysKeyIdPutSignalE(OAI_tyk_keys__keyId__put_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysKeyIdPutSignalError(OAI_tyk_keys__keyId__put_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthAuthorizeClientPostSignalError() instead")
    void tykOauthAuthorizeClientPostSignalE(OAI_tyk_oauth_authorize_client__post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthAuthorizeClientPostSignalError(OAI_tyk_oauth_authorize_client__post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthClientsApiIdClientIdDeleteSignalError() instead")
    void tykOauthClientsApiIdClientIdDeleteSignalE(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthClientsApiIdClientIdDeleteSignalError(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthClientsApiIdGetSignalError() instead")
    void tykOauthClientsApiIdGetSignalE(QList<OAIOAuthClient> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthClientsApiIdGetSignalError(QList<OAIOAuthClient> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthClientsCreatePostSignalError() instead")
    void tykOauthClientsCreatePostSignalE(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthClientsCreatePostSignalError(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthRefreshKeyIdDeleteSignalError() instead")
    void tykOauthRefreshKeyIdDeleteSignalE(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthRefreshKeyIdDeleteSignalError(OAI_tyk_apis__apiID__delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykReloadGetSignalError() instead")
    void tykReloadGetSignalE(OAI_tyk_reload__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykReloadGetSignalError(OAI_tyk_reload__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykReloadGroupGetSignalError() instead")
    void tykReloadGroupGetSignalE(OAI_tyk_reload__get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tykReloadGroupGetSignalError(OAI_tyk_reload__get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tykApisApiIDDeleteSignalErrorFull() instead")
    void tykApisApiIDDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisApiIDDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisApiIDGetSignalErrorFull() instead")
    void tykApisApiIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisApiIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisApiIDPutSignalErrorFull() instead")
    void tykApisApiIDPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisApiIDPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisGetSignalErrorFull() instead")
    void tykApisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykApisPostSignalErrorFull() instead")
    void tykApisPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykApisPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykHealthGetSignalErrorFull() instead")
    void tykHealthGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykHealthGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysCreatePostSignalErrorFull() instead")
    void tykKeysCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysGetSignalErrorFull() instead")
    void tykKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysKeyIdDeleteSignalErrorFull() instead")
    void tykKeysKeyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysKeyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysKeyIdPostSignalErrorFull() instead")
    void tykKeysKeyIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysKeyIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykKeysKeyIdPutSignalErrorFull() instead")
    void tykKeysKeyIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykKeysKeyIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthAuthorizeClientPostSignalErrorFull() instead")
    void tykOauthAuthorizeClientPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthAuthorizeClientPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthClientsApiIdClientIdDeleteSignalErrorFull() instead")
    void tykOauthClientsApiIdClientIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthClientsApiIdClientIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthClientsApiIdGetSignalErrorFull() instead")
    void tykOauthClientsApiIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthClientsApiIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthClientsCreatePostSignalErrorFull() instead")
    void tykOauthClientsCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthClientsCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykOauthRefreshKeyIdDeleteSignalErrorFull() instead")
    void tykOauthRefreshKeyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykOauthRefreshKeyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykReloadGetSignalErrorFull() instead")
    void tykReloadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykReloadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tykReloadGroupGetSignalErrorFull() instead")
    void tykReloadGroupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tykReloadGroupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
