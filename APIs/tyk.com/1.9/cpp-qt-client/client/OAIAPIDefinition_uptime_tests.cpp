/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_uptime_tests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_uptime_tests::OAIAPIDefinition_uptime_tests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_uptime_tests::OAIAPIDefinition_uptime_tests() {
    this->initializeModel();
}

OAIAPIDefinition_uptime_tests::~OAIAPIDefinition_uptime_tests() {}

void OAIAPIDefinition_uptime_tests::initializeModel() {

    m_cors_isSet = false;
    m_cors_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_allowed_ips_isSet = false;
    m_allowed_ips_isValid = false;

    m_cache_options_isSet = false;
    m_cache_options_isValid = false;

    m_check_list_isSet = false;
    m_check_list_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_custom_middleware_isSet = false;
    m_custom_middleware_isValid = false;

    m_do_not_track_isSet = false;
    m_do_not_track_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_dont_set_quota_on_create_isSet = false;
    m_dont_set_quota_on_create_isValid = false;

    m_enable_batch_request_support_isSet = false;
    m_enable_batch_request_support_isValid = false;

    m_enable_ip_whitelisting_isSet = false;
    m_enable_ip_whitelisting_isValid = false;

    m_event_handlers_isSet = false;
    m_event_handlers_isValid = false;

    m_expire_analytics_after_isSet = false;
    m_expire_analytics_after_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_response_processors_isSet = false;
    m_response_processors_isValid = false;

    m_session_lifetime_isSet = false;
    m_session_lifetime_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAPIDefinition_uptime_tests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_uptime_tests::fromJsonObject(QJsonObject json) {

    m_cors_isValid = ::OpenAPI::fromJsonValue(m_cors, json[QString("CORS")]);
    m_cors_isSet = !json[QString("CORS")].isNull() && m_cors_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_allowed_ips, json[QString("allowed_ips")]);
    m_allowed_ips_isSet = !json[QString("allowed_ips")].isNull() && m_allowed_ips_isValid;

    m_cache_options_isValid = ::OpenAPI::fromJsonValue(m_cache_options, json[QString("cache_options")]);
    m_cache_options_isSet = !json[QString("cache_options")].isNull() && m_cache_options_isValid;

    m_check_list_isValid = ::OpenAPI::fromJsonValue(m_check_list, json[QString("check_list")]);
    m_check_list_isSet = !json[QString("check_list")].isNull() && m_check_list_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_custom_middleware_isValid = ::OpenAPI::fromJsonValue(m_custom_middleware, json[QString("custom_middleware")]);
    m_custom_middleware_isSet = !json[QString("custom_middleware")].isNull() && m_custom_middleware_isValid;

    m_do_not_track_isValid = ::OpenAPI::fromJsonValue(m_do_not_track, json[QString("do_not_track")]);
    m_do_not_track_isSet = !json[QString("do_not_track")].isNull() && m_do_not_track_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_dont_set_quota_on_create_isValid = ::OpenAPI::fromJsonValue(m_dont_set_quota_on_create, json[QString("dont_set_quota_on_create")]);
    m_dont_set_quota_on_create_isSet = !json[QString("dont_set_quota_on_create")].isNull() && m_dont_set_quota_on_create_isValid;

    m_enable_batch_request_support_isValid = ::OpenAPI::fromJsonValue(m_enable_batch_request_support, json[QString("enable_batch_request_support")]);
    m_enable_batch_request_support_isSet = !json[QString("enable_batch_request_support")].isNull() && m_enable_batch_request_support_isValid;

    m_enable_ip_whitelisting_isValid = ::OpenAPI::fromJsonValue(m_enable_ip_whitelisting, json[QString("enable_ip_whitelisting")]);
    m_enable_ip_whitelisting_isSet = !json[QString("enable_ip_whitelisting")].isNull() && m_enable_ip_whitelisting_isValid;

    m_event_handlers_isValid = ::OpenAPI::fromJsonValue(m_event_handlers, json[QString("event_handlers")]);
    m_event_handlers_isSet = !json[QString("event_handlers")].isNull() && m_event_handlers_isValid;

    m_expire_analytics_after_isValid = ::OpenAPI::fromJsonValue(m_expire_analytics_after, json[QString("expire_analytics_after")]);
    m_expire_analytics_after_isSet = !json[QString("expire_analytics_after")].isNull() && m_expire_analytics_after_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_response_processors_isValid = ::OpenAPI::fromJsonValue(m_response_processors, json[QString("response_processors")]);
    m_response_processors_isSet = !json[QString("response_processors")].isNull() && m_response_processors_isValid;

    m_session_lifetime_isValid = ::OpenAPI::fromJsonValue(m_session_lifetime, json[QString("session_lifetime")]);
    m_session_lifetime_isSet = !json[QString("session_lifetime")].isNull() && m_session_lifetime_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIAPIDefinition_uptime_tests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_uptime_tests::asJsonObject() const {
    QJsonObject obj;
    if (m_cors.isSet()) {
        obj.insert(QString("CORS"), ::OpenAPI::toJsonValue(m_cors));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_allowed_ips.size() > 0) {
        obj.insert(QString("allowed_ips"), ::OpenAPI::toJsonValue(m_allowed_ips));
    }
    if (m_cache_options.isSet()) {
        obj.insert(QString("cache_options"), ::OpenAPI::toJsonValue(m_cache_options));
    }
    if (m_check_list.size() > 0) {
        obj.insert(QString("check_list"), ::OpenAPI::toJsonValue(m_check_list));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_custom_middleware.isSet()) {
        obj.insert(QString("custom_middleware"), ::OpenAPI::toJsonValue(m_custom_middleware));
    }
    if (m_do_not_track_isSet) {
        obj.insert(QString("do_not_track"), ::OpenAPI::toJsonValue(m_do_not_track));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_dont_set_quota_on_create_isSet) {
        obj.insert(QString("dont_set_quota_on_create"), ::OpenAPI::toJsonValue(m_dont_set_quota_on_create));
    }
    if (m_enable_batch_request_support_isSet) {
        obj.insert(QString("enable_batch_request_support"), ::OpenAPI::toJsonValue(m_enable_batch_request_support));
    }
    if (m_enable_ip_whitelisting_isSet) {
        obj.insert(QString("enable_ip_whitelisting"), ::OpenAPI::toJsonValue(m_enable_ip_whitelisting));
    }
    if (m_event_handlers_isSet) {
        obj.insert(QString("event_handlers"), ::OpenAPI::toJsonValue(m_event_handlers));
    }
    if (m_expire_analytics_after_isSet) {
        obj.insert(QString("expire_analytics_after"), ::OpenAPI::toJsonValue(m_expire_analytics_after));
    }
    if (m_proxy.isSet()) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_response_processors.size() > 0) {
        obj.insert(QString("response_processors"), ::OpenAPI::toJsonValue(m_response_processors));
    }
    if (m_session_lifetime_isSet) {
        obj.insert(QString("session_lifetime"), ::OpenAPI::toJsonValue(m_session_lifetime));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIAPIDefinition_uptime_tests_CORS OAIAPIDefinition_uptime_tests::getCors() const {
    return m_cors;
}
void OAIAPIDefinition_uptime_tests::setCors(const OAIAPIDefinition_uptime_tests_CORS &cors) {
    m_cors = cors;
    m_cors_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_cors_Set() const{
    return m_cors_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_cors_Valid() const{
    return m_cors_isValid;
}

bool OAIAPIDefinition_uptime_tests::isActive() const {
    return m_active;
}
void OAIAPIDefinition_uptime_tests::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_active_Valid() const{
    return m_active_isValid;
}

QList<QString> OAIAPIDefinition_uptime_tests::getAllowedIps() const {
    return m_allowed_ips;
}
void OAIAPIDefinition_uptime_tests::setAllowedIps(const QList<QString> &allowed_ips) {
    m_allowed_ips = allowed_ips;
    m_allowed_ips_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_allowed_ips_Set() const{
    return m_allowed_ips_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_allowed_ips_Valid() const{
    return m_allowed_ips_isValid;
}

OAIAPIDefinition_uptime_tests_cache_options OAIAPIDefinition_uptime_tests::getCacheOptions() const {
    return m_cache_options;
}
void OAIAPIDefinition_uptime_tests::setCacheOptions(const OAIAPIDefinition_uptime_tests_cache_options &cache_options) {
    m_cache_options = cache_options;
    m_cache_options_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_cache_options_Set() const{
    return m_cache_options_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_cache_options_Valid() const{
    return m_cache_options_isValid;
}

QList<OAIAPIDefinition_uptime_tests_check_list_inner> OAIAPIDefinition_uptime_tests::getCheckList() const {
    return m_check_list;
}
void OAIAPIDefinition_uptime_tests::setCheckList(const QList<OAIAPIDefinition_uptime_tests_check_list_inner> &check_list) {
    m_check_list = check_list;
    m_check_list_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_check_list_Set() const{
    return m_check_list_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_check_list_Valid() const{
    return m_check_list_isValid;
}

OAIAPIDefinition_uptime_tests_config OAIAPIDefinition_uptime_tests::getConfig() const {
    return m_config;
}
void OAIAPIDefinition_uptime_tests::setConfig(const OAIAPIDefinition_uptime_tests_config &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_config_Set() const{
    return m_config_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_config_Valid() const{
    return m_config_isValid;
}

OAIAPIDefinition_uptime_tests_custom_middleware OAIAPIDefinition_uptime_tests::getCustomMiddleware() const {
    return m_custom_middleware;
}
void OAIAPIDefinition_uptime_tests::setCustomMiddleware(const OAIAPIDefinition_uptime_tests_custom_middleware &custom_middleware) {
    m_custom_middleware = custom_middleware;
    m_custom_middleware_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_custom_middleware_Set() const{
    return m_custom_middleware_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_custom_middleware_Valid() const{
    return m_custom_middleware_isValid;
}

QString OAIAPIDefinition_uptime_tests::getDoNotTrack() const {
    return m_do_not_track;
}
void OAIAPIDefinition_uptime_tests::setDoNotTrack(const QString &do_not_track) {
    m_do_not_track = do_not_track;
    m_do_not_track_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_do_not_track_Set() const{
    return m_do_not_track_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_do_not_track_Valid() const{
    return m_do_not_track_isValid;
}

QString OAIAPIDefinition_uptime_tests::getDomain() const {
    return m_domain;
}
void OAIAPIDefinition_uptime_tests::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIAPIDefinition_uptime_tests::isDontSetQuotaOnCreate() const {
    return m_dont_set_quota_on_create;
}
void OAIAPIDefinition_uptime_tests::setDontSetQuotaOnCreate(const bool &dont_set_quota_on_create) {
    m_dont_set_quota_on_create = dont_set_quota_on_create;
    m_dont_set_quota_on_create_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_dont_set_quota_on_create_Set() const{
    return m_dont_set_quota_on_create_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_dont_set_quota_on_create_Valid() const{
    return m_dont_set_quota_on_create_isValid;
}

bool OAIAPIDefinition_uptime_tests::isEnableBatchRequestSupport() const {
    return m_enable_batch_request_support;
}
void OAIAPIDefinition_uptime_tests::setEnableBatchRequestSupport(const bool &enable_batch_request_support) {
    m_enable_batch_request_support = enable_batch_request_support;
    m_enable_batch_request_support_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_enable_batch_request_support_Set() const{
    return m_enable_batch_request_support_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_enable_batch_request_support_Valid() const{
    return m_enable_batch_request_support_isValid;
}

bool OAIAPIDefinition_uptime_tests::isEnableIpWhitelisting() const {
    return m_enable_ip_whitelisting;
}
void OAIAPIDefinition_uptime_tests::setEnableIpWhitelisting(const bool &enable_ip_whitelisting) {
    m_enable_ip_whitelisting = enable_ip_whitelisting;
    m_enable_ip_whitelisting_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_enable_ip_whitelisting_Set() const{
    return m_enable_ip_whitelisting_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_enable_ip_whitelisting_Valid() const{
    return m_enable_ip_whitelisting_isValid;
}

OAIObject OAIAPIDefinition_uptime_tests::getEventHandlers() const {
    return m_event_handlers;
}
void OAIAPIDefinition_uptime_tests::setEventHandlers(const OAIObject &event_handlers) {
    m_event_handlers = event_handlers;
    m_event_handlers_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_event_handlers_Set() const{
    return m_event_handlers_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_event_handlers_Valid() const{
    return m_event_handlers_isValid;
}

double OAIAPIDefinition_uptime_tests::getExpireAnalyticsAfter() const {
    return m_expire_analytics_after;
}
void OAIAPIDefinition_uptime_tests::setExpireAnalyticsAfter(const double &expire_analytics_after) {
    m_expire_analytics_after = expire_analytics_after;
    m_expire_analytics_after_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_expire_analytics_after_Set() const{
    return m_expire_analytics_after_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_expire_analytics_after_Valid() const{
    return m_expire_analytics_after_isValid;
}

OAIAPIDefinition_uptime_tests_proxy OAIAPIDefinition_uptime_tests::getProxy() const {
    return m_proxy;
}
void OAIAPIDefinition_uptime_tests::setProxy(const OAIAPIDefinition_uptime_tests_proxy &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_proxy_Valid() const{
    return m_proxy_isValid;
}

QList<OAIAPIDefinition_uptime_tests_response_processors_inner> OAIAPIDefinition_uptime_tests::getResponseProcessors() const {
    return m_response_processors;
}
void OAIAPIDefinition_uptime_tests::setResponseProcessors(const QList<OAIAPIDefinition_uptime_tests_response_processors_inner> &response_processors) {
    m_response_processors = response_processors;
    m_response_processors_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_response_processors_Set() const{
    return m_response_processors_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_response_processors_Valid() const{
    return m_response_processors_isValid;
}

double OAIAPIDefinition_uptime_tests::getSessionLifetime() const {
    return m_session_lifetime;
}
void OAIAPIDefinition_uptime_tests::setSessionLifetime(const double &session_lifetime) {
    m_session_lifetime = session_lifetime;
    m_session_lifetime_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_session_lifetime_Set() const{
    return m_session_lifetime_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_session_lifetime_Valid() const{
    return m_session_lifetime_isValid;
}

QList<QString> OAIAPIDefinition_uptime_tests::getTags() const {
    return m_tags;
}
void OAIAPIDefinition_uptime_tests::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAPIDefinition_uptime_tests::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAPIDefinition_uptime_tests::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAPIDefinition_uptime_tests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_middleware.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_set_quota_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_batch_request_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ip_whitelisting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_handlers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_analytics_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_processors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_uptime_tests::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
