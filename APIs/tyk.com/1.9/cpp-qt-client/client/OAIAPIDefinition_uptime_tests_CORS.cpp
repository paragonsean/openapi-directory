/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_uptime_tests_CORS.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_uptime_tests_CORS::OAIAPIDefinition_uptime_tests_CORS(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_uptime_tests_CORS::OAIAPIDefinition_uptime_tests_CORS() {
    this->initializeModel();
}

OAIAPIDefinition_uptime_tests_CORS::~OAIAPIDefinition_uptime_tests_CORS() {}

void OAIAPIDefinition_uptime_tests_CORS::initializeModel() {

    m_allow_credentials_isSet = false;
    m_allow_credentials_isValid = false;

    m_allowed_headers_isSet = false;
    m_allowed_headers_isValid = false;

    m_allowed_methods_isSet = false;
    m_allowed_methods_isValid = false;

    m_allowed_origins_isSet = false;
    m_allowed_origins_isValid = false;

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_enable_isSet = false;
    m_enable_isValid = false;

    m_exposed_headers_isSet = false;
    m_exposed_headers_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;

    m_options_passthrough_isSet = false;
    m_options_passthrough_isValid = false;
}

void OAIAPIDefinition_uptime_tests_CORS::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_uptime_tests_CORS::fromJsonObject(QJsonObject json) {

    m_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_allow_credentials, json[QString("allow_credentials")]);
    m_allow_credentials_isSet = !json[QString("allow_credentials")].isNull() && m_allow_credentials_isValid;

    m_allowed_headers_isValid = ::OpenAPI::fromJsonValue(m_allowed_headers, json[QString("allowed_headers")]);
    m_allowed_headers_isSet = !json[QString("allowed_headers")].isNull() && m_allowed_headers_isValid;

    m_allowed_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_methods, json[QString("allowed_methods")]);
    m_allowed_methods_isSet = !json[QString("allowed_methods")].isNull() && m_allowed_methods_isValid;

    m_allowed_origins_isValid = ::OpenAPI::fromJsonValue(m_allowed_origins, json[QString("allowed_origins")]);
    m_allowed_origins_isSet = !json[QString("allowed_origins")].isNull() && m_allowed_origins_isValid;

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_enable_isValid = ::OpenAPI::fromJsonValue(m_enable, json[QString("enable")]);
    m_enable_isSet = !json[QString("enable")].isNull() && m_enable_isValid;

    m_exposed_headers_isValid = ::OpenAPI::fromJsonValue(m_exposed_headers, json[QString("exposed_headers")]);
    m_exposed_headers_isSet = !json[QString("exposed_headers")].isNull() && m_exposed_headers_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("max_age")]);
    m_max_age_isSet = !json[QString("max_age")].isNull() && m_max_age_isValid;

    m_options_passthrough_isValid = ::OpenAPI::fromJsonValue(m_options_passthrough, json[QString("options_passthrough")]);
    m_options_passthrough_isSet = !json[QString("options_passthrough")].isNull() && m_options_passthrough_isValid;
}

QString OAIAPIDefinition_uptime_tests_CORS::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_uptime_tests_CORS::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_credentials_isSet) {
        obj.insert(QString("allow_credentials"), ::OpenAPI::toJsonValue(m_allow_credentials));
    }
    if (m_allowed_headers.size() > 0) {
        obj.insert(QString("allowed_headers"), ::OpenAPI::toJsonValue(m_allowed_headers));
    }
    if (m_allowed_methods.size() > 0) {
        obj.insert(QString("allowed_methods"), ::OpenAPI::toJsonValue(m_allowed_methods));
    }
    if (m_allowed_origins.size() > 0) {
        obj.insert(QString("allowed_origins"), ::OpenAPI::toJsonValue(m_allowed_origins));
    }
    if (m_debug_isSet) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_enable_isSet) {
        obj.insert(QString("enable"), ::OpenAPI::toJsonValue(m_enable));
    }
    if (m_exposed_headers.size() > 0) {
        obj.insert(QString("exposed_headers"), ::OpenAPI::toJsonValue(m_exposed_headers));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("max_age"), ::OpenAPI::toJsonValue(m_max_age));
    }
    if (m_options_passthrough_isSet) {
        obj.insert(QString("options_passthrough"), ::OpenAPI::toJsonValue(m_options_passthrough));
    }
    return obj;
}

bool OAIAPIDefinition_uptime_tests_CORS::isAllowCredentials() const {
    return m_allow_credentials;
}
void OAIAPIDefinition_uptime_tests_CORS::setAllowCredentials(const bool &allow_credentials) {
    m_allow_credentials = allow_credentials;
    m_allow_credentials_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allow_credentials_Set() const{
    return m_allow_credentials_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allow_credentials_Valid() const{
    return m_allow_credentials_isValid;
}

QList<QString> OAIAPIDefinition_uptime_tests_CORS::getAllowedHeaders() const {
    return m_allowed_headers;
}
void OAIAPIDefinition_uptime_tests_CORS::setAllowedHeaders(const QList<QString> &allowed_headers) {
    m_allowed_headers = allowed_headers;
    m_allowed_headers_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allowed_headers_Set() const{
    return m_allowed_headers_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allowed_headers_Valid() const{
    return m_allowed_headers_isValid;
}

QList<QString> OAIAPIDefinition_uptime_tests_CORS::getAllowedMethods() const {
    return m_allowed_methods;
}
void OAIAPIDefinition_uptime_tests_CORS::setAllowedMethods(const QList<QString> &allowed_methods) {
    m_allowed_methods = allowed_methods;
    m_allowed_methods_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allowed_methods_Set() const{
    return m_allowed_methods_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allowed_methods_Valid() const{
    return m_allowed_methods_isValid;
}

QList<QString> OAIAPIDefinition_uptime_tests_CORS::getAllowedOrigins() const {
    return m_allowed_origins;
}
void OAIAPIDefinition_uptime_tests_CORS::setAllowedOrigins(const QList<QString> &allowed_origins) {
    m_allowed_origins = allowed_origins;
    m_allowed_origins_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allowed_origins_Set() const{
    return m_allowed_origins_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_allowed_origins_Valid() const{
    return m_allowed_origins_isValid;
}

bool OAIAPIDefinition_uptime_tests_CORS::isDebug() const {
    return m_debug;
}
void OAIAPIDefinition_uptime_tests_CORS::setDebug(const bool &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_debug_Valid() const{
    return m_debug_isValid;
}

bool OAIAPIDefinition_uptime_tests_CORS::isEnable() const {
    return m_enable;
}
void OAIAPIDefinition_uptime_tests_CORS::setEnable(const bool &enable) {
    m_enable = enable;
    m_enable_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_enable_Set() const{
    return m_enable_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_enable_Valid() const{
    return m_enable_isValid;
}

QList<QString> OAIAPIDefinition_uptime_tests_CORS::getExposedHeaders() const {
    return m_exposed_headers;
}
void OAIAPIDefinition_uptime_tests_CORS::setExposedHeaders(const QList<QString> &exposed_headers) {
    m_exposed_headers = exposed_headers;
    m_exposed_headers_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_exposed_headers_Set() const{
    return m_exposed_headers_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_exposed_headers_Valid() const{
    return m_exposed_headers_isValid;
}

double OAIAPIDefinition_uptime_tests_CORS::getMaxAge() const {
    return m_max_age;
}
void OAIAPIDefinition_uptime_tests_CORS::setMaxAge(const double &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_max_age_Valid() const{
    return m_max_age_isValid;
}

bool OAIAPIDefinition_uptime_tests_CORS::isOptionsPassthrough() const {
    return m_options_passthrough;
}
void OAIAPIDefinition_uptime_tests_CORS::setOptionsPassthrough(const bool &options_passthrough) {
    m_options_passthrough = options_passthrough;
    m_options_passthrough_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_options_passthrough_Set() const{
    return m_options_passthrough_isSet;
}

bool OAIAPIDefinition_uptime_tests_CORS::is_options_passthrough_Valid() const{
    return m_options_passthrough_isValid;
}

bool OAIAPIDefinition_uptime_tests_CORS::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposed_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_uptime_tests_CORS::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
