/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointMethodMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointMethodMeta::OAIEndpointMethodMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointMethodMeta::OAIEndpointMethodMeta() {
    this->initializeModel();
}

OAIEndpointMethodMeta::~OAIEndpointMethodMeta() {}

void OAIEndpointMethodMeta::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;
}

void OAIEndpointMethodMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointMethodMeta::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;
}

QString OAIEndpointMethodMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointMethodMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    return obj;
}

QString OAIEndpointMethodMeta::getAction() const {
    return m_action;
}
void OAIEndpointMethodMeta::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIEndpointMethodMeta::is_action_Set() const{
    return m_action_isSet;
}

bool OAIEndpointMethodMeta::is_action_Valid() const{
    return m_action_isValid;
}

double OAIEndpointMethodMeta::getCode() const {
    return m_code;
}
void OAIEndpointMethodMeta::setCode(const double &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIEndpointMethodMeta::is_code_Set() const{
    return m_code_isSet;
}

bool OAIEndpointMethodMeta::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIEndpointMethodMeta::getData() const {
    return m_data;
}
void OAIEndpointMethodMeta::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEndpointMethodMeta::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEndpointMethodMeta::is_data_Valid() const{
    return m_data_isValid;
}

OAIObject OAIEndpointMethodMeta::getHeaders() const {
    return m_headers;
}
void OAIEndpointMethodMeta::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIEndpointMethodMeta::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIEndpointMethodMeta::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIEndpointMethodMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointMethodMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
