/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_uptime_tests_cache_options.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_uptime_tests_cache_options::OAIAPIDefinition_uptime_tests_cache_options(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_uptime_tests_cache_options::OAIAPIDefinition_uptime_tests_cache_options() {
    this->initializeModel();
}

OAIAPIDefinition_uptime_tests_cache_options::~OAIAPIDefinition_uptime_tests_cache_options() {}

void OAIAPIDefinition_uptime_tests_cache_options::initializeModel() {

    m_cache_all_safe_requests_isSet = false;
    m_cache_all_safe_requests_isValid = false;

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_enable_cache_isSet = false;
    m_enable_cache_isValid = false;

    m_enable_upstream_cache_control_isSet = false;
    m_enable_upstream_cache_control_isValid = false;
}

void OAIAPIDefinition_uptime_tests_cache_options::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_uptime_tests_cache_options::fromJsonObject(QJsonObject json) {

    m_cache_all_safe_requests_isValid = ::OpenAPI::fromJsonValue(m_cache_all_safe_requests, json[QString("cache_all_safe_requests")]);
    m_cache_all_safe_requests_isSet = !json[QString("cache_all_safe_requests")].isNull() && m_cache_all_safe_requests_isValid;

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_enable_cache_isValid = ::OpenAPI::fromJsonValue(m_enable_cache, json[QString("enable_cache")]);
    m_enable_cache_isSet = !json[QString("enable_cache")].isNull() && m_enable_cache_isValid;

    m_enable_upstream_cache_control_isValid = ::OpenAPI::fromJsonValue(m_enable_upstream_cache_control, json[QString("enable_upstream_cache_control")]);
    m_enable_upstream_cache_control_isSet = !json[QString("enable_upstream_cache_control")].isNull() && m_enable_upstream_cache_control_isValid;
}

QString OAIAPIDefinition_uptime_tests_cache_options::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_uptime_tests_cache_options::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_all_safe_requests_isSet) {
        obj.insert(QString("cache_all_safe_requests"), ::OpenAPI::toJsonValue(m_cache_all_safe_requests));
    }
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_enable_cache_isSet) {
        obj.insert(QString("enable_cache"), ::OpenAPI::toJsonValue(m_enable_cache));
    }
    if (m_enable_upstream_cache_control_isSet) {
        obj.insert(QString("enable_upstream_cache_control"), ::OpenAPI::toJsonValue(m_enable_upstream_cache_control));
    }
    return obj;
}

bool OAIAPIDefinition_uptime_tests_cache_options::isCacheAllSafeRequests() const {
    return m_cache_all_safe_requests;
}
void OAIAPIDefinition_uptime_tests_cache_options::setCacheAllSafeRequests(const bool &cache_all_safe_requests) {
    m_cache_all_safe_requests = cache_all_safe_requests;
    m_cache_all_safe_requests_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_cache_all_safe_requests_Set() const{
    return m_cache_all_safe_requests_isSet;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_cache_all_safe_requests_Valid() const{
    return m_cache_all_safe_requests_isValid;
}

double OAIAPIDefinition_uptime_tests_cache_options::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIAPIDefinition_uptime_tests_cache_options::setCacheTimeout(const double &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

bool OAIAPIDefinition_uptime_tests_cache_options::isEnableCache() const {
    return m_enable_cache;
}
void OAIAPIDefinition_uptime_tests_cache_options::setEnableCache(const bool &enable_cache) {
    m_enable_cache = enable_cache;
    m_enable_cache_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_enable_cache_Set() const{
    return m_enable_cache_isSet;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_enable_cache_Valid() const{
    return m_enable_cache_isValid;
}

bool OAIAPIDefinition_uptime_tests_cache_options::isEnableUpstreamCacheControl() const {
    return m_enable_upstream_cache_control;
}
void OAIAPIDefinition_uptime_tests_cache_options::setEnableUpstreamCacheControl(const bool &enable_upstream_cache_control) {
    m_enable_upstream_cache_control = enable_upstream_cache_control;
    m_enable_upstream_cache_control_isSet = true;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_enable_upstream_cache_control_Set() const{
    return m_enable_upstream_cache_control_isSet;
}

bool OAIAPIDefinition_uptime_tests_cache_options::is_enable_upstream_cache_control_Valid() const{
    return m_enable_upstream_cache_control_isValid;
}

bool OAIAPIDefinition_uptime_tests_cache_options::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_all_safe_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_upstream_cache_control_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_uptime_tests_cache_options::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
