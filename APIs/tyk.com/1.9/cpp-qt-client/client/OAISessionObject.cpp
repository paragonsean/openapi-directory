/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionObject::OAISessionObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionObject::OAISessionObject() {
    this->initializeModel();
}

OAISessionObject::~OAISessionObject() {}

void OAISessionObject::initializeModel() {

    m_access_rights_isSet = false;
    m_access_rights_isValid = false;

    m_allowance_isSet = false;
    m_allowance_isValid = false;

    m_apply_policy_id_isSet = false;
    m_apply_policy_id_isValid = false;

    m_basic_auth_data_isSet = false;
    m_basic_auth_data_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_hmac_enabled_isSet = false;
    m_hmac_enabled_isValid = false;

    m_hmac_string_isSet = false;
    m_hmac_string_isValid = false;

    m_is_inactive_isSet = false;
    m_is_inactive_isValid = false;

    m_jwt_data_isSet = false;
    m_jwt_data_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_monitor_isSet = false;
    m_monitor_isValid = false;

    m_oauth_client_id_isSet = false;
    m_oauth_client_id_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_per_isSet = false;
    m_per_isValid = false;

    m_quota_max_isSet = false;
    m_quota_max_isValid = false;

    m_quota_remaining_isSet = false;
    m_quota_remaining_isValid = false;

    m_quota_renewal_rate_isSet = false;
    m_quota_renewal_rate_isValid = false;

    m_quota_renews_isSet = false;
    m_quota_renews_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISessionObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionObject::fromJsonObject(QJsonObject json) {

    m_access_rights_isValid = ::OpenAPI::fromJsonValue(m_access_rights, json[QString("access_rights")]);
    m_access_rights_isSet = !json[QString("access_rights")].isNull() && m_access_rights_isValid;

    m_allowance_isValid = ::OpenAPI::fromJsonValue(m_allowance, json[QString("allowance")]);
    m_allowance_isSet = !json[QString("allowance")].isNull() && m_allowance_isValid;

    m_apply_policy_id_isValid = ::OpenAPI::fromJsonValue(m_apply_policy_id, json[QString("apply_policy_id")]);
    m_apply_policy_id_isSet = !json[QString("apply_policy_id")].isNull() && m_apply_policy_id_isValid;

    m_basic_auth_data_isValid = ::OpenAPI::fromJsonValue(m_basic_auth_data, json[QString("basic_auth_data")]);
    m_basic_auth_data_isSet = !json[QString("basic_auth_data")].isNull() && m_basic_auth_data_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_hmac_enabled_isValid = ::OpenAPI::fromJsonValue(m_hmac_enabled, json[QString("hmac_enabled")]);
    m_hmac_enabled_isSet = !json[QString("hmac_enabled")].isNull() && m_hmac_enabled_isValid;

    m_hmac_string_isValid = ::OpenAPI::fromJsonValue(m_hmac_string, json[QString("hmac_string")]);
    m_hmac_string_isSet = !json[QString("hmac_string")].isNull() && m_hmac_string_isValid;

    m_is_inactive_isValid = ::OpenAPI::fromJsonValue(m_is_inactive, json[QString("is_inactive")]);
    m_is_inactive_isSet = !json[QString("is_inactive")].isNull() && m_is_inactive_isValid;

    m_jwt_data_isValid = ::OpenAPI::fromJsonValue(m_jwt_data, json[QString("jwt_data")]);
    m_jwt_data_isSet = !json[QString("jwt_data")].isNull() && m_jwt_data_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("meta_data")]);
    m_meta_data_isSet = !json[QString("meta_data")].isNull() && m_meta_data_isValid;

    m_monitor_isValid = ::OpenAPI::fromJsonValue(m_monitor, json[QString("monitor")]);
    m_monitor_isSet = !json[QString("monitor")].isNull() && m_monitor_isValid;

    m_oauth_client_id_isValid = ::OpenAPI::fromJsonValue(m_oauth_client_id, json[QString("oauth_client_id")]);
    m_oauth_client_id_isSet = !json[QString("oauth_client_id")].isNull() && m_oauth_client_id_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("org_id")]);
    m_org_id_isSet = !json[QString("org_id")].isNull() && m_org_id_isValid;

    m_per_isValid = ::OpenAPI::fromJsonValue(m_per, json[QString("per")]);
    m_per_isSet = !json[QString("per")].isNull() && m_per_isValid;

    m_quota_max_isValid = ::OpenAPI::fromJsonValue(m_quota_max, json[QString("quota_max")]);
    m_quota_max_isSet = !json[QString("quota_max")].isNull() && m_quota_max_isValid;

    m_quota_remaining_isValid = ::OpenAPI::fromJsonValue(m_quota_remaining, json[QString("quota_remaining")]);
    m_quota_remaining_isSet = !json[QString("quota_remaining")].isNull() && m_quota_remaining_isValid;

    m_quota_renewal_rate_isValid = ::OpenAPI::fromJsonValue(m_quota_renewal_rate, json[QString("quota_renewal_rate")]);
    m_quota_renewal_rate_isSet = !json[QString("quota_renewal_rate")].isNull() && m_quota_renewal_rate_isValid;

    m_quota_renews_isValid = ::OpenAPI::fromJsonValue(m_quota_renews, json[QString("quota_renews")]);
    m_quota_renews_isSet = !json[QString("quota_renews")].isNull() && m_quota_renews_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISessionObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionObject::asJsonObject() const {
    QJsonObject obj;
    if (m_access_rights.size() > 0) {
        obj.insert(QString("access_rights"), ::OpenAPI::toJsonValue(m_access_rights));
    }
    if (m_allowance_isSet) {
        obj.insert(QString("allowance"), ::OpenAPI::toJsonValue(m_allowance));
    }
    if (m_apply_policy_id_isSet) {
        obj.insert(QString("apply_policy_id"), ::OpenAPI::toJsonValue(m_apply_policy_id));
    }
    if (m_basic_auth_data.isSet()) {
        obj.insert(QString("basic_auth_data"), ::OpenAPI::toJsonValue(m_basic_auth_data));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_hmac_enabled_isSet) {
        obj.insert(QString("hmac_enabled"), ::OpenAPI::toJsonValue(m_hmac_enabled));
    }
    if (m_hmac_string_isSet) {
        obj.insert(QString("hmac_string"), ::OpenAPI::toJsonValue(m_hmac_string));
    }
    if (m_is_inactive_isSet) {
        obj.insert(QString("is_inactive"), ::OpenAPI::toJsonValue(m_is_inactive));
    }
    if (m_jwt_data.isSet()) {
        obj.insert(QString("jwt_data"), ::OpenAPI::toJsonValue(m_jwt_data));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("meta_data"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_monitor.isSet()) {
        obj.insert(QString("monitor"), ::OpenAPI::toJsonValue(m_monitor));
    }
    if (m_oauth_client_id_isSet) {
        obj.insert(QString("oauth_client_id"), ::OpenAPI::toJsonValue(m_oauth_client_id));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("org_id"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_per_isSet) {
        obj.insert(QString("per"), ::OpenAPI::toJsonValue(m_per));
    }
    if (m_quota_max_isSet) {
        obj.insert(QString("quota_max"), ::OpenAPI::toJsonValue(m_quota_max));
    }
    if (m_quota_remaining_isSet) {
        obj.insert(QString("quota_remaining"), ::OpenAPI::toJsonValue(m_quota_remaining));
    }
    if (m_quota_renewal_rate_isSet) {
        obj.insert(QString("quota_renewal_rate"), ::OpenAPI::toJsonValue(m_quota_renewal_rate));
    }
    if (m_quota_renews_isSet) {
        obj.insert(QString("quota_renews"), ::OpenAPI::toJsonValue(m_quota_renews));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QMap<QString, OAIAccessRights> OAISessionObject::getAccessRights() const {
    return m_access_rights;
}
void OAISessionObject::setAccessRights(const QMap<QString, OAIAccessRights> &access_rights) {
    m_access_rights = access_rights;
    m_access_rights_isSet = true;
}

bool OAISessionObject::is_access_rights_Set() const{
    return m_access_rights_isSet;
}

bool OAISessionObject::is_access_rights_Valid() const{
    return m_access_rights_isValid;
}

double OAISessionObject::getAllowance() const {
    return m_allowance;
}
void OAISessionObject::setAllowance(const double &allowance) {
    m_allowance = allowance;
    m_allowance_isSet = true;
}

bool OAISessionObject::is_allowance_Set() const{
    return m_allowance_isSet;
}

bool OAISessionObject::is_allowance_Valid() const{
    return m_allowance_isValid;
}

QString OAISessionObject::getApplyPolicyId() const {
    return m_apply_policy_id;
}
void OAISessionObject::setApplyPolicyId(const QString &apply_policy_id) {
    m_apply_policy_id = apply_policy_id;
    m_apply_policy_id_isSet = true;
}

bool OAISessionObject::is_apply_policy_id_Set() const{
    return m_apply_policy_id_isSet;
}

bool OAISessionObject::is_apply_policy_id_Valid() const{
    return m_apply_policy_id_isValid;
}

OAISessionObject_basic_auth_data OAISessionObject::getBasicAuthData() const {
    return m_basic_auth_data;
}
void OAISessionObject::setBasicAuthData(const OAISessionObject_basic_auth_data &basic_auth_data) {
    m_basic_auth_data = basic_auth_data;
    m_basic_auth_data_isSet = true;
}

bool OAISessionObject::is_basic_auth_data_Set() const{
    return m_basic_auth_data_isSet;
}

bool OAISessionObject::is_basic_auth_data_Valid() const{
    return m_basic_auth_data_isValid;
}

double OAISessionObject::getExpires() const {
    return m_expires;
}
void OAISessionObject::setExpires(const double &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAISessionObject::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAISessionObject::is_expires_Valid() const{
    return m_expires_isValid;
}

bool OAISessionObject::isHmacEnabled() const {
    return m_hmac_enabled;
}
void OAISessionObject::setHmacEnabled(const bool &hmac_enabled) {
    m_hmac_enabled = hmac_enabled;
    m_hmac_enabled_isSet = true;
}

bool OAISessionObject::is_hmac_enabled_Set() const{
    return m_hmac_enabled_isSet;
}

bool OAISessionObject::is_hmac_enabled_Valid() const{
    return m_hmac_enabled_isValid;
}

QString OAISessionObject::getHmacString() const {
    return m_hmac_string;
}
void OAISessionObject::setHmacString(const QString &hmac_string) {
    m_hmac_string = hmac_string;
    m_hmac_string_isSet = true;
}

bool OAISessionObject::is_hmac_string_Set() const{
    return m_hmac_string_isSet;
}

bool OAISessionObject::is_hmac_string_Valid() const{
    return m_hmac_string_isValid;
}

bool OAISessionObject::isIsInactive() const {
    return m_is_inactive;
}
void OAISessionObject::setIsInactive(const bool &is_inactive) {
    m_is_inactive = is_inactive;
    m_is_inactive_isSet = true;
}

bool OAISessionObject::is_is_inactive_Set() const{
    return m_is_inactive_isSet;
}

bool OAISessionObject::is_is_inactive_Valid() const{
    return m_is_inactive_isValid;
}

OAISessionObject_jwt_data OAISessionObject::getJwtData() const {
    return m_jwt_data;
}
void OAISessionObject::setJwtData(const OAISessionObject_jwt_data &jwt_data) {
    m_jwt_data = jwt_data;
    m_jwt_data_isSet = true;
}

bool OAISessionObject::is_jwt_data_Set() const{
    return m_jwt_data_isSet;
}

bool OAISessionObject::is_jwt_data_Valid() const{
    return m_jwt_data_isValid;
}

OAIObject OAISessionObject::getMetaData() const {
    return m_meta_data;
}
void OAISessionObject::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAISessionObject::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAISessionObject::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

OAISessionObject_monitor OAISessionObject::getMonitor() const {
    return m_monitor;
}
void OAISessionObject::setMonitor(const OAISessionObject_monitor &monitor) {
    m_monitor = monitor;
    m_monitor_isSet = true;
}

bool OAISessionObject::is_monitor_Set() const{
    return m_monitor_isSet;
}

bool OAISessionObject::is_monitor_Valid() const{
    return m_monitor_isValid;
}

QString OAISessionObject::getOauthClientId() const {
    return m_oauth_client_id;
}
void OAISessionObject::setOauthClientId(const QString &oauth_client_id) {
    m_oauth_client_id = oauth_client_id;
    m_oauth_client_id_isSet = true;
}

bool OAISessionObject::is_oauth_client_id_Set() const{
    return m_oauth_client_id_isSet;
}

bool OAISessionObject::is_oauth_client_id_Valid() const{
    return m_oauth_client_id_isValid;
}

QString OAISessionObject::getOrgId() const {
    return m_org_id;
}
void OAISessionObject::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAISessionObject::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAISessionObject::is_org_id_Valid() const{
    return m_org_id_isValid;
}

double OAISessionObject::getPer() const {
    return m_per;
}
void OAISessionObject::setPer(const double &per) {
    m_per = per;
    m_per_isSet = true;
}

bool OAISessionObject::is_per_Set() const{
    return m_per_isSet;
}

bool OAISessionObject::is_per_Valid() const{
    return m_per_isValid;
}

double OAISessionObject::getQuotaMax() const {
    return m_quota_max;
}
void OAISessionObject::setQuotaMax(const double &quota_max) {
    m_quota_max = quota_max;
    m_quota_max_isSet = true;
}

bool OAISessionObject::is_quota_max_Set() const{
    return m_quota_max_isSet;
}

bool OAISessionObject::is_quota_max_Valid() const{
    return m_quota_max_isValid;
}

double OAISessionObject::getQuotaRemaining() const {
    return m_quota_remaining;
}
void OAISessionObject::setQuotaRemaining(const double &quota_remaining) {
    m_quota_remaining = quota_remaining;
    m_quota_remaining_isSet = true;
}

bool OAISessionObject::is_quota_remaining_Set() const{
    return m_quota_remaining_isSet;
}

bool OAISessionObject::is_quota_remaining_Valid() const{
    return m_quota_remaining_isValid;
}

QString OAISessionObject::getQuotaRenewalRate() const {
    return m_quota_renewal_rate;
}
void OAISessionObject::setQuotaRenewalRate(const QString &quota_renewal_rate) {
    m_quota_renewal_rate = quota_renewal_rate;
    m_quota_renewal_rate_isSet = true;
}

bool OAISessionObject::is_quota_renewal_rate_Set() const{
    return m_quota_renewal_rate_isSet;
}

bool OAISessionObject::is_quota_renewal_rate_Valid() const{
    return m_quota_renewal_rate_isValid;
}

double OAISessionObject::getQuotaRenews() const {
    return m_quota_renews;
}
void OAISessionObject::setQuotaRenews(const double &quota_renews) {
    m_quota_renews = quota_renews;
    m_quota_renews_isSet = true;
}

bool OAISessionObject::is_quota_renews_Set() const{
    return m_quota_renews_isSet;
}

bool OAISessionObject::is_quota_renews_Valid() const{
    return m_quota_renews_isValid;
}

double OAISessionObject::getRate() const {
    return m_rate;
}
void OAISessionObject::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAISessionObject::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAISessionObject::is_rate_Valid() const{
    return m_rate_isValid;
}

QList<QString> OAISessionObject::getTags() const {
    return m_tags;
}
void OAISessionObject::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISessionObject::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISessionObject::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISessionObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_auth_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hmac_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hmac_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_renewal_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_renews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
