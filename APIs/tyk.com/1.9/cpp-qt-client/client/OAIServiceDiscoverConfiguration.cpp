/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceDiscoverConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceDiscoverConfiguration::OAIServiceDiscoverConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceDiscoverConfiguration::OAIServiceDiscoverConfiguration() {
    this->initializeModel();
}

OAIServiceDiscoverConfiguration::~OAIServiceDiscoverConfiguration() {}

void OAIServiceDiscoverConfiguration::initializeModel() {

    m_cache_timeout_isSet = false;
    m_cache_timeout_isValid = false;

    m_data_path_isSet = false;
    m_data_path_isValid = false;

    m_endpoint_returns_list_isSet = false;
    m_endpoint_returns_list_isValid = false;

    m_parent_data_path_isSet = false;
    m_parent_data_path_isValid = false;

    m_port_data_path_isSet = false;
    m_port_data_path_isValid = false;

    m_query_endpoint_isSet = false;
    m_query_endpoint_isValid = false;

    m_use_discovery_service_isSet = false;
    m_use_discovery_service_isValid = false;

    m_use_nested_query_isSet = false;
    m_use_nested_query_isValid = false;

    m_use_target_list_isSet = false;
    m_use_target_list_isValid = false;
}

void OAIServiceDiscoverConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceDiscoverConfiguration::fromJsonObject(QJsonObject json) {

    m_cache_timeout_isValid = ::OpenAPI::fromJsonValue(m_cache_timeout, json[QString("cache_timeout")]);
    m_cache_timeout_isSet = !json[QString("cache_timeout")].isNull() && m_cache_timeout_isValid;

    m_data_path_isValid = ::OpenAPI::fromJsonValue(m_data_path, json[QString("data_path")]);
    m_data_path_isSet = !json[QString("data_path")].isNull() && m_data_path_isValid;

    m_endpoint_returns_list_isValid = ::OpenAPI::fromJsonValue(m_endpoint_returns_list, json[QString("endpoint_returns_list")]);
    m_endpoint_returns_list_isSet = !json[QString("endpoint_returns_list")].isNull() && m_endpoint_returns_list_isValid;

    m_parent_data_path_isValid = ::OpenAPI::fromJsonValue(m_parent_data_path, json[QString("parent_data_path")]);
    m_parent_data_path_isSet = !json[QString("parent_data_path")].isNull() && m_parent_data_path_isValid;

    m_port_data_path_isValid = ::OpenAPI::fromJsonValue(m_port_data_path, json[QString("port_data_path")]);
    m_port_data_path_isSet = !json[QString("port_data_path")].isNull() && m_port_data_path_isValid;

    m_query_endpoint_isValid = ::OpenAPI::fromJsonValue(m_query_endpoint, json[QString("query_endpoint")]);
    m_query_endpoint_isSet = !json[QString("query_endpoint")].isNull() && m_query_endpoint_isValid;

    m_use_discovery_service_isValid = ::OpenAPI::fromJsonValue(m_use_discovery_service, json[QString("use_discovery_service")]);
    m_use_discovery_service_isSet = !json[QString("use_discovery_service")].isNull() && m_use_discovery_service_isValid;

    m_use_nested_query_isValid = ::OpenAPI::fromJsonValue(m_use_nested_query, json[QString("use_nested_query")]);
    m_use_nested_query_isSet = !json[QString("use_nested_query")].isNull() && m_use_nested_query_isValid;

    m_use_target_list_isValid = ::OpenAPI::fromJsonValue(m_use_target_list, json[QString("use_target_list")]);
    m_use_target_list_isSet = !json[QString("use_target_list")].isNull() && m_use_target_list_isValid;
}

QString OAIServiceDiscoverConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceDiscoverConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_timeout_isSet) {
        obj.insert(QString("cache_timeout"), ::OpenAPI::toJsonValue(m_cache_timeout));
    }
    if (m_data_path_isSet) {
        obj.insert(QString("data_path"), ::OpenAPI::toJsonValue(m_data_path));
    }
    if (m_endpoint_returns_list_isSet) {
        obj.insert(QString("endpoint_returns_list"), ::OpenAPI::toJsonValue(m_endpoint_returns_list));
    }
    if (m_parent_data_path_isSet) {
        obj.insert(QString("parent_data_path"), ::OpenAPI::toJsonValue(m_parent_data_path));
    }
    if (m_port_data_path_isSet) {
        obj.insert(QString("port_data_path"), ::OpenAPI::toJsonValue(m_port_data_path));
    }
    if (m_query_endpoint_isSet) {
        obj.insert(QString("query_endpoint"), ::OpenAPI::toJsonValue(m_query_endpoint));
    }
    if (m_use_discovery_service_isSet) {
        obj.insert(QString("use_discovery_service"), ::OpenAPI::toJsonValue(m_use_discovery_service));
    }
    if (m_use_nested_query_isSet) {
        obj.insert(QString("use_nested_query"), ::OpenAPI::toJsonValue(m_use_nested_query));
    }
    if (m_use_target_list_isSet) {
        obj.insert(QString("use_target_list"), ::OpenAPI::toJsonValue(m_use_target_list));
    }
    return obj;
}

double OAIServiceDiscoverConfiguration::getCacheTimeout() const {
    return m_cache_timeout;
}
void OAIServiceDiscoverConfiguration::setCacheTimeout(const double &cache_timeout) {
    m_cache_timeout = cache_timeout;
    m_cache_timeout_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_cache_timeout_Set() const{
    return m_cache_timeout_isSet;
}

bool OAIServiceDiscoverConfiguration::is_cache_timeout_Valid() const{
    return m_cache_timeout_isValid;
}

QString OAIServiceDiscoverConfiguration::getDataPath() const {
    return m_data_path;
}
void OAIServiceDiscoverConfiguration::setDataPath(const QString &data_path) {
    m_data_path = data_path;
    m_data_path_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_data_path_Set() const{
    return m_data_path_isSet;
}

bool OAIServiceDiscoverConfiguration::is_data_path_Valid() const{
    return m_data_path_isValid;
}

bool OAIServiceDiscoverConfiguration::isEndpointReturnsList() const {
    return m_endpoint_returns_list;
}
void OAIServiceDiscoverConfiguration::setEndpointReturnsList(const bool &endpoint_returns_list) {
    m_endpoint_returns_list = endpoint_returns_list;
    m_endpoint_returns_list_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_endpoint_returns_list_Set() const{
    return m_endpoint_returns_list_isSet;
}

bool OAIServiceDiscoverConfiguration::is_endpoint_returns_list_Valid() const{
    return m_endpoint_returns_list_isValid;
}

QString OAIServiceDiscoverConfiguration::getParentDataPath() const {
    return m_parent_data_path;
}
void OAIServiceDiscoverConfiguration::setParentDataPath(const QString &parent_data_path) {
    m_parent_data_path = parent_data_path;
    m_parent_data_path_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_parent_data_path_Set() const{
    return m_parent_data_path_isSet;
}

bool OAIServiceDiscoverConfiguration::is_parent_data_path_Valid() const{
    return m_parent_data_path_isValid;
}

QString OAIServiceDiscoverConfiguration::getPortDataPath() const {
    return m_port_data_path;
}
void OAIServiceDiscoverConfiguration::setPortDataPath(const QString &port_data_path) {
    m_port_data_path = port_data_path;
    m_port_data_path_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_port_data_path_Set() const{
    return m_port_data_path_isSet;
}

bool OAIServiceDiscoverConfiguration::is_port_data_path_Valid() const{
    return m_port_data_path_isValid;
}

QString OAIServiceDiscoverConfiguration::getQueryEndpoint() const {
    return m_query_endpoint;
}
void OAIServiceDiscoverConfiguration::setQueryEndpoint(const QString &query_endpoint) {
    m_query_endpoint = query_endpoint;
    m_query_endpoint_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_query_endpoint_Set() const{
    return m_query_endpoint_isSet;
}

bool OAIServiceDiscoverConfiguration::is_query_endpoint_Valid() const{
    return m_query_endpoint_isValid;
}

QString OAIServiceDiscoverConfiguration::getUseDiscoveryService() const {
    return m_use_discovery_service;
}
void OAIServiceDiscoverConfiguration::setUseDiscoveryService(const QString &use_discovery_service) {
    m_use_discovery_service = use_discovery_service;
    m_use_discovery_service_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_use_discovery_service_Set() const{
    return m_use_discovery_service_isSet;
}

bool OAIServiceDiscoverConfiguration::is_use_discovery_service_Valid() const{
    return m_use_discovery_service_isValid;
}

bool OAIServiceDiscoverConfiguration::isUseNestedQuery() const {
    return m_use_nested_query;
}
void OAIServiceDiscoverConfiguration::setUseNestedQuery(const bool &use_nested_query) {
    m_use_nested_query = use_nested_query;
    m_use_nested_query_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_use_nested_query_Set() const{
    return m_use_nested_query_isSet;
}

bool OAIServiceDiscoverConfiguration::is_use_nested_query_Valid() const{
    return m_use_nested_query_isValid;
}

bool OAIServiceDiscoverConfiguration::isUseTargetList() const {
    return m_use_target_list;
}
void OAIServiceDiscoverConfiguration::setUseTargetList(const bool &use_target_list) {
    m_use_target_list = use_target_list;
    m_use_target_list_isSet = true;
}

bool OAIServiceDiscoverConfiguration::is_use_target_list_Set() const{
    return m_use_target_list_isSet;
}

bool OAIServiceDiscoverConfiguration::is_use_target_list_Valid() const{
    return m_use_target_list_isValid;
}

bool OAIServiceDiscoverConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_returns_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_data_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_data_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_discovery_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_nested_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_target_list_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceDiscoverConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
