/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionDefinition_extended_paths_virtual_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionDefinition_extended_paths_virtual_inner::OAIVersionDefinition_extended_paths_virtual_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionDefinition_extended_paths_virtual_inner::OAIVersionDefinition_extended_paths_virtual_inner() {
    this->initializeModel();
}

OAIVersionDefinition_extended_paths_virtual_inner::~OAIVersionDefinition_extended_paths_virtual_inner() {}

void OAIVersionDefinition_extended_paths_virtual_inner::initializeModel() {

    m_function_source_type_isSet = false;
    m_function_source_type_isValid = false;

    m_function_source_uri_isSet = false;
    m_function_source_uri_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_response_function_name_isSet = false;
    m_response_function_name_isValid = false;

    m_use_session_isSet = false;
    m_use_session_isValid = false;
}

void OAIVersionDefinition_extended_paths_virtual_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionDefinition_extended_paths_virtual_inner::fromJsonObject(QJsonObject json) {

    m_function_source_type_isValid = ::OpenAPI::fromJsonValue(m_function_source_type, json[QString("function_source_type")]);
    m_function_source_type_isSet = !json[QString("function_source_type")].isNull() && m_function_source_type_isValid;

    m_function_source_uri_isValid = ::OpenAPI::fromJsonValue(m_function_source_uri, json[QString("function_source_uri")]);
    m_function_source_uri_isSet = !json[QString("function_source_uri")].isNull() && m_function_source_uri_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_response_function_name_isValid = ::OpenAPI::fromJsonValue(m_response_function_name, json[QString("response_function_name")]);
    m_response_function_name_isSet = !json[QString("response_function_name")].isNull() && m_response_function_name_isValid;

    m_use_session_isValid = ::OpenAPI::fromJsonValue(m_use_session, json[QString("use_session")]);
    m_use_session_isSet = !json[QString("use_session")].isNull() && m_use_session_isValid;
}

QString OAIVersionDefinition_extended_paths_virtual_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionDefinition_extended_paths_virtual_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_function_source_type_isSet) {
        obj.insert(QString("function_source_type"), ::OpenAPI::toJsonValue(m_function_source_type));
    }
    if (m_function_source_uri_isSet) {
        obj.insert(QString("function_source_uri"), ::OpenAPI::toJsonValue(m_function_source_uri));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_response_function_name_isSet) {
        obj.insert(QString("response_function_name"), ::OpenAPI::toJsonValue(m_response_function_name));
    }
    if (m_use_session_isSet) {
        obj.insert(QString("use_session"), ::OpenAPI::toJsonValue(m_use_session));
    }
    return obj;
}

QString OAIVersionDefinition_extended_paths_virtual_inner::getFunctionSourceType() const {
    return m_function_source_type;
}
void OAIVersionDefinition_extended_paths_virtual_inner::setFunctionSourceType(const QString &function_source_type) {
    m_function_source_type = function_source_type;
    m_function_source_type_isSet = true;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_function_source_type_Set() const{
    return m_function_source_type_isSet;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_function_source_type_Valid() const{
    return m_function_source_type_isValid;
}

QString OAIVersionDefinition_extended_paths_virtual_inner::getFunctionSourceUri() const {
    return m_function_source_uri;
}
void OAIVersionDefinition_extended_paths_virtual_inner::setFunctionSourceUri(const QString &function_source_uri) {
    m_function_source_uri = function_source_uri;
    m_function_source_uri_isSet = true;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_function_source_uri_Set() const{
    return m_function_source_uri_isSet;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_function_source_uri_Valid() const{
    return m_function_source_uri_isValid;
}

QString OAIVersionDefinition_extended_paths_virtual_inner::getMethod() const {
    return m_method;
}
void OAIVersionDefinition_extended_paths_virtual_inner::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_method_Set() const{
    return m_method_isSet;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIVersionDefinition_extended_paths_virtual_inner::getPath() const {
    return m_path;
}
void OAIVersionDefinition_extended_paths_virtual_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIVersionDefinition_extended_paths_virtual_inner::getResponseFunctionName() const {
    return m_response_function_name;
}
void OAIVersionDefinition_extended_paths_virtual_inner::setResponseFunctionName(const QString &response_function_name) {
    m_response_function_name = response_function_name;
    m_response_function_name_isSet = true;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_response_function_name_Set() const{
    return m_response_function_name_isSet;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_response_function_name_Valid() const{
    return m_response_function_name_isValid;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::isUseSession() const {
    return m_use_session;
}
void OAIVersionDefinition_extended_paths_virtual_inner::setUseSession(const bool &use_session) {
    m_use_session = use_session;
    m_use_session_isSet = true;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_use_session_Set() const{
    return m_use_session_isSet;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::is_use_session_Valid() const{
    return m_use_session_isValid;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionDefinition_extended_paths_virtual_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
