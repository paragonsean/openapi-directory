/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_oauth_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_oauth_meta::OAIAPIDefinition_oauth_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_oauth_meta::OAIAPIDefinition_oauth_meta() {
    this->initializeModel();
}

OAIAPIDefinition_oauth_meta::~OAIAPIDefinition_oauth_meta() {}

void OAIAPIDefinition_oauth_meta::initializeModel() {

    m_allowed_access_types_isSet = false;
    m_allowed_access_types_isValid = false;

    m_allowed_authorize_types_isSet = false;
    m_allowed_authorize_types_isValid = false;

    m_auth_login_redirect_isSet = false;
    m_auth_login_redirect_isValid = false;
}

void OAIAPIDefinition_oauth_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_oauth_meta::fromJsonObject(QJsonObject json) {

    m_allowed_access_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_access_types, json[QString("allowed_access_types")]);
    m_allowed_access_types_isSet = !json[QString("allowed_access_types")].isNull() && m_allowed_access_types_isValid;

    m_allowed_authorize_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_authorize_types, json[QString("allowed_authorize_types")]);
    m_allowed_authorize_types_isSet = !json[QString("allowed_authorize_types")].isNull() && m_allowed_authorize_types_isValid;

    m_auth_login_redirect_isValid = ::OpenAPI::fromJsonValue(m_auth_login_redirect, json[QString("auth_login_redirect")]);
    m_auth_login_redirect_isSet = !json[QString("auth_login_redirect")].isNull() && m_auth_login_redirect_isValid;
}

QString OAIAPIDefinition_oauth_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_oauth_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_access_types.size() > 0) {
        obj.insert(QString("allowed_access_types"), ::OpenAPI::toJsonValue(m_allowed_access_types));
    }
    if (m_allowed_authorize_types.size() > 0) {
        obj.insert(QString("allowed_authorize_types"), ::OpenAPI::toJsonValue(m_allowed_authorize_types));
    }
    if (m_auth_login_redirect_isSet) {
        obj.insert(QString("auth_login_redirect"), ::OpenAPI::toJsonValue(m_auth_login_redirect));
    }
    return obj;
}

QList<QString> OAIAPIDefinition_oauth_meta::getAllowedAccessTypes() const {
    return m_allowed_access_types;
}
void OAIAPIDefinition_oauth_meta::setAllowedAccessTypes(const QList<QString> &allowed_access_types) {
    m_allowed_access_types = allowed_access_types;
    m_allowed_access_types_isSet = true;
}

bool OAIAPIDefinition_oauth_meta::is_allowed_access_types_Set() const{
    return m_allowed_access_types_isSet;
}

bool OAIAPIDefinition_oauth_meta::is_allowed_access_types_Valid() const{
    return m_allowed_access_types_isValid;
}

QList<QString> OAIAPIDefinition_oauth_meta::getAllowedAuthorizeTypes() const {
    return m_allowed_authorize_types;
}
void OAIAPIDefinition_oauth_meta::setAllowedAuthorizeTypes(const QList<QString> &allowed_authorize_types) {
    m_allowed_authorize_types = allowed_authorize_types;
    m_allowed_authorize_types_isSet = true;
}

bool OAIAPIDefinition_oauth_meta::is_allowed_authorize_types_Set() const{
    return m_allowed_authorize_types_isSet;
}

bool OAIAPIDefinition_oauth_meta::is_allowed_authorize_types_Valid() const{
    return m_allowed_authorize_types_isValid;
}

QString OAIAPIDefinition_oauth_meta::getAuthLoginRedirect() const {
    return m_auth_login_redirect;
}
void OAIAPIDefinition_oauth_meta::setAuthLoginRedirect(const QString &auth_login_redirect) {
    m_auth_login_redirect = auth_login_redirect;
    m_auth_login_redirect_isSet = true;
}

bool OAIAPIDefinition_oauth_meta::is_auth_login_redirect_Set() const{
    return m_auth_login_redirect_isSet;
}

bool OAIAPIDefinition_oauth_meta::is_auth_login_redirect_Valid() const{
    return m_auth_login_redirect_isValid;
}

bool OAIAPIDefinition_oauth_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_access_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_authorize_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_login_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_oauth_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
