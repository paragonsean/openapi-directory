/**
 * Gateway REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.9
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIDefinition_auth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIDefinition_auth::OAIAPIDefinition_auth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIDefinition_auth::OAIAPIDefinition_auth() {
    this->initializeModel();
}

OAIAPIDefinition_auth::~OAIAPIDefinition_auth() {}

void OAIAPIDefinition_auth::initializeModel() {

    m_auth_header_name_isSet = false;
    m_auth_header_name_isValid = false;

    m_use_cookie_isSet = false;
    m_use_cookie_isValid = false;

    m_use_param_isSet = false;
    m_use_param_isValid = false;
}

void OAIAPIDefinition_auth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIDefinition_auth::fromJsonObject(QJsonObject json) {

    m_auth_header_name_isValid = ::OpenAPI::fromJsonValue(m_auth_header_name, json[QString("auth_header_name")]);
    m_auth_header_name_isSet = !json[QString("auth_header_name")].isNull() && m_auth_header_name_isValid;

    m_use_cookie_isValid = ::OpenAPI::fromJsonValue(m_use_cookie, json[QString("use_cookie")]);
    m_use_cookie_isSet = !json[QString("use_cookie")].isNull() && m_use_cookie_isValid;

    m_use_param_isValid = ::OpenAPI::fromJsonValue(m_use_param, json[QString("use_param")]);
    m_use_param_isSet = !json[QString("use_param")].isNull() && m_use_param_isValid;
}

QString OAIAPIDefinition_auth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIDefinition_auth::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_header_name_isSet) {
        obj.insert(QString("auth_header_name"), ::OpenAPI::toJsonValue(m_auth_header_name));
    }
    if (m_use_cookie_isSet) {
        obj.insert(QString("use_cookie"), ::OpenAPI::toJsonValue(m_use_cookie));
    }
    if (m_use_param_isSet) {
        obj.insert(QString("use_param"), ::OpenAPI::toJsonValue(m_use_param));
    }
    return obj;
}

QString OAIAPIDefinition_auth::getAuthHeaderName() const {
    return m_auth_header_name;
}
void OAIAPIDefinition_auth::setAuthHeaderName(const QString &auth_header_name) {
    m_auth_header_name = auth_header_name;
    m_auth_header_name_isSet = true;
}

bool OAIAPIDefinition_auth::is_auth_header_name_Set() const{
    return m_auth_header_name_isSet;
}

bool OAIAPIDefinition_auth::is_auth_header_name_Valid() const{
    return m_auth_header_name_isValid;
}

bool OAIAPIDefinition_auth::isUseCookie() const {
    return m_use_cookie;
}
void OAIAPIDefinition_auth::setUseCookie(const bool &use_cookie) {
    m_use_cookie = use_cookie;
    m_use_cookie_isSet = true;
}

bool OAIAPIDefinition_auth::is_use_cookie_Set() const{
    return m_use_cookie_isSet;
}

bool OAIAPIDefinition_auth::is_use_cookie_Valid() const{
    return m_use_cookie_isValid;
}

bool OAIAPIDefinition_auth::isUseParam() const {
    return m_use_param;
}
void OAIAPIDefinition_auth::setUseParam(const bool &use_param) {
    m_use_param = use_param;
    m_use_param_isSet = true;
}

bool OAIAPIDefinition_auth::is_use_param_Set() const{
    return m_use_param_isSet;
}

bool OAIAPIDefinition_auth::is_use_param_Valid() const{
    return m_use_param_isValid;
}

bool OAIAPIDefinition_auth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_param_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIDefinition_auth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
