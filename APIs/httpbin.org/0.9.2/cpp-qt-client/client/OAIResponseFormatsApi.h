/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResponseFormatsApi_H
#define OAI_OAIResponseFormatsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResponseFormatsApi : public QObject {
    Q_OBJECT

public:
    OAIResponseFormatsApi(const int timeOut = 0);
    ~OAIResponseFormatsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void brotliGet();


    virtual void deflateGet();


    virtual void denyGet();


    virtual void encodingUtf8Get();


    virtual void gzipGet();


    virtual void htmlGet();


    virtual void jsonGet();


    virtual void robotsTxtGet();


    virtual void xmlGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void brotliGetCallback(OAIHttpRequestWorker *worker);
    void deflateGetCallback(OAIHttpRequestWorker *worker);
    void denyGetCallback(OAIHttpRequestWorker *worker);
    void encodingUtf8GetCallback(OAIHttpRequestWorker *worker);
    void gzipGetCallback(OAIHttpRequestWorker *worker);
    void htmlGetCallback(OAIHttpRequestWorker *worker);
    void jsonGetCallback(OAIHttpRequestWorker *worker);
    void robotsTxtGetCallback(OAIHttpRequestWorker *worker);
    void xmlGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void brotliGetSignal();
    void deflateGetSignal();
    void denyGetSignal();
    void encodingUtf8GetSignal();
    void gzipGetSignal();
    void htmlGetSignal();
    void jsonGetSignal();
    void robotsTxtGetSignal();
    void xmlGetSignal();


    void brotliGetSignalFull(OAIHttpRequestWorker *worker);
    void deflateGetSignalFull(OAIHttpRequestWorker *worker);
    void denyGetSignalFull(OAIHttpRequestWorker *worker);
    void encodingUtf8GetSignalFull(OAIHttpRequestWorker *worker);
    void gzipGetSignalFull(OAIHttpRequestWorker *worker);
    void htmlGetSignalFull(OAIHttpRequestWorker *worker);
    void jsonGetSignalFull(OAIHttpRequestWorker *worker);
    void robotsTxtGetSignalFull(OAIHttpRequestWorker *worker);
    void xmlGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use brotliGetSignalError() instead")
    void brotliGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void brotliGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deflateGetSignalError() instead")
    void deflateGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deflateGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyGetSignalError() instead")
    void denyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void denyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encodingUtf8GetSignalError() instead")
    void encodingUtf8GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void encodingUtf8GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gzipGetSignalError() instead")
    void gzipGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gzipGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use htmlGetSignalError() instead")
    void htmlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void htmlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonGetSignalError() instead")
    void jsonGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jsonGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use robotsTxtGetSignalError() instead")
    void robotsTxtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void robotsTxtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xmlGetSignalError() instead")
    void xmlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void xmlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use brotliGetSignalErrorFull() instead")
    void brotliGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void brotliGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deflateGetSignalErrorFull() instead")
    void deflateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deflateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyGetSignalErrorFull() instead")
    void denyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encodingUtf8GetSignalErrorFull() instead")
    void encodingUtf8GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encodingUtf8GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gzipGetSignalErrorFull() instead")
    void gzipGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gzipGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use htmlGetSignalErrorFull() instead")
    void htmlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void htmlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jsonGetSignalErrorFull() instead")
    void jsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use robotsTxtGetSignalErrorFull() instead")
    void robotsTxtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void robotsTxtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use xmlGetSignalErrorFull() instead")
    void xmlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void xmlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
