/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRedirectsApi_H
#define OAI_OAIRedirectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRedirectsApi : public QObject {
    Q_OBJECT

public:
    OAIRedirectsApi(const int timeOut = 0);
    ~OAIRedirectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  n qint32 [required]
    */
    virtual void absoluteRedirectNGet(const qint32 &n);

    /**
    * @param[in]  n qint32 [required]
    */
    virtual void redirectNGet(const qint32 &n);


    virtual void redirectToDelete();

    /**
    * @param[in]  url QString [required]
    * @param[in]  status_code qint32 [optional]
    */
    virtual void redirectToGet(const QString &url, const ::OpenAPI::OptionalParam<qint32> &status_code = ::OpenAPI::OptionalParam<qint32>());


    virtual void redirectToPatch();

    /**
    * @param[in]  url QString [required]
    * @param[in]  status_code qint32 [optional]
    */
    virtual void redirectToPost(const QString &url, const ::OpenAPI::OptionalParam<qint32> &status_code = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  status_code qint32 [optional]
    */
    virtual void redirectToPut(const QString &url, const ::OpenAPI::OptionalParam<qint32> &status_code = ::OpenAPI::OptionalParam<qint32>());


    virtual void redirectToTrace();

    /**
    * @param[in]  n qint32 [required]
    */
    virtual void relativeRedirectNGet(const qint32 &n);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void absoluteRedirectNGetCallback(OAIHttpRequestWorker *worker);
    void redirectNGetCallback(OAIHttpRequestWorker *worker);
    void redirectToDeleteCallback(OAIHttpRequestWorker *worker);
    void redirectToGetCallback(OAIHttpRequestWorker *worker);
    void redirectToPatchCallback(OAIHttpRequestWorker *worker);
    void redirectToPostCallback(OAIHttpRequestWorker *worker);
    void redirectToPutCallback(OAIHttpRequestWorker *worker);
    void redirectToTraceCallback(OAIHttpRequestWorker *worker);
    void relativeRedirectNGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void absoluteRedirectNGetSignal();
    void redirectNGetSignal();
    void redirectToDeleteSignal();
    void redirectToGetSignal();
    void redirectToPatchSignal();
    void redirectToPostSignal();
    void redirectToPutSignal();
    void redirectToTraceSignal();
    void relativeRedirectNGetSignal();


    void absoluteRedirectNGetSignalFull(OAIHttpRequestWorker *worker);
    void redirectNGetSignalFull(OAIHttpRequestWorker *worker);
    void redirectToDeleteSignalFull(OAIHttpRequestWorker *worker);
    void redirectToGetSignalFull(OAIHttpRequestWorker *worker);
    void redirectToPatchSignalFull(OAIHttpRequestWorker *worker);
    void redirectToPostSignalFull(OAIHttpRequestWorker *worker);
    void redirectToPutSignalFull(OAIHttpRequestWorker *worker);
    void redirectToTraceSignalFull(OAIHttpRequestWorker *worker);
    void relativeRedirectNGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use absoluteRedirectNGetSignalError() instead")
    void absoluteRedirectNGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void absoluteRedirectNGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectNGetSignalError() instead")
    void redirectNGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectNGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToDeleteSignalError() instead")
    void redirectToDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToGetSignalError() instead")
    void redirectToGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToPatchSignalError() instead")
    void redirectToPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToPostSignalError() instead")
    void redirectToPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToPutSignalError() instead")
    void redirectToPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToTraceSignalError() instead")
    void redirectToTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relativeRedirectNGetSignalError() instead")
    void relativeRedirectNGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void relativeRedirectNGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use absoluteRedirectNGetSignalErrorFull() instead")
    void absoluteRedirectNGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void absoluteRedirectNGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectNGetSignalErrorFull() instead")
    void redirectNGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectNGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToDeleteSignalErrorFull() instead")
    void redirectToDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToGetSignalErrorFull() instead")
    void redirectToGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToPatchSignalErrorFull() instead")
    void redirectToPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToPostSignalErrorFull() instead")
    void redirectToPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToPutSignalErrorFull() instead")
    void redirectToPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redirectToTraceSignalErrorFull() instead")
    void redirectToTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redirectToTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relativeRedirectNGetSignalErrorFull() instead")
    void relativeRedirectNGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relativeRedirectNGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
