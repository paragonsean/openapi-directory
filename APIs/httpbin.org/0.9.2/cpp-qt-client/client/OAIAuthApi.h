/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user QString [required]
    * @param[in]  passwd QString [required]
    */
    virtual void basicAuthUserPasswdGet(const QString &user, const QString &passwd);

    /**
    * @param[in]  authorization QString [optional]
    */
    virtual void bearerGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  qop QString [required]
    * @param[in]  user QString [required]
    * @param[in]  passwd QString [required]
    * @param[in]  algorithm QString [required]
    */
    virtual void digestAuthQopUserPasswdAlgorithmGet(const QString &qop, const QString &user, const QString &passwd, const QString &algorithm);

    /**
    * @param[in]  qop QString [required]
    * @param[in]  user QString [required]
    * @param[in]  passwd QString [required]
    * @param[in]  algorithm QString [required]
    * @param[in]  stale_after QString [required]
    */
    virtual void digestAuthQopUserPasswdAlgorithmStaleAfterGet(const QString &qop, const QString &user, const QString &passwd, const QString &algorithm, const QString &stale_after);

    /**
    * @param[in]  qop QString [required]
    * @param[in]  user QString [required]
    * @param[in]  passwd QString [required]
    */
    virtual void digestAuthQopUserPasswdGet(const QString &qop, const QString &user, const QString &passwd);

    /**
    * @param[in]  user QString [required]
    * @param[in]  passwd QString [required]
    */
    virtual void hiddenBasicAuthUserPasswdGet(const QString &user, const QString &passwd);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void basicAuthUserPasswdGetCallback(OAIHttpRequestWorker *worker);
    void bearerGetCallback(OAIHttpRequestWorker *worker);
    void digestAuthQopUserPasswdAlgorithmGetCallback(OAIHttpRequestWorker *worker);
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetCallback(OAIHttpRequestWorker *worker);
    void digestAuthQopUserPasswdGetCallback(OAIHttpRequestWorker *worker);
    void hiddenBasicAuthUserPasswdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void basicAuthUserPasswdGetSignal();
    void bearerGetSignal();
    void digestAuthQopUserPasswdAlgorithmGetSignal();
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetSignal();
    void digestAuthQopUserPasswdGetSignal();
    void hiddenBasicAuthUserPasswdGetSignal();


    void basicAuthUserPasswdGetSignalFull(OAIHttpRequestWorker *worker);
    void bearerGetSignalFull(OAIHttpRequestWorker *worker);
    void digestAuthQopUserPasswdAlgorithmGetSignalFull(OAIHttpRequestWorker *worker);
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalFull(OAIHttpRequestWorker *worker);
    void digestAuthQopUserPasswdGetSignalFull(OAIHttpRequestWorker *worker);
    void hiddenBasicAuthUserPasswdGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use basicAuthUserPasswdGetSignalError() instead")
    void basicAuthUserPasswdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void basicAuthUserPasswdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bearerGetSignalError() instead")
    void bearerGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bearerGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digestAuthQopUserPasswdAlgorithmGetSignalError() instead")
    void digestAuthQopUserPasswdAlgorithmGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void digestAuthQopUserPasswdAlgorithmGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalError() instead")
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digestAuthQopUserPasswdGetSignalError() instead")
    void digestAuthQopUserPasswdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void digestAuthQopUserPasswdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hiddenBasicAuthUserPasswdGetSignalError() instead")
    void hiddenBasicAuthUserPasswdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hiddenBasicAuthUserPasswdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use basicAuthUserPasswdGetSignalErrorFull() instead")
    void basicAuthUserPasswdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basicAuthUserPasswdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bearerGetSignalErrorFull() instead")
    void bearerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bearerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digestAuthQopUserPasswdAlgorithmGetSignalErrorFull() instead")
    void digestAuthQopUserPasswdAlgorithmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digestAuthQopUserPasswdAlgorithmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalErrorFull() instead")
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digestAuthQopUserPasswdAlgorithmStaleAfterGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use digestAuthQopUserPasswdGetSignalErrorFull() instead")
    void digestAuthQopUserPasswdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void digestAuthQopUserPasswdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hiddenBasicAuthUserPasswdGetSignalErrorFull() instead")
    void hiddenBasicAuthUserPasswdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hiddenBasicAuthUserPasswdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
