/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDynamicDataApi_H
#define OAI_OAIDynamicDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDynamicDataApi : public QObject {
    Q_OBJECT

public:
    OAIDynamicDataApi(const int timeOut = 0);
    ~OAIDynamicDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  value QString [required]
    */
    virtual void base64ValueGet(const QString &value);

    /**
    * @param[in]  n qint32 [required]
    */
    virtual void bytesNGet(const qint32 &n);

    /**
    * @param[in]  delay qint32 [required]
    */
    virtual void delayDelayDelete(const qint32 &delay);

    /**
    * @param[in]  delay qint32 [required]
    */
    virtual void delayDelayGet(const qint32 &delay);

    /**
    * @param[in]  delay qint32 [required]
    */
    virtual void delayDelayPatch(const qint32 &delay);

    /**
    * @param[in]  delay qint32 [required]
    */
    virtual void delayDelayPost(const qint32 &delay);

    /**
    * @param[in]  delay qint32 [required]
    */
    virtual void delayDelayPut(const qint32 &delay);

    /**
    * @param[in]  delay qint32 [required]
    */
    virtual void delayDelayTrace(const qint32 &delay);

    /**
    * @param[in]  duration double [optional]
    * @param[in]  numbytes qint32 [optional]
    * @param[in]  code qint32 [optional]
    * @param[in]  delay double [optional]
    */
    virtual void dripGet(const ::OpenAPI::OptionalParam<double> &duration = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &numbytes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &code = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &delay = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  n qint32 [required]
    * @param[in]  offset qint32 [required]
    */
    virtual void linksNOffsetGet(const qint32 &n, const qint32 &offset);

    /**
    * @param[in]  numbytes qint32 [required]
    */
    virtual void rangeNumbytesGet(const qint32 &numbytes);

    /**
    * @param[in]  n qint32 [required]
    */
    virtual void streamBytesNGet(const qint32 &n);

    /**
    * @param[in]  n qint32 [required]
    */
    virtual void streamNGet(const qint32 &n);


    virtual void uuidGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void base64ValueGetCallback(OAIHttpRequestWorker *worker);
    void bytesNGetCallback(OAIHttpRequestWorker *worker);
    void delayDelayDeleteCallback(OAIHttpRequestWorker *worker);
    void delayDelayGetCallback(OAIHttpRequestWorker *worker);
    void delayDelayPatchCallback(OAIHttpRequestWorker *worker);
    void delayDelayPostCallback(OAIHttpRequestWorker *worker);
    void delayDelayPutCallback(OAIHttpRequestWorker *worker);
    void delayDelayTraceCallback(OAIHttpRequestWorker *worker);
    void dripGetCallback(OAIHttpRequestWorker *worker);
    void linksNOffsetGetCallback(OAIHttpRequestWorker *worker);
    void rangeNumbytesGetCallback(OAIHttpRequestWorker *worker);
    void streamBytesNGetCallback(OAIHttpRequestWorker *worker);
    void streamNGetCallback(OAIHttpRequestWorker *worker);
    void uuidGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void base64ValueGetSignal();
    void bytesNGetSignal();
    void delayDelayDeleteSignal();
    void delayDelayGetSignal();
    void delayDelayPatchSignal();
    void delayDelayPostSignal();
    void delayDelayPutSignal();
    void delayDelayTraceSignal();
    void dripGetSignal();
    void linksNOffsetGetSignal();
    void rangeNumbytesGetSignal();
    void streamBytesNGetSignal();
    void streamNGetSignal();
    void uuidGetSignal();


    void base64ValueGetSignalFull(OAIHttpRequestWorker *worker);
    void bytesNGetSignalFull(OAIHttpRequestWorker *worker);
    void delayDelayDeleteSignalFull(OAIHttpRequestWorker *worker);
    void delayDelayGetSignalFull(OAIHttpRequestWorker *worker);
    void delayDelayPatchSignalFull(OAIHttpRequestWorker *worker);
    void delayDelayPostSignalFull(OAIHttpRequestWorker *worker);
    void delayDelayPutSignalFull(OAIHttpRequestWorker *worker);
    void delayDelayTraceSignalFull(OAIHttpRequestWorker *worker);
    void dripGetSignalFull(OAIHttpRequestWorker *worker);
    void linksNOffsetGetSignalFull(OAIHttpRequestWorker *worker);
    void rangeNumbytesGetSignalFull(OAIHttpRequestWorker *worker);
    void streamBytesNGetSignalFull(OAIHttpRequestWorker *worker);
    void streamNGetSignalFull(OAIHttpRequestWorker *worker);
    void uuidGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use base64ValueGetSignalError() instead")
    void base64ValueGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void base64ValueGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bytesNGetSignalError() instead")
    void bytesNGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bytesNGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayDeleteSignalError() instead")
    void delayDelayDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayGetSignalError() instead")
    void delayDelayGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayPatchSignalError() instead")
    void delayDelayPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayPostSignalError() instead")
    void delayDelayPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayPutSignalError() instead")
    void delayDelayPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayTraceSignalError() instead")
    void delayDelayTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dripGetSignalError() instead")
    void dripGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dripGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linksNOffsetGetSignalError() instead")
    void linksNOffsetGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void linksNOffsetGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rangeNumbytesGetSignalError() instead")
    void rangeNumbytesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rangeNumbytesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamBytesNGetSignalError() instead")
    void streamBytesNGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamBytesNGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamNGetSignalError() instead")
    void streamNGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void streamNGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uuidGetSignalError() instead")
    void uuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use base64ValueGetSignalErrorFull() instead")
    void base64ValueGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void base64ValueGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bytesNGetSignalErrorFull() instead")
    void bytesNGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bytesNGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayDeleteSignalErrorFull() instead")
    void delayDelayDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayGetSignalErrorFull() instead")
    void delayDelayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayPatchSignalErrorFull() instead")
    void delayDelayPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayPostSignalErrorFull() instead")
    void delayDelayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayPutSignalErrorFull() instead")
    void delayDelayPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delayDelayTraceSignalErrorFull() instead")
    void delayDelayTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delayDelayTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dripGetSignalErrorFull() instead")
    void dripGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dripGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linksNOffsetGetSignalErrorFull() instead")
    void linksNOffsetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linksNOffsetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rangeNumbytesGetSignalErrorFull() instead")
    void rangeNumbytesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rangeNumbytesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamBytesNGetSignalErrorFull() instead")
    void streamBytesNGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamBytesNGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use streamNGetSignalErrorFull() instead")
    void streamNGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void streamNGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uuidGetSignalErrorFull() instead")
    void uuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
