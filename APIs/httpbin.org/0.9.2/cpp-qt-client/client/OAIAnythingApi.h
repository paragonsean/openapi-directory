/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnythingApi_H
#define OAI_OAIAnythingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnythingApi : public QObject {
    Q_OBJECT

public:
    OAIAnythingApi(const int timeOut = 0);
    ~OAIAnythingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  anything QString [required]
    */
    virtual void anythingAnythingDelete(const QString &anything);

    /**
    * @param[in]  anything QString [required]
    */
    virtual void anythingAnythingGet(const QString &anything);

    /**
    * @param[in]  anything QString [required]
    */
    virtual void anythingAnythingPatch(const QString &anything);

    /**
    * @param[in]  anything QString [required]
    */
    virtual void anythingAnythingPost(const QString &anything);

    /**
    * @param[in]  anything QString [required]
    */
    virtual void anythingAnythingPut(const QString &anything);

    /**
    * @param[in]  anything QString [required]
    */
    virtual void anythingAnythingTrace(const QString &anything);


    virtual void anythingDelete();


    virtual void anythingGet();


    virtual void anythingPatch();


    virtual void anythingPost();


    virtual void anythingPut();


    virtual void anythingTrace();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void anythingAnythingDeleteCallback(OAIHttpRequestWorker *worker);
    void anythingAnythingGetCallback(OAIHttpRequestWorker *worker);
    void anythingAnythingPatchCallback(OAIHttpRequestWorker *worker);
    void anythingAnythingPostCallback(OAIHttpRequestWorker *worker);
    void anythingAnythingPutCallback(OAIHttpRequestWorker *worker);
    void anythingAnythingTraceCallback(OAIHttpRequestWorker *worker);
    void anythingDeleteCallback(OAIHttpRequestWorker *worker);
    void anythingGetCallback(OAIHttpRequestWorker *worker);
    void anythingPatchCallback(OAIHttpRequestWorker *worker);
    void anythingPostCallback(OAIHttpRequestWorker *worker);
    void anythingPutCallback(OAIHttpRequestWorker *worker);
    void anythingTraceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void anythingAnythingDeleteSignal();
    void anythingAnythingGetSignal();
    void anythingAnythingPatchSignal();
    void anythingAnythingPostSignal();
    void anythingAnythingPutSignal();
    void anythingAnythingTraceSignal();
    void anythingDeleteSignal();
    void anythingGetSignal();
    void anythingPatchSignal();
    void anythingPostSignal();
    void anythingPutSignal();
    void anythingTraceSignal();


    void anythingAnythingDeleteSignalFull(OAIHttpRequestWorker *worker);
    void anythingAnythingGetSignalFull(OAIHttpRequestWorker *worker);
    void anythingAnythingPatchSignalFull(OAIHttpRequestWorker *worker);
    void anythingAnythingPostSignalFull(OAIHttpRequestWorker *worker);
    void anythingAnythingPutSignalFull(OAIHttpRequestWorker *worker);
    void anythingAnythingTraceSignalFull(OAIHttpRequestWorker *worker);
    void anythingDeleteSignalFull(OAIHttpRequestWorker *worker);
    void anythingGetSignalFull(OAIHttpRequestWorker *worker);
    void anythingPatchSignalFull(OAIHttpRequestWorker *worker);
    void anythingPostSignalFull(OAIHttpRequestWorker *worker);
    void anythingPutSignalFull(OAIHttpRequestWorker *worker);
    void anythingTraceSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use anythingAnythingDeleteSignalError() instead")
    void anythingAnythingDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingGetSignalError() instead")
    void anythingAnythingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingPatchSignalError() instead")
    void anythingAnythingPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingPostSignalError() instead")
    void anythingAnythingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingPutSignalError() instead")
    void anythingAnythingPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingTraceSignalError() instead")
    void anythingAnythingTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingDeleteSignalError() instead")
    void anythingDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingGetSignalError() instead")
    void anythingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingPatchSignalError() instead")
    void anythingPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingPostSignalError() instead")
    void anythingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingPutSignalError() instead")
    void anythingPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingTraceSignalError() instead")
    void anythingTraceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void anythingTraceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use anythingAnythingDeleteSignalErrorFull() instead")
    void anythingAnythingDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingGetSignalErrorFull() instead")
    void anythingAnythingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingPatchSignalErrorFull() instead")
    void anythingAnythingPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingPostSignalErrorFull() instead")
    void anythingAnythingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingPutSignalErrorFull() instead")
    void anythingAnythingPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingAnythingTraceSignalErrorFull() instead")
    void anythingAnythingTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingAnythingTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingDeleteSignalErrorFull() instead")
    void anythingDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingGetSignalErrorFull() instead")
    void anythingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingPatchSignalErrorFull() instead")
    void anythingPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingPostSignalErrorFull() instead")
    void anythingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingPutSignalErrorFull() instead")
    void anythingPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use anythingTraceSignalErrorFull() instead")
    void anythingTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void anythingTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
