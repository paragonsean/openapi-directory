/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AnythingApi from './api/AnythingApi';
import AuthApi from './api/AuthApi';
import CookiesApi from './api/CookiesApi';
import DynamicDataApi from './api/DynamicDataApi';
import HTTPMethodsApi from './api/HTTPMethodsApi';
import ImagesApi from './api/ImagesApi';
import RedirectsApi from './api/RedirectsApi';
import RequestInspectionApi from './api/RequestInspectionApi';
import ResponseFormatsApi from './api/ResponseFormatsApi';
import ResponseInspectionApi from './api/ResponseInspectionApi';
import StatusCodesApi from './api/StatusCodesApi';


/**
* A simple HTTP Request &amp; Response Service.&lt;br/&gt; &lt;br/&gt; &lt;b&gt;Run locally: &lt;/b&gt; &lt;code&gt;$ docker run -p 80:80 kennethreitz/httpbin&lt;/code&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var HttpbinOrg = require('index'); // See note below*.
* var xxxSvc = new HttpbinOrg.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new HttpbinOrg.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new HttpbinOrg.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new HttpbinOrg.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.9.2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
    * The AnythingApi service constructor.
    * @property {module:api/AnythingApi}
    */
    AnythingApi,

    /**
    * The AuthApi service constructor.
    * @property {module:api/AuthApi}
    */
    AuthApi,

    /**
    * The CookiesApi service constructor.
    * @property {module:api/CookiesApi}
    */
    CookiesApi,

    /**
    * The DynamicDataApi service constructor.
    * @property {module:api/DynamicDataApi}
    */
    DynamicDataApi,

    /**
    * The HTTPMethodsApi service constructor.
    * @property {module:api/HTTPMethodsApi}
    */
    HTTPMethodsApi,

    /**
    * The ImagesApi service constructor.
    * @property {module:api/ImagesApi}
    */
    ImagesApi,

    /**
    * The RedirectsApi service constructor.
    * @property {module:api/RedirectsApi}
    */
    RedirectsApi,

    /**
    * The RequestInspectionApi service constructor.
    * @property {module:api/RequestInspectionApi}
    */
    RequestInspectionApi,

    /**
    * The ResponseFormatsApi service constructor.
    * @property {module:api/ResponseFormatsApi}
    */
    ResponseFormatsApi,

    /**
    * The ResponseInspectionApi service constructor.
    * @property {module:api/ResponseInspectionApi}
    */
    ResponseInspectionApi,

    /**
    * The StatusCodesApi service constructor.
    * @property {module:api/StatusCodesApi}
    */
    StatusCodesApi
};
