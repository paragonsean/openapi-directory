/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Auth service.
* @module api/AuthApi
* @version 0.9.2
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the basicAuthUserPasswdGet operation.
     * @callback module:api/AuthApi~basicAuthUserPasswdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * @param {String} user 
     * @param {String} passwd 
     * @param {module:api/AuthApi~basicAuthUserPasswdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    basicAuthUserPasswdGet(user, passwd, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling basicAuthUserPasswdGet");
      }
      // verify the required parameter 'passwd' is set
      if (passwd === undefined || passwd === null) {
        throw new Error("Missing the required parameter 'passwd' when calling basicAuthUserPasswdGet");
      }

      let pathParams = {
        'user': user,
        'passwd': passwd
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/basic-auth/{user}/{passwd}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bearerGet operation.
     * @callback module:api/AuthApi~bearerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts the user for authorization using bearer authentication.
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] 
     * @param {module:api/AuthApi~bearerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bearerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bearer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digestAuthQopUserPasswdAlgorithmGet operation.
     * @callback module:api/AuthApi~digestAuthQopUserPasswdAlgorithmGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * @param {String} qop auth or auth-int
     * @param {String} user 
     * @param {String} passwd 
     * @param {String} algorithm MD5, SHA-256, SHA-512
     * @param {module:api/AuthApi~digestAuthQopUserPasswdAlgorithmGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    digestAuthQopUserPasswdAlgorithmGet(qop, user, passwd, algorithm, callback) {
      let postBody = null;
      // verify the required parameter 'qop' is set
      if (qop === undefined || qop === null) {
        throw new Error("Missing the required parameter 'qop' when calling digestAuthQopUserPasswdAlgorithmGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling digestAuthQopUserPasswdAlgorithmGet");
      }
      // verify the required parameter 'passwd' is set
      if (passwd === undefined || passwd === null) {
        throw new Error("Missing the required parameter 'passwd' when calling digestAuthQopUserPasswdAlgorithmGet");
      }
      // verify the required parameter 'algorithm' is set
      if (algorithm === undefined || algorithm === null) {
        throw new Error("Missing the required parameter 'algorithm' when calling digestAuthQopUserPasswdAlgorithmGet");
      }

      let pathParams = {
        'qop': qop,
        'user': user,
        'passwd': passwd,
        'algorithm': algorithm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/digest-auth/{qop}/{user}/{passwd}/{algorithm}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digestAuthQopUserPasswdAlgorithmStaleAfterGet operation.
     * @callback module:api/AuthApi~digestAuthQopUserPasswdAlgorithmStaleAfterGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * allow settings the stale_after argument. 
     * @param {String} qop auth or auth-int
     * @param {String} user 
     * @param {String} passwd 
     * @param {String} algorithm MD5, SHA-256, SHA-512
     * @param {String} staleAfter 
     * @param {module:api/AuthApi~digestAuthQopUserPasswdAlgorithmStaleAfterGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    digestAuthQopUserPasswdAlgorithmStaleAfterGet(qop, user, passwd, algorithm, staleAfter, callback) {
      let postBody = null;
      // verify the required parameter 'qop' is set
      if (qop === undefined || qop === null) {
        throw new Error("Missing the required parameter 'qop' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet");
      }
      // verify the required parameter 'passwd' is set
      if (passwd === undefined || passwd === null) {
        throw new Error("Missing the required parameter 'passwd' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet");
      }
      // verify the required parameter 'algorithm' is set
      if (algorithm === undefined || algorithm === null) {
        throw new Error("Missing the required parameter 'algorithm' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet");
      }
      // verify the required parameter 'staleAfter' is set
      if (staleAfter === undefined || staleAfter === null) {
        throw new Error("Missing the required parameter 'staleAfter' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet");
      }

      let pathParams = {
        'qop': qop,
        'user': user,
        'passwd': passwd,
        'algorithm': algorithm,
        'stale_after': staleAfter
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the digestAuthQopUserPasswdGet operation.
     * @callback module:api/AuthApi~digestAuthQopUserPasswdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts the user for authorization using Digest Auth.
     * @param {String} qop auth or auth-int
     * @param {String} user 
     * @param {String} passwd 
     * @param {module:api/AuthApi~digestAuthQopUserPasswdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    digestAuthQopUserPasswdGet(qop, user, passwd, callback) {
      let postBody = null;
      // verify the required parameter 'qop' is set
      if (qop === undefined || qop === null) {
        throw new Error("Missing the required parameter 'qop' when calling digestAuthQopUserPasswdGet");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling digestAuthQopUserPasswdGet");
      }
      // verify the required parameter 'passwd' is set
      if (passwd === undefined || passwd === null) {
        throw new Error("Missing the required parameter 'passwd' when calling digestAuthQopUserPasswdGet");
      }

      let pathParams = {
        'qop': qop,
        'user': user,
        'passwd': passwd
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/digest-auth/{qop}/{user}/{passwd}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hiddenBasicAuthUserPasswdGet operation.
     * @callback module:api/AuthApi~hiddenBasicAuthUserPasswdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * @param {String} user 
     * @param {String} passwd 
     * @param {module:api/AuthApi~hiddenBasicAuthUserPasswdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hiddenBasicAuthUserPasswdGet(user, passwd, callback) {
      let postBody = null;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling hiddenBasicAuthUserPasswdGet");
      }
      // verify the required parameter 'passwd' is set
      if (passwd === undefined || passwd === null) {
        throw new Error("Missing the required parameter 'passwd' when calling hiddenBasicAuthUserPasswdGet");
      }

      let pathParams = {
        'user': user,
        'passwd': passwd
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/hidden-basic-auth/{user}/{passwd}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
