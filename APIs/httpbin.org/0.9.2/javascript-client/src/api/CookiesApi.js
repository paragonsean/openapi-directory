/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Cookies service.
* @module api/CookiesApi
* @version 0.9.2
*/
export default class CookiesApi {

    /**
    * Constructs a new CookiesApi. 
    * @alias module:api/CookiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cookiesDeleteGet operation.
     * @callback module:api/CookiesApi~cookiesDeleteGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes cookie(s) as provided by the query string and redirects to cookie list.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} [freeform] 
     * @param {module:api/CookiesApi~cookiesDeleteGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cookiesDeleteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'freeform': opts['freeform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cookies/delete', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cookiesGet operation.
     * @callback module:api/CookiesApi~cookiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns cookie data.
     * @param {module:api/CookiesApi~cookiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cookiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cookies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cookiesSetGet operation.
     * @callback module:api/CookiesApi~cookiesSetGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets cookie(s) as provided by the query string and redirects to cookie list.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} [freeform] 
     * @param {module:api/CookiesApi~cookiesSetGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cookiesSetGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'freeform': opts['freeform']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cookies/set', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cookiesSetNameValueGet operation.
     * @callback module:api/CookiesApi~cookiesSetNameValueGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a cookie and redirects to cookie list.
     * @param {String} name 
     * @param {String} value 
     * @param {module:api/CookiesApi~cookiesSetNameValueGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cookiesSetNameValueGet(name, value, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cookiesSetNameValueGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling cookiesSetNameValueGet");
      }

      let pathParams = {
        'name': name,
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cookies/set/{name}/{value}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
