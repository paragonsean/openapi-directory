/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* DynamicData service.
* @module api/DynamicDataApi
* @version 0.9.2
*/
export default class DynamicDataApi {

    /**
    * Constructs a new DynamicDataApi. 
    * @alias module:api/DynamicDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the base64ValueGet operation.
     * @callback module:api/DynamicDataApi~base64ValueGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decodes base64url-encoded string.
     * @param {String} value 
     * @param {module:api/DynamicDataApi~base64ValueGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    base64ValueGet(value, callback) {
      let postBody = null;
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling base64ValueGet");
      }

      let pathParams = {
        'value': value
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/base64/{value}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bytesNGet operation.
     * @callback module:api/DynamicDataApi~bytesNGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns n random bytes generated with given seed
     * @param {Number} n 
     * @param {module:api/DynamicDataApi~bytesNGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bytesNGet(n, callback) {
      let postBody = null;
      // verify the required parameter 'n' is set
      if (n === undefined || n === null) {
        throw new Error("Missing the required parameter 'n' when calling bytesNGet");
      }

      let pathParams = {
        'n': n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bytes/{n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delayDelayDelete operation.
     * @callback module:api/DynamicDataApi~delayDelayDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a delayed response (max of 10 seconds).
     * @param {Number} delay 
     * @param {module:api/DynamicDataApi~delayDelayDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delayDelayDelete(delay, callback) {
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayDelayDelete");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delay/{delay}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delayDelayGet operation.
     * @callback module:api/DynamicDataApi~delayDelayGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a delayed response (max of 10 seconds).
     * @param {Number} delay 
     * @param {module:api/DynamicDataApi~delayDelayGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delayDelayGet(delay, callback) {
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayDelayGet");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delay/{delay}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delayDelayPatch operation.
     * @callback module:api/DynamicDataApi~delayDelayPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a delayed response (max of 10 seconds).
     * @param {Number} delay 
     * @param {module:api/DynamicDataApi~delayDelayPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delayDelayPatch(delay, callback) {
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayDelayPatch");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delay/{delay}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delayDelayPost operation.
     * @callback module:api/DynamicDataApi~delayDelayPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a delayed response (max of 10 seconds).
     * @param {Number} delay 
     * @param {module:api/DynamicDataApi~delayDelayPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delayDelayPost(delay, callback) {
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayDelayPost");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delay/{delay}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delayDelayPut operation.
     * @callback module:api/DynamicDataApi~delayDelayPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a delayed response (max of 10 seconds).
     * @param {Number} delay 
     * @param {module:api/DynamicDataApi~delayDelayPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delayDelayPut(delay, callback) {
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayDelayPut");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delay/{delay}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delayDelayTrace operation.
     * @callback module:api/DynamicDataApi~delayDelayTraceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a delayed response (max of 10 seconds).
     * @param {Number} delay 
     * @param {module:api/DynamicDataApi~delayDelayTraceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delayDelayTrace(delay, callback) {
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayDelayTrace");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/delay/{delay}', 'TRACE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dripGet operation.
     * @callback module:api/DynamicDataApi~dripGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Drips data over a duration after an optional initial delay.
     * @param {Object} opts Optional parameters
     * @param {Number} [duration = 2)] The amount of time (in seconds) over which to drip each byte
     * @param {Number} [numbytes = 10)] The number of bytes to respond with
     * @param {Number} [code = 200)] The response code that will be returned
     * @param {Number} [delay = 2)] The amount of time (in seconds) to delay before responding
     * @param {module:api/DynamicDataApi~dripGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dripGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'duration': opts['duration'],
        'numbytes': opts['numbytes'],
        'code': opts['code'],
        'delay': opts['delay']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/drip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linksNOffsetGet operation.
     * @callback module:api/DynamicDataApi~linksNOffsetGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a page containing n links to other pages which do the same.
     * @param {Number} n 
     * @param {Number} offset 
     * @param {module:api/DynamicDataApi~linksNOffsetGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    linksNOffsetGet(n, offset, callback) {
      let postBody = null;
      // verify the required parameter 'n' is set
      if (n === undefined || n === null) {
        throw new Error("Missing the required parameter 'n' when calling linksNOffsetGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling linksNOffsetGet");
      }

      let pathParams = {
        'n': n,
        'offset': offset
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/links/{n}/{offset}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rangeNumbytesGet operation.
     * @callback module:api/DynamicDataApi~rangeNumbytesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * @param {Number} numbytes 
     * @param {module:api/DynamicDataApi~rangeNumbytesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rangeNumbytesGet(numbytes, callback) {
      let postBody = null;
      // verify the required parameter 'numbytes' is set
      if (numbytes === undefined || numbytes === null) {
        throw new Error("Missing the required parameter 'numbytes' when calling rangeNumbytesGet");
      }

      let pathParams = {
        'numbytes': numbytes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/range/{numbytes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamBytesNGet operation.
     * @callback module:api/DynamicDataApi~streamBytesNGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * @param {Number} n 
     * @param {module:api/DynamicDataApi~streamBytesNGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamBytesNGet(n, callback) {
      let postBody = null;
      // verify the required parameter 'n' is set
      if (n === undefined || n === null) {
        throw new Error("Missing the required parameter 'n' when calling streamBytesNGet");
      }

      let pathParams = {
        'n': n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stream-bytes/{n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamNGet operation.
     * @callback module:api/DynamicDataApi~streamNGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stream n JSON responses
     * @param {Number} n 
     * @param {module:api/DynamicDataApi~streamNGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    streamNGet(n, callback) {
      let postBody = null;
      // verify the required parameter 'n' is set
      if (n === undefined || n === null) {
        throw new Error("Missing the required parameter 'n' when calling streamNGet");
      }

      let pathParams = {
        'n': n
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stream/{n}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uuidGet operation.
     * @callback module:api/DynamicDataApi~uuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a UUID4.
     * @param {module:api/DynamicDataApi~uuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uuidGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
