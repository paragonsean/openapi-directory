/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* StatusCodes service.
* @module api/StatusCodesApi
* @version 0.9.2
*/
export default class StatusCodesApi {

    /**
    * Constructs a new StatusCodesApi. 
    * @alias module:api/StatusCodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the statusCodesDelete operation.
     * @callback module:api/StatusCodesApi~statusCodesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return status code or random status code if more than one are given
     * @param {String} codes 
     * @param {module:api/StatusCodesApi~statusCodesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCodesDelete(codes, callback) {
      let postBody = null;
      // verify the required parameter 'codes' is set
      if (codes === undefined || codes === null) {
        throw new Error("Missing the required parameter 'codes' when calling statusCodesDelete");
      }

      let pathParams = {
        'codes': codes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{codes}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusCodesGet operation.
     * @callback module:api/StatusCodesApi~statusCodesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return status code or random status code if more than one are given
     * @param {String} codes 
     * @param {module:api/StatusCodesApi~statusCodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCodesGet(codes, callback) {
      let postBody = null;
      // verify the required parameter 'codes' is set
      if (codes === undefined || codes === null) {
        throw new Error("Missing the required parameter 'codes' when calling statusCodesGet");
      }

      let pathParams = {
        'codes': codes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{codes}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusCodesPatch operation.
     * @callback module:api/StatusCodesApi~statusCodesPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return status code or random status code if more than one are given
     * @param {String} codes 
     * @param {module:api/StatusCodesApi~statusCodesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCodesPatch(codes, callback) {
      let postBody = null;
      // verify the required parameter 'codes' is set
      if (codes === undefined || codes === null) {
        throw new Error("Missing the required parameter 'codes' when calling statusCodesPatch");
      }

      let pathParams = {
        'codes': codes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{codes}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusCodesPost operation.
     * @callback module:api/StatusCodesApi~statusCodesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return status code or random status code if more than one are given
     * @param {String} codes 
     * @param {module:api/StatusCodesApi~statusCodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCodesPost(codes, callback) {
      let postBody = null;
      // verify the required parameter 'codes' is set
      if (codes === undefined || codes === null) {
        throw new Error("Missing the required parameter 'codes' when calling statusCodesPost");
      }

      let pathParams = {
        'codes': codes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{codes}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusCodesPut operation.
     * @callback module:api/StatusCodesApi~statusCodesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return status code or random status code if more than one are given
     * @param {String} codes 
     * @param {module:api/StatusCodesApi~statusCodesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCodesPut(codes, callback) {
      let postBody = null;
      // verify the required parameter 'codes' is set
      if (codes === undefined || codes === null) {
        throw new Error("Missing the required parameter 'codes' when calling statusCodesPut");
      }

      let pathParams = {
        'codes': codes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{codes}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusCodesTrace operation.
     * @callback module:api/StatusCodesApi~statusCodesTraceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return status code or random status code if more than one are given
     * @param {String} codes 
     * @param {module:api/StatusCodesApi~statusCodesTraceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    statusCodesTrace(codes, callback) {
      let postBody = null;
      // verify the required parameter 'codes' is set
      if (codes === undefined || codes === null) {
        throw new Error("Missing the required parameter 'codes' when calling statusCodesTrace");
      }

      let pathParams = {
        'codes': codes
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/status/{codes}', 'TRACE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
