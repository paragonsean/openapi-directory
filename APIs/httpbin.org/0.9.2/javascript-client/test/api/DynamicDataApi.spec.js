/**
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HttpbinOrg);
  }
}(this, function(expect, HttpbinOrg) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HttpbinOrg.DynamicDataApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DynamicDataApi', function() {
    describe('base64ValueGet', function() {
      it('should call base64ValueGet successfully', function(done) {
        //uncomment below and update the code to test base64ValueGet
        //instance.base64ValueGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bytesNGet', function() {
      it('should call bytesNGet successfully', function(done) {
        //uncomment below and update the code to test bytesNGet
        //instance.bytesNGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delayDelayDelete', function() {
      it('should call delayDelayDelete successfully', function(done) {
        //uncomment below and update the code to test delayDelayDelete
        //instance.delayDelayDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delayDelayGet', function() {
      it('should call delayDelayGet successfully', function(done) {
        //uncomment below and update the code to test delayDelayGet
        //instance.delayDelayGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delayDelayPatch', function() {
      it('should call delayDelayPatch successfully', function(done) {
        //uncomment below and update the code to test delayDelayPatch
        //instance.delayDelayPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delayDelayPost', function() {
      it('should call delayDelayPost successfully', function(done) {
        //uncomment below and update the code to test delayDelayPost
        //instance.delayDelayPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delayDelayPut', function() {
      it('should call delayDelayPut successfully', function(done) {
        //uncomment below and update the code to test delayDelayPut
        //instance.delayDelayPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delayDelayTrace', function() {
      it('should call delayDelayTrace successfully', function(done) {
        //uncomment below and update the code to test delayDelayTrace
        //instance.delayDelayTrace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dripGet', function() {
      it('should call dripGet successfully', function(done) {
        //uncomment below and update the code to test dripGet
        //instance.dripGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('linksNOffsetGet', function() {
      it('should call linksNOffsetGet successfully', function(done) {
        //uncomment below and update the code to test linksNOffsetGet
        //instance.linksNOffsetGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rangeNumbytesGet', function() {
      it('should call rangeNumbytesGet successfully', function(done) {
        //uncomment below and update the code to test rangeNumbytesGet
        //instance.rangeNumbytesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamBytesNGet', function() {
      it('should call streamBytesNGet successfully', function(done) {
        //uncomment below and update the code to test streamBytesNGet
        //instance.streamBytesNGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('streamNGet', function() {
      it('should call streamNGet successfully', function(done) {
        //uncomment below and update the code to test streamNGet
        //instance.streamNGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uuidGet', function() {
      it('should call uuidGet successfully', function(done) {
        //uncomment below and update the code to test uuidGet
        //instance.uuidGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
