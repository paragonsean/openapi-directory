/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatusCodesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusCodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatusCodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for statusCodesDelete
     * @param codes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesDeleteCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCodesDeleteValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling statusCodesDelete(Async)");
        }

        return statusCodesDeleteCall(codes, _callback);

    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public void statusCodesDelete(String codes) throws ApiException {
        statusCodesDeleteWithHttpInfo(codes);
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusCodesDeleteWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = statusCodesDeleteValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return status code or random status code if more than one are given (asynchronously)
     * 
     * @param codes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesDeleteAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCodesDeleteValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusCodesGet
     * @param codes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesGetCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCodesGetValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling statusCodesGet(Async)");
        }

        return statusCodesGetCall(codes, _callback);

    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public void statusCodesGet(String codes) throws ApiException {
        statusCodesGetWithHttpInfo(codes);
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusCodesGetWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = statusCodesGetValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return status code or random status code if more than one are given (asynchronously)
     * 
     * @param codes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesGetAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCodesGetValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusCodesPatch
     * @param codes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesPatchCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCodesPatchValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling statusCodesPatch(Async)");
        }

        return statusCodesPatchCall(codes, _callback);

    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public void statusCodesPatch(String codes) throws ApiException {
        statusCodesPatchWithHttpInfo(codes);
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusCodesPatchWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = statusCodesPatchValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return status code or random status code if more than one are given (asynchronously)
     * 
     * @param codes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesPatchAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCodesPatchValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusCodesPost
     * @param codes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesPostCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCodesPostValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling statusCodesPost(Async)");
        }

        return statusCodesPostCall(codes, _callback);

    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public void statusCodesPost(String codes) throws ApiException {
        statusCodesPostWithHttpInfo(codes);
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusCodesPostWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = statusCodesPostValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return status code or random status code if more than one are given (asynchronously)
     * 
     * @param codes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesPostAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCodesPostValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusCodesPut
     * @param codes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesPutCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCodesPutValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling statusCodesPut(Async)");
        }

        return statusCodesPutCall(codes, _callback);

    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public void statusCodesPut(String codes) throws ApiException {
        statusCodesPutWithHttpInfo(codes);
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusCodesPutWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = statusCodesPutValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return status code or random status code if more than one are given (asynchronously)
     * 
     * @param codes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesPutAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCodesPutValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusCodesTrace
     * @param codes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesTraceCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "TRACE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusCodesTraceValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling statusCodesTrace(Async)");
        }

        return statusCodesTraceCall(codes, _callback);

    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public void statusCodesTrace(String codes) throws ApiException {
        statusCodesTraceWithHttpInfo(codes);
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> statusCodesTraceWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = statusCodesTraceValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return status code or random status code if more than one are given (asynchronously)
     * 
     * @param codes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCodesTraceAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusCodesTraceValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
