/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DynamicDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DynamicDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DynamicDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for base64ValueGet
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call base64ValueGetCall(String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base64/{value}"
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call base64ValueGetValidateBeforeCall(String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling base64ValueGet(Async)");
        }

        return base64ValueGetCall(value, _callback);

    }

    /**
     * Decodes base64url-encoded string.
     * 
     * @param value  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
     </table>
     */
    public void base64ValueGet(String value) throws ApiException {
        base64ValueGetWithHttpInfo(value);
    }

    /**
     * Decodes base64url-encoded string.
     * 
     * @param value  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> base64ValueGetWithHttpInfo(String value) throws ApiException {
        okhttp3.Call localVarCall = base64ValueGetValidateBeforeCall(value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Decodes base64url-encoded string. (asynchronously)
     * 
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call base64ValueGetAsync(String value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = base64ValueGetValidateBeforeCall(value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bytesNGet
     * @param n  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bytesNGetCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bytes/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bytesNGetValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling bytesNGet(Async)");
        }

        return bytesNGetCall(n, _callback);

    }

    /**
     * Returns n random bytes generated with given seed
     * 
     * @param n  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public void bytesNGet(Integer n) throws ApiException {
        bytesNGetWithHttpInfo(n);
    }

    /**
     * Returns n random bytes generated with given seed
     * 
     * @param n  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bytesNGetWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = bytesNGetValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns n random bytes generated with given seed (asynchronously)
     * 
     * @param n  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bytesNGetAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bytesNGetValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delayDelayDelete
     * @param delay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayDeleteCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayDelayDeleteValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayDelayDelete(Async)");
        }

        return delayDelayDeleteCall(delay, _callback);

    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public void delayDelayDelete(Integer delay) throws ApiException {
        delayDelayDeleteWithHttpInfo(delay);
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delayDelayDeleteWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayDelayDeleteValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a delayed response (max of 10 seconds). (asynchronously)
     * 
     * @param delay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayDeleteAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayDelayDeleteValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delayDelayGet
     * @param delay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayGetCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayDelayGetValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayDelayGet(Async)");
        }

        return delayDelayGetCall(delay, _callback);

    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public void delayDelayGet(Integer delay) throws ApiException {
        delayDelayGetWithHttpInfo(delay);
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delayDelayGetWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayDelayGetValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a delayed response (max of 10 seconds). (asynchronously)
     * 
     * @param delay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayGetAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayDelayGetValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delayDelayPatch
     * @param delay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayPatchCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayDelayPatchValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayDelayPatch(Async)");
        }

        return delayDelayPatchCall(delay, _callback);

    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public void delayDelayPatch(Integer delay) throws ApiException {
        delayDelayPatchWithHttpInfo(delay);
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delayDelayPatchWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayDelayPatchValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a delayed response (max of 10 seconds). (asynchronously)
     * 
     * @param delay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayPatchAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayDelayPatchValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delayDelayPost
     * @param delay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayPostCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayDelayPostValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayDelayPost(Async)");
        }

        return delayDelayPostCall(delay, _callback);

    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public void delayDelayPost(Integer delay) throws ApiException {
        delayDelayPostWithHttpInfo(delay);
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delayDelayPostWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayDelayPostValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a delayed response (max of 10 seconds). (asynchronously)
     * 
     * @param delay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayPostAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayDelayPostValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delayDelayPut
     * @param delay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayPutCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayDelayPutValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayDelayPut(Async)");
        }

        return delayDelayPutCall(delay, _callback);

    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public void delayDelayPut(Integer delay) throws ApiException {
        delayDelayPutWithHttpInfo(delay);
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delayDelayPutWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayDelayPutValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a delayed response (max of 10 seconds). (asynchronously)
     * 
     * @param delay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayPutAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayDelayPutValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delayDelayTrace
     * @param delay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayTraceCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "TRACE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayDelayTraceValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayDelayTrace(Async)");
        }

        return delayDelayTraceCall(delay, _callback);

    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public void delayDelayTrace(Integer delay) throws ApiException {
        delayDelayTraceWithHttpInfo(delay);
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> delayDelayTraceWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayDelayTraceValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a delayed response (max of 10 seconds). (asynchronously)
     * 
     * @param delay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call delayDelayTraceAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayDelayTraceValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dripGet
     * @param duration The amount of time (in seconds) over which to drip each byte (optional, default to 2)
     * @param numbytes The number of bytes to respond with (optional, default to 10)
     * @param code The response code that will be returned (optional, default to 200)
     * @param delay The amount of time (in seconds) to delay before responding (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dripGetCall(BigDecimal duration, Integer numbytes, Integer code, BigDecimal delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (numbytes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numbytes", numbytes));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (delay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delay", delay));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dripGetValidateBeforeCall(BigDecimal duration, Integer numbytes, Integer code, BigDecimal delay, final ApiCallback _callback) throws ApiException {
        return dripGetCall(duration, numbytes, code, delay, _callback);

    }

    /**
     * Drips data over a duration after an optional initial delay.
     * 
     * @param duration The amount of time (in seconds) over which to drip each byte (optional, default to 2)
     * @param numbytes The number of bytes to respond with (optional, default to 10)
     * @param code The response code that will be returned (optional, default to 200)
     * @param delay The amount of time (in seconds) to delay before responding (optional, default to 2)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
     </table>
     */
    public void dripGet(BigDecimal duration, Integer numbytes, Integer code, BigDecimal delay) throws ApiException {
        dripGetWithHttpInfo(duration, numbytes, code, delay);
    }

    /**
     * Drips data over a duration after an optional initial delay.
     * 
     * @param duration The amount of time (in seconds) over which to drip each byte (optional, default to 2)
     * @param numbytes The number of bytes to respond with (optional, default to 10)
     * @param code The response code that will be returned (optional, default to 200)
     * @param delay The amount of time (in seconds) to delay before responding (optional, default to 2)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dripGetWithHttpInfo(BigDecimal duration, Integer numbytes, Integer code, BigDecimal delay) throws ApiException {
        okhttp3.Call localVarCall = dripGetValidateBeforeCall(duration, numbytes, code, delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Drips data over a duration after an optional initial delay. (asynchronously)
     * 
     * @param duration The amount of time (in seconds) over which to drip each byte (optional, default to 2)
     * @param numbytes The number of bytes to respond with (optional, default to 10)
     * @param code The response code that will be returned (optional, default to 200)
     * @param delay The amount of time (in seconds) to delay before responding (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dripGetAsync(BigDecimal duration, Integer numbytes, Integer code, BigDecimal delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dripGetValidateBeforeCall(duration, numbytes, code, delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for linksNOffsetGet
     * @param n  (required)
     * @param offset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linksNOffsetGetCall(Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{n}/{offset}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()))
            .replace("{" + "offset" + "}", localVarApiClient.escapeString(offset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linksNOffsetGetValidateBeforeCall(Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling linksNOffsetGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling linksNOffsetGet(Async)");
        }

        return linksNOffsetGetCall(n, offset, _callback);

    }

    /**
     * Generate a page containing n links to other pages which do the same.
     * 
     * @param n  (required)
     * @param offset  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
     </table>
     */
    public void linksNOffsetGet(Integer n, Integer offset) throws ApiException {
        linksNOffsetGetWithHttpInfo(n, offset);
    }

    /**
     * Generate a page containing n links to other pages which do the same.
     * 
     * @param n  (required)
     * @param offset  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> linksNOffsetGetWithHttpInfo(Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = linksNOffsetGetValidateBeforeCall(n, offset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate a page containing n links to other pages which do the same. (asynchronously)
     * 
     * @param n  (required)
     * @param offset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linksNOffsetGetAsync(Integer n, Integer offset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = linksNOffsetGetValidateBeforeCall(n, offset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rangeNumbytesGet
     * @param numbytes  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rangeNumbytesGetCall(Integer numbytes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/range/{numbytes}"
            .replace("{" + "numbytes" + "}", localVarApiClient.escapeString(numbytes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rangeNumbytesGetValidateBeforeCall(Integer numbytes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'numbytes' is set
        if (numbytes == null) {
            throw new ApiException("Missing the required parameter 'numbytes' when calling rangeNumbytesGet(Async)");
        }

        return rangeNumbytesGetCall(numbytes, _callback);

    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
     * @param numbytes  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public void rangeNumbytesGet(Integer numbytes) throws ApiException {
        rangeNumbytesGetWithHttpInfo(numbytes);
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
     * @param numbytes  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rangeNumbytesGetWithHttpInfo(Integer numbytes) throws ApiException {
        okhttp3.Call localVarCall = rangeNumbytesGetValidateBeforeCall(numbytes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet. (asynchronously)
     * 
     * @param numbytes  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rangeNumbytesGetAsync(Integer numbytes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rangeNumbytesGetValidateBeforeCall(numbytes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamBytesNGet
     * @param n  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamBytesNGetCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream-bytes/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamBytesNGetValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling streamBytesNGet(Async)");
        }

        return streamBytesNGetCall(n, _callback);

    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
     * @param n  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public void streamBytesNGet(Integer n) throws ApiException {
        streamBytesNGetWithHttpInfo(n);
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
     * @param n  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamBytesNGetWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = streamBytesNGetValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet. (asynchronously)
     * 
     * @param n  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamBytesNGetAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamBytesNGetValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamNGet
     * @param n  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamNGetCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamNGetValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling streamNGet(Async)");
        }

        return streamNGetCall(n, _callback);

    }

    /**
     * Stream n JSON responses
     * 
     * @param n  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
     </table>
     */
    public void streamNGet(Integer n) throws ApiException {
        streamNGetWithHttpInfo(n);
    }

    /**
     * Stream n JSON responses
     * 
     * @param n  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamNGetWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = streamNGetValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stream n JSON responses (asynchronously)
     * 
     * @param n  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamNGetAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamNGetValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uuidGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uuidGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uuid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uuidGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return uuidGetCall(_callback);

    }

    /**
     * Return a UUID4.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
     </table>
     */
    public void uuidGet() throws ApiException {
        uuidGetWithHttpInfo();
    }

    /**
     * Return a UUID4.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uuidGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = uuidGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return a UUID4. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uuidGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uuidGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
