/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for basicAuthUserPasswdGet
     * @param user  (required)
     * @param passwd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call basicAuthUserPasswdGetCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic-auth/{user}/{passwd}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call basicAuthUserPasswdGetValidateBeforeCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling basicAuthUserPasswdGet(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling basicAuthUserPasswdGet(Async)");
        }

        return basicAuthUserPasswdGetCall(user, passwd, _callback);

    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void basicAuthUserPasswdGet(String user, String passwd) throws ApiException {
        basicAuthUserPasswdGetWithHttpInfo(user, passwd);
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> basicAuthUserPasswdGetWithHttpInfo(String user, String passwd) throws ApiException {
        okhttp3.Call localVarCall = basicAuthUserPasswdGetValidateBeforeCall(user, passwd, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth. (asynchronously)
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call basicAuthUserPasswdGetAsync(String user, String passwd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = basicAuthUserPasswdGetValidateBeforeCall(user, passwd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bearerGet
     * @param authorization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bearerGetCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bearer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bearerGetValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        return bearerGetCall(authorization, _callback);

    }

    /**
     * Prompts the user for authorization using bearer authentication.
     * 
     * @param authorization  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void bearerGet(String authorization) throws ApiException {
        bearerGetWithHttpInfo(authorization);
    }

    /**
     * Prompts the user for authorization using bearer authentication.
     * 
     * @param authorization  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bearerGetWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = bearerGetValidateBeforeCall(authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Prompts the user for authorization using bearer authentication. (asynchronously)
     * 
     * @param authorization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bearerGetAsync(String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bearerGetValidateBeforeCall(authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for digestAuthQopUserPasswdAlgorithmGet
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digestAuthQopUserPasswdAlgorithmGetCall(String qop, String user, String passwd, String algorithm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digest-auth/{qop}/{user}/{passwd}/{algorithm}"
            .replace("{" + "qop" + "}", localVarApiClient.escapeString(qop.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()))
            .replace("{" + "algorithm" + "}", localVarApiClient.escapeString(algorithm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call digestAuthQopUserPasswdAlgorithmGetValidateBeforeCall(String qop, String user, String passwd, String algorithm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qop' is set
        if (qop == null) {
            throw new ApiException("Missing the required parameter 'qop' when calling digestAuthQopUserPasswdAlgorithmGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling digestAuthQopUserPasswdAlgorithmGet(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling digestAuthQopUserPasswdAlgorithmGet(Async)");
        }

        // verify the required parameter 'algorithm' is set
        if (algorithm == null) {
            throw new ApiException("Missing the required parameter 'algorithm' when calling digestAuthQopUserPasswdAlgorithmGet(Async)");
        }

        return digestAuthQopUserPasswdAlgorithmGetCall(qop, user, passwd, algorithm, _callback);

    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void digestAuthQopUserPasswdAlgorithmGet(String qop, String user, String passwd, String algorithm) throws ApiException {
        digestAuthQopUserPasswdAlgorithmGetWithHttpInfo(qop, user, passwd, algorithm);
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> digestAuthQopUserPasswdAlgorithmGetWithHttpInfo(String qop, String user, String passwd, String algorithm) throws ApiException {
        okhttp3.Call localVarCall = digestAuthQopUserPasswdAlgorithmGetValidateBeforeCall(qop, user, passwd, algorithm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm. (asynchronously)
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digestAuthQopUserPasswdAlgorithmGetAsync(String qop, String user, String passwd, String algorithm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = digestAuthQopUserPasswdAlgorithmGetValidateBeforeCall(qop, user, passwd, algorithm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for digestAuthQopUserPasswdAlgorithmStaleAfterGet
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param staleAfter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digestAuthQopUserPasswdAlgorithmStaleAfterGetCall(String qop, String user, String passwd, String algorithm, String staleAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}"
            .replace("{" + "qop" + "}", localVarApiClient.escapeString(qop.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()))
            .replace("{" + "algorithm" + "}", localVarApiClient.escapeString(algorithm.toString()))
            .replace("{" + "stale_after" + "}", localVarApiClient.escapeString(staleAfter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call digestAuthQopUserPasswdAlgorithmStaleAfterGetValidateBeforeCall(String qop, String user, String passwd, String algorithm, String staleAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qop' is set
        if (qop == null) {
            throw new ApiException("Missing the required parameter 'qop' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet(Async)");
        }

        // verify the required parameter 'algorithm' is set
        if (algorithm == null) {
            throw new ApiException("Missing the required parameter 'algorithm' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet(Async)");
        }

        // verify the required parameter 'staleAfter' is set
        if (staleAfter == null) {
            throw new ApiException("Missing the required parameter 'staleAfter' when calling digestAuthQopUserPasswdAlgorithmStaleAfterGet(Async)");
        }

        return digestAuthQopUserPasswdAlgorithmStaleAfterGetCall(qop, user, passwd, algorithm, staleAfter, _callback);

    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * allow settings the stale_after argument. 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param staleAfter  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void digestAuthQopUserPasswdAlgorithmStaleAfterGet(String qop, String user, String passwd, String algorithm, String staleAfter) throws ApiException {
        digestAuthQopUserPasswdAlgorithmStaleAfterGetWithHttpInfo(qop, user, passwd, algorithm, staleAfter);
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * allow settings the stale_after argument. 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param staleAfter  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> digestAuthQopUserPasswdAlgorithmStaleAfterGetWithHttpInfo(String qop, String user, String passwd, String algorithm, String staleAfter) throws ApiException {
        okhttp3.Call localVarCall = digestAuthQopUserPasswdAlgorithmStaleAfterGetValidateBeforeCall(qop, user, passwd, algorithm, staleAfter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm. (asynchronously)
     * allow settings the stale_after argument. 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param staleAfter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digestAuthQopUserPasswdAlgorithmStaleAfterGetAsync(String qop, String user, String passwd, String algorithm, String staleAfter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = digestAuthQopUserPasswdAlgorithmStaleAfterGetValidateBeforeCall(qop, user, passwd, algorithm, staleAfter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for digestAuthQopUserPasswdGet
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digestAuthQopUserPasswdGetCall(String qop, String user, String passwd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digest-auth/{qop}/{user}/{passwd}"
            .replace("{" + "qop" + "}", localVarApiClient.escapeString(qop.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call digestAuthQopUserPasswdGetValidateBeforeCall(String qop, String user, String passwd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qop' is set
        if (qop == null) {
            throw new ApiException("Missing the required parameter 'qop' when calling digestAuthQopUserPasswdGet(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling digestAuthQopUserPasswdGet(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling digestAuthQopUserPasswdGet(Async)");
        }

        return digestAuthQopUserPasswdGetCall(qop, user, passwd, _callback);

    }

    /**
     * Prompts the user for authorization using Digest Auth.
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void digestAuthQopUserPasswdGet(String qop, String user, String passwd) throws ApiException {
        digestAuthQopUserPasswdGetWithHttpInfo(qop, user, passwd);
    }

    /**
     * Prompts the user for authorization using Digest Auth.
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> digestAuthQopUserPasswdGetWithHttpInfo(String qop, String user, String passwd) throws ApiException {
        okhttp3.Call localVarCall = digestAuthQopUserPasswdGetValidateBeforeCall(qop, user, passwd, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Prompts the user for authorization using Digest Auth. (asynchronously)
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digestAuthQopUserPasswdGetAsync(String qop, String user, String passwd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = digestAuthQopUserPasswdGetValidateBeforeCall(qop, user, passwd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hiddenBasicAuthUserPasswdGet
     * @param user  (required)
     * @param passwd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hiddenBasicAuthUserPasswdGetCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hidden-basic-auth/{user}/{passwd}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hiddenBasicAuthUserPasswdGetValidateBeforeCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling hiddenBasicAuthUserPasswdGet(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling hiddenBasicAuthUserPasswdGet(Async)");
        }

        return hiddenBasicAuthUserPasswdGetCall(user, passwd, _callback);

    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public void hiddenBasicAuthUserPasswdGet(String user, String passwd) throws ApiException {
        hiddenBasicAuthUserPasswdGetWithHttpInfo(user, passwd);
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hiddenBasicAuthUserPasswdGetWithHttpInfo(String user, String passwd) throws ApiException {
        okhttp3.Call localVarCall = hiddenBasicAuthUserPasswdGetValidateBeforeCall(user, passwd, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth. (asynchronously)
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hiddenBasicAuthUserPasswdGetAsync(String user, String passwd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hiddenBasicAuthUserPasswdGetValidateBeforeCall(user, passwd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
