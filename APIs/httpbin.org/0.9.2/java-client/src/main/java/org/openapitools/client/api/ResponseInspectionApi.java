/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResponseInspectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResponseInspectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResponseInspectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cacheGet
     * @param ifModifiedSince  (optional)
     * @param ifNoneMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheGetCall(String ifModifiedSince, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheGetValidateBeforeCall(String ifModifiedSince, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        return cacheGetCall(ifModifiedSince, ifNoneMatch, _callback);

    }

    /**
     * Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.
     * 
     * @param ifModifiedSince  (optional)
     * @param ifNoneMatch  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
     </table>
     */
    public void cacheGet(String ifModifiedSince, String ifNoneMatch) throws ApiException {
        cacheGetWithHttpInfo(ifModifiedSince, ifNoneMatch);
    }

    /**
     * Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.
     * 
     * @param ifModifiedSince  (optional)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cacheGetWithHttpInfo(String ifModifiedSince, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = cacheGetValidateBeforeCall(ifModifiedSince, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise. (asynchronously)
     * 
     * @param ifModifiedSince  (optional)
     * @param ifNoneMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheGetAsync(String ifModifiedSince, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheGetValidateBeforeCall(ifModifiedSince, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cacheValueGet
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheValueGetCall(Integer value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{value}"
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheValueGetValidateBeforeCall(Integer value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cacheValueGet(Async)");
        }

        return cacheValueGetCall(value, _callback);

    }

    /**
     * Sets a Cache-Control header for n seconds.
     * 
     * @param value  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
     </table>
     */
    public void cacheValueGet(Integer value) throws ApiException {
        cacheValueGetWithHttpInfo(value);
    }

    /**
     * Sets a Cache-Control header for n seconds.
     * 
     * @param value  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cacheValueGetWithHttpInfo(Integer value) throws ApiException {
        okhttp3.Call localVarCall = cacheValueGetValidateBeforeCall(value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sets a Cache-Control header for n seconds. (asynchronously)
     * 
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cacheValueGetAsync(Integer value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheValueGetValidateBeforeCall(value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for etagEtagGet
     * @param etag Automatically added (required)
     * @param ifNoneMatch  (optional)
     * @param ifMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call etagEtagGetCall(String etag, String ifNoneMatch, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etag/{etag}"
            .replace("{" + "etag" + "}", localVarApiClient.escapeString(etag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call etagEtagGetValidateBeforeCall(String etag, String ifNoneMatch, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'etag' is set
        if (etag == null) {
            throw new ApiException("Missing the required parameter 'etag' when calling etagEtagGet(Async)");
        }

        return etagEtagGetCall(etag, ifNoneMatch, ifMatch, _callback);

    }

    /**
     * Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.
     * 
     * @param etag Automatically added (required)
     * @param ifNoneMatch  (optional)
     * @param ifMatch  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
     </table>
     */
    public void etagEtagGet(String etag, String ifNoneMatch, String ifMatch) throws ApiException {
        etagEtagGetWithHttpInfo(etag, ifNoneMatch, ifMatch);
    }

    /**
     * Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.
     * 
     * @param etag Automatically added (required)
     * @param ifNoneMatch  (optional)
     * @param ifMatch  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> etagEtagGetWithHttpInfo(String etag, String ifNoneMatch, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = etagEtagGetValidateBeforeCall(etag, ifNoneMatch, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately. (asynchronously)
     * 
     * @param etag Automatically added (required)
     * @param ifNoneMatch  (optional)
     * @param ifMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call etagEtagGetAsync(String etag, String ifNoneMatch, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = etagEtagGetValidateBeforeCall(etag, ifNoneMatch, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for responseHeadersGet
     * @param freeform  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responseHeadersGetCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/response-headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (freeform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("freeform", freeform));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call responseHeadersGetValidateBeforeCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        return responseHeadersGetCall(freeform, _callback);

    }

    /**
     * Returns a set of response headers from the query string.
     * 
     * @param freeform  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public void responseHeadersGet(Map<String, String> freeform) throws ApiException {
        responseHeadersGetWithHttpInfo(freeform);
    }

    /**
     * Returns a set of response headers from the query string.
     * 
     * @param freeform  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> responseHeadersGetWithHttpInfo(Map<String, String> freeform) throws ApiException {
        okhttp3.Call localVarCall = responseHeadersGetValidateBeforeCall(freeform, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a set of response headers from the query string. (asynchronously)
     * 
     * @param freeform  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responseHeadersGetAsync(Map<String, String> freeform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = responseHeadersGetValidateBeforeCall(freeform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for responseHeadersPost
     * @param freeform  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responseHeadersPostCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/response-headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (freeform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("freeform", freeform));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call responseHeadersPostValidateBeforeCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        return responseHeadersPostCall(freeform, _callback);

    }

    /**
     * Returns a set of response headers from the query string.
     * 
     * @param freeform  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public void responseHeadersPost(Map<String, String> freeform) throws ApiException {
        responseHeadersPostWithHttpInfo(freeform);
    }

    /**
     * Returns a set of response headers from the query string.
     * 
     * @param freeform  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> responseHeadersPostWithHttpInfo(Map<String, String> freeform) throws ApiException {
        okhttp3.Call localVarCall = responseHeadersPostValidateBeforeCall(freeform, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns a set of response headers from the query string. (asynchronously)
     * 
     * @param freeform  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call responseHeadersPostAsync(Map<String, String> freeform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = responseHeadersPostValidateBeforeCall(freeform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
