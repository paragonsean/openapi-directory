/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Organization from '../model/Organization';
import Receiver from '../model/Receiver';
import Report from '../model/Report';
import Sender from '../model/Sender';

/**
* Default service.
* @module api/DefaultApi
* @version 0.2.0-oas3
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportsPost operation.
     * @callback module:api/DefaultApi~reportsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a report to the data hub
     * @param {String} client The client's name that matches the client name in metadata
     * @param {String} body The public health information being routed
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [option] Optional ways to process the request
     * @param {Array.<String>} [_default] Dynamic default values for an element. ':' or %3A is used to seperate element name and value
     * @param {Array.<String>} [routeTo] A comma speparated list of receiver names. Limit the list of possible receivers to these receivers.
     * @param {module:api/DefaultApi~reportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    reportsPost(client, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling reportsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reportsPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'client': client,
        'option': opts['option'],
        'default': this.apiClient.buildCollectionParam(opts['_default'], 'csv'),
        'routeTo': this.apiClient.buildCollectionParam(opts['routeTo'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['text/csv'];
      let accepts = ['application/json'];
      let returnType = Report;
      return this.apiClient.callApi(
        '/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsGet operation.
     * @callback module:api/DefaultApi~settingsOrganizationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The settings for all organizations of the system. Must have admin access.
     * @param {module:api/DefaultApi~settingsOrganizationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organization>}
     */
    settingsOrganizationsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organization];
      return this.apiClient.callApi(
        '/settings/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsHead operation.
     * @callback module:api/DefaultApi~settingsOrganizationsHeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrived the last modified for all settings of the system. Must have admin access.
     * @param {module:api/DefaultApi~settingsOrganizationsHeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    settingsOrganizationsHead(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/settings/organizations', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameDelete operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization (and the associated receivers and senders)
     * @param {String} organizationName The name of the organization
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    settingsOrganizationsOrganizationNameDelete(organizationName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameDelete");
      }

      let pathParams = {
        'organizationName': organizationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameGet operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A single organization settings
     * @param {String} organizationName The name of the organization
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    settingsOrganizationsOrganizationNameGet(organizationName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameGet");
      }

      let pathParams = {
        'organizationName': organizationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNamePut operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the direct settings associated with an organization
     * @param {String} organizationName The name of the organization
     * @param {Object} opts Optional parameters
     * @param {module:model/Organization} [organization] 
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organization}
     */
    settingsOrganizationsOrganizationNamePut(organizationName, opts, callback) {
      opts = opts || {};
      let postBody = opts['organization'];
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNamePut");
      }

      let pathParams = {
        'organizationName': organizationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organization;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameReceiversGet operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Receiver>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of receivers and their current settings
     * @param {String} organizationName Fetch receivers with this organization name
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Receiver>}
     */
    settingsOrganizationsOrganizationNameReceiversGet(organizationName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversGet");
      }

      let pathParams = {
        'organizationName': organizationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Receiver];
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/receivers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameReceiversReceiverNameDelete operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receiver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a receiver
     * @param {String} organizationName the organization name
     * @param {String} receiverName The name of the receiver
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receiver}
     */
    settingsOrganizationsOrganizationNameReceiversReceiverNameDelete(organizationName, receiverName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameDelete");
      }
      // verify the required parameter 'receiverName' is set
      if (receiverName === undefined || receiverName === null) {
        throw new Error("Missing the required parameter 'receiverName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameDelete");
      }

      let pathParams = {
        'organizationName': organizationName,
        'receiverName': receiverName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Receiver;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/receivers/{receiverName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameReceiversReceiverNameGet operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversReceiverNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receiver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The settings of a single of receiver
     * @param {String} organizationName Create receivers under this organization name
     * @param {String} receiverName The name of the receiver
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversReceiverNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receiver}
     */
    settingsOrganizationsOrganizationNameReceiversReceiverNameGet(organizationName, receiverName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameGet");
      }
      // verify the required parameter 'receiverName' is set
      if (receiverName === undefined || receiverName === null) {
        throw new Error("Missing the required parameter 'receiverName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameGet");
      }

      let pathParams = {
        'organizationName': organizationName,
        'receiverName': receiverName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Receiver;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/receivers/{receiverName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameReceiversReceiverNamePut operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversReceiverNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Receiver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single reciever
     * @param {String} organizationName Create receivers under this organization name
     * @param {String} receiverName The name of the receiver
     * @param {Object} opts Optional parameters
     * @param {module:model/Receiver} [receiver] 
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameReceiversReceiverNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Receiver}
     */
    settingsOrganizationsOrganizationNameReceiversReceiverNamePut(organizationName, receiverName, opts, callback) {
      opts = opts || {};
      let postBody = opts['receiver'];
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNamePut");
      }
      // verify the required parameter 'receiverName' is set
      if (receiverName === undefined || receiverName === null) {
        throw new Error("Missing the required parameter 'receiverName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNamePut");
      }

      let pathParams = {
        'organizationName': organizationName,
        'receiverName': receiverName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Receiver;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/receivers/{receiverName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameSendersGet operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Sender>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of senders
     * @param {String} organizationName Fetch senders with this organization name
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Sender>}
     */
    settingsOrganizationsOrganizationNameSendersGet(organizationName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersGet");
      }

      let pathParams = {
        'organizationName': organizationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Sender];
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/senders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameSendersSenderNameDelete operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersSenderNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sender} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sender
     * @param {String} organizationName the organization name
     * @param {String} senderName The name of a sender to the data hub
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersSenderNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sender}
     */
    settingsOrganizationsOrganizationNameSendersSenderNameDelete(organizationName, senderName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersSenderNameDelete");
      }
      // verify the required parameter 'senderName' is set
      if (senderName === undefined || senderName === null) {
        throw new Error("Missing the required parameter 'senderName' when calling settingsOrganizationsOrganizationNameSendersSenderNameDelete");
      }

      let pathParams = {
        'organizationName': organizationName,
        'senderName': senderName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sender;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/senders/{senderName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameSendersSenderNameGet operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersSenderNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sender} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The settings of a single of sender
     * @param {String} organizationName Fetch senders with this organization name
     * @param {String} senderName The name of a sender to the data hub
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersSenderNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sender}
     */
    settingsOrganizationsOrganizationNameSendersSenderNameGet(organizationName, senderName, callback) {
      let postBody = null;
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersSenderNameGet");
      }
      // verify the required parameter 'senderName' is set
      if (senderName === undefined || senderName === null) {
        throw new Error("Missing the required parameter 'senderName' when calling settingsOrganizationsOrganizationNameSendersSenderNameGet");
      }

      let pathParams = {
        'organizationName': organizationName,
        'senderName': senderName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sender;
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/senders/{senderName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settingsOrganizationsOrganizationNameSendersSenderNamePut operation.
     * @callback module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersSenderNamePutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Sender>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single sender
     * @param {String} organizationName Fetch senders with this organization name
     * @param {String} senderName The name of a sender to the data hub
     * @param {Object} opts Optional parameters
     * @param {module:model/Sender} [sender] 
     * @param {module:api/DefaultApi~settingsOrganizationsOrganizationNameSendersSenderNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Sender>}
     */
    settingsOrganizationsOrganizationNameSendersSenderNamePut(organizationName, senderName, opts, callback) {
      opts = opts || {};
      let postBody = opts['sender'];
      // verify the required parameter 'organizationName' is set
      if (organizationName === undefined || organizationName === null) {
        throw new Error("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersSenderNamePut");
      }
      // verify the required parameter 'senderName' is set
      if (senderName === undefined || senderName === null) {
        throw new Error("Missing the required parameter 'senderName' when calling settingsOrganizationsOrganizationNameSendersSenderNamePut");
      }

      let pathParams = {
        'organizationName': organizationName,
        'senderName': senderName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Sender];
      return this.apiClient.callApi(
        '/settings/organizations/{organizationName}/senders/{senderName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
