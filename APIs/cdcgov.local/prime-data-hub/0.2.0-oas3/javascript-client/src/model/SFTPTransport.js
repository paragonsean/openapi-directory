/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SFTPTransport model module.
 * @module model/SFTPTransport
 * @version 0.2.0-oas3
 */
class SFTPTransport {
    /**
     * Constructs a new <code>SFTPTransport</code>.
     * Describes a single SFTP connection in all of it variations
     * @alias module:model/SFTPTransport
     * @param filePath {String} The file path to place the report
     * @param host {String} Host name and domain
     * @param port {Number} The port to use
     * @param type {String} The discriminator
     */
    constructor(filePath, host, port, type) { 
        
        SFTPTransport.initialize(this, filePath, host, port, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filePath, host, port, type) { 
        obj['filePath'] = filePath;
        obj['host'] = host;
        obj['port'] = port;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SFTPTransport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SFTPTransport} obj Optional instance to populate.
     * @return {module:model/SFTPTransport} The populated <code>SFTPTransport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SFTPTransport();

            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SFTPTransport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SFTPTransport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SFTPTransport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SFTPTransport.RequiredProperties = ["filePath", "host", "port", "type"];

/**
 * The file path to place the report
 * @member {String} filePath
 */
SFTPTransport.prototype['filePath'] = undefined;

/**
 * Host name and domain
 * @member {String} host
 */
SFTPTransport.prototype['host'] = undefined;

/**
 * The port to use
 * @member {Number} port
 */
SFTPTransport.prototype['port'] = undefined;

/**
 * The discriminator
 * @member {String} type
 */
SFTPTransport.prototype['type'] = undefined;






export default SFTPTransport;

