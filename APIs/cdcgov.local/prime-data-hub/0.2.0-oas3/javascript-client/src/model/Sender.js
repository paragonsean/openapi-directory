/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SettingMetadata from './SettingMetadata';

/**
 * The Sender model module.
 * @module model/Sender
 * @version 0.2.0-oas3
 */
class Sender {
    /**
     * Constructs a new <code>Sender</code>.
     * An sender of reports to the data hub
     * @alias module:model/Sender
     * @param description {String} Display ready description of the sender
     * @param format {module:model/Sender.FormatEnum} the payload format
     * @param name {String} Unique name for the senders, includes the orgninzation name
     * @param schema {String} the schema name for this sender
     * @param topic {String} Topic of for this sender. Must match the supported topics.
     */
    constructor(description, format, name, schema, topic) { 
        
        Sender.initialize(this, description, format, name, schema, topic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, format, name, schema, topic) { 
        obj['description'] = description;
        obj['format'] = format;
        obj['name'] = name;
        obj['schema'] = schema;
        obj['topic'] = topic;
    }

    /**
     * Constructs a <code>Sender</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sender} obj Optional instance to populate.
     * @return {module:model/Sender} The populated <code>Sender</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sender();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = SettingMetadata.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organizationName')) {
                obj['organizationName'] = ApiClient.convertToType(data['organizationName'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sender</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sender</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sender.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          SettingMetadata.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organizationName'] && !(typeof data['organizationName'] === 'string' || data['organizationName'] instanceof String)) {
            throw new Error("Expected the field `organizationName` to be a primitive type in the JSON string but got " + data['organizationName']);
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}

Sender.RequiredProperties = ["description", "format", "name", "schema", "topic"];

/**
 * Display ready description of the sender
 * @member {String} description
 */
Sender.prototype['description'] = undefined;

/**
 * the payload format
 * @member {module:model/Sender.FormatEnum} format
 */
Sender.prototype['format'] = undefined;

/**
 * @member {module:model/SettingMetadata} meta
 */
Sender.prototype['meta'] = undefined;

/**
 * Unique name for the senders, includes the orgninzation name
 * @member {String} name
 */
Sender.prototype['name'] = undefined;

/**
 * Name of the organization that this sender belongs to
 * @member {String} organizationName
 */
Sender.prototype['organizationName'] = undefined;

/**
 * the schema name for this sender
 * @member {String} schema
 */
Sender.prototype['schema'] = undefined;

/**
 * Topic of for this sender. Must match the supported topics.
 * @member {String} topic
 */
Sender.prototype['topic'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Sender['FormatEnum'] = {

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV"
};



export default Sender;

