/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StandardHL7ConfigurationTransport from './StandardHL7ConfigurationTransport';

/**
 * The StandardHL7Configuration model module.
 * @module model/StandardHL7Configuration
 * @version 0.2.0-oas3
 */
class StandardHL7Configuration {
    /**
     * Constructs a new <code>StandardHL7Configuration</code>.
     * A standard HL7 configuration
     * @alias module:model/StandardHL7Configuration
     * @param includeAOE {Boolean} Include the AOE
     * @param transport {module:model/StandardHL7ConfigurationTransport} 
     * @param type {String} The discrimenator
     * @param useBatchHeaders {Boolean} Use BHS and FHS header
     */
    constructor(includeAOE, transport, type, useBatchHeaders) { 
        
        StandardHL7Configuration.initialize(this, includeAOE, transport, type, useBatchHeaders);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, includeAOE, transport, type, useBatchHeaders) { 
        obj['defaultAoeToUnknown'] = false;
        obj['includeAOE'] = includeAOE;
        obj['nameFormat'] = 'standard';
        obj['phoneNumberFormatting'] = 'STANDARD';
        obj['suppressAoe'] = false;
        obj['suppressQstForAoe'] = false;
        obj['transport'] = transport;
        obj['truncateHDNamespaceIds'] = false;
        obj['type'] = type;
        obj['useBatchHeaders'] = useBatchHeaders;
        obj['usePid14ForPatientEmail'] = false;
        obj['useTestProcessingMode'] = false;
    }

    /**
     * Constructs a <code>StandardHL7Configuration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardHL7Configuration} obj Optional instance to populate.
     * @return {module:model/StandardHL7Configuration} The populated <code>StandardHL7Configuration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardHL7Configuration();

            if (data.hasOwnProperty('convertTimestampToDateTime')) {
                obj['convertTimestampToDateTime'] = ApiClient.convertToType(data['convertTimestampToDateTime'], 'String');
            }
            if (data.hasOwnProperty('defaultAoeToUnknown')) {
                obj['defaultAoeToUnknown'] = ApiClient.convertToType(data['defaultAoeToUnknown'], 'Boolean');
            }
            if (data.hasOwnProperty('includeAOE')) {
                obj['includeAOE'] = ApiClient.convertToType(data['includeAOE'], 'Boolean');
            }
            if (data.hasOwnProperty('nameFormat')) {
                obj['nameFormat'] = ApiClient.convertToType(data['nameFormat'], 'String');
            }
            if (data.hasOwnProperty('phoneNumberFormatting')) {
                obj['phoneNumberFormatting'] = ApiClient.convertToType(data['phoneNumberFormatting'], 'String');
            }
            if (data.hasOwnProperty('receivingApplicationName')) {
                obj['receivingApplicationName'] = ApiClient.convertToType(data['receivingApplicationName'], 'String');
            }
            if (data.hasOwnProperty('receivingApplicationOID')) {
                obj['receivingApplicationOID'] = ApiClient.convertToType(data['receivingApplicationOID'], 'String');
            }
            if (data.hasOwnProperty('receivingFacilityName')) {
                obj['receivingFacilityName'] = ApiClient.convertToType(data['receivingFacilityName'], 'String');
            }
            if (data.hasOwnProperty('receivingFacilityOID')) {
                obj['receivingFacilityOID'] = ApiClient.convertToType(data['receivingFacilityOID'], 'String');
            }
            if (data.hasOwnProperty('receivingOrganization')) {
                obj['receivingOrganization'] = ApiClient.convertToType(data['receivingOrganization'], 'String');
            }
            if (data.hasOwnProperty('reportingFacilityId')) {
                obj['reportingFacilityId'] = ApiClient.convertToType(data['reportingFacilityId'], 'String');
            }
            if (data.hasOwnProperty('reportingFacilityIdType')) {
                obj['reportingFacilityIdType'] = ApiClient.convertToType(data['reportingFacilityIdType'], 'String');
            }
            if (data.hasOwnProperty('reportingFacilityName')) {
                obj['reportingFacilityName'] = ApiClient.convertToType(data['reportingFacilityName'], 'String');
            }
            if (data.hasOwnProperty('suppressAoe')) {
                obj['suppressAoe'] = ApiClient.convertToType(data['suppressAoe'], 'Boolean');
            }
            if (data.hasOwnProperty('suppressHl7Fields')) {
                obj['suppressHl7Fields'] = ApiClient.convertToType(data['suppressHl7Fields'], 'String');
            }
            if (data.hasOwnProperty('suppressQstForAoe')) {
                obj['suppressQstForAoe'] = ApiClient.convertToType(data['suppressQstForAoe'], 'Boolean');
            }
            if (data.hasOwnProperty('transport')) {
                obj['transport'] = StandardHL7ConfigurationTransport.constructFromObject(data['transport']);
            }
            if (data.hasOwnProperty('truncateHDNamespaceIds')) {
                obj['truncateHDNamespaceIds'] = ApiClient.convertToType(data['truncateHDNamespaceIds'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('useBatchHeaders')) {
                obj['useBatchHeaders'] = ApiClient.convertToType(data['useBatchHeaders'], 'Boolean');
            }
            if (data.hasOwnProperty('useBlankInsteadOfUnknown')) {
                obj['useBlankInsteadOfUnknown'] = ApiClient.convertToType(data['useBlankInsteadOfUnknown'], 'String');
            }
            if (data.hasOwnProperty('usePid14ForPatientEmail')) {
                obj['usePid14ForPatientEmail'] = ApiClient.convertToType(data['usePid14ForPatientEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('useTestProcessingMode')) {
                obj['useTestProcessingMode'] = ApiClient.convertToType(data['useTestProcessingMode'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardHL7Configuration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardHL7Configuration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StandardHL7Configuration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['convertTimestampToDateTime'] && !(typeof data['convertTimestampToDateTime'] === 'string' || data['convertTimestampToDateTime'] instanceof String)) {
            throw new Error("Expected the field `convertTimestampToDateTime` to be a primitive type in the JSON string but got " + data['convertTimestampToDateTime']);
        }
        // ensure the json data is a string
        if (data['nameFormat'] && !(typeof data['nameFormat'] === 'string' || data['nameFormat'] instanceof String)) {
            throw new Error("Expected the field `nameFormat` to be a primitive type in the JSON string but got " + data['nameFormat']);
        }
        // ensure the json data is a string
        if (data['phoneNumberFormatting'] && !(typeof data['phoneNumberFormatting'] === 'string' || data['phoneNumberFormatting'] instanceof String)) {
            throw new Error("Expected the field `phoneNumberFormatting` to be a primitive type in the JSON string but got " + data['phoneNumberFormatting']);
        }
        // ensure the json data is a string
        if (data['receivingApplicationName'] && !(typeof data['receivingApplicationName'] === 'string' || data['receivingApplicationName'] instanceof String)) {
            throw new Error("Expected the field `receivingApplicationName` to be a primitive type in the JSON string but got " + data['receivingApplicationName']);
        }
        // ensure the json data is a string
        if (data['receivingApplicationOID'] && !(typeof data['receivingApplicationOID'] === 'string' || data['receivingApplicationOID'] instanceof String)) {
            throw new Error("Expected the field `receivingApplicationOID` to be a primitive type in the JSON string but got " + data['receivingApplicationOID']);
        }
        // ensure the json data is a string
        if (data['receivingFacilityName'] && !(typeof data['receivingFacilityName'] === 'string' || data['receivingFacilityName'] instanceof String)) {
            throw new Error("Expected the field `receivingFacilityName` to be a primitive type in the JSON string but got " + data['receivingFacilityName']);
        }
        // ensure the json data is a string
        if (data['receivingFacilityOID'] && !(typeof data['receivingFacilityOID'] === 'string' || data['receivingFacilityOID'] instanceof String)) {
            throw new Error("Expected the field `receivingFacilityOID` to be a primitive type in the JSON string but got " + data['receivingFacilityOID']);
        }
        // ensure the json data is a string
        if (data['receivingOrganization'] && !(typeof data['receivingOrganization'] === 'string' || data['receivingOrganization'] instanceof String)) {
            throw new Error("Expected the field `receivingOrganization` to be a primitive type in the JSON string but got " + data['receivingOrganization']);
        }
        // ensure the json data is a string
        if (data['reportingFacilityId'] && !(typeof data['reportingFacilityId'] === 'string' || data['reportingFacilityId'] instanceof String)) {
            throw new Error("Expected the field `reportingFacilityId` to be a primitive type in the JSON string but got " + data['reportingFacilityId']);
        }
        // ensure the json data is a string
        if (data['reportingFacilityIdType'] && !(typeof data['reportingFacilityIdType'] === 'string' || data['reportingFacilityIdType'] instanceof String)) {
            throw new Error("Expected the field `reportingFacilityIdType` to be a primitive type in the JSON string but got " + data['reportingFacilityIdType']);
        }
        // ensure the json data is a string
        if (data['reportingFacilityName'] && !(typeof data['reportingFacilityName'] === 'string' || data['reportingFacilityName'] instanceof String)) {
            throw new Error("Expected the field `reportingFacilityName` to be a primitive type in the JSON string but got " + data['reportingFacilityName']);
        }
        // ensure the json data is a string
        if (data['suppressHl7Fields'] && !(typeof data['suppressHl7Fields'] === 'string' || data['suppressHl7Fields'] instanceof String)) {
            throw new Error("Expected the field `suppressHl7Fields` to be a primitive type in the JSON string but got " + data['suppressHl7Fields']);
        }
        // validate the optional field `transport`
        if (data['transport']) { // data not null
          StandardHL7ConfigurationTransport.validateJSON(data['transport']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['useBlankInsteadOfUnknown'] && !(typeof data['useBlankInsteadOfUnknown'] === 'string' || data['useBlankInsteadOfUnknown'] instanceof String)) {
            throw new Error("Expected the field `useBlankInsteadOfUnknown` to be a primitive type in the JSON string but got " + data['useBlankInsteadOfUnknown']);
        }

        return true;
    }


}

StandardHL7Configuration.RequiredProperties = ["includeAOE", "transport", "type", "useBatchHeaders"];

/**
 * A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format
 * @member {String} convertTimestampToDateTime
 */
StandardHL7Configuration.prototype['convertTimestampToDateTime'] = undefined;

/**
 * Default the AOE result to UNK
 * @member {Boolean} defaultAoeToUnknown
 * @default false
 */
StandardHL7Configuration.prototype['defaultAoeToUnknown'] = false;

/**
 * Include the AOE
 * @member {Boolean} includeAOE
 */
StandardHL7Configuration.prototype['includeAOE'] = undefined;

/**
 * The format to use for the file name generated by the translation
 * @member {String} nameFormat
 * @default 'standard'
 */
StandardHL7Configuration.prototype['nameFormat'] = 'standard';

/**
 * How to format phone numbers (XTN fields)
 * @member {module:model/StandardHL7Configuration.PhoneNumberFormattingEnum} phoneNumberFormatting
 * @default 'STANDARD'
 */
StandardHL7Configuration.prototype['phoneNumberFormatting'] = 'STANDARD';

/**
 * The receiving application name (needed for HL7 formats)
 * @member {String} receivingApplicationName
 */
StandardHL7Configuration.prototype['receivingApplicationName'] = undefined;

/**
 * The receiving application OID
 * @member {String} receivingApplicationOID
 */
StandardHL7Configuration.prototype['receivingApplicationOID'] = undefined;

/**
 * The receiving facility name
 * @member {String} receivingFacilityName
 */
StandardHL7Configuration.prototype['receivingFacilityName'] = undefined;

/**
 * The receiving facility name
 * @member {String} receivingFacilityOID
 */
StandardHL7Configuration.prototype['receivingFacilityOID'] = undefined;

/**
 * The name of the receiving organization in the message
 * @member {String} receivingOrganization
 */
StandardHL7Configuration.prototype['receivingOrganization'] = undefined;

/**
 * The reporting facility id (if different from CDC PRIME's OID)
 * @member {String} reportingFacilityId
 */
StandardHL7Configuration.prototype['reportingFacilityId'] = undefined;

/**
 * The reporting facility id type (if different from OID)
 * @member {String} reportingFacilityIdType
 */
StandardHL7Configuration.prototype['reportingFacilityIdType'] = undefined;

/**
 * The reporting facility name (if different from CDC PRIME)
 * @member {String} reportingFacilityName
 */
StandardHL7Configuration.prototype['reportingFacilityName'] = undefined;

/**
 * Suppress the AOE OBX results
 * @member {Boolean} suppressAoe
 * @default false
 */
StandardHL7Configuration.prototype['suppressAoe'] = false;

/**
 * A comma delimited list of HL7 fields to suppress
 * @member {String} suppressHl7Fields
 */
StandardHL7Configuration.prototype['suppressHl7Fields'] = undefined;

/**
 * Suppress QST component is AOE OBX segments
 * @member {Boolean} suppressQstForAoe
 * @default false
 */
StandardHL7Configuration.prototype['suppressQstForAoe'] = false;

/**
 * @member {module:model/StandardHL7ConfigurationTransport} transport
 */
StandardHL7Configuration.prototype['transport'] = undefined;

/**
 * Truncate the HD fields to HD_TRUNCATION_LIMIT
 * @member {Boolean} truncateHDNamespaceIds
 * @default false
 */
StandardHL7Configuration.prototype['truncateHDNamespaceIds'] = false;

/**
 * The discrimenator
 * @member {String} type
 */
StandardHL7Configuration.prototype['type'] = undefined;

/**
 * Use BHS and FHS header
 * @member {Boolean} useBatchHeaders
 */
StandardHL7Configuration.prototype['useBatchHeaders'] = undefined;

/**
 * A comma delimited list of element names that should use blank instead of unknown
 * @member {String} useBlankInsteadOfUnknown
 */
StandardHL7Configuration.prototype['useBlankInsteadOfUnknown'] = undefined;

/**
 * Use the PID-14 field for patient email instead of the standard PID-13 field
 * @member {Boolean} usePid14ForPatientEmail
 * @default false
 */
StandardHL7Configuration.prototype['usePid14ForPatientEmail'] = false;

/**
 * Set a test process mode flag
 * @member {Boolean} useTestProcessingMode
 * @default false
 */
StandardHL7Configuration.prototype['useTestProcessingMode'] = false;





/**
 * Allowed values for the <code>phoneNumberFormatting</code> property.
 * @enum {String}
 * @readonly
 */
StandardHL7Configuration['PhoneNumberFormattingEnum'] = {

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "ONLY_DIGITS_IN_COMPONENT_ONE"
     * @const
     */
    "ONLY_DIGITS_IN_COMPONENT_ONE": "ONLY_DIGITS_IN_COMPONENT_ONE",

    /**
     * value: "AREA_LOCAL_IN_COMPONENT_ONE"
     * @const
     */
    "AREA_LOCAL_IN_COMPONENT_ONE": "AREA_LOCAL_IN_COMPONENT_ONE"
};



export default StandardHL7Configuration;

