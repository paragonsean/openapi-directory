/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Destination from './Destination';
import Detail from './Detail';
import ItemRouting from './ItemRouting';

/**
 * The Report model module.
 * @module model/Report
 * @version 0.2.0-oas3
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     * @param id {String} the id for the report assigned by the Hub
     */
    constructor(id) { 
        
        Report.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('destinationCount')) {
                obj['destinationCount'] = ApiClient.convertToType(data['destinationCount'], 'Number');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [Destination]);
            }
            if (data.hasOwnProperty('errorCount')) {
                obj['errorCount'] = ApiClient.convertToType(data['errorCount'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [Detail]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('reportItemCount')) {
                obj['reportItemCount'] = ApiClient.convertToType(data['reportItemCount'], 'Number');
            }
            if (data.hasOwnProperty('routing')) {
                obj['routing'] = ApiClient.convertToType(data['routing'], [ItemRouting]);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('warningCount')) {
                obj['warningCount'] = ApiClient.convertToType(data['warningCount'], 'Number');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [Detail]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Report.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                Destination.validateJSON(item);
            };
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                Detail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['routing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['routing'])) {
                throw new Error("Expected the field `routing` to be an array in the JSON data but got " + data['routing']);
            }
            // validate the optional field `routing` (array)
            for (const item of data['routing']) {
                ItemRouting.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                Detail.validateJSON(item);
            };
        }

        return true;
    }


}

Report.RequiredProperties = ["id"];

/**
 * total destinations recieving the report(s)
 * @member {Number} destinationCount
 */
Report.prototype['destinationCount'] = undefined;

/**
 * where the report is being sent to
 * @member {Array.<module:model/Destination>} destinations
 */
Report.prototype['destinations'] = undefined;

/**
 * total errors found during initial validation.  There may be multiple errors per item.
 * @member {Number} errorCount
 */
Report.prototype['errorCount'] = undefined;

/**
 * a list of errors in the report
 * @member {Array.<module:model/Detail>} errors
 */
Report.prototype['errors'] = undefined;

/**
 * the id for the report assigned by the Hub
 * @member {String} id
 */
Report.prototype['id'] = undefined;

/**
 * total number of individual reports sent to the Hub (in a csv, the number of data lines sent)
 * @member {Number} reportItemCount
 */
Report.prototype['reportItemCount'] = undefined;

/**
 * The receiver destination names for each item in the report. This is displayed when verbose=true is present on the query string.
 * @member {Array.<module:model/ItemRouting>} routing
 */
Report.prototype['routing'] = undefined;

/**
 * the timestamp for this report submission
 * @member {String} timestamp
 */
Report.prototype['timestamp'] = undefined;

/**
 * the topic configured for the client organization sender
 * @member {String} topic
 */
Report.prototype['topic'] = undefined;

/**
 * total warnings found during initial validation.  There may be multiple warnings per item.
 * @member {Number} warningCount
 */
Report.prototype['warningCount'] = undefined;

/**
 * a list of warnings in the report
 * @member {Array.<module:model/Detail>} warnings
 */
Report.prototype['warnings'] = undefined;






export default Report;

