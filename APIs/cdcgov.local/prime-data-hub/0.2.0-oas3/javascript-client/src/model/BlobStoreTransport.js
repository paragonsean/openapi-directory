/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlobStoreTransport model module.
 * @module model/BlobStoreTransport
 * @version 0.2.0-oas3
 */
class BlobStoreTransport {
    /**
     * Constructs a new <code>BlobStoreTransport</code>.
     * Moves results to a Azure Blob Store. Typcially used for HHS Protect interfaces.
     * @alias module:model/BlobStoreTransport
     * @param containerName {String} This name of the Azure container
     * @param storageName {String} This looks for an env var with this name. env var value is the connection string
     * @param type {String} The discriminator
     */
    constructor(containerName, storageName, type) { 
        
        BlobStoreTransport.initialize(this, containerName, storageName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containerName, storageName, type) { 
        obj['containerName'] = containerName;
        obj['storageName'] = storageName;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>BlobStoreTransport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobStoreTransport} obj Optional instance to populate.
     * @return {module:model/BlobStoreTransport} The populated <code>BlobStoreTransport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobStoreTransport();

            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('storageName')) {
                obj['storageName'] = ApiClient.convertToType(data['storageName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobStoreTransport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobStoreTransport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlobStoreTransport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['storageName'] && !(typeof data['storageName'] === 'string' || data['storageName'] instanceof String)) {
            throw new Error("Expected the field `storageName` to be a primitive type in the JSON string but got " + data['storageName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

BlobStoreTransport.RequiredProperties = ["containerName", "storageName", "type"];

/**
 * This name of the Azure container
 * @member {String} containerName
 */
BlobStoreTransport.prototype['containerName'] = undefined;

/**
 * This looks for an env var with this name. env var value is the connection string
 * @member {String} storageName
 */
BlobStoreTransport.prototype['storageName'] = undefined;

/**
 * The discriminator
 * @member {String} type
 */
BlobStoreTransport.prototype['type'] = undefined;






export default BlobStoreTransport;

