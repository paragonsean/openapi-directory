/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReceiverTiming model module.
 * @module model/ReceiverTiming
 * @version 0.2.0-oas3
 */
class ReceiverTiming {
    /**
     * Constructs a new <code>ReceiverTiming</code>.
     * When the report is sent if not immediately
     * @alias module:model/ReceiverTiming
     * @param frequency {module:model/ReceiverTiming.FrequencyEnum} How often send a report
     */
    constructor(frequency) { 
        
        ReceiverTiming.initialize(this, frequency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, frequency) { 
        obj['frequency'] = frequency;
    }

    /**
     * Constructs a <code>ReceiverTiming</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiverTiming} obj Optional instance to populate.
     * @return {module:model/ReceiverTiming} The populated <code>ReceiverTiming</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiverTiming();

            if (data.hasOwnProperty('dailyAt')) {
                obj['dailyAt'] = ApiClient.convertToType(data['dailyAt'], 'Number');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceiverTiming</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceiverTiming</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReceiverTiming.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }

        return true;
    }


}

ReceiverTiming.RequiredProperties = ["frequency"];

/**
 * The UTC hour to send a daily batch
 * @member {Number} dailyAt
 */
ReceiverTiming.prototype['dailyAt'] = undefined;

/**
 * How often send a report
 * @member {module:model/ReceiverTiming.FrequencyEnum} frequency
 */
ReceiverTiming.prototype['frequency'] = undefined;





/**
 * Allowed values for the <code>frequency</code> property.
 * @enum {String}
 * @readonly
 */
ReceiverTiming['FrequencyEnum'] = {

    /**
     * value: "REAL_TIME"
     * @const
     */
    "REAL_TIME": "REAL_TIME",

    /**
     * value: "HOURLY"
     * @const
     */
    "HOURLY": "HOURLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY"
};



export default ReceiverTiming;

