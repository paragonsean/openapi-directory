/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomConfigurationTransport from './CustomConfigurationTransport';

/**
 * The CustomConfiguration model module.
 * @module model/CustomConfiguration
 * @version 0.2.0-oas3
 */
class CustomConfiguration {
    /**
     * Constructs a new <code>CustomConfiguration</code>.
     * A custom configuration for a custom schema
     * @alias module:model/CustomConfiguration
     * @param format {module:model/CustomConfiguration.FormatEnum} The format of the serializer
     * @param schemaName {String} The name of the custom schema
     * @param transport {module:model/CustomConfigurationTransport} 
     * @param type {String} The discrimenator
     */
    constructor(format, schemaName, transport, type) { 
        
        CustomConfiguration.initialize(this, format, schemaName, transport, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, format, schemaName, transport, type) { 
        obj['format'] = format;
        obj['nameFormat'] = 'standard';
        obj['schemaName'] = schemaName;
        obj['transport'] = transport;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CustomConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomConfiguration} obj Optional instance to populate.
     * @return {module:model/CustomConfiguration} The populated <code>CustomConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomConfiguration();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('nameFormat')) {
                obj['nameFormat'] = ApiClient.convertToType(data['nameFormat'], 'String');
            }
            if (data.hasOwnProperty('receivingOrganization')) {
                obj['receivingOrganization'] = ApiClient.convertToType(data['receivingOrganization'], 'String');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('transport')) {
                obj['transport'] = CustomConfigurationTransport.constructFromObject(data['transport']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['nameFormat'] && !(typeof data['nameFormat'] === 'string' || data['nameFormat'] instanceof String)) {
            throw new Error("Expected the field `nameFormat` to be a primitive type in the JSON string but got " + data['nameFormat']);
        }
        // ensure the json data is a string
        if (data['receivingOrganization'] && !(typeof data['receivingOrganization'] === 'string' || data['receivingOrganization'] instanceof String)) {
            throw new Error("Expected the field `receivingOrganization` to be a primitive type in the JSON string but got " + data['receivingOrganization']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // validate the optional field `transport`
        if (data['transport']) { // data not null
          CustomConfigurationTransport.validateJSON(data['transport']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CustomConfiguration.RequiredProperties = ["format", "schemaName", "transport", "type"];

/**
 * The format of the serializer
 * @member {module:model/CustomConfiguration.FormatEnum} format
 */
CustomConfiguration.prototype['format'] = undefined;

/**
 * The format to use for the file name generated by the translation
 * @member {String} nameFormat
 * @default 'standard'
 */
CustomConfiguration.prototype['nameFormat'] = 'standard';

/**
 * The name of the receiving organization in the message
 * @member {String} receivingOrganization
 */
CustomConfiguration.prototype['receivingOrganization'] = undefined;

/**
 * The name of the custom schema
 * @member {String} schemaName
 */
CustomConfiguration.prototype['schemaName'] = undefined;

/**
 * @member {module:model/CustomConfigurationTransport} transport
 */
CustomConfiguration.prototype['transport'] = undefined;

/**
 * The discrimenator
 * @member {String} type
 */
CustomConfiguration.prototype['type'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
CustomConfiguration['FormatEnum'] = {

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "HL7"
     * @const
     */
    "HL7": "HL7"
};



export default CustomConfiguration;

