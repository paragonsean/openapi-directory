/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SettingMetadata from './SettingMetadata';

/**
 * The Organization model module.
 * @module model/Organization
 * @version 0.2.0-oas3
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * An organization connected to data hub
     * @alias module:model/Organization
     * @param description {String} the displayable description of the organization
     * @param jurisdiction {module:model/Organization.JurisdictionEnum} 
     * @param name {String} the unique id for the organization
     */
    constructor(description, jurisdiction, name) { 
        
        Organization.initialize(this, description, jurisdiction, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, jurisdiction, name) { 
        obj['description'] = description;
        obj['jurisdiction'] = jurisdiction;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('countyName')) {
                obj['countyName'] = ApiClient.convertToType(data['countyName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('jurisdiction')) {
                obj['jurisdiction'] = ApiClient.convertToType(data['jurisdiction'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = SettingMetadata.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stateCode')) {
                obj['stateCode'] = ApiClient.convertToType(data['stateCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Organization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['countyName'] && !(typeof data['countyName'] === 'string' || data['countyName'] instanceof String)) {
            throw new Error("Expected the field `countyName` to be a primitive type in the JSON string but got " + data['countyName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['jurisdiction'] && !(typeof data['jurisdiction'] === 'string' || data['jurisdiction'] instanceof String)) {
            throw new Error("Expected the field `jurisdiction` to be a primitive type in the JSON string but got " + data['jurisdiction']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          SettingMetadata.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['stateCode'] && !(typeof data['stateCode'] === 'string' || data['stateCode'] instanceof String)) {
            throw new Error("Expected the field `stateCode` to be a primitive type in the JSON string but got " + data['stateCode']);
        }

        return true;
    }


}

Organization.RequiredProperties = ["description", "jurisdiction", "name"];

/**
 * the county name (must match FIPS name)
 * @member {String} countyName
 */
Organization.prototype['countyName'] = undefined;

/**
 * the displayable description of the organization
 * @member {String} description
 */
Organization.prototype['description'] = undefined;

/**
 * @member {module:model/Organization.JurisdictionEnum} jurisdiction
 */
Organization.prototype['jurisdiction'] = undefined;

/**
 * @member {module:model/SettingMetadata} meta
 */
Organization.prototype['meta'] = undefined;

/**
 * the unique id for the organization
 * @member {String} name
 */
Organization.prototype['name'] = undefined;

/**
 * the two letter code for the organization
 * @member {String} stateCode
 */
Organization.prototype['stateCode'] = undefined;





/**
 * Allowed values for the <code>jurisdiction</code> property.
 * @enum {String}
 * @readonly
 */
Organization['JurisdictionEnum'] = {

    /**
     * value: "National"
     * @const
     */
    "National": "National",

    /**
     * value: "State"
     * @const
     */
    "State": "State",

    /**
     * value: "County"
     * @const
     */
    "County": "County"
};



export default Organization;

