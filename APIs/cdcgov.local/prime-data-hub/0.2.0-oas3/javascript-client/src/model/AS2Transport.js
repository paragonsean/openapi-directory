/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AS2Transport model module.
 * @module model/AS2Transport
 * @version 0.2.0-oas3
 */
class AS2Transport {
    /**
     * Constructs a new <code>AS2Transport</code>.
     * Describes a single AS2 connection in all of it variations
     * @alias module:model/AS2Transport
     * @param receiverId {String} The AS2 id of the receiver. Usually, the same for all senders.
     * @param receiverUrl {String} The URL to the AS2 end-point
     * @param senderId {String} The AS2 id of the sender. Usually, assigned by receiver to PRIME.
     * @param type {String} The discriminator
     */
    constructor(receiverId, receiverUrl, senderId, type) { 
        
        AS2Transport.initialize(this, receiverId, receiverUrl, senderId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, receiverId, receiverUrl, senderId, type) { 
        obj['contentDescription'] = 'SARS-CoV-2 Electronic Lab Results';
        obj['mimeType'] = 'application/hl7-v2';
        obj['receiverId'] = receiverId;
        obj['receiverUrl'] = receiverUrl;
        obj['senderEmail'] = 'reportstream@cdc.gov';
        obj['senderId'] = senderId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AS2Transport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AS2Transport} obj Optional instance to populate.
     * @return {module:model/AS2Transport} The populated <code>AS2Transport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AS2Transport();

            if (data.hasOwnProperty('contentDescription')) {
                obj['contentDescription'] = ApiClient.convertToType(data['contentDescription'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('receiverId')) {
                obj['receiverId'] = ApiClient.convertToType(data['receiverId'], 'String');
            }
            if (data.hasOwnProperty('receiverUrl')) {
                obj['receiverUrl'] = ApiClient.convertToType(data['receiverUrl'], 'String');
            }
            if (data.hasOwnProperty('senderEmail')) {
                obj['senderEmail'] = ApiClient.convertToType(data['senderEmail'], 'String');
            }
            if (data.hasOwnProperty('senderId')) {
                obj['senderId'] = ApiClient.convertToType(data['senderId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AS2Transport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AS2Transport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AS2Transport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contentDescription'] && !(typeof data['contentDescription'] === 'string' || data['contentDescription'] instanceof String)) {
            throw new Error("Expected the field `contentDescription` to be a primitive type in the JSON string but got " + data['contentDescription']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['receiverId'] && !(typeof data['receiverId'] === 'string' || data['receiverId'] instanceof String)) {
            throw new Error("Expected the field `receiverId` to be a primitive type in the JSON string but got " + data['receiverId']);
        }
        // ensure the json data is a string
        if (data['receiverUrl'] && !(typeof data['receiverUrl'] === 'string' || data['receiverUrl'] instanceof String)) {
            throw new Error("Expected the field `receiverUrl` to be a primitive type in the JSON string but got " + data['receiverUrl']);
        }
        // ensure the json data is a string
        if (data['senderEmail'] && !(typeof data['senderEmail'] === 'string' || data['senderEmail'] instanceof String)) {
            throw new Error("Expected the field `senderEmail` to be a primitive type in the JSON string but got " + data['senderEmail']);
        }
        // ensure the json data is a string
        if (data['senderId'] && !(typeof data['senderId'] === 'string' || data['senderId'] instanceof String)) {
            throw new Error("Expected the field `senderId` to be a primitive type in the JSON string but got " + data['senderId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AS2Transport.RequiredProperties = ["receiverId", "receiverUrl", "senderId", "type"];

/**
 * A description of the content of the message. Usually, the same for all messages.
 * @member {String} contentDescription
 * @default 'SARS-CoV-2 Electronic Lab Results'
 */
AS2Transport.prototype['contentDescription'] = 'SARS-CoV-2 Electronic Lab Results';

/**
 * The MIME type of the message
 * @member {String} mimeType
 * @default 'application/hl7-v2'
 */
AS2Transport.prototype['mimeType'] = 'application/hl7-v2';

/**
 * The AS2 id of the receiver. Usually, the same for all senders.
 * @member {String} receiverId
 */
AS2Transport.prototype['receiverId'] = undefined;

/**
 * The URL to the AS2 end-point
 * @member {String} receiverUrl
 */
AS2Transport.prototype['receiverUrl'] = undefined;

/**
 * The email address to contact someone about the message
 * @member {String} senderEmail
 * @default 'reportstream@cdc.gov'
 */
AS2Transport.prototype['senderEmail'] = 'reportstream@cdc.gov';

/**
 * The AS2 id of the sender. Usually, assigned by receiver to PRIME.
 * @member {String} senderId
 */
AS2Transport.prototype['senderId'] = undefined;

/**
 * The discriminator
 * @member {String} type
 */
AS2Transport.prototype['type'] = undefined;






export default AS2Transport;

