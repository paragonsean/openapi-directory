/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReceiverJurisdictionalFiltersInner from './ReceiverJurisdictionalFiltersInner';
import ReceiverTiming from './ReceiverTiming';
import ReceiverTranslationsInner from './ReceiverTranslationsInner';
import SettingMetadata from './SettingMetadata';

/**
 * The Receiver model module.
 * @module model/Receiver
 * @version 0.2.0-oas3
 */
class Receiver {
    /**
     * Constructs a new <code>Receiver</code>.
     * A receiver of reports from the data hub
     * @alias module:model/Receiver
     * @param description {String} Display ready description of the receiver
     * @param name {String} The unique name for the receiver. Should include the organization name as a prefix.
     * @param timing {module:model/ReceiverTiming} 
     * @param topic {String} The topic of for this receiver. Must match the supported topics.
     */
    constructor(description, name, timing, topic) { 
        
        Receiver.initialize(this, description, name, timing, topic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, name, timing, topic) { 
        obj['description'] = description;
        obj['name'] = name;
        obj['timing'] = timing;
        obj['topic'] = topic;
    }

    /**
     * Constructs a <code>Receiver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Receiver} obj Optional instance to populate.
     * @return {module:model/Receiver} The populated <code>Receiver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Receiver();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('jurisdictionalFilters')) {
                obj['jurisdictionalFilters'] = ApiClient.convertToType(data['jurisdictionalFilters'], [ReceiverJurisdictionalFiltersInner]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = SettingMetadata.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organizationName')) {
                obj['organizationName'] = ApiClient.convertToType(data['organizationName'], 'String');
            }
            if (data.hasOwnProperty('timing')) {
                obj['timing'] = ReceiverTiming.constructFromObject(data['timing']);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('translations')) {
                obj['translations'] = ApiClient.convertToType(data['translations'], [ReceiverTranslationsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Receiver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Receiver</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Receiver.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['jurisdictionalFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jurisdictionalFilters'])) {
                throw new Error("Expected the field `jurisdictionalFilters` to be an array in the JSON data but got " + data['jurisdictionalFilters']);
            }
            // validate the optional field `jurisdictionalFilters` (array)
            for (const item of data['jurisdictionalFilters']) {
                ReceiverJurisdictionalFiltersInner.validateJSON(item);
            };
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          SettingMetadata.validateJSON(data['meta']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organizationName'] && !(typeof data['organizationName'] === 'string' || data['organizationName'] instanceof String)) {
            throw new Error("Expected the field `organizationName` to be a primitive type in the JSON string but got " + data['organizationName']);
        }
        // validate the optional field `timing`
        if (data['timing']) { // data not null
          ReceiverTiming.validateJSON(data['timing']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        if (data['translations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['translations'])) {
                throw new Error("Expected the field `translations` to be an array in the JSON data but got " + data['translations']);
            }
            // validate the optional field `translations` (array)
            for (const item of data['translations']) {
                ReceiverTranslationsInner.validateJSON(item);
            };
        }

        return true;
    }


}

Receiver.RequiredProperties = ["description", "name", "timing", "topic"];

/**
 * Display ready description of the receiver
 * @member {String} description
 */
Receiver.prototype['description'] = undefined;

/**
 * What items to include in the report.
 * @member {Array.<module:model/ReceiverJurisdictionalFiltersInner>} jurisdictionalFilters
 */
Receiver.prototype['jurisdictionalFilters'] = undefined;

/**
 * @member {module:model/SettingMetadata} meta
 */
Receiver.prototype['meta'] = undefined;

/**
 * The unique name for the receiver. Should include the organization name as a prefix.
 * @member {String} name
 */
Receiver.prototype['name'] = undefined;

/**
 * The name of the organization that this receiver belongs to
 * @member {String} organizationName
 */
Receiver.prototype['organizationName'] = undefined;

/**
 * @member {module:model/ReceiverTiming} timing
 */
Receiver.prototype['timing'] = undefined;

/**
 * The topic of for this receiver. Must match the supported topics.
 * @member {String} topic
 */
Receiver.prototype['topic'] = undefined;

/**
 * How the report is translated from the sender. A report can be sent in multiple ways.
 * @member {Array.<module:model/ReceiverTranslationsInner>} translations
 */
Receiver.prototype['translations'] = undefined;






export default Receiver;

