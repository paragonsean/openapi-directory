/**
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AS2Transport from './AS2Transport';
import BlobStoreTransport from './BlobStoreTransport';
import NullTransport from './NullTransport';
import SFTPTransport from './SFTPTransport';

/**
 * The CustomConfigurationTransport model module.
 * @module model/CustomConfigurationTransport
 * @version 0.2.0-oas3
 */
class CustomConfigurationTransport {
    /**
     * Constructs a new <code>CustomConfigurationTransport</code>.
     * The transport to use
     * @alias module:model/CustomConfigurationTransport
     * @param {(module:model/AS2Transport|module:model/BlobStoreTransport|module:model/NullTransport|module:model/SFTPTransport)} instance The actual instance to initialize CustomConfigurationTransport.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SFTPTransport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SFTPTransport.validateJSON(instance); // throw an exception if no match
                // create SFTPTransport from JS object
                this.actualInstance = SFTPTransport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SFTPTransport
            errorMessages.push("Failed to construct SFTPTransport: " + err)
        }

        try {
            if (typeof instance === "AS2Transport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AS2Transport.validateJSON(instance); // throw an exception if no match
                // create AS2Transport from JS object
                this.actualInstance = AS2Transport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AS2Transport
            errorMessages.push("Failed to construct AS2Transport: " + err)
        }

        try {
            if (typeof instance === "BlobStoreTransport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BlobStoreTransport.validateJSON(instance); // throw an exception if no match
                // create BlobStoreTransport from JS object
                this.actualInstance = BlobStoreTransport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BlobStoreTransport
            errorMessages.push("Failed to construct BlobStoreTransport: " + err)
        }

        try {
            if (typeof instance === "NullTransport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NullTransport.validateJSON(instance); // throw an exception if no match
                // create NullTransport from JS object
                this.actualInstance = NullTransport.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NullTransport
            errorMessages.push("Failed to construct NullTransport: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CustomConfigurationTransport` with oneOf schemas AS2Transport, BlobStoreTransport, NullTransport, SFTPTransport. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CustomConfigurationTransport` with oneOf schemas AS2Transport, BlobStoreTransport, NullTransport, SFTPTransport. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CustomConfigurationTransport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomConfigurationTransport} obj Optional instance to populate.
     * @return {module:model/CustomConfigurationTransport} The populated <code>CustomConfigurationTransport</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CustomConfigurationTransport(data);
    }

    /**
     * Gets the actual instance, which can be <code>AS2Transport</code>, <code>BlobStoreTransport</code>, <code>NullTransport</code>, <code>SFTPTransport</code>.
     * @return {(module:model/AS2Transport|module:model/BlobStoreTransport|module:model/NullTransport|module:model/SFTPTransport)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AS2Transport</code>, <code>BlobStoreTransport</code>, <code>NullTransport</code>, <code>SFTPTransport</code>.
     * @param {(module:model/AS2Transport|module:model/BlobStoreTransport|module:model/NullTransport|module:model/SFTPTransport)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CustomConfigurationTransport.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CustomConfigurationTransport from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CustomConfigurationTransport} An instance of CustomConfigurationTransport.
     */
    static fromJSON = function(json_string){
        return CustomConfigurationTransport.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The file path to place the report
 * @member {String} filePath
 */
CustomConfigurationTransport.prototype['filePath'] = undefined;

/**
 * Host name and domain
 * @member {String} host
 */
CustomConfigurationTransport.prototype['host'] = undefined;

/**
 * The port to use
 * @member {Number} port
 */
CustomConfigurationTransport.prototype['port'] = undefined;

/**
 * The discriminator
 * @member {String} type
 */
CustomConfigurationTransport.prototype['type'] = undefined;

/**
 * A description of the content of the message. Usually, the same for all messages.
 * @member {String} contentDescription
 * @default 'SARS-CoV-2 Electronic Lab Results'
 */
CustomConfigurationTransport.prototype['contentDescription'] = 'SARS-CoV-2 Electronic Lab Results';

/**
 * The MIME type of the message
 * @member {String} mimeType
 * @default 'application/hl7-v2'
 */
CustomConfigurationTransport.prototype['mimeType'] = 'application/hl7-v2';

/**
 * The AS2 id of the receiver. Usually, the same for all senders.
 * @member {String} receiverId
 */
CustomConfigurationTransport.prototype['receiverId'] = undefined;

/**
 * The URL to the AS2 end-point
 * @member {String} receiverUrl
 */
CustomConfigurationTransport.prototype['receiverUrl'] = undefined;

/**
 * The email address to contact someone about the message
 * @member {String} senderEmail
 * @default 'reportstream@cdc.gov'
 */
CustomConfigurationTransport.prototype['senderEmail'] = 'reportstream@cdc.gov';

/**
 * The AS2 id of the sender. Usually, assigned by receiver to PRIME.
 * @member {String} senderId
 */
CustomConfigurationTransport.prototype['senderId'] = undefined;

/**
 * This name of the Azure container
 * @member {String} containerName
 */
CustomConfigurationTransport.prototype['containerName'] = undefined;

/**
 * This looks for an env var with this name. env var value is the connection string
 * @member {String} storageName
 */
CustomConfigurationTransport.prototype['storageName'] = undefined;

/**
 * A dummy value
 * @member {String} dummy
 */
CustomConfigurationTransport.prototype['dummy'] = undefined;


CustomConfigurationTransport.OneOf = ["AS2Transport", "BlobStoreTransport", "NullTransport", "SFTPTransport"];

export default CustomConfigurationTransport;

