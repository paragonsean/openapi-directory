# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SFTPTransport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, host: str=None, port: float=None, type: str=None):
        """SFTPTransport - a model defined in OpenAPI

        :param file_path: The file_path of this SFTPTransport.
        :param host: The host of this SFTPTransport.
        :param port: The port of this SFTPTransport.
        :param type: The type of this SFTPTransport.
        """
        self.openapi_types = {
            'file_path': str,
            'host': str,
            'port': float,
            'type': str
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'host': 'host',
            'port': 'port',
            'type': 'type'
        }

        self._file_path = file_path
        self._host = host
        self._port = port
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SFTPTransport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SFTPTransport of this SFTPTransport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this SFTPTransport.

        The file path to place the report

        :return: The file_path of this SFTPTransport.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this SFTPTransport.

        The file path to place the report

        :param file_path: The file_path of this SFTPTransport.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def host(self):
        """Gets the host of this SFTPTransport.

        Host name and domain

        :return: The host of this SFTPTransport.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SFTPTransport.

        Host name and domain

        :param host: The host of this SFTPTransport.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def port(self):
        """Gets the port of this SFTPTransport.

        The port to use

        :return: The port of this SFTPTransport.
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SFTPTransport.

        The port to use

        :param port: The port of this SFTPTransport.
        :type port: float
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def type(self):
        """Gets the type of this SFTPTransport.

        The discriminator

        :return: The type of this SFTPTransport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SFTPTransport.

        The discriminator

        :param type: The type of this SFTPTransport.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
