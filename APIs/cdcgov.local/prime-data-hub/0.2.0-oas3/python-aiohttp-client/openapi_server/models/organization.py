# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.setting_metadata import SettingMetadata
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, county_name: str=None, description: str=None, jurisdiction: str=None, meta: SettingMetadata=None, name: str=None, state_code: str=None):
        """Organization - a model defined in OpenAPI

        :param county_name: The county_name of this Organization.
        :param description: The description of this Organization.
        :param jurisdiction: The jurisdiction of this Organization.
        :param meta: The meta of this Organization.
        :param name: The name of this Organization.
        :param state_code: The state_code of this Organization.
        """
        self.openapi_types = {
            'county_name': str,
            'description': str,
            'jurisdiction': str,
            'meta': SettingMetadata,
            'name': str,
            'state_code': str
        }

        self.attribute_map = {
            'county_name': 'countyName',
            'description': 'description',
            'jurisdiction': 'jurisdiction',
            'meta': 'meta',
            'name': 'name',
            'state_code': 'stateCode'
        }

        self._county_name = county_name
        self._description = description
        self._jurisdiction = jurisdiction
        self._meta = meta
        self._name = name
        self._state_code = state_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def county_name(self):
        """Gets the county_name of this Organization.

        the county name (must match FIPS name)

        :return: The county_name of this Organization.
        :rtype: str
        """
        return self._county_name

    @county_name.setter
    def county_name(self, county_name):
        """Sets the county_name of this Organization.

        the county name (must match FIPS name)

        :param county_name: The county_name of this Organization.
        :type county_name: str
        """

        self._county_name = county_name

    @property
    def description(self):
        """Gets the description of this Organization.

        the displayable description of the organization

        :return: The description of this Organization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.

        the displayable description of the organization

        :param description: The description of this Organization.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this Organization.


        :return: The jurisdiction of this Organization.
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this Organization.


        :param jurisdiction: The jurisdiction of this Organization.
        :type jurisdiction: str
        """
        allowed_values = ["National", "State", "County"]  # noqa: E501
        if jurisdiction not in allowed_values:
            raise ValueError(
                "Invalid value for `jurisdiction` ({0}), must be one of {1}"
                .format(jurisdiction, allowed_values)
            )

        self._jurisdiction = jurisdiction

    @property
    def meta(self):
        """Gets the meta of this Organization.


        :return: The meta of this Organization.
        :rtype: SettingMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Organization.


        :param meta: The meta of this Organization.
        :type meta: SettingMetadata
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this Organization.

        the unique id for the organization

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        the unique id for the organization

        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state_code(self):
        """Gets the state_code of this Organization.

        the two letter code for the organization

        :return: The state_code of this Organization.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Organization.

        the two letter code for the organization

        :param state_code: The state_code of this Organization.
        :type state_code: str
        """

        self._state_code = state_code
