# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Detail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, id: str=None, scope: str=None):
        """Detail - a model defined in OpenAPI

        :param detail: The detail of this Detail.
        :param id: The id of this Detail.
        :param scope: The scope of this Detail.
        """
        self.openapi_types = {
            'detail': str,
            'id': str,
            'scope': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'id': 'id',
            'scope': 'scope'
        }

        self._detail = detail
        self._id = id
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Detail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Detail of this Detail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this Detail.

        The details of the error

        :return: The detail of this Detail.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Detail.

        The details of the error

        :param detail: The detail of this Detail.
        :type detail: str
        """

        self._detail = detail

    @property
    def id(self):
        """Gets the id of this Detail.

        Depends on scope, either the item's id (message_id) or the report's id

        :return: The id of this Detail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Detail.

        Depends on scope, either the item's id (message_id) or the report's id

        :param id: The id of this Detail.
        :type id: str
        """

        self._id = id

    @property
    def scope(self):
        """Gets the scope of this Detail.

        Does the error apply to one item

        :return: The scope of this Detail.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Detail.

        Does the error apply to one item

        :param scope: The scope of this Detail.
        :type scope: str
        """
        allowed_values = ["Parameter", "Report", "Item"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
