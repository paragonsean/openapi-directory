# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReceiverJurisdictionalFiltersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, does_not_match: bool=False, match_fields: str=None, match_values: List[str]=None):
        """ReceiverJurisdictionalFiltersInner - a model defined in OpenAPI

        :param does_not_match: The does_not_match of this ReceiverJurisdictionalFiltersInner.
        :param match_fields: The match_fields of this ReceiverJurisdictionalFiltersInner.
        :param match_values: The match_values of this ReceiverJurisdictionalFiltersInner.
        """
        self.openapi_types = {
            'does_not_match': bool,
            'match_fields': str,
            'match_values': List[str]
        }

        self.attribute_map = {
            'does_not_match': 'doesNotMatch',
            'match_fields': 'matchFields',
            'match_values': 'matchValues'
        }

        self._does_not_match = does_not_match
        self._match_fields = match_fields
        self._match_values = match_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceiverJurisdictionalFiltersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Receiver_jurisdictionalFilters_inner of this ReceiverJurisdictionalFiltersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def does_not_match(self):
        """Gets the does_not_match of this ReceiverJurisdictionalFiltersInner.

        Ensure that the result does not match

        :return: The does_not_match of this ReceiverJurisdictionalFiltersInner.
        :rtype: bool
        """
        return self._does_not_match

    @does_not_match.setter
    def does_not_match(self, does_not_match):
        """Sets the does_not_match of this ReceiverJurisdictionalFiltersInner.

        Ensure that the result does not match

        :param does_not_match: The does_not_match of this ReceiverJurisdictionalFiltersInner.
        :type does_not_match: bool
        """

        self._does_not_match = does_not_match

    @property
    def match_fields(self):
        """Gets the match_fields of this ReceiverJurisdictionalFiltersInner.

        What fields to match in the filter

        :return: The match_fields of this ReceiverJurisdictionalFiltersInner.
        :rtype: str
        """
        return self._match_fields

    @match_fields.setter
    def match_fields(self, match_fields):
        """Sets the match_fields of this ReceiverJurisdictionalFiltersInner.

        What fields to match in the filter

        :param match_fields: The match_fields of this ReceiverJurisdictionalFiltersInner.
        :type match_fields: str
        """
        allowed_values = ["FACILITY_OR_PATIENT_ADDRESS", "FACILITY_ADDRESS", "FACILITY_NAME", "ABNORMAL_VALUE"]  # noqa: E501
        if match_fields not in allowed_values:
            raise ValueError(
                "Invalid value for `match_fields` ({0}), must be one of {1}"
                .format(match_fields, allowed_values)
            )

        self._match_fields = match_fields

    @property
    def match_values(self):
        """Gets the match_values of this ReceiverJurisdictionalFiltersInner.

        What is the value to match against

        :return: The match_values of this ReceiverJurisdictionalFiltersInner.
        :rtype: List[str]
        """
        return self._match_values

    @match_values.setter
    def match_values(self, match_values):
        """Sets the match_values of this ReceiverJurisdictionalFiltersInner.

        What is the value to match against

        :param match_values: The match_values of this ReceiverJurisdictionalFiltersInner.
        :type match_values: List[str]
        """

        self._match_values = match_values
