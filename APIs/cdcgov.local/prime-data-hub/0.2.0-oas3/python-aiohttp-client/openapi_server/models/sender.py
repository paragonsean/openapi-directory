# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.setting_metadata import SettingMetadata
from openapi_server import util


class Sender(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, format: str=None, meta: SettingMetadata=None, name: str=None, organization_name: str=None, _schema: str=None, topic: str=None):
        """Sender - a model defined in OpenAPI

        :param description: The description of this Sender.
        :param format: The format of this Sender.
        :param meta: The meta of this Sender.
        :param name: The name of this Sender.
        :param organization_name: The organization_name of this Sender.
        :param _schema: The _schema of this Sender.
        :param topic: The topic of this Sender.
        """
        self.openapi_types = {
            'description': str,
            'format': str,
            'meta': SettingMetadata,
            'name': str,
            'organization_name': str,
            '_schema': str,
            'topic': str
        }

        self.attribute_map = {
            'description': 'description',
            'format': 'format',
            'meta': 'meta',
            'name': 'name',
            'organization_name': 'organizationName',
            '_schema': 'schema',
            'topic': 'topic'
        }

        self._description = description
        self._format = format
        self._meta = meta
        self._name = name
        self._organization_name = organization_name
        self.__schema = _schema
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sender':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sender of this Sender.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Sender.

        Display ready description of the sender

        :return: The description of this Sender.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sender.

        Display ready description of the sender

        :param description: The description of this Sender.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def format(self):
        """Gets the format of this Sender.

        the payload format

        :return: The format of this Sender.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Sender.

        the payload format

        :param format: The format of this Sender.
        :type format: str
        """
        allowed_values = ["CSV"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def meta(self):
        """Gets the meta of this Sender.


        :return: The meta of this Sender.
        :rtype: SettingMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Sender.


        :param meta: The meta of this Sender.
        :type meta: SettingMetadata
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this Sender.

        Unique name for the senders, includes the orgninzation name

        :return: The name of this Sender.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sender.

        Unique name for the senders, includes the orgninzation name

        :param name: The name of this Sender.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization_name(self):
        """Gets the organization_name of this Sender.

        Name of the organization that this sender belongs to

        :return: The organization_name of this Sender.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this Sender.

        Name of the organization that this sender belongs to

        :param organization_name: The organization_name of this Sender.
        :type organization_name: str
        """

        self._organization_name = organization_name

    @property
    def _schema(self):
        """Gets the _schema of this Sender.

        the schema name for this sender

        :return: The _schema of this Sender.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this Sender.

        the schema name for this sender

        :param _schema: The _schema of this Sender.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def topic(self):
        """Gets the topic of this Sender.

        Topic of for this sender. Must match the supported topics.

        :return: The topic of this Sender.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Sender.

        Topic of for this sender. Must match the supported topics.

        :param topic: The topic of this Sender.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic
