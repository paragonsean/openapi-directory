# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NullTransport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dummy: str=None, type: str=None):
        """NullTransport - a model defined in OpenAPI

        :param dummy: The dummy of this NullTransport.
        :param type: The type of this NullTransport.
        """
        self.openapi_types = {
            'dummy': str,
            'type': str
        }

        self.attribute_map = {
            'dummy': 'dummy',
            'type': 'type'
        }

        self._dummy = dummy
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NullTransport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NullTransport of this NullTransport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dummy(self):
        """Gets the dummy of this NullTransport.

        A dummy value

        :return: The dummy of this NullTransport.
        :rtype: str
        """
        return self._dummy

    @dummy.setter
    def dummy(self, dummy):
        """Sets the dummy of this NullTransport.

        A dummy value

        :param dummy: The dummy of this NullTransport.
        :type dummy: str
        """

        self._dummy = dummy

    @property
    def type(self):
        """Gets the type of this NullTransport.

        The discriminator

        :return: The type of this NullTransport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NullTransport.

        The discriminator

        :param type: The type of this NullTransport.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
