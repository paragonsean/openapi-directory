# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReceiverTiming(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_at: float=None, frequency: str=None):
        """ReceiverTiming - a model defined in OpenAPI

        :param daily_at: The daily_at of this ReceiverTiming.
        :param frequency: The frequency of this ReceiverTiming.
        """
        self.openapi_types = {
            'daily_at': float,
            'frequency': str
        }

        self.attribute_map = {
            'daily_at': 'dailyAt',
            'frequency': 'frequency'
        }

        self._daily_at = daily_at
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceiverTiming':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Receiver_timing of this ReceiverTiming.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_at(self):
        """Gets the daily_at of this ReceiverTiming.

        The UTC hour to send a daily batch

        :return: The daily_at of this ReceiverTiming.
        :rtype: float
        """
        return self._daily_at

    @daily_at.setter
    def daily_at(self, daily_at):
        """Sets the daily_at of this ReceiverTiming.

        The UTC hour to send a daily batch

        :param daily_at: The daily_at of this ReceiverTiming.
        :type daily_at: float
        """

        self._daily_at = daily_at

    @property
    def frequency(self):
        """Gets the frequency of this ReceiverTiming.

        How often send a report

        :return: The frequency of this ReceiverTiming.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ReceiverTiming.

        How often send a report

        :param frequency: The frequency of this ReceiverTiming.
        :type frequency: str
        """
        allowed_values = ["REAL_TIME", "HOURLY", "DAILY"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency
