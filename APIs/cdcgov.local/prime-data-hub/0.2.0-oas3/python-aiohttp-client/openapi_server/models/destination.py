# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_count: int=None, organization: str=None, organization_id: str=None, sending_at: datetime=None, service: str=None):
        """Destination - a model defined in OpenAPI

        :param item_count: The item_count of this Destination.
        :param organization: The organization of this Destination.
        :param organization_id: The organization_id of this Destination.
        :param sending_at: The sending_at of this Destination.
        :param service: The service of this Destination.
        """
        self.openapi_types = {
            'item_count': int,
            'organization': str,
            'organization_id': str,
            'sending_at': datetime,
            'service': str
        }

        self.attribute_map = {
            'item_count': 'itemCount',
            'organization': 'organization',
            'organization_id': 'organization_id',
            'sending_at': 'sending_at',
            'service': 'service'
        }

        self._item_count = item_count
        self._organization = organization
        self._organization_id = organization_id
        self._sending_at = sending_at
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destination of this Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_count(self):
        """Gets the item_count of this Destination.

        The number of reports being sent to this destination

        :return: The item_count of this Destination.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this Destination.

        The number of reports being sent to this destination

        :param item_count: The item_count of this Destination.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def organization(self):
        """Gets the organization of this Destination.

        The name of the organization reciving the report

        :return: The organization of this Destination.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Destination.

        The name of the organization reciving the report

        :param organization: The organization of this Destination.
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_id(self):
        """Gets the organization_id of this Destination.

        The organization id (i.e. {state abbreviation}-phd)

        :return: The organization_id of this Destination.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Destination.

        The organization id (i.e. {state abbreviation}-phd)

        :param organization_id: The organization_id of this Destination.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def sending_at(self):
        """Gets the sending_at of this Destination.

        The time at which the report will be sent

        :return: The sending_at of this Destination.
        :rtype: datetime
        """
        return self._sending_at

    @sending_at.setter
    def sending_at(self, sending_at):
        """Sets the sending_at of this Destination.

        The time at which the report will be sent

        :param sending_at: The sending_at of this Destination.
        :type sending_at: datetime
        """

        self._sending_at = sending_at

    @property
    def service(self):
        """Gets the service of this Destination.

        The service used for delivering the report

        :return: The service of this Destination.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Destination.

        The service used for delivering the report

        :param service: The service of this Destination.
        :type service: str
        """

        self._service = service
