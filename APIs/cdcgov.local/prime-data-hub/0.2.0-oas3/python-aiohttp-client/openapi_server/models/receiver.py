# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.receiver_jurisdictional_filters_inner import ReceiverJurisdictionalFiltersInner
from openapi_server.models.receiver_timing import ReceiverTiming
from openapi_server.models.receiver_translations_inner import ReceiverTranslationsInner
from openapi_server.models.setting_metadata import SettingMetadata
from openapi_server import util


class Receiver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, jurisdictional_filters: List[ReceiverJurisdictionalFiltersInner]=None, meta: SettingMetadata=None, name: str=None, organization_name: str=None, timing: ReceiverTiming=None, topic: str=None, translations: List[ReceiverTranslationsInner]=None):
        """Receiver - a model defined in OpenAPI

        :param description: The description of this Receiver.
        :param jurisdictional_filters: The jurisdictional_filters of this Receiver.
        :param meta: The meta of this Receiver.
        :param name: The name of this Receiver.
        :param organization_name: The organization_name of this Receiver.
        :param timing: The timing of this Receiver.
        :param topic: The topic of this Receiver.
        :param translations: The translations of this Receiver.
        """
        self.openapi_types = {
            'description': str,
            'jurisdictional_filters': List[ReceiverJurisdictionalFiltersInner],
            'meta': SettingMetadata,
            'name': str,
            'organization_name': str,
            'timing': ReceiverTiming,
            'topic': str,
            'translations': List[ReceiverTranslationsInner]
        }

        self.attribute_map = {
            'description': 'description',
            'jurisdictional_filters': 'jurisdictionalFilters',
            'meta': 'meta',
            'name': 'name',
            'organization_name': 'organizationName',
            'timing': 'timing',
            'topic': 'topic',
            'translations': 'translations'
        }

        self._description = description
        self._jurisdictional_filters = jurisdictional_filters
        self._meta = meta
        self._name = name
        self._organization_name = organization_name
        self._timing = timing
        self._topic = topic
        self._translations = translations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Receiver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Receiver of this Receiver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Receiver.

        Display ready description of the receiver

        :return: The description of this Receiver.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Receiver.

        Display ready description of the receiver

        :param description: The description of this Receiver.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def jurisdictional_filters(self):
        """Gets the jurisdictional_filters of this Receiver.

        What items to include in the report.

        :return: The jurisdictional_filters of this Receiver.
        :rtype: List[ReceiverJurisdictionalFiltersInner]
        """
        return self._jurisdictional_filters

    @jurisdictional_filters.setter
    def jurisdictional_filters(self, jurisdictional_filters):
        """Sets the jurisdictional_filters of this Receiver.

        What items to include in the report.

        :param jurisdictional_filters: The jurisdictional_filters of this Receiver.
        :type jurisdictional_filters: List[ReceiverJurisdictionalFiltersInner]
        """

        self._jurisdictional_filters = jurisdictional_filters

    @property
    def meta(self):
        """Gets the meta of this Receiver.


        :return: The meta of this Receiver.
        :rtype: SettingMetadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Receiver.


        :param meta: The meta of this Receiver.
        :type meta: SettingMetadata
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this Receiver.

        The unique name for the receiver. Should include the organization name as a prefix.

        :return: The name of this Receiver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Receiver.

        The unique name for the receiver. Should include the organization name as a prefix.

        :param name: The name of this Receiver.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization_name(self):
        """Gets the organization_name of this Receiver.

        The name of the organization that this receiver belongs to

        :return: The organization_name of this Receiver.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this Receiver.

        The name of the organization that this receiver belongs to

        :param organization_name: The organization_name of this Receiver.
        :type organization_name: str
        """

        self._organization_name = organization_name

    @property
    def timing(self):
        """Gets the timing of this Receiver.


        :return: The timing of this Receiver.
        :rtype: ReceiverTiming
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this Receiver.


        :param timing: The timing of this Receiver.
        :type timing: ReceiverTiming
        """
        if timing is None:
            raise ValueError("Invalid value for `timing`, must not be `None`")

        self._timing = timing

    @property
    def topic(self):
        """Gets the topic of this Receiver.

        The topic of for this receiver. Must match the supported topics.

        :return: The topic of this Receiver.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Receiver.

        The topic of for this receiver. Must match the supported topics.

        :param topic: The topic of this Receiver.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def translations(self):
        """Gets the translations of this Receiver.

        How the report is translated from the sender. A report can be sent in multiple ways.

        :return: The translations of this Receiver.
        :rtype: List[ReceiverTranslationsInner]
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this Receiver.

        How the report is translated from the sender. A report can be sent in multiple ways.

        :param translations: The translations of this Receiver.
        :type translations: List[ReceiverTranslationsInner]
        """

        self._translations = translations
