# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.as2_transport import AS2Transport
from openapi_server.models.blob_store_transport import BlobStoreTransport
from openapi_server.models.null_transport import NullTransport
from openapi_server.models.sftp_transport import SFTPTransport
from openapi_server import util


class StandardHL7ConfigurationTransport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_path: str=None, host: str=None, port: float=None, type: str=None, content_description: str='SARS-CoV-2 Electronic Lab Results', mime_type: str='application/hl7-v2', receiver_id: str=None, receiver_url: str=None, sender_email: str='reportstream@cdc.gov', sender_id: str=None, container_name: str=None, storage_name: str=None, dummy: str=None):
        """StandardHL7ConfigurationTransport - a model defined in OpenAPI

        :param file_path: The file_path of this StandardHL7ConfigurationTransport.
        :param host: The host of this StandardHL7ConfigurationTransport.
        :param port: The port of this StandardHL7ConfigurationTransport.
        :param type: The type of this StandardHL7ConfigurationTransport.
        :param content_description: The content_description of this StandardHL7ConfigurationTransport.
        :param mime_type: The mime_type of this StandardHL7ConfigurationTransport.
        :param receiver_id: The receiver_id of this StandardHL7ConfigurationTransport.
        :param receiver_url: The receiver_url of this StandardHL7ConfigurationTransport.
        :param sender_email: The sender_email of this StandardHL7ConfigurationTransport.
        :param sender_id: The sender_id of this StandardHL7ConfigurationTransport.
        :param container_name: The container_name of this StandardHL7ConfigurationTransport.
        :param storage_name: The storage_name of this StandardHL7ConfigurationTransport.
        :param dummy: The dummy of this StandardHL7ConfigurationTransport.
        """
        self.openapi_types = {
            'file_path': str,
            'host': str,
            'port': float,
            'type': str,
            'content_description': str,
            'mime_type': str,
            'receiver_id': str,
            'receiver_url': str,
            'sender_email': str,
            'sender_id': str,
            'container_name': str,
            'storage_name': str,
            'dummy': str
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'host': 'host',
            'port': 'port',
            'type': 'type',
            'content_description': 'contentDescription',
            'mime_type': 'mimeType',
            'receiver_id': 'receiverId',
            'receiver_url': 'receiverUrl',
            'sender_email': 'senderEmail',
            'sender_id': 'senderId',
            'container_name': 'containerName',
            'storage_name': 'storageName',
            'dummy': 'dummy'
        }

        self._file_path = file_path
        self._host = host
        self._port = port
        self._type = type
        self._content_description = content_description
        self._mime_type = mime_type
        self._receiver_id = receiver_id
        self._receiver_url = receiver_url
        self._sender_email = sender_email
        self._sender_id = sender_id
        self._container_name = container_name
        self._storage_name = storage_name
        self._dummy = dummy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardHL7ConfigurationTransport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardHL7Configuration_transport of this StandardHL7ConfigurationTransport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self):
        """Gets the file_path of this StandardHL7ConfigurationTransport.

        The file path to place the report

        :return: The file_path of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this StandardHL7ConfigurationTransport.

        The file path to place the report

        :param file_path: The file_path of this StandardHL7ConfigurationTransport.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def host(self):
        """Gets the host of this StandardHL7ConfigurationTransport.

        Host name and domain

        :return: The host of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this StandardHL7ConfigurationTransport.

        Host name and domain

        :param host: The host of this StandardHL7ConfigurationTransport.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def port(self):
        """Gets the port of this StandardHL7ConfigurationTransport.

        The port to use

        :return: The port of this StandardHL7ConfigurationTransport.
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this StandardHL7ConfigurationTransport.

        The port to use

        :param port: The port of this StandardHL7ConfigurationTransport.
        :type port: float
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def type(self):
        """Gets the type of this StandardHL7ConfigurationTransport.

        The discriminator

        :return: The type of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StandardHL7ConfigurationTransport.

        The discriminator

        :param type: The type of this StandardHL7ConfigurationTransport.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def content_description(self):
        """Gets the content_description of this StandardHL7ConfigurationTransport.

        A description of the content of the message. Usually, the same for all messages.

        :return: The content_description of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._content_description

    @content_description.setter
    def content_description(self, content_description):
        """Sets the content_description of this StandardHL7ConfigurationTransport.

        A description of the content of the message. Usually, the same for all messages.

        :param content_description: The content_description of this StandardHL7ConfigurationTransport.
        :type content_description: str
        """

        self._content_description = content_description

    @property
    def mime_type(self):
        """Gets the mime_type of this StandardHL7ConfigurationTransport.

        The MIME type of the message

        :return: The mime_type of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this StandardHL7ConfigurationTransport.

        The MIME type of the message

        :param mime_type: The mime_type of this StandardHL7ConfigurationTransport.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def receiver_id(self):
        """Gets the receiver_id of this StandardHL7ConfigurationTransport.

        The AS2 id of the receiver. Usually, the same for all senders.

        :return: The receiver_id of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this StandardHL7ConfigurationTransport.

        The AS2 id of the receiver. Usually, the same for all senders.

        :param receiver_id: The receiver_id of this StandardHL7ConfigurationTransport.
        :type receiver_id: str
        """
        if receiver_id is None:
            raise ValueError("Invalid value for `receiver_id`, must not be `None`")

        self._receiver_id = receiver_id

    @property
    def receiver_url(self):
        """Gets the receiver_url of this StandardHL7ConfigurationTransport.

        The URL to the AS2 end-point

        :return: The receiver_url of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._receiver_url

    @receiver_url.setter
    def receiver_url(self, receiver_url):
        """Sets the receiver_url of this StandardHL7ConfigurationTransport.

        The URL to the AS2 end-point

        :param receiver_url: The receiver_url of this StandardHL7ConfigurationTransport.
        :type receiver_url: str
        """
        if receiver_url is None:
            raise ValueError("Invalid value for `receiver_url`, must not be `None`")

        self._receiver_url = receiver_url

    @property
    def sender_email(self):
        """Gets the sender_email of this StandardHL7ConfigurationTransport.

        The email address to contact someone about the message

        :return: The sender_email of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this StandardHL7ConfigurationTransport.

        The email address to contact someone about the message

        :param sender_email: The sender_email of this StandardHL7ConfigurationTransport.
        :type sender_email: str
        """

        self._sender_email = sender_email

    @property
    def sender_id(self):
        """Gets the sender_id of this StandardHL7ConfigurationTransport.

        The AS2 id of the sender. Usually, assigned by receiver to PRIME.

        :return: The sender_id of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this StandardHL7ConfigurationTransport.

        The AS2 id of the sender. Usually, assigned by receiver to PRIME.

        :param sender_id: The sender_id of this StandardHL7ConfigurationTransport.
        :type sender_id: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def container_name(self):
        """Gets the container_name of this StandardHL7ConfigurationTransport.

        This name of the Azure container

        :return: The container_name of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this StandardHL7ConfigurationTransport.

        This name of the Azure container

        :param container_name: The container_name of this StandardHL7ConfigurationTransport.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def storage_name(self):
        """Gets the storage_name of this StandardHL7ConfigurationTransport.

        This looks for an env var with this name. env var value is the connection string

        :return: The storage_name of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """Sets the storage_name of this StandardHL7ConfigurationTransport.

        This looks for an env var with this name. env var value is the connection string

        :param storage_name: The storage_name of this StandardHL7ConfigurationTransport.
        :type storage_name: str
        """
        if storage_name is None:
            raise ValueError("Invalid value for `storage_name`, must not be `None`")

        self._storage_name = storage_name

    @property
    def dummy(self):
        """Gets the dummy of this StandardHL7ConfigurationTransport.

        A dummy value

        :return: The dummy of this StandardHL7ConfigurationTransport.
        :rtype: str
        """
        return self._dummy

    @dummy.setter
    def dummy(self, dummy):
        """Sets the dummy of this StandardHL7ConfigurationTransport.

        A dummy value

        :param dummy: The dummy of this StandardHL7ConfigurationTransport.
        :type dummy: str
        """

        self._dummy = dummy
