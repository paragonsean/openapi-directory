# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_configuration_transport import CustomConfigurationTransport
from openapi_server import util


class CustomConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, name_format: str='standard', receiving_organization: str=None, schema_name: str=None, transport: CustomConfigurationTransport=None, type: str=None):
        """CustomConfiguration - a model defined in OpenAPI

        :param format: The format of this CustomConfiguration.
        :param name_format: The name_format of this CustomConfiguration.
        :param receiving_organization: The receiving_organization of this CustomConfiguration.
        :param schema_name: The schema_name of this CustomConfiguration.
        :param transport: The transport of this CustomConfiguration.
        :param type: The type of this CustomConfiguration.
        """
        self.openapi_types = {
            'format': str,
            'name_format': str,
            'receiving_organization': str,
            'schema_name': str,
            'transport': CustomConfigurationTransport,
            'type': str
        }

        self.attribute_map = {
            'format': 'format',
            'name_format': 'nameFormat',
            'receiving_organization': 'receivingOrganization',
            'schema_name': 'schemaName',
            'transport': 'transport',
            'type': 'type'
        }

        self._format = format
        self._name_format = name_format
        self._receiving_organization = receiving_organization
        self._schema_name = schema_name
        self._transport = transport
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomConfiguration of this CustomConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this CustomConfiguration.

        The format of the serializer

        :return: The format of this CustomConfiguration.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CustomConfiguration.

        The format of the serializer

        :param format: The format of this CustomConfiguration.
        :type format: str
        """
        allowed_values = ["CSV", "HL7"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name_format(self):
        """Gets the name_format of this CustomConfiguration.

        The format to use for the file name generated by the translation

        :return: The name_format of this CustomConfiguration.
        :rtype: str
        """
        return self._name_format

    @name_format.setter
    def name_format(self, name_format):
        """Sets the name_format of this CustomConfiguration.

        The format to use for the file name generated by the translation

        :param name_format: The name_format of this CustomConfiguration.
        :type name_format: str
        """

        self._name_format = name_format

    @property
    def receiving_organization(self):
        """Gets the receiving_organization of this CustomConfiguration.

        The name of the receiving organization in the message

        :return: The receiving_organization of this CustomConfiguration.
        :rtype: str
        """
        return self._receiving_organization

    @receiving_organization.setter
    def receiving_organization(self, receiving_organization):
        """Sets the receiving_organization of this CustomConfiguration.

        The name of the receiving organization in the message

        :param receiving_organization: The receiving_organization of this CustomConfiguration.
        :type receiving_organization: str
        """

        self._receiving_organization = receiving_organization

    @property
    def schema_name(self):
        """Gets the schema_name of this CustomConfiguration.

        The name of the custom schema

        :return: The schema_name of this CustomConfiguration.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this CustomConfiguration.

        The name of the custom schema

        :param schema_name: The schema_name of this CustomConfiguration.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")

        self._schema_name = schema_name

    @property
    def transport(self):
        """Gets the transport of this CustomConfiguration.


        :return: The transport of this CustomConfiguration.
        :rtype: CustomConfigurationTransport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this CustomConfiguration.


        :param transport: The transport of this CustomConfiguration.
        :type transport: CustomConfigurationTransport
        """
        if transport is None:
            raise ValueError("Invalid value for `transport`, must not be `None`")

        self._transport = transport

    @property
    def type(self):
        """Gets the type of this CustomConfiguration.

        The discrimenator

        :return: The type of this CustomConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomConfiguration.

        The discrimenator

        :param type: The type of this CustomConfiguration.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
