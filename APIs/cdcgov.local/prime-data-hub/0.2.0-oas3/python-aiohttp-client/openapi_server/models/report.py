# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination import Destination
from openapi_server.models.detail import Detail
from openapi_server.models.item_routing import ItemRouting
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_count: int=None, destinations: List[Destination]=None, error_count: int=None, errors: List[Detail]=None, id: str=None, report_item_count: int=None, routing: List[ItemRouting]=None, timestamp: str=None, topic: str=None, warning_count: int=None, warnings: List[Detail]=None):
        """Report - a model defined in OpenAPI

        :param destination_count: The destination_count of this Report.
        :param destinations: The destinations of this Report.
        :param error_count: The error_count of this Report.
        :param errors: The errors of this Report.
        :param id: The id of this Report.
        :param report_item_count: The report_item_count of this Report.
        :param routing: The routing of this Report.
        :param timestamp: The timestamp of this Report.
        :param topic: The topic of this Report.
        :param warning_count: The warning_count of this Report.
        :param warnings: The warnings of this Report.
        """
        self.openapi_types = {
            'destination_count': int,
            'destinations': List[Destination],
            'error_count': int,
            'errors': List[Detail],
            'id': str,
            'report_item_count': int,
            'routing': List[ItemRouting],
            'timestamp': str,
            'topic': str,
            'warning_count': int,
            'warnings': List[Detail]
        }

        self.attribute_map = {
            'destination_count': 'destinationCount',
            'destinations': 'destinations',
            'error_count': 'errorCount',
            'errors': 'errors',
            'id': 'id',
            'report_item_count': 'reportItemCount',
            'routing': 'routing',
            'timestamp': 'timestamp',
            'topic': 'topic',
            'warning_count': 'warningCount',
            'warnings': 'warnings'
        }

        self._destination_count = destination_count
        self._destinations = destinations
        self._error_count = error_count
        self._errors = errors
        self._id = id
        self._report_item_count = report_item_count
        self._routing = routing
        self._timestamp = timestamp
        self._topic = topic
        self._warning_count = warning_count
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_count(self):
        """Gets the destination_count of this Report.

        total destinations recieving the report(s)

        :return: The destination_count of this Report.
        :rtype: int
        """
        return self._destination_count

    @destination_count.setter
    def destination_count(self, destination_count):
        """Sets the destination_count of this Report.

        total destinations recieving the report(s)

        :param destination_count: The destination_count of this Report.
        :type destination_count: int
        """

        self._destination_count = destination_count

    @property
    def destinations(self):
        """Gets the destinations of this Report.

        where the report is being sent to

        :return: The destinations of this Report.
        :rtype: List[Destination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this Report.

        where the report is being sent to

        :param destinations: The destinations of this Report.
        :type destinations: List[Destination]
        """

        self._destinations = destinations

    @property
    def error_count(self):
        """Gets the error_count of this Report.

        total errors found during initial validation.  There may be multiple errors per item.

        :return: The error_count of this Report.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this Report.

        total errors found during initial validation.  There may be multiple errors per item.

        :param error_count: The error_count of this Report.
        :type error_count: int
        """

        self._error_count = error_count

    @property
    def errors(self):
        """Gets the errors of this Report.

        a list of errors in the report

        :return: The errors of this Report.
        :rtype: List[Detail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Report.

        a list of errors in the report

        :param errors: The errors of this Report.
        :type errors: List[Detail]
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this Report.

        the id for the report assigned by the Hub

        :return: The id of this Report.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        the id for the report assigned by the Hub

        :param id: The id of this Report.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def report_item_count(self):
        """Gets the report_item_count of this Report.

        total number of individual reports sent to the Hub (in a csv, the number of data lines sent)

        :return: The report_item_count of this Report.
        :rtype: int
        """
        return self._report_item_count

    @report_item_count.setter
    def report_item_count(self, report_item_count):
        """Sets the report_item_count of this Report.

        total number of individual reports sent to the Hub (in a csv, the number of data lines sent)

        :param report_item_count: The report_item_count of this Report.
        :type report_item_count: int
        """

        self._report_item_count = report_item_count

    @property
    def routing(self):
        """Gets the routing of this Report.

        The receiver destination names for each item in the report. This is displayed when verbose=true is present on the query string.

        :return: The routing of this Report.
        :rtype: List[ItemRouting]
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this Report.

        The receiver destination names for each item in the report. This is displayed when verbose=true is present on the query string.

        :param routing: The routing of this Report.
        :type routing: List[ItemRouting]
        """

        self._routing = routing

    @property
    def timestamp(self):
        """Gets the timestamp of this Report.

        the timestamp for this report submission

        :return: The timestamp of this Report.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Report.

        the timestamp for this report submission

        :param timestamp: The timestamp of this Report.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def topic(self):
        """Gets the topic of this Report.

        the topic configured for the client organization sender

        :return: The topic of this Report.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Report.

        the topic configured for the client organization sender

        :param topic: The topic of this Report.
        :type topic: str
        """

        self._topic = topic

    @property
    def warning_count(self):
        """Gets the warning_count of this Report.

        total warnings found during initial validation.  There may be multiple warnings per item.

        :return: The warning_count of this Report.
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this Report.

        total warnings found during initial validation.  There may be multiple warnings per item.

        :param warning_count: The warning_count of this Report.
        :type warning_count: int
        """

        self._warning_count = warning_count

    @property
    def warnings(self):
        """Gets the warnings of this Report.

        a list of warnings in the report

        :return: The warnings of this Report.
        :rtype: List[Detail]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Report.

        a list of warnings in the report

        :param warnings: The warnings of this Report.
        :type warnings: List[Detail]
        """

        self._warnings = warnings
