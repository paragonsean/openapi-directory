# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AS2Transport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_description: str='SARS-CoV-2 Electronic Lab Results', mime_type: str='application/hl7-v2', receiver_id: str=None, receiver_url: str=None, sender_email: str='reportstream@cdc.gov', sender_id: str=None, type: str=None):
        """AS2Transport - a model defined in OpenAPI

        :param content_description: The content_description of this AS2Transport.
        :param mime_type: The mime_type of this AS2Transport.
        :param receiver_id: The receiver_id of this AS2Transport.
        :param receiver_url: The receiver_url of this AS2Transport.
        :param sender_email: The sender_email of this AS2Transport.
        :param sender_id: The sender_id of this AS2Transport.
        :param type: The type of this AS2Transport.
        """
        self.openapi_types = {
            'content_description': str,
            'mime_type': str,
            'receiver_id': str,
            'receiver_url': str,
            'sender_email': str,
            'sender_id': str,
            'type': str
        }

        self.attribute_map = {
            'content_description': 'contentDescription',
            'mime_type': 'mimeType',
            'receiver_id': 'receiverId',
            'receiver_url': 'receiverUrl',
            'sender_email': 'senderEmail',
            'sender_id': 'senderId',
            'type': 'type'
        }

        self._content_description = content_description
        self._mime_type = mime_type
        self._receiver_id = receiver_id
        self._receiver_url = receiver_url
        self._sender_email = sender_email
        self._sender_id = sender_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AS2Transport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AS2Transport of this AS2Transport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_description(self):
        """Gets the content_description of this AS2Transport.

        A description of the content of the message. Usually, the same for all messages.

        :return: The content_description of this AS2Transport.
        :rtype: str
        """
        return self._content_description

    @content_description.setter
    def content_description(self, content_description):
        """Sets the content_description of this AS2Transport.

        A description of the content of the message. Usually, the same for all messages.

        :param content_description: The content_description of this AS2Transport.
        :type content_description: str
        """

        self._content_description = content_description

    @property
    def mime_type(self):
        """Gets the mime_type of this AS2Transport.

        The MIME type of the message

        :return: The mime_type of this AS2Transport.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this AS2Transport.

        The MIME type of the message

        :param mime_type: The mime_type of this AS2Transport.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def receiver_id(self):
        """Gets the receiver_id of this AS2Transport.

        The AS2 id of the receiver. Usually, the same for all senders.

        :return: The receiver_id of this AS2Transport.
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this AS2Transport.

        The AS2 id of the receiver. Usually, the same for all senders.

        :param receiver_id: The receiver_id of this AS2Transport.
        :type receiver_id: str
        """
        if receiver_id is None:
            raise ValueError("Invalid value for `receiver_id`, must not be `None`")

        self._receiver_id = receiver_id

    @property
    def receiver_url(self):
        """Gets the receiver_url of this AS2Transport.

        The URL to the AS2 end-point

        :return: The receiver_url of this AS2Transport.
        :rtype: str
        """
        return self._receiver_url

    @receiver_url.setter
    def receiver_url(self, receiver_url):
        """Sets the receiver_url of this AS2Transport.

        The URL to the AS2 end-point

        :param receiver_url: The receiver_url of this AS2Transport.
        :type receiver_url: str
        """
        if receiver_url is None:
            raise ValueError("Invalid value for `receiver_url`, must not be `None`")

        self._receiver_url = receiver_url

    @property
    def sender_email(self):
        """Gets the sender_email of this AS2Transport.

        The email address to contact someone about the message

        :return: The sender_email of this AS2Transport.
        :rtype: str
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this AS2Transport.

        The email address to contact someone about the message

        :param sender_email: The sender_email of this AS2Transport.
        :type sender_email: str
        """

        self._sender_email = sender_email

    @property
    def sender_id(self):
        """Gets the sender_id of this AS2Transport.

        The AS2 id of the sender. Usually, assigned by receiver to PRIME.

        :return: The sender_id of this AS2Transport.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this AS2Transport.

        The AS2 id of the sender. Usually, assigned by receiver to PRIME.

        :param sender_id: The sender_id of this AS2Transport.
        :type sender_id: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def type(self):
        """Gets the type of this AS2Transport.

        The discriminator

        :return: The type of this AS2Transport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AS2Transport.

        The discriminator

        :param type: The type of this AS2Transport.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
