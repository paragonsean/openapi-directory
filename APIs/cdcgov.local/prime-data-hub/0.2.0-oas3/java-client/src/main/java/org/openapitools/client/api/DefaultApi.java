/*
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Organization;
import org.openapitools.client.model.Receiver;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.Sender;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportsPost
     * @param client The client&#39;s name that matches the client name in metadata (required)
     * @param body The public health information being routed (required)
     * @param option Optional ways to process the request (optional)
     * @param _default Dynamic default values for an element. &#39;:&#39; or %3A is used to seperate element name and value (optional)
     * @param routeTo A comma speparated list of receiver names. Limit the list of possible receivers to these receivers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A report was created, but items may have been rejected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. No report created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsPostCall(String client, String body, String option, List<String> _default, List<String> routeTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        if (option != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option", option));
        }

        if (_default != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "default", _default));
        }

        if (routeTo != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "routeTo", routeTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/csv"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsPostValidateBeforeCall(String client, String body, String option, List<String> _default, List<String> routeTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'client' is set
        if (client == null) {
            throw new ApiException("Missing the required parameter 'client' when calling reportsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reportsPost(Async)");
        }

        return reportsPostCall(client, body, option, _default, routeTo, _callback);

    }

    /**
     * Post a report to the data hub
     * 
     * @param client The client&#39;s name that matches the client name in metadata (required)
     * @param body The public health information being routed (required)
     * @param option Optional ways to process the request (optional)
     * @param _default Dynamic default values for an element. &#39;:&#39; or %3A is used to seperate element name and value (optional)
     * @param routeTo A comma speparated list of receiver names. Limit the list of possible receivers to these receivers. (optional)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A report was created, but items may have been rejected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. No report created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Report reportsPost(String client, String body, String option, List<String> _default, List<String> routeTo) throws ApiException {
        ApiResponse<Report> localVarResp = reportsPostWithHttpInfo(client, body, option, _default, routeTo);
        return localVarResp.getData();
    }

    /**
     * Post a report to the data hub
     * 
     * @param client The client&#39;s name that matches the client name in metadata (required)
     * @param body The public health information being routed (required)
     * @param option Optional ways to process the request (optional)
     * @param _default Dynamic default values for an element. &#39;:&#39; or %3A is used to seperate element name and value (optional)
     * @param routeTo A comma speparated list of receiver names. Limit the list of possible receivers to these receivers. (optional)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A report was created, but items may have been rejected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. No report created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Report> reportsPostWithHttpInfo(String client, String body, String option, List<String> _default, List<String> routeTo) throws ApiException {
        okhttp3.Call localVarCall = reportsPostValidateBeforeCall(client, body, option, _default, routeTo, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post a report to the data hub (asynchronously)
     * 
     * @param client The client&#39;s name that matches the client name in metadata (required)
     * @param body The public health information being routed (required)
     * @param option Optional ways to process the request (optional)
     * @param _default Dynamic default values for an element. &#39;:&#39; or %3A is used to seperate element name and value (optional)
     * @param routeTo A comma speparated list of receiver names. Limit the list of possible receivers to these receivers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A report was created, but items may have been rejected. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. No report created. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsPostAsync(String client, String body, String option, List<String> _default, List<String> routeTo, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsPostValidateBeforeCall(client, body, option, _default, routeTo, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return settingsOrganizationsGetCall(_callback);

    }

    /**
     * 
     * The settings for all organizations of the system. Must have admin access.
     * @return List&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public List<Organization> settingsOrganizationsGet() throws ApiException {
        ApiResponse<List<Organization>> localVarResp = settingsOrganizationsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The settings for all organizations of the system. Must have admin access.
     * @return ApiResponse&lt;List&lt;Organization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Organization>> settingsOrganizationsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The settings for all organizations of the system. Must have admin access.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsGetAsync(final ApiCallback<List<Organization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Organization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsHead
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsHeadCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsHeadValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return settingsOrganizationsHeadCall(_callback);

    }

    /**
     * 
     * Retrived the last modified for all settings of the system. Must have admin access.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public void settingsOrganizationsHead() throws ApiException {
        settingsOrganizationsHeadWithHttpInfo();
    }

    /**
     * 
     * Retrived the last modified for all settings of the system. Must have admin access.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> settingsOrganizationsHeadWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsHeadValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrived the last modified for all settings of the system. Must have admin access.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Last-Modified - The Last-Modified response HTTP header contains the date and time any setting was modified. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsHeadAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsHeadValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameDelete
     * @param organizationName The name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameDeleteCall(String organizationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameDeleteValidateBeforeCall(String organizationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameDelete(Async)");
        }

        return settingsOrganizationsOrganizationNameDeleteCall(organizationName, _callback);

    }

    /**
     * 
     * Delete an organization (and the associated receivers and senders)
     * @param organizationName The name of the organization (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Organization settingsOrganizationsOrganizationNameDelete(String organizationName) throws ApiException {
        ApiResponse<Organization> localVarResp = settingsOrganizationsOrganizationNameDeleteWithHttpInfo(organizationName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete an organization (and the associated receivers and senders)
     * @param organizationName The name of the organization (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> settingsOrganizationsOrganizationNameDeleteWithHttpInfo(String organizationName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameDeleteValidateBeforeCall(organizationName, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete an organization (and the associated receivers and senders)
     * @param organizationName The name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameDeleteAsync(String organizationName, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameDeleteValidateBeforeCall(organizationName, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameGet
     * @param organizationName The name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameGetCall(String organizationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameGetValidateBeforeCall(String organizationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameGet(Async)");
        }

        return settingsOrganizationsOrganizationNameGetCall(organizationName, _callback);

    }

    /**
     * 
     * A single organization settings
     * @param organizationName The name of the organization (required)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Organization settingsOrganizationsOrganizationNameGet(String organizationName) throws ApiException {
        ApiResponse<Organization> localVarResp = settingsOrganizationsOrganizationNameGetWithHttpInfo(organizationName);
        return localVarResp.getData();
    }

    /**
     * 
     * A single organization settings
     * @param organizationName The name of the organization (required)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> settingsOrganizationsOrganizationNameGetWithHttpInfo(String organizationName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameGetValidateBeforeCall(organizationName, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A single organization settings
     * @param organizationName The name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameGetAsync(String organizationName, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameGetValidateBeforeCall(organizationName, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNamePut
     * @param organizationName The name of the organization (required)
     * @param organization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNamePutCall(String organizationName, Organization organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organization;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNamePutValidateBeforeCall(String organizationName, Organization organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNamePut(Async)");
        }

        return settingsOrganizationsOrganizationNamePutCall(organizationName, organization, _callback);

    }

    /**
     * 
     * Create or update the direct settings associated with an organization
     * @param organizationName The name of the organization (required)
     * @param organization  (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Organization settingsOrganizationsOrganizationNamePut(String organizationName, Organization organization) throws ApiException {
        ApiResponse<Organization> localVarResp = settingsOrganizationsOrganizationNamePutWithHttpInfo(organizationName, organization);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update the direct settings associated with an organization
     * @param organizationName The name of the organization (required)
     * @param organization  (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organization> settingsOrganizationsOrganizationNamePutWithHttpInfo(String organizationName, Organization organization) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNamePutValidateBeforeCall(organizationName, organization, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update the direct settings associated with an organization
     * @param organizationName The name of the organization (required)
     * @param organization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the organization setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNamePutAsync(String organizationName, Organization organization, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNamePutValidateBeforeCall(organizationName, organization, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameReceiversGet
     * @param organizationName Fetch receivers with this organization name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversGetCall(String organizationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/receivers"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameReceiversGetValidateBeforeCall(String organizationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversGet(Async)");
        }

        return settingsOrganizationsOrganizationNameReceiversGetCall(organizationName, _callback);

    }

    /**
     * 
     * A list of receivers and their current settings
     * @param organizationName Fetch receivers with this organization name (required)
     * @return List&lt;Receiver&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<Receiver> settingsOrganizationsOrganizationNameReceiversGet(String organizationName) throws ApiException {
        ApiResponse<List<Receiver>> localVarResp = settingsOrganizationsOrganizationNameReceiversGetWithHttpInfo(organizationName);
        return localVarResp.getData();
    }

    /**
     * 
     * A list of receivers and their current settings
     * @param organizationName Fetch receivers with this organization name (required)
     * @return ApiResponse&lt;List&lt;Receiver&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Receiver>> settingsOrganizationsOrganizationNameReceiversGetWithHttpInfo(String organizationName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversGetValidateBeforeCall(organizationName, null);
        Type localVarReturnType = new TypeToken<List<Receiver>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A list of receivers and their current settings
     * @param organizationName Fetch receivers with this organization name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversGetAsync(String organizationName, final ApiCallback<List<Receiver>> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversGetValidateBeforeCall(organizationName, _callback);
        Type localVarReturnType = new TypeToken<List<Receiver>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameReceiversReceiverNameDelete
     * @param organizationName the organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteCall(String organizationName, String receiverName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/receivers/{receiverName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()))
            .replace("{" + "receiverName" + "}", localVarApiClient.escapeString(receiverName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteValidateBeforeCall(String organizationName, String receiverName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameDelete(Async)");
        }

        // verify the required parameter 'receiverName' is set
        if (receiverName == null) {
            throw new ApiException("Missing the required parameter 'receiverName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameDelete(Async)");
        }

        return settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteCall(organizationName, receiverName, _callback);

    }

    /**
     * 
     * Delete a receiver
     * @param organizationName the organization name (required)
     * @param receiverName The name of the receiver (required)
     * @return Receiver
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Receiver settingsOrganizationsOrganizationNameReceiversReceiverNameDelete(String organizationName, String receiverName) throws ApiException {
        ApiResponse<Receiver> localVarResp = settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteWithHttpInfo(organizationName, receiverName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a receiver
     * @param organizationName the organization name (required)
     * @param receiverName The name of the receiver (required)
     * @return ApiResponse&lt;Receiver&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receiver> settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteWithHttpInfo(String organizationName, String receiverName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteValidateBeforeCall(organizationName, receiverName, null);
        Type localVarReturnType = new TypeToken<Receiver>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a receiver
     * @param organizationName the organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteAsync(String organizationName, String receiverName, final ApiCallback<Receiver> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversReceiverNameDeleteValidateBeforeCall(organizationName, receiverName, _callback);
        Type localVarReturnType = new TypeToken<Receiver>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameReceiversReceiverNameGet
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNameGetCall(String organizationName, String receiverName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/receivers/{receiverName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()))
            .replace("{" + "receiverName" + "}", localVarApiClient.escapeString(receiverName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNameGetValidateBeforeCall(String organizationName, String receiverName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameGet(Async)");
        }

        // verify the required parameter 'receiverName' is set
        if (receiverName == null) {
            throw new ApiException("Missing the required parameter 'receiverName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNameGet(Async)");
        }

        return settingsOrganizationsOrganizationNameReceiversReceiverNameGetCall(organizationName, receiverName, _callback);

    }

    /**
     * 
     * The settings of a single of receiver
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @return Receiver
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Receiver settingsOrganizationsOrganizationNameReceiversReceiverNameGet(String organizationName, String receiverName) throws ApiException {
        ApiResponse<Receiver> localVarResp = settingsOrganizationsOrganizationNameReceiversReceiverNameGetWithHttpInfo(organizationName, receiverName);
        return localVarResp.getData();
    }

    /**
     * 
     * The settings of a single of receiver
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @return ApiResponse&lt;Receiver&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receiver> settingsOrganizationsOrganizationNameReceiversReceiverNameGetWithHttpInfo(String organizationName, String receiverName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversReceiverNameGetValidateBeforeCall(organizationName, receiverName, null);
        Type localVarReturnType = new TypeToken<Receiver>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The settings of a single of receiver
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNameGetAsync(String organizationName, String receiverName, final ApiCallback<Receiver> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversReceiverNameGetValidateBeforeCall(organizationName, receiverName, _callback);
        Type localVarReturnType = new TypeToken<Receiver>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameReceiversReceiverNamePut
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param receiver  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNamePutCall(String organizationName, String receiverName, Receiver receiver, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receiver;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/receivers/{receiverName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()))
            .replace("{" + "receiverName" + "}", localVarApiClient.escapeString(receiverName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNamePutValidateBeforeCall(String organizationName, String receiverName, Receiver receiver, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNamePut(Async)");
        }

        // verify the required parameter 'receiverName' is set
        if (receiverName == null) {
            throw new ApiException("Missing the required parameter 'receiverName' when calling settingsOrganizationsOrganizationNameReceiversReceiverNamePut(Async)");
        }

        return settingsOrganizationsOrganizationNameReceiversReceiverNamePutCall(organizationName, receiverName, receiver, _callback);

    }

    /**
     * 
     * Update a single reciever
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param receiver  (optional)
     * @return Receiver
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Receiver settingsOrganizationsOrganizationNameReceiversReceiverNamePut(String organizationName, String receiverName, Receiver receiver) throws ApiException {
        ApiResponse<Receiver> localVarResp = settingsOrganizationsOrganizationNameReceiversReceiverNamePutWithHttpInfo(organizationName, receiverName, receiver);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a single reciever
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param receiver  (optional)
     * @return ApiResponse&lt;Receiver&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Receiver> settingsOrganizationsOrganizationNameReceiversReceiverNamePutWithHttpInfo(String organizationName, String receiverName, Receiver receiver) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversReceiverNamePutValidateBeforeCall(organizationName, receiverName, receiver, null);
        Type localVarReturnType = new TypeToken<Receiver>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a single reciever
     * @param organizationName Create receivers under this organization name (required)
     * @param receiverName The name of the receiver (required)
     * @param receiver  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the receiver setting was updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameReceiversReceiverNamePutAsync(String organizationName, String receiverName, Receiver receiver, final ApiCallback<Receiver> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameReceiversReceiverNamePutValidateBeforeCall(organizationName, receiverName, receiver, _callback);
        Type localVarReturnType = new TypeToken<Receiver>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameSendersGet
     * @param organizationName Fetch senders with this organization name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersGetCall(String organizationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/senders"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameSendersGetValidateBeforeCall(String organizationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersGet(Async)");
        }

        return settingsOrganizationsOrganizationNameSendersGetCall(organizationName, _callback);

    }

    /**
     * 
     * A list of senders
     * @param organizationName Fetch senders with this organization name (required)
     * @return List&lt;Sender&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<Sender> settingsOrganizationsOrganizationNameSendersGet(String organizationName) throws ApiException {
        ApiResponse<List<Sender>> localVarResp = settingsOrganizationsOrganizationNameSendersGetWithHttpInfo(organizationName);
        return localVarResp.getData();
    }

    /**
     * 
     * A list of senders
     * @param organizationName Fetch senders with this organization name (required)
     * @return ApiResponse&lt;List&lt;Sender&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Sender>> settingsOrganizationsOrganizationNameSendersGetWithHttpInfo(String organizationName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersGetValidateBeforeCall(organizationName, null);
        Type localVarReturnType = new TypeToken<List<Sender>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A list of senders
     * @param organizationName Fetch senders with this organization name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersGetAsync(String organizationName, final ApiCallback<List<Sender>> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersGetValidateBeforeCall(organizationName, _callback);
        Type localVarReturnType = new TypeToken<List<Sender>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameSendersSenderNameDelete
     * @param organizationName the organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the sender was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNameDeleteCall(String organizationName, String senderName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/senders/{senderName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()))
            .replace("{" + "senderName" + "}", localVarApiClient.escapeString(senderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNameDeleteValidateBeforeCall(String organizationName, String senderName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersSenderNameDelete(Async)");
        }

        // verify the required parameter 'senderName' is set
        if (senderName == null) {
            throw new ApiException("Missing the required parameter 'senderName' when calling settingsOrganizationsOrganizationNameSendersSenderNameDelete(Async)");
        }

        return settingsOrganizationsOrganizationNameSendersSenderNameDeleteCall(organizationName, senderName, _callback);

    }

    /**
     * 
     * Delete a sender
     * @param organizationName the organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @return Sender
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the sender was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Sender settingsOrganizationsOrganizationNameSendersSenderNameDelete(String organizationName, String senderName) throws ApiException {
        ApiResponse<Sender> localVarResp = settingsOrganizationsOrganizationNameSendersSenderNameDeleteWithHttpInfo(organizationName, senderName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a sender
     * @param organizationName the organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @return ApiResponse&lt;Sender&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the sender was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sender> settingsOrganizationsOrganizationNameSendersSenderNameDeleteWithHttpInfo(String organizationName, String senderName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersSenderNameDeleteValidateBeforeCall(organizationName, senderName, null);
        Type localVarReturnType = new TypeToken<Sender>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a sender
     * @param organizationName the organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, the sender was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNameDeleteAsync(String organizationName, String senderName, final ApiCallback<Sender> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersSenderNameDeleteValidateBeforeCall(organizationName, senderName, _callback);
        Type localVarReturnType = new TypeToken<Sender>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameSendersSenderNameGet
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNameGetCall(String organizationName, String senderName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/senders/{senderName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()))
            .replace("{" + "senderName" + "}", localVarApiClient.escapeString(senderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNameGetValidateBeforeCall(String organizationName, String senderName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersSenderNameGet(Async)");
        }

        // verify the required parameter 'senderName' is set
        if (senderName == null) {
            throw new ApiException("Missing the required parameter 'senderName' when calling settingsOrganizationsOrganizationNameSendersSenderNameGet(Async)");
        }

        return settingsOrganizationsOrganizationNameSendersSenderNameGetCall(organizationName, senderName, _callback);

    }

    /**
     * 
     * The settings of a single of sender
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @return Sender
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Sender settingsOrganizationsOrganizationNameSendersSenderNameGet(String organizationName, String senderName) throws ApiException {
        ApiResponse<Sender> localVarResp = settingsOrganizationsOrganizationNameSendersSenderNameGetWithHttpInfo(organizationName, senderName);
        return localVarResp.getData();
    }

    /**
     * 
     * The settings of a single of sender
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @return ApiResponse&lt;Sender&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sender> settingsOrganizationsOrganizationNameSendersSenderNameGetWithHttpInfo(String organizationName, String senderName) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersSenderNameGetValidateBeforeCall(organizationName, senderName, null);
        Type localVarReturnType = new TypeToken<Sender>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The settings of a single of sender
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNameGetAsync(String organizationName, String senderName, final ApiCallback<Sender> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersSenderNameGetValidateBeforeCall(organizationName, senderName, _callback);
        Type localVarReturnType = new TypeToken<Sender>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsOrganizationsOrganizationNameSendersSenderNamePut
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param sender  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNamePutCall(String organizationName, String senderName, Sender sender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sender;

        // create path and map variables
        String localVarPath = "/settings/organizations/{organizationName}/senders/{senderName}"
            .replace("{" + "organizationName" + "}", localVarApiClient.escapeString(organizationName.toString()))
            .replace("{" + "senderName" + "}", localVarApiClient.escapeString(senderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNamePutValidateBeforeCall(String organizationName, String senderName, Sender sender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationName' is set
        if (organizationName == null) {
            throw new ApiException("Missing the required parameter 'organizationName' when calling settingsOrganizationsOrganizationNameSendersSenderNamePut(Async)");
        }

        // verify the required parameter 'senderName' is set
        if (senderName == null) {
            throw new ApiException("Missing the required parameter 'senderName' when calling settingsOrganizationsOrganizationNameSendersSenderNamePut(Async)");
        }

        return settingsOrganizationsOrganizationNameSendersSenderNamePutCall(organizationName, senderName, sender, _callback);

    }

    /**
     * 
     * Update a single sender
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param sender  (optional)
     * @return List&lt;Sender&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<Sender> settingsOrganizationsOrganizationNameSendersSenderNamePut(String organizationName, String senderName, Sender sender) throws ApiException {
        ApiResponse<List<Sender>> localVarResp = settingsOrganizationsOrganizationNameSendersSenderNamePutWithHttpInfo(organizationName, senderName, sender);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a single sender
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param sender  (optional)
     * @return ApiResponse&lt;List&lt;Sender&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Sender>> settingsOrganizationsOrganizationNameSendersSenderNamePutWithHttpInfo(String organizationName, String senderName, Sender sender) throws ApiException {
        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersSenderNamePutValidateBeforeCall(organizationName, senderName, sender, null);
        Type localVarReturnType = new TypeToken<List<Sender>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a single sender
     * @param organizationName Fetch senders with this organization name (required)
     * @param senderName The name of a sender to the data hub (required)
     * @param sender  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsOrganizationsOrganizationNameSendersSenderNamePutAsync(String organizationName, String senderName, Sender sender, final ApiCallback<List<Sender>> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsOrganizationsOrganizationNameSendersSenderNamePutValidateBeforeCall(organizationName, senderName, sender, _callback);
        Type localVarReturnType = new TypeToken<List<Sender>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
