/*
 * Prime ReportStream
 * A router of public health data from multiple senders and receivers
 *
 * The version of the OpenAPI document: 0.2.0-oas3
 * Contact: reportstream@cdc.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReceiverJurisdictionalFiltersInner;
import org.openapitools.client.model.ReceiverTiming;
import org.openapitools.client.model.ReceiverTranslationsInner;
import org.openapitools.client.model.SettingMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A receiver of reports from the data hub
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:32.539681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Receiver {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JURISDICTIONAL_FILTERS = "jurisdictionalFilters";
  @SerializedName(SERIALIZED_NAME_JURISDICTIONAL_FILTERS)
  private List<ReceiverJurisdictionalFiltersInner> jurisdictionalFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private SettingMetadata meta;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION_NAME = "organizationName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_NAME)
  private String organizationName;

  public static final String SERIALIZED_NAME_TIMING = "timing";
  @SerializedName(SERIALIZED_NAME_TIMING)
  private ReceiverTiming timing;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<ReceiverTranslationsInner> translations = new ArrayList<>();

  public Receiver() {
  }

  public Receiver(
     String organizationName
  ) {
    this();
    this.organizationName = organizationName;
  }

  public Receiver description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Display ready description of the receiver
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Receiver jurisdictionalFilters(List<ReceiverJurisdictionalFiltersInner> jurisdictionalFilters) {
    this.jurisdictionalFilters = jurisdictionalFilters;
    return this;
  }

  public Receiver addJurisdictionalFiltersItem(ReceiverJurisdictionalFiltersInner jurisdictionalFiltersItem) {
    if (this.jurisdictionalFilters == null) {
      this.jurisdictionalFilters = new ArrayList<>();
    }
    this.jurisdictionalFilters.add(jurisdictionalFiltersItem);
    return this;
  }

  /**
   * What items to include in the report.
   * @return jurisdictionalFilters
   */
  @javax.annotation.Nullable
  public List<ReceiverJurisdictionalFiltersInner> getJurisdictionalFilters() {
    return jurisdictionalFilters;
  }

  public void setJurisdictionalFilters(List<ReceiverJurisdictionalFiltersInner> jurisdictionalFilters) {
    this.jurisdictionalFilters = jurisdictionalFilters;
  }


  public Receiver meta(SettingMetadata meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public SettingMetadata getMeta() {
    return meta;
  }

  public void setMeta(SettingMetadata meta) {
    this.meta = meta;
  }


  public Receiver name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name for the receiver. Should include the organization name as a prefix.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * The name of the organization that this receiver belongs to
   * @return organizationName
   */
  @javax.annotation.Nullable
  public String getOrganizationName() {
    return organizationName;
  }



  public Receiver timing(ReceiverTiming timing) {
    this.timing = timing;
    return this;
  }

  /**
   * Get timing
   * @return timing
   */
  @javax.annotation.Nonnull
  public ReceiverTiming getTiming() {
    return timing;
  }

  public void setTiming(ReceiverTiming timing) {
    this.timing = timing;
  }


  public Receiver topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * The topic of for this receiver. Must match the supported topics.
   * @return topic
   */
  @javax.annotation.Nonnull
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public Receiver translations(List<ReceiverTranslationsInner> translations) {
    this.translations = translations;
    return this;
  }

  public Receiver addTranslationsItem(ReceiverTranslationsInner translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

  /**
   * How the report is translated from the sender. A report can be sent in multiple ways.
   * @return translations
   */
  @javax.annotation.Nullable
  public List<ReceiverTranslationsInner> getTranslations() {
    return translations;
  }

  public void setTranslations(List<ReceiverTranslationsInner> translations) {
    this.translations = translations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Receiver receiver = (Receiver) o;
    return Objects.equals(this.description, receiver.description) &&
        Objects.equals(this.jurisdictionalFilters, receiver.jurisdictionalFilters) &&
        Objects.equals(this.meta, receiver.meta) &&
        Objects.equals(this.name, receiver.name) &&
        Objects.equals(this.organizationName, receiver.organizationName) &&
        Objects.equals(this.timing, receiver.timing) &&
        Objects.equals(this.topic, receiver.topic) &&
        Objects.equals(this.translations, receiver.translations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, jurisdictionalFilters, meta, name, organizationName, timing, topic, translations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Receiver {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    jurisdictionalFilters: ").append(toIndentedString(jurisdictionalFilters)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationName: ").append(toIndentedString(organizationName)).append("\n");
    sb.append("    timing: ").append(toIndentedString(timing)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("jurisdictionalFilters");
    openapiFields.add("meta");
    openapiFields.add("name");
    openapiFields.add("organizationName");
    openapiFields.add("timing");
    openapiFields.add("topic");
    openapiFields.add("translations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("timing");
    openapiRequiredFields.add("topic");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Receiver
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Receiver.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Receiver is not found in the empty JSON string", Receiver.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Receiver.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Receiver` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Receiver.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("jurisdictionalFilters") != null && !jsonObj.get("jurisdictionalFilters").isJsonNull()) {
        JsonArray jsonArrayjurisdictionalFilters = jsonObj.getAsJsonArray("jurisdictionalFilters");
        if (jsonArrayjurisdictionalFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jurisdictionalFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jurisdictionalFilters` to be an array in the JSON string but got `%s`", jsonObj.get("jurisdictionalFilters").toString()));
          }

          // validate the optional field `jurisdictionalFilters` (array)
          for (int i = 0; i < jsonArrayjurisdictionalFilters.size(); i++) {
            ReceiverJurisdictionalFiltersInner.validateJsonElement(jsonArrayjurisdictionalFilters.get(i));
          };
        }
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        SettingMetadata.validateJsonElement(jsonObj.get("meta"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organizationName") != null && !jsonObj.get("organizationName").isJsonNull()) && !jsonObj.get("organizationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationName").toString()));
      }
      // validate the required field `timing`
      ReceiverTiming.validateJsonElement(jsonObj.get("timing"));
      if (!jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            ReceiverTranslationsInner.validateJsonElement(jsonArraytranslations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Receiver.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Receiver' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Receiver> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Receiver.class));

       return (TypeAdapter<T>) new TypeAdapter<Receiver>() {
           @Override
           public void write(JsonWriter out, Receiver value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Receiver read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Receiver given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Receiver
   * @throws IOException if the JSON string is invalid with respect to Receiver
   */
  public static Receiver fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Receiver.class);
  }

  /**
   * Convert an instance of Receiver to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

